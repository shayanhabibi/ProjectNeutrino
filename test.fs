namespace Fable.Electron

open Fable.Core
open Fable.Core.JsInterop
open Browser.Types

module App =
    [<JS.Pojo>]
    type clientCertRequestParams
        /// <param name="hostname">the hostname of the site requiring a client certificate</param>
        /// <param name="tokenName">the token (or slot) name of the cryptographic device</param>
        /// <param name="isRetry">whether there have been previous failed attempts at prompting the password</param>
        (hostname: string, tokenName: string, isRetry: bool) =
        /// <summary>
        /// the hostname of the site requiring a client certificate
        /// </summary>
        [<Erase>]
        member val hostname: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// the token (or slot) name of the cryptographic device
        /// </summary>
        [<Erase>]
        member val tokenName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// whether there have been previous failed attempts at prompting the password
        /// </summary>
        [<Erase>]
        member val isRetry: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type getLoginItemSettings
        /// <param name="openAtLogin"><c>true</c> if the app is set to open at login.</param>
        /// <param name="openAsHidden">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || <c>true</c> if the app
        /// is set to open as hidden at login. This does not work on macOS 13 and up.</param>
        /// <param name="wasOpenedAtLogin">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || <c>true</c> if the app
        /// was opened at login automatically.</param>
        /// <param name="wasOpenedAsHidden">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || <c>true</c> if the app
        /// was opened as a hidden login item. This indicates that the app should not open any windows at startup. This
        /// setting is not available on MAS builds or on macOS 13 and up.</param>
        /// <param name="restoreState">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || <c>true</c> if the app
        /// was opened as a login item that should restore the state from the previous session. This indicates that the app
        /// should restore the windows that were open the last time the app was closed. This setting is not available on
        /// MAS builds or on macOS 13 and up.</param>
        /// <param name="status">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || can be one of
        /// <c>not-registered</c>, <c>enabled</c>, <c>requires-approval</c>, or <c>not-found</c>.</param>
        /// <param name="executableWillLaunchAtLogin">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || <c>true</c> if app is
        /// set to open at login and its run key is not deactivated. This differs from <c>openAtLogin</c> as it ignores the
        /// <c>args</c> option, this property will be true if the given executable would be launched at login with **any** arguments.</param>
        /// <param name="launchItems">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</param>
        (
            openAtLogin: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            openAsHidden: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            wasOpenedAtLogin: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            wasOpenedAsHidden: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            restoreState: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            status: string,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            executableWillLaunchAtLogin: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            launchItems: App.GetLoginItemSettings.LaunchItems[]
            #endif

        ) =
        /// <summary>
        /// <c>true</c> if the app is set to open at login.
        /// </summary>
        [<Erase>]
        member val openAtLogin: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// <c>true</c> if the app is set to open as hidden at login. This does not work on macOS 13 and
        /// up.
        /// </summary>
        [<Erase; System.Obsolete>]
        member val openAsHidden: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// <c>true</c> if the app was opened at login automatically.
        /// </summary>
        [<Erase>]
        member val wasOpenedAtLogin: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// <c>true</c> if the app was opened as a hidden login item. This indicates that the app should not open any
        /// windows at startup. This setting is not available on MAS builds or on macOS 13 and up.
        /// </summary>
        [<Erase; System.Obsolete>]
        member val wasOpenedAsHidden: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// <c>true</c> if the app was opened as a login item that should restore the state from the previous session. This
        /// indicates that the app should restore the windows that were open the last time the app was closed. This setting
        /// is not available on MAS builds or on macOS 13 and up.
        /// </summary>
        [<Erase; System.Obsolete>]
        member val restoreState: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// can be one of <c>not-registered</c>, <c>enabled</c>, <c>requires-approval</c>, or <c>not-found</c>.
        /// </summary>
        [<Erase>]
        member val status: string = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// <c>true</c> if app is set to open at login and its run key is not deactivated. This differs from <c>openAtLogin</c>
        /// as it ignores the <c>args</c> option, this property will be true if the given executable would be launched at login
        /// with **any** arguments.
        /// </summary>
        [<Erase>]
        member val executableWillLaunchAtLogin: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// </summary>
        [<Erase>]
        member val launchItems: App.GetLoginItemSettings.LaunchItems[] = Unchecked.defaultof<_> with get, set
        #endif


    [<JS.Pojo>]
    type options
        /// <param name="certificate">Path for the pkcs12 file.</param>
        /// <param name="password">Passphrase for the certificate.</param>
        (certificate: string, password: string) =
        /// <summary>
        /// Path for the pkcs12 file.
        /// </summary>
        [<Erase>]
        member val certificate: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Passphrase for the certificate.
        /// </summary>
        [<Erase>]
        member val password: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type getJumpListSettings
        /// <param name="minItems">The minimum number of items that will be shown in the Jump List (for a more detailed description of
        /// this value see the MSDN docs).</param>
        /// <param name="removedItems">Array of <c>JumpListItem</c> objects that correspond to items that the user has explicitly removed from custom categories in the
        /// Jump List. These items must not be re-added to the Jump List in the **next** call to <c>app.setJumpList()</c>, Windows will
        /// not display any custom category that contains any of the removed items.</param>
        (minItems: int, removedItems: JumpListItem[]) =
        /// <summary>
        /// The minimum number of items that will be shown in the Jump List (for a more detailed description of this
        /// value see the MSDN docs).
        /// </summary>
        [<Erase>]
        member val minItems: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Array of <c>JumpListItem</c> objects that correspond to items that the user has explicitly removed from custom categories in the Jump
        /// List. These items must not be re-added to the Jump List in the **next** call to <c>app.setJumpList()</c>, Windows will not
        /// display any custom category that contains any of the removed items.
        /// </summary>
        [<Erase>]
        member val removedItems: JumpListItem[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type getApplicationInfoForProtocol
        /// <param name="icon">the display icon of the app handling the protocol.</param>
        /// <param name="path">installation path of the app handling the protocol.</param>
        /// <param name="name">display name of the app handling the protocol.</param>
        (icon: NativeImage, path: string, name: string) =
        /// <summary>
        /// the display icon of the app handling the protocol.
        /// </summary>
        [<Erase>]
        member val icon: NativeImage = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// installation path of the app handling the protocol.
        /// </summary>
        [<Erase>]
        member val path: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// display name of the app handling the protocol.
        /// </summary>
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type options
        /// <param name="size"></param>
        (size: Enums.App.GetFileIcon.Options.Size) =
        [<Erase>]
        member val size: Enums.App.GetFileIcon.Options.Size = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="``type``">Process type. One of the following values:</param>
        /// <param name="reason">The reason the child process is gone. Possible values:</param>
        /// <param name="exitCode">The exit code for the process (e.g. status from waitpid if on POSIX, from GetExitCodeProcess on Windows).</param>
        /// <param name="serviceName">The non-localized name of the process.</param>
        /// <param name="name">The name of the process. Examples for utility: <c>Audio Service</c>, <c>Content Decryption Module Service</c>, <c>Network Service</c>, <c>Video Capture</c>, etc.</param>
        (
            ``type``: Enums.App.ChildProcessGone.Details.Type,
            reason: Enums.App.ChildProcessGone.Details.Reason,
            exitCode: float,
            ?serviceName: string,
            ?name: string
        ) =
        /// <summary>
        /// Process type. One of the following values:
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.App.ChildProcessGone.Details.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The reason the child process is gone. Possible values:
        /// </summary>
        [<Erase>]
        member val reason: Enums.App.ChildProcessGone.Details.Reason = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The exit code for the process (e.g. status from waitpid if on POSIX, from GetExitCodeProcess on Windows).
        /// </summary>
        [<Erase>]
        member val exitCode: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The non-localized name of the process.
        /// </summary>
        [<Erase>]
        member val serviceName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The name of the process. Examples for utility: <c>Audio Service</c>, <c>Content Decryption Module Service</c>, <c>Network Service</c>, <c>Video Capture</c>, etc.
        /// </summary>
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type authInfo
        /// <param name="isProxy"></param>
        /// <param name="scheme"></param>
        /// <param name="host"></param>
        /// <param name="port"></param>
        /// <param name="realm"></param>
        (isProxy: bool, scheme: string, host: string, port: int, realm: string) =
        [<Erase>]
        member val isProxy: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val scheme: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val host: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val port: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val realm: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type authenticationResponseDetails
        /// <param name="url"></param>
        /// <param name="pid"></param>
        (url: URL, pid: float) =
        [<Erase>]
        member val url: URL = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val pid: float = Unchecked.defaultof<_> with get, set

    module ContinueActivity =
        [<JS.Pojo>]
        type details
            /// <param name="webpageURL">A string identifying the URL of the webpage accessed by the activity on another device, if available.</param>
            (?webpageURL: string) =
            /// <summary>
            /// A string identifying the URL of the webpage accessed by the activity on another device, if available.
            /// </summary>
            [<Erase>]
            member val webpageURL: string = Unchecked.defaultof<_> with get, set

module BaseWindow =
    [<JS.Pojo>]
    type options
        /// <param name="mode">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || Mode for the progress
        /// bar. Can be <c>none</c>, <c>normal</c>, <c>indeterminate</c>, <c>error</c> or <c>paused</c>.</param>
        (
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            mode: Enums.BaseWindow.SetProgressBar.Options.Mode
            #endif

        ) =
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// Mode for the progress bar. Can be <c>none</c>, <c>normal</c>, <c>indeterminate</c>, <c>error</c> or <c>paused</c>.
        /// </summary>
        [<Erase>]
        member val mode: Enums.BaseWindow.SetProgressBar.Options.Mode = Unchecked.defaultof<_> with get, set
        #endif


    module WillResize =
        [<JS.Pojo>]
        type details
            /// <param name="edge">The edge of the window being dragged for resizing. Can be <c>bottom</c>, <c>left</c>, <c>right</c>, <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c> or <c>bottom-right</c>.</param>
            (edge: Enums.BaseWindow.WillResize.Details.Edge) =
            /// <summary>
            /// The edge of the window being dragged for resizing. Can be <c>bottom</c>, <c>left</c>, <c>right</c>, <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c> or <c>bottom-right</c>.
            /// </summary>
            [<Erase>]
            member val edge: Enums.BaseWindow.WillResize.Details.Edge = Unchecked.defaultof<_> with get, set

module BrowserWindow =
    [<JS.Pojo>]
    type options
        /// <param name="mode">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || Mode for the progress
        /// bar. Can be <c>none</c>, <c>normal</c>, <c>indeterminate</c>, <c>error</c> or <c>paused</c>.</param>
        (
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            mode: Enums.BrowserWindow.SetProgressBar.Options.Mode
            #endif

        ) =
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// Mode for the progress bar. Can be <c>none</c>, <c>normal</c>, <c>indeterminate</c>, <c>error</c> or <c>paused</c>.
        /// </summary>
        [<Erase>]
        member val mode: Enums.BrowserWindow.SetProgressBar.Options.Mode = Unchecked.defaultof<_> with get, set
        #endif


    module WillResize =
        [<JS.Pojo>]
        type details
            /// <param name="edge">The edge of the window being dragged for resizing. Can be <c>bottom</c>, <c>left</c>, <c>right</c>, <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c> or <c>bottom-right</c>.</param>
            (edge: Enums.BrowserWindow.WillResize.Details.Edge) =
            /// <summary>
            /// The edge of the window being dragged for resizing. Can be <c>bottom</c>, <c>left</c>, <c>right</c>, <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c> or <c>bottom-right</c>.
            /// </summary>
            [<Erase>]
            member val edge: Enums.BrowserWindow.WillResize.Details.Edge = Unchecked.defaultof<_> with get, set

module ContentTracing =
    [<JS.Pojo>]
    type getTraceBufferUsage
        /// <param name="value"></param>
        /// <param name="percentage"></param>
        (value: float, percentage: float) =
        [<Erase>]
        member val value: float = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val percentage: float = Unchecked.defaultof<_> with get, set

module Dialog =
    [<JS.Pojo>]
    type options
        /// <param name="certificate">The certificate to trust/import.</param>
        /// <param name="message">The message to display to the user.</param>
        (certificate: Certificate, message: string) =
        /// <summary>
        /// The certificate to trust/import.
        /// </summary>
        [<Erase>]
        member val certificate: Certificate = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The message to display to the user.
        /// </summary>
        [<Erase>]
        member val message: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type showMessageBox
        /// <param name="response">The index of the clicked button.</param>
        /// <param name="checkboxChecked">The checked state of the checkbox if <c>checkboxLabel</c> was set. Otherwise <c>false</c>.</param>
        (response: float, checkboxChecked: bool) =
        /// <summary>
        /// The index of the clicked button.
        /// </summary>
        [<Erase>]
        member val response: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The checked state of the checkbox if <c>checkboxLabel</c> was set. Otherwise <c>false</c>.
        /// </summary>
        [<Erase>]
        member val checkboxChecked: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type options
        /// <param name="message">Content of the message box.</param>
        /// <param name="``type``">Can be <c>none</c>, <c>info</c>, <c>error</c>, <c>question</c> or <c>warning</c>. On Windows, <c>question</c> displays the same icon as <c>info</c>, unless you
        /// set an icon using the <c>icon</c> option. On macOS, both <c>warning</c> and <c>error</c> display the same warning icon.</param>
        /// <param name="buttons">Array of texts for buttons. On Windows, an empty array will result in one button labeled "OK".</param>
        /// <param name="defaultId">Index of the button in the buttons array which will be selected by default when the message box opens.</param>
        /// <param name="signal">Pass an instance of AbortSignal to optionally close the message box, the message box will behave as if it
        /// was cancelled by the user. On macOS, <c>signal</c> does not work with message boxes that do not have a parent
        /// window, since those message boxes run synchronously due to platform limitations.</param>
        /// <param name="title">Title of the message box, some platforms will not show it.</param>
        /// <param name="detail">Extra information of the message.</param>
        /// <param name="checkboxLabel">If provided, the message box will include a checkbox with the given label.</param>
        /// <param name="checkboxChecked">Initial checked state of the checkbox. <c>false</c> by default.</param>
        /// <param name="icon"></param>
        /// <param name="textWidth">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Custom width of the
        /// text in the message box.</param>
        /// <param name="cancelId">The index of the button to be used to cancel the dialog, via the <c>Esc</c> key. By default this
        /// is assigned to the first button with "cancel" or "no" as the label. If no such labeled buttons exist and
        /// this option is not set, <c>0</c> will be used as the return value.</param>
        /// <param name="noLink">On Windows Electron will try to figure out which one of the <c>buttons</c> are common buttons (like "Cancel" or
        /// "Yes"), and show the others as command links in the dialog. This can make the dialog appear in the style
        /// of modern Windows apps. If you don't like this behavior, you can set <c>noLink</c> to <c>true</c>.</param>
        /// <param name="normalizeAccessKeys">Normalize the keyboard access keys across platforms. Default is <c>false</c>. Enabling this assumes <c>&amp;</c> is used in the button
        /// labels for the placement of the keyboard shortcut access key and labels will be converted so they work correctly on
        /// each platform, <c>&amp;</c> characters are removed on macOS, converted to <c>_</c> on Linux, and left untouched on Windows. For example,
        /// a button label of <c>Vie&amp;w</c> will be converted to <c>Vie_w</c> on Linux and <c>View</c> on macOS and can be selected
        /// via <c>Alt-W</c> on Windows and Linux.</param>
        (
            message: string,
            ?``type``: Enums.Dialog.ShowMessageBox.Options.Type,
            ?buttons: string[],
            ?defaultId: int,
            ?signal: AbortSignal,
            ?title: string,
            ?detail: string,
            ?checkboxLabel: string,
            ?checkboxChecked: bool,
            ?icon: U2<NativeImage, string>,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?textWidth: int,
            #endif

            ?cancelId: int,
            ?noLink: bool,
            ?normalizeAccessKeys: bool
        ) =
        /// <summary>
        /// Content of the message box.
        /// </summary>
        [<Erase>]
        member val message: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>none</c>, <c>info</c>, <c>error</c>, <c>question</c> or <c>warning</c>. On Windows, <c>question</c> displays the same icon as <c>info</c>, unless you set
        /// an icon using the <c>icon</c> option. On macOS, both <c>warning</c> and <c>error</c> display the same warning icon.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Dialog.ShowMessageBox.Options.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Array of texts for buttons. On Windows, an empty array will result in one button labeled "OK".
        /// </summary>
        [<Erase>]
        member val buttons: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Index of the button in the buttons array which will be selected by default when the message box opens.
        /// </summary>
        [<Erase>]
        member val defaultId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Pass an instance of AbortSignal to optionally close the message box, the message box will behave as if it was
        /// cancelled by the user. On macOS, <c>signal</c> does not work with message boxes that do not have a parent window,
        /// since those message boxes run synchronously due to platform limitations.
        /// </summary>
        [<Erase>]
        member val signal: AbortSignal = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Title of the message box, some platforms will not show it.
        /// </summary>
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Extra information of the message.
        /// </summary>
        [<Erase>]
        member val detail: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// If provided, the message box will include a checkbox with the given label.
        /// </summary>
        [<Erase>]
        member val checkboxLabel: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Initial checked state of the checkbox. <c>false</c> by default.
        /// </summary>
        [<Erase>]
        member val checkboxChecked: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val icon: U2<NativeImage, string> = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Custom width of the text in the message box.
        /// </summary>
        [<Erase>]
        member val textWidth: int = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// The index of the button to be used to cancel the dialog, via the <c>Esc</c> key. By default this is
        /// assigned to the first button with "cancel" or "no" as the label. If no such labeled buttons exist and this
        /// option is not set, <c>0</c> will be used as the return value.
        /// </summary>
        [<Erase>]
        member val cancelId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// On Windows Electron will try to figure out which one of the <c>buttons</c> are common buttons (like "Cancel" or "Yes"),
        /// and show the others as command links in the dialog. This can make the dialog appear in the style of
        /// modern Windows apps. If you don't like this behavior, you can set <c>noLink</c> to <c>true</c>.
        /// </summary>
        [<Erase>]
        member val noLink: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Normalize the keyboard access keys across platforms. Default is <c>false</c>. Enabling this assumes <c>&amp;</c> is used in the button labels
        /// for the placement of the keyboard shortcut access key and labels will be converted so they work correctly on each
        /// platform, <c>&amp;</c> characters are removed on macOS, converted to <c>_</c> on Linux, and left untouched on Windows. For example, a
        /// button label of <c>Vie&amp;w</c> will be converted to <c>Vie_w</c> on Linux and <c>View</c> on macOS and can be selected via
        /// <c>Alt-W</c> on Windows and Linux.
        /// </summary>
        [<Erase>]
        member val normalizeAccessKeys: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type options
        /// <param name="message">Content of the message box.</param>
        /// <param name="``type``">Can be <c>none</c>, <c>info</c>, <c>error</c>, <c>question</c> or <c>warning</c>. On Windows, <c>question</c> displays the same icon as <c>info</c>, unless you
        /// set an icon using the <c>icon</c> option. On macOS, both <c>warning</c> and <c>error</c> display the same warning icon.</param>
        /// <param name="buttons">Array of texts for buttons. On Windows, an empty array will result in one button labeled "OK".</param>
        /// <param name="defaultId">Index of the button in the buttons array which will be selected by default when the message box opens.</param>
        /// <param name="title">Title of the message box, some platforms will not show it.</param>
        /// <param name="detail">Extra information of the message.</param>
        /// <param name="icon"></param>
        /// <param name="textWidth">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Custom width of the
        /// text in the message box.</param>
        /// <param name="cancelId">The index of the button to be used to cancel the dialog, via the <c>Esc</c> key. By default this
        /// is assigned to the first button with "cancel" or "no" as the label. If no such labeled buttons exist and
        /// this option is not set, <c>0</c> will be used as the return value.</param>
        /// <param name="noLink">On Windows Electron will try to figure out which one of the <c>buttons</c> are common buttons (like "Cancel" or
        /// "Yes"), and show the others as command links in the dialog. This can make the dialog appear in the style
        /// of modern Windows apps. If you don't like this behavior, you can set <c>noLink</c> to <c>true</c>.</param>
        /// <param name="normalizeAccessKeys">Normalize the keyboard access keys across platforms. Default is <c>false</c>. Enabling this assumes <c>&amp;</c> is used in the button
        /// labels for the placement of the keyboard shortcut access key and labels will be converted so they work correctly on
        /// each platform, <c>&amp;</c> characters are removed on macOS, converted to <c>_</c> on Linux, and left untouched on Windows. For example,
        /// a button label of <c>Vie&amp;w</c> will be converted to <c>Vie_w</c> on Linux and <c>View</c> on macOS and can be selected
        /// via <c>Alt-W</c> on Windows and Linux.</param>
        (
            message: string,
            ?``type``: Enums.Dialog.ShowMessageBoxSync.Options.Type,
            ?buttons: string[],
            ?defaultId: int,
            ?title: string,
            ?detail: string,
            ?icon: U2<NativeImage, string>,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?textWidth: int,
            #endif

            ?cancelId: int,
            ?noLink: bool,
            ?normalizeAccessKeys: bool
        ) =
        /// <summary>
        /// Content of the message box.
        /// </summary>
        [<Erase>]
        member val message: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>none</c>, <c>info</c>, <c>error</c>, <c>question</c> or <c>warning</c>. On Windows, <c>question</c> displays the same icon as <c>info</c>, unless you set
        /// an icon using the <c>icon</c> option. On macOS, both <c>warning</c> and <c>error</c> display the same warning icon.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Dialog.ShowMessageBoxSync.Options.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Array of texts for buttons. On Windows, an empty array will result in one button labeled "OK".
        /// </summary>
        [<Erase>]
        member val buttons: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Index of the button in the buttons array which will be selected by default when the message box opens.
        /// </summary>
        [<Erase>]
        member val defaultId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Title of the message box, some platforms will not show it.
        /// </summary>
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Extra information of the message.
        /// </summary>
        [<Erase>]
        member val detail: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val icon: U2<NativeImage, string> = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Custom width of the text in the message box.
        /// </summary>
        [<Erase>]
        member val textWidth: int = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// The index of the button to be used to cancel the dialog, via the <c>Esc</c> key. By default this is
        /// assigned to the first button with "cancel" or "no" as the label. If no such labeled buttons exist and this
        /// option is not set, <c>0</c> will be used as the return value.
        /// </summary>
        [<Erase>]
        member val cancelId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// On Windows Electron will try to figure out which one of the <c>buttons</c> are common buttons (like "Cancel" or "Yes"),
        /// and show the others as command links in the dialog. This can make the dialog appear in the style of
        /// modern Windows apps. If you don't like this behavior, you can set <c>noLink</c> to <c>true</c>.
        /// </summary>
        [<Erase>]
        member val noLink: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Normalize the keyboard access keys across platforms. Default is <c>false</c>. Enabling this assumes <c>&amp;</c> is used in the button labels
        /// for the placement of the keyboard shortcut access key and labels will be converted so they work correctly on each
        /// platform, <c>&amp;</c> characters are removed on macOS, converted to <c>_</c> on Linux, and left untouched on Windows. For example, a
        /// button label of <c>Vie&amp;w</c> will be converted to <c>Vie_w</c> on Linux and <c>View</c> on macOS and can be selected via
        /// <c>Alt-W</c> on Windows and Linux.
        /// </summary>
        [<Erase>]
        member val normalizeAccessKeys: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type showSaveDialog
        /// <param name="canceled">whether or not the dialog was canceled.</param>
        /// <param name="filePath">If the dialog is canceled, this will be an empty string.</param>
        /// <param name="bookmark">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ✔ || Base64 encoded string which
        /// contains the security scoped bookmark data for the saved file. <c>securityScopedBookmarks</c> must be enabled for this to be present. (For
        /// return values, see table here.)</param>
        (
            canceled: bool,
            filePath: string,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAS || ELECTRON_OS_MAC
            ?bookmark: string
            #endif

        ) =
        /// <summary>
        /// whether or not the dialog was canceled.
        /// </summary>
        [<Erase>]
        member val canceled: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// If the dialog is canceled, this will be an empty string.
        /// </summary>
        [<Erase>]
        member val filePath: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAS || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ✔</para>
        /// Base64 encoded string which contains the security scoped bookmark data for the saved file. <c>securityScopedBookmarks</c> must be enabled for this
        /// to be present. (For return values, see table here.)
        /// </summary>
        [<Erase>]
        member val bookmark: string = Unchecked.defaultof<_> with get, set
        #endif


    [<JS.Pojo>]
    type showOpenDialog
        /// <param name="canceled">whether or not the dialog was canceled.</param>
        /// <param name="filePaths">An array of file paths chosen by the user. If the dialog is cancelled this will be an empty
        /// array.</param>
        /// <param name="bookmarks">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ✔ || An array matching the
        /// <c>filePaths</c> array of base64 encoded strings which contains security scoped bookmark data. <c>securityScopedBookmarks</c> must be enabled for this to be
        /// populated. (For return values, see table here.)</param>
        (
            canceled: bool,
            filePaths: string[],
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAS || ELECTRON_OS_MAC
            ?bookmarks: string[]
            #endif

        ) =
        /// <summary>
        /// whether or not the dialog was canceled.
        /// </summary>
        [<Erase>]
        member val canceled: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of file paths chosen by the user. If the dialog is cancelled this will be an empty array.
        /// </summary>
        [<Erase>]
        member val filePaths: string[] = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAS || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ✔</para>
        /// An array matching the <c>filePaths</c> array of base64 encoded strings which contains security scoped bookmark data. <c>securityScopedBookmarks</c> must be enabled
        /// for this to be populated. (For return values, see table here.)
        /// </summary>
        [<Erase>]
        member val bookmarks: string[] = Unchecked.defaultof<_> with get, set
        #endif


module Extensions =
    module loadExtension =
        [<JS.Pojo>]
        type options
            /// <param name="allowFileAccess">Whether to allow the extension to read local files over <c>file://</c> protocol and inject content scripts into <c>file://</c> pages.
            /// This is required e.g. for loading devtools extensions on <c>file://</c> URLs. Defaults to false.</param>
            (allowFileAccess: bool) =
            /// <summary>
            /// Whether to allow the extension to read local files over <c>file://</c> protocol and inject content scripts into <c>file://</c> pages. This
            /// is required e.g. for loading devtools extensions on <c>file://</c> URLs. Defaults to false.
            /// </summary>
            [<Erase>]
            member val allowFileAccess: bool = Unchecked.defaultof<_> with get, set

module InAppPurchase =
    module purchaseProduct =
        [<JS.Pojo>]
        type opts
            /// <param name="quantity">The number of items the user wants to purchase.</param>
            /// <param name="username">The string that associates the transaction with a user account on your service (applicationUsername).</param>
            (?quantity: int, ?username: string) =
            /// <summary>
            /// The number of items the user wants to purchase.
            /// </summary>
            [<Erase>]
            member val quantity: int = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// The string that associates the transaction with a user account on your service (applicationUsername).
            /// </summary>
            [<Erase>]
            member val username: string = Unchecked.defaultof<_> with get, set

module MessagePortMain =
    module Message =
        [<JS.Pojo>]
        type messageEvent
            /// <param name="data"></param>
            /// <param name="ports"></param>
            (data: obj, ports: MessagePortMain[]) =
            [<Erase>]
            member val data: obj = Unchecked.defaultof<_> with get, set

            [<Erase>]
            member val ports: MessagePortMain[] = Unchecked.defaultof<_> with get, set

module ServiceWorkerMain =
    [<JS.Pojo>]
    type startTask
        /// <param name="``end``">Method to call when the task has ended. If never called, the service won't terminate while otherwise idle.</param>
        (``end``: unit -> unit) =
        /// <summary>
        /// Method to call when the task has ended. If never called, the service won't terminate while otherwise idle.
        /// </summary>
        [<Erase>]
        member val ``end``: unit -> unit = Unchecked.defaultof<_> with get, set

module ServiceWorkers =
    [<JS.Pojo>]
    type details
        /// <param name="scope">The base URL that a service worker is registered for</param>
        (scope: string) =
        /// <summary>
        /// The base URL that a service worker is registered for
        /// </summary>
        [<Erase>]
        member val scope: string = Unchecked.defaultof<_> with get, set

    module ConsoleMessage =
        [<JS.Pojo>]
        type messageDetails
            /// <param name="message">The actual console message</param>
            /// <param name="versionId">The version ID of the service worker that sent the log message</param>
            /// <param name="source">The type of source for this message.  Can be <c>javascript</c>, <c>xml</c>, <c>network</c>, <c>console-api</c>, <c>storage</c>, <c>rendering</c>, <c>security</c>, <c>deprecation</c>, <c>worker</c>,
            /// <c>violation</c>, <c>intervention</c>, <c>recommendation</c> or <c>other</c>.</param>
            /// <param name="level">The log level, from 0 to 3. In order it matches <c>verbose</c>, <c>info</c>, <c>warning</c> and <c>error</c>.</param>
            /// <param name="sourceUrl">The URL the message came from</param>
            /// <param name="lineNumber">The line number of the source that triggered this console message</param>
            (
                message: string,
                versionId: float,
                source: Enums.ServiceWorkers.ConsoleMessage.MessageDetails.Source,
                level: float,
                sourceUrl: string,
                lineNumber: float
            ) =
            /// <summary>
            /// The actual console message
            /// </summary>
            [<Erase>]
            member val message: string = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// The version ID of the service worker that sent the log message
            /// </summary>
            [<Erase>]
            member val versionId: float = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// The type of source for this message.  Can be <c>javascript</c>, <c>xml</c>, <c>network</c>, <c>console-api</c>, <c>storage</c>, <c>rendering</c>, <c>security</c>, <c>deprecation</c>, <c>worker</c>, <c>violation</c>,
            /// <c>intervention</c>, <c>recommendation</c> or <c>other</c>.
            /// </summary>
            [<Erase>]
            member val source: Enums.ServiceWorkers.ConsoleMessage.MessageDetails.Source =
                Unchecked.defaultof<_> with get, set

            /// <summary>
            /// The log level, from 0 to 3. In order it matches <c>verbose</c>, <c>info</c>, <c>warning</c> and <c>error</c>.
            /// </summary>
            [<Erase>]
            member val level: float = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// The URL the message came from
            /// </summary>
            [<Erase>]
            member val sourceUrl: string = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// The line number of the source that triggered this console message
            /// </summary>
            [<Erase>]
            member val lineNumber: float = Unchecked.defaultof<_> with get, set

module Session =
    [<JS.Pojo>]
    type options
        /// <param name="cache">Whether to enable cache. Default is <c>true</c> unless the <c>--disable-http-cache</c> switch is used.</param>
        (cache: bool) =
        /// <summary>
        /// Whether to enable cache. Default is <c>true</c> unless the <c>--disable-http-cache</c> switch is used.
        /// </summary>
        [<Erase>]
        member val cache: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type options
        /// <param name="cache">Whether to enable cache. Default is <c>true</c> unless the <c>--disable-http-cache</c> switch is used.</param>
        (cache: bool) =
        /// <summary>
        /// Whether to enable cache. Default is <c>true</c> unless the <c>--disable-http-cache</c> switch is used.
        /// </summary>
        [<Erase>]
        member val cache: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type options
        /// <param name="allowFileAccess">Whether to allow the extension to read local files over <c>file://</c> protocol and inject content scripts into <c>file://</c> pages.
        /// This is required e.g. for loading devtools extensions on <c>file://</c> URLs. Defaults to false.</param>
        (allowFileAccess: bool) =
        /// <summary>
        /// Whether to allow the extension to read local files over <c>file://</c> protocol and inject content scripts into <c>file://</c> pages. This
        /// is required e.g. for loading devtools extensions on <c>file://</c> URLs. Defaults to false.
        /// </summary>
        [<Erase>]
        member val allowFileAccess: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="protectedClasses">The current list of protected USB classes. Possible class values include:</param>
        (protectedClasses: Enums.Session.SetUSBProtectedClassesHandler.Handler.Details.ProtectedClasses[]) =
        /// <summary>
        /// The current list of protected USB classes. Possible class values include:
        /// </summary>
        [<Erase>]
        member val protectedClasses: Enums.Session.SetUSBProtectedClassesHandler.Handler.Details.ProtectedClasses[] =
            Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="deviceType">The type of device that permission is being requested on, can be <c>hid</c>, <c>serial</c>, or <c>usb</c>.</param>
        /// <param name="origin">The origin URL of the device permission check.</param>
        /// <param name="device">the device that permission is being requested for.</param>
        (
            deviceType: Enums.Session.SetDevicePermissionHandler.Handler.Details.DeviceType,
            origin: string,
            device: U3<HIDDevice, SerialPort, USBDevice>
        ) =
        /// <summary>
        /// The type of device that permission is being requested on, can be <c>hid</c>, <c>serial</c>, or <c>usb</c>.
        /// </summary>
        [<Erase>]
        member val deviceType: Enums.Session.SetDevicePermissionHandler.Handler.Details.DeviceType =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The origin URL of the device permission check.
        /// </summary>
        [<Erase>]
        member val origin: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// the device that permission is being requested for.
        /// </summary>
        [<Erase>]
        member val device: U3<HIDDevice, SerialPort, USBDevice> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type opts
        /// <param name="useSystemPicker">true if the available native system picker should be used. Default is <c>false</c>. _macOS_ _Experimental_</param>
        (useSystemPicker: bool) =
        /// <summary>
        /// true if the available native system picker should be used. Default is <c>false</c>. _macOS_ _Experimental_
        /// </summary>
        [<Erase>]
        member val useSystemPicker: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="device"></param>
        /// <param name="origin">The origin that the device has been revoked from.</param>
        (device: USBDevice, ?origin: string) =
        [<Erase>]
        member val device: USBDevice = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The origin that the device has been revoked from.
        /// </summary>
        [<Erase>]
        member val origin: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="deviceList"></param>
        /// <param name="frame">The frame initiating this event. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
        (deviceList: USBDevice[], frame: Option<WebFrameMain>) =
        [<Erase>]
        member val deviceList: USBDevice[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The frame initiating this event. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="port"></param>
        /// <param name="frame">The frame initiating this event. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
        /// <param name="origin">The origin that the device has been revoked from.</param>
        (port: SerialPort, frame: Option<WebFrameMain>, origin: string) =
        [<Erase>]
        member val port: SerialPort = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The frame initiating this event. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The origin that the device has been revoked from.
        /// </summary>
        [<Erase>]
        member val origin: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="device"></param>
        /// <param name="origin">The origin that the device has been revoked from.</param>
        (device: HIDDevice, ?origin: string) =
        [<Erase>]
        member val device: HIDDevice = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The origin that the device has been revoked from.
        /// </summary>
        [<Erase>]
        member val origin: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="device"></param>
        /// <param name="frame">The frame initiating this event. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
        (device: HIDDevice, frame: Option<WebFrameMain>) =
        [<Erase>]
        member val device: HIDDevice = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The frame initiating this event. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="device"></param>
        /// <param name="frame">The frame initiating this event. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
        (device: HIDDevice, frame: Option<WebFrameMain>) =
        [<Erase>]
        member val device: HIDDevice = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The frame initiating this event. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="deviceList"></param>
        /// <param name="frame">The frame initiating this event. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
        (deviceList: HIDDevice[], frame: Option<WebFrameMain>) =
        [<Erase>]
        member val deviceList: HIDDevice[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The frame initiating this event. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

    module FileSystemAccessRestricted =
        [<JS.Pojo>]
        type details
            /// <param name="origin">The origin that initiated access to the blocked path.</param>
            /// <param name="isDirectory">Whether or not the path is a directory.</param>
            /// <param name="path">The blocked path attempting to be accessed.</param>
            (origin: string, isDirectory: bool, path: string) =
            /// <summary>
            /// The origin that initiated access to the blocked path.
            /// </summary>
            [<Erase>]
            member val origin: string = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// Whether or not the path is a directory.
            /// </summary>
            [<Erase>]
            member val isDirectory: bool = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// The blocked path attempting to be accessed.
            /// </summary>
            [<Erase>]
            member val path: string = Unchecked.defaultof<_> with get, set

module UtilityProcess =
    module fork =
        module options =
            [<JS.Pojo>]
            type env() =


module WebContents =
    [<JS.Pojo>]
    type getWebRTCUDPPortRange
        /// <param name="min">The minimum UDP port number that WebRTC should use.</param>
        /// <param name="max">The maximum UDP port number that WebRTC should use.</param>
        (min: int, max: int) =
        /// <summary>
        /// The minimum UDP port number that WebRTC should use.
        /// </summary>
        [<Erase>]
        member val min: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The maximum UDP port number that WebRTC should use.
        /// </summary>
        [<Erase>]
        member val max: int = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type margins
        /// <param name="top">Top margin in inches. Defaults to 1cm (~0.4 inches).</param>
        /// <param name="bottom">Bottom margin in inches. Defaults to 1cm (~0.4 inches).</param>
        /// <param name="left">Left margin in inches. Defaults to 1cm (~0.4 inches).</param>
        /// <param name="right">Right margin in inches. Defaults to 1cm (~0.4 inches).</param>
        (?top: float, ?bottom: float, ?left: float, ?right: float) =
        /// <summary>
        /// Top margin in inches. Defaults to 1cm (~0.4 inches).
        /// </summary>
        [<Erase>]
        member val top: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Bottom margin in inches. Defaults to 1cm (~0.4 inches).
        /// </summary>
        [<Erase>]
        member val bottom: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Left margin in inches. Defaults to 1cm (~0.4 inches).
        /// </summary>
        [<Erase>]
        member val left: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Right margin in inches. Defaults to 1cm (~0.4 inches).
        /// </summary>
        [<Erase>]
        member val right: float = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type options
        /// <param name="silent">Don't ask user for print settings. Default is <c>false</c>.</param>
        /// <param name="printBackground">Prints the background color and image of the web page. Default is <c>false</c>.</param>
        /// <param name="deviceName">Set the printer device name to use. Must be the system-defined name and not the 'friendly' name, e.g 'Brother_QL_820NWB'
        /// and not 'Brother QL-820NWB'.</param>
        /// <param name="color">Set whether the printed web page will be in color or grayscale. Default is <c>true</c>.</param>
        /// <param name="margins"></param>
        /// <param name="landscape">Whether the web page should be printed in landscape mode. Default is <c>false</c>.</param>
        /// <param name="scaleFactor">The scale factor of the web page.</param>
        /// <param name="pagesPerSheet">The number of pages to print per page sheet.</param>
        /// <param name="collate">Whether the web page should be collated.</param>
        /// <param name="copies">The number of copies of the web page to print.</param>
        /// <param name="pageRanges">The page range to print. On macOS, only one range is honored.</param>
        /// <param name="duplexMode">Set the duplex mode of the printed web page. Can be <c>simplex</c>, <c>shortEdge</c>, or <c>longEdge</c>.</param>
        /// <param name="dpi"></param>
        /// <param name="header">string to be printed as page header.</param>
        /// <param name="footer">string to be printed as page footer.</param>
        /// <param name="pageSize">Specify page size of the printed document. Can be <c>A0</c>, <c>A1</c>, <c>A2</c>, <c>A3</c>, <c>A4</c>, <c>A5</c>, <c>A6</c>, <c>Legal</c>, <c>Letter</c>, <c>Tabloid</c>
        /// or an Object containing <c>height</c> and <c>width</c>.</param>
        (
            ?silent: bool,
            ?printBackground: bool,
            ?deviceName: string,
            ?color: bool,
            ?margins: WebContents.Print.Options.Margins,
            ?landscape: bool,
            ?scaleFactor: float,
            ?pagesPerSheet: float,
            ?collate: bool,
            ?copies: float,
            ?pageRanges: WebContents.Print.Options.PageRanges[],
            ?duplexMode: Enums.WebContents.Print.Options.DuplexMode,
            ?dpi: Record<string, float>,
            ?header: string,
            ?footer: string,
            ?pageSize: U2<Enums.WebContents.Print.Options.PageSize, Size>
        ) =
        /// <summary>
        /// Don't ask user for print settings. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val silent: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Prints the background color and image of the web page. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val printBackground: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Set the printer device name to use. Must be the system-defined name and not the 'friendly' name, e.g 'Brother_QL_820NWB' and
        /// not 'Brother QL-820NWB'.
        /// </summary>
        [<Erase>]
        member val deviceName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Set whether the printed web page will be in color or grayscale. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val color: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val margins: WebContents.Print.Options.Margins = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the web page should be printed in landscape mode. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val landscape: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The scale factor of the web page.
        /// </summary>
        [<Erase>]
        member val scaleFactor: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The number of pages to print per page sheet.
        /// </summary>
        [<Erase>]
        member val pagesPerSheet: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the web page should be collated.
        /// </summary>
        [<Erase>]
        member val collate: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The number of copies of the web page to print.
        /// </summary>
        [<Erase>]
        member val copies: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The page range to print. On macOS, only one range is honored.
        /// </summary>
        [<Erase>]
        member val pageRanges: WebContents.Print.Options.PageRanges[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Set the duplex mode of the printed web page. Can be <c>simplex</c>, <c>shortEdge</c>, or <c>longEdge</c>.
        /// </summary>
        [<Erase>]
        member val duplexMode: Enums.WebContents.Print.Options.DuplexMode = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val dpi: Record<string, float> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// string to be printed as page header.
        /// </summary>
        [<Erase>]
        member val header: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// string to be printed as page footer.
        /// </summary>
        [<Erase>]
        member val footer: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Specify page size of the printed document. Can be <c>A0</c>, <c>A1</c>, <c>A2</c>, <c>A3</c>, <c>A4</c>, <c>A5</c>, <c>A6</c>, <c>Legal</c>, <c>Letter</c>, <c>Tabloid</c> or
        /// an Object containing <c>height</c> and <c>width</c>.
        /// </summary>
        [<Erase>]
        member val pageSize: U2<Enums.WebContents.Print.Options.PageSize, Size> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="url">The _resolved_ version of the URL passed to <c>window.open()</c>. e.g. opening a window with <c>window.open('foo')</c> will yield something like
        /// <c>https://the-origin/the/current/path/foo</c>.</param>
        /// <param name="frameName">Name of the window provided in <c>window.open()</c></param>
        /// <param name="features">Comma separated list of window features provided to <c>window.open()</c>.</param>
        /// <param name="disposition">Can be <c>default</c>, <c>foreground-tab</c>, <c>background-tab</c>, <c>new-window</c> or <c>other</c>.</param>
        /// <param name="referrer">The referrer that will be passed to the new window. May or may not result in the <c>Referer</c> header
        /// being sent, depending on the referrer policy.</param>
        /// <param name="postBody">The post data that will be sent to the new window, along with the appropriate headers that will be
        /// set. If no post data is to be sent, the value will be <c>null</c>. Only defined when the window is
        /// being created by a form that set <c>target=_blank</c>.</param>
        (
            url: string,
            frameName: string,
            features: string,
            disposition: Enums.WebContents.SetWindowOpenHandler.Handler.Details.Disposition,
            referrer: Referrer,
            ?postBody: PostBody
        ) =
        /// <summary>
        /// The _resolved_ version of the URL passed to <c>window.open()</c>. e.g. opening a window with <c>window.open('foo')</c> will yield something like <c>https://the-origin/the/current/path/foo</c>.
        /// </summary>
        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Name of the window provided in <c>window.open()</c>
        /// </summary>
        [<Erase>]
        member val frameName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Comma separated list of window features provided to <c>window.open()</c>.
        /// </summary>
        [<Erase>]
        member val features: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>default</c>, <c>foreground-tab</c>, <c>background-tab</c>, <c>new-window</c> or <c>other</c>.
        /// </summary>
        [<Erase>]
        member val disposition: Enums.WebContents.SetWindowOpenHandler.Handler.Details.Disposition =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The referrer that will be passed to the new window. May or may not result in the <c>Referer</c> header being
        /// sent, depending on the referrer policy.
        /// </summary>
        [<Erase>]
        member val referrer: Referrer = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The post data that will be sent to the new window, along with the appropriate headers that will be set.
        /// If no post data is to be sent, the value will be <c>null</c>. Only defined when the window is being
        /// created by a form that set <c>target=_blank</c>.
        /// </summary>
        [<Erase>]
        member val postBody: PostBody = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="frame">The created frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
        (frame: Option<WebFrameMain>) =
        /// <summary>
        /// The created frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type params
        /// <param name="x">x coordinate.</param>
        /// <param name="y">y coordinate.</param>
        /// <param name="frame">Frame from which the context menu was invoked. May be <c>null</c> if accessed after the frame has either navigated
        /// or been destroyed.</param>
        /// <param name="linkURL">URL of the link that encloses the node the context menu was invoked on.</param>
        /// <param name="linkText">Text associated with the link. May be an empty string if the contents of the link are an image.</param>
        /// <param name="pageURL">URL of the top level page that the context menu was invoked on.</param>
        /// <param name="frameURL">URL of the subframe that the context menu was invoked on.</param>
        /// <param name="srcURL">Source URL for the element that the context menu was invoked on. Elements with source URLs are images, audio
        /// and video.</param>
        /// <param name="mediaType">Type of the node the context menu was invoked on. Can be <c>none</c>, <c>image</c>, <c>audio</c>, <c>video</c>, <c>canvas</c>, <c>file</c> or
        /// <c>plugin</c>.</param>
        /// <param name="hasImageContents">Whether the context menu was invoked on an image which has non-empty contents.</param>
        /// <param name="isEditable">Whether the context is editable.</param>
        /// <param name="selectionText">Text of the selection that the context menu was invoked on.</param>
        /// <param name="titleText">Title text of the selection that the context menu was invoked on.</param>
        /// <param name="altText">Alt text of the selection that the context menu was invoked on.</param>
        /// <param name="suggestedFilename">Suggested filename to be used when saving file through 'Save Link As' option of context menu.</param>
        /// <param name="selectionRect">Rect representing the coordinates in the document space of the selection.</param>
        /// <param name="selectionStartOffset">Start position of the selection text.</param>
        /// <param name="referrerPolicy">The referrer policy of the frame on which the menu is invoked.</param>
        /// <param name="misspelledWord">The misspelled word under the cursor, if any.</param>
        /// <param name="dictionarySuggestions">An array of suggested words to show the user to replace the <c>misspelledWord</c>.  Only available if there is
        /// a misspelled word and spellchecker is enabled.</param>
        /// <param name="frameCharset">The character encoding of the frame on which the menu was invoked.</param>
        /// <param name="formControlType">The source that the context menu was invoked on. Possible values include <c>none</c>, <c>button-button</c>, <c>field-set</c>, <c>input-button</c>, <c>input-checkbox</c>, <c>input-color</c>, <c>input-date</c>,
        /// <c>input-datetime-local</c>, <c>input-email</c>, <c>input-file</c>, <c>input-hidden</c>, <c>input-image</c>, <c>input-month</c>, <c>input-number</c>, <c>input-password</c>, <c>input-radio</c>, <c>input-range</c>, <c>input-reset</c>, <c>input-search</c>, <c>input-submit</c>, <c>input-telephone</c>, <c>input-text</c>, <c>input-time</c>, <c>input-url</c>, <c>input-week</c>, <c>output</c>, <c>reset-button</c>,
        /// <c>select-list</c>, <c>select-list</c>, <c>select-multiple</c>, <c>select-one</c>, <c>submit-button</c>, and <c>text-area</c>,</param>
        /// <param name="spellcheckEnabled">If the context is editable, whether or not spellchecking is enabled.</param>
        /// <param name="menuSourceType">Input source that invoked the context menu. Can be <c>none</c>, <c>mouse</c>, <c>keyboard</c>, <c>touch</c>, <c>touchMenu</c>, <c>longPress</c>, <c>longTap</c>, <c>touchHandle</c>, <c>stylus</c>, <c>adjustSelection</c>,
        /// or <c>adjustSelectionReset</c>.</param>
        /// <param name="mediaFlags">The flags for the media element the context menu was invoked on.</param>
        /// <param name="editFlags">These flags indicate whether the renderer believes it is able to perform the corresponding action.</param>
        (
            x: int,
            y: int,
            frame: Option<WebFrameMain>,
            linkURL: string,
            linkText: string,
            pageURL: string,
            frameURL: string,
            srcURL: string,
            mediaType: Enums.WebContents.ContextMenu.Params.MediaType,
            hasImageContents: bool,
            isEditable: bool,
            selectionText: string,
            titleText: string,
            altText: string,
            suggestedFilename: string,
            selectionRect: Rectangle,
            selectionStartOffset: float,
            referrerPolicy: Referrer,
            misspelledWord: string,
            dictionarySuggestions: string[],
            frameCharset: string,
            formControlType: Enums.WebContents.ContextMenu.Params.FormControlType,
            spellcheckEnabled: bool,
            menuSourceType: Enums.WebContents.ContextMenu.Params.MenuSourceType,
            mediaFlags: WebContents.ContextMenu.Params.MediaFlags,
            editFlags: WebContents.ContextMenu.Params.EditFlags
        ) =
        /// <summary>
        /// x coordinate.
        /// </summary>
        [<Erase>]
        member val x: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// y coordinate.
        /// </summary>
        [<Erase>]
        member val y: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Frame from which the context menu was invoked. May be <c>null</c> if accessed after the frame has either navigated or
        /// been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// URL of the link that encloses the node the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val linkURL: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Text associated with the link. May be an empty string if the contents of the link are an image.
        /// </summary>
        [<Erase>]
        member val linkText: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// URL of the top level page that the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val pageURL: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// URL of the subframe that the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val frameURL: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Source URL for the element that the context menu was invoked on. Elements with source URLs are images, audio and
        /// video.
        /// </summary>
        [<Erase>]
        member val srcURL: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Type of the node the context menu was invoked on. Can be <c>none</c>, <c>image</c>, <c>audio</c>, <c>video</c>, <c>canvas</c>, <c>file</c> or <c>plugin</c>.
        /// </summary>
        [<Erase>]
        member val mediaType: Enums.WebContents.ContextMenu.Params.MediaType = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the context menu was invoked on an image which has non-empty contents.
        /// </summary>
        [<Erase>]
        member val hasImageContents: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the context is editable.
        /// </summary>
        [<Erase>]
        member val isEditable: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Text of the selection that the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val selectionText: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Title text of the selection that the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val titleText: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Alt text of the selection that the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val altText: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Suggested filename to be used when saving file through 'Save Link As' option of context menu.
        /// </summary>
        [<Erase>]
        member val suggestedFilename: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Rect representing the coordinates in the document space of the selection.
        /// </summary>
        [<Erase>]
        member val selectionRect: Rectangle = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Start position of the selection text.
        /// </summary>
        [<Erase>]
        member val selectionStartOffset: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The referrer policy of the frame on which the menu is invoked.
        /// </summary>
        [<Erase>]
        member val referrerPolicy: Referrer = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The misspelled word under the cursor, if any.
        /// </summary>
        [<Erase>]
        member val misspelledWord: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of suggested words to show the user to replace the <c>misspelledWord</c>.  Only available if there is a
        /// misspelled word and spellchecker is enabled.
        /// </summary>
        [<Erase>]
        member val dictionarySuggestions: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The character encoding of the frame on which the menu was invoked.
        /// </summary>
        [<Erase>]
        member val frameCharset: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The source that the context menu was invoked on. Possible values include <c>none</c>, <c>button-button</c>, <c>field-set</c>, <c>input-button</c>, <c>input-checkbox</c>, <c>input-color</c>, <c>input-date</c>, <c>input-datetime-local</c>,
        /// <c>input-email</c>, <c>input-file</c>, <c>input-hidden</c>, <c>input-image</c>, <c>input-month</c>, <c>input-number</c>, <c>input-password</c>, <c>input-radio</c>, <c>input-range</c>, <c>input-reset</c>, <c>input-search</c>, <c>input-submit</c>, <c>input-telephone</c>, <c>input-text</c>, <c>input-time</c>, <c>input-url</c>, <c>input-week</c>, <c>output</c>, <c>reset-button</c>, <c>select-list</c>,
        /// <c>select-list</c>, <c>select-multiple</c>, <c>select-one</c>, <c>submit-button</c>, and <c>text-area</c>,
        /// </summary>
        [<Erase>]
        member val formControlType: Enums.WebContents.ContextMenu.Params.FormControlType =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// If the context is editable, whether or not spellchecking is enabled.
        /// </summary>
        [<Erase>]
        member val spellcheckEnabled: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Input source that invoked the context menu. Can be <c>none</c>, <c>mouse</c>, <c>keyboard</c>, <c>touch</c>, <c>touchMenu</c>, <c>longPress</c>, <c>longTap</c>, <c>touchHandle</c>, <c>stylus</c>, <c>adjustSelection</c>, or
        /// <c>adjustSelectionReset</c>.
        /// </summary>
        [<Erase>]
        member val menuSourceType: Enums.WebContents.ContextMenu.Params.MenuSourceType =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The flags for the media element the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val mediaFlags: WebContents.ContextMenu.Params.MediaFlags = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// These flags indicate whether the renderer believes it is able to perform the corresponding action.
        /// </summary>
        [<Erase>]
        member val editFlags: WebContents.ContextMenu.Params.EditFlags = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type result
        /// <param name="requestId"></param>
        /// <param name="activeMatchOrdinal">Position of the active match.</param>
        /// <param name="matches">Number of Matches.</param>
        /// <param name="selectionArea">Coordinates of first match region.</param>
        /// <param name="finalUpdate"></param>
        (requestId: int, activeMatchOrdinal: int, matches: int, selectionArea: Rectangle, finalUpdate: bool) =
        [<Erase>]
        member val requestId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Position of the active match.
        /// </summary>
        [<Erase>]
        member val activeMatchOrdinal: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Number of Matches.
        /// </summary>
        [<Erase>]
        member val matches: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Coordinates of first match region.
        /// </summary>
        [<Erase>]
        member val selectionArea: Rectangle = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val finalUpdate: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type authInfo
        /// <param name="isProxy"></param>
        /// <param name="scheme"></param>
        /// <param name="host"></param>
        /// <param name="port"></param>
        /// <param name="realm"></param>
        (isProxy: bool, scheme: string, host: string, port: int, realm: string) =
        [<Erase>]
        member val isProxy: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val scheme: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val host: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val port: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val realm: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type authenticationResponseDetails
        /// <param name="url"></param>
        (url: URL) =
        [<Erase>]
        member val url: URL = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type input
        /// <param name="``type``">Either <c>keyUp</c> or <c>keyDown</c>.</param>
        /// <param name="key">Equivalent to KeyboardEvent.key.</param>
        /// <param name="code">Equivalent to KeyboardEvent.code.</param>
        /// <param name="isAutoRepeat">Equivalent to KeyboardEvent.repeat.</param>
        /// <param name="isComposing">Equivalent to KeyboardEvent.isComposing.</param>
        /// <param name="shift">Equivalent to KeyboardEvent.shiftKey.</param>
        /// <param name="control">Equivalent to KeyboardEvent.controlKey.</param>
        /// <param name="alt">Equivalent to KeyboardEvent.altKey.</param>
        /// <param name="meta">Equivalent to KeyboardEvent.metaKey.</param>
        /// <param name="location">Equivalent to KeyboardEvent.location.</param>
        /// <param name="modifiers">See InputEvent.modifiers.</param>
        (
            ``type``: string,
            key: string,
            code: string,
            isAutoRepeat: bool,
            isComposing: bool,
            shift: bool,
            control: bool,
            alt: bool,
            meta: bool,
            location: float,
            modifiers: string[]
        ) =
        /// <summary>
        /// Either <c>keyUp</c> or <c>keyDown</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Equivalent to KeyboardEvent.key.
        /// </summary>
        [<Erase>]
        member val key: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Equivalent to KeyboardEvent.code.
        /// </summary>
        [<Erase>]
        member val code: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Equivalent to KeyboardEvent.repeat.
        /// </summary>
        [<Erase>]
        member val isAutoRepeat: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Equivalent to KeyboardEvent.isComposing.
        /// </summary>
        [<Erase>]
        member val isComposing: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Equivalent to KeyboardEvent.shiftKey.
        /// </summary>
        [<Erase>]
        member val shift: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Equivalent to KeyboardEvent.controlKey.
        /// </summary>
        [<Erase>]
        member val control: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Equivalent to KeyboardEvent.altKey.
        /// </summary>
        [<Erase>]
        member val alt: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Equivalent to KeyboardEvent.metaKey.
        /// </summary>
        [<Erase>]
        member val meta: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Equivalent to KeyboardEvent.location.
        /// </summary>
        [<Erase>]
        member val location: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// See InputEvent.modifiers.
        /// </summary>
        [<Erase>]
        member val modifiers: string[] = Unchecked.defaultof<_> with get, set

    module DidCreateWindow =
        [<JS.Pojo>]
        type details
            /// <param name="url">URL for the created window.</param>
            /// <param name="frameName">Name given to the created window in the <c>window.open()</c> call.</param>
            /// <param name="options">The options used to create the BrowserWindow. They are merged in increasing precedence: parsed options from the <c>features</c> string
            /// from <c>window.open()</c>, security-related webPreferences inherited from the parent, and options given by <c>webContents.setWindowOpenHandler</c>. Unrecognized options are not filtered out.</param>
            /// <param name="referrer">The referrer that will be passed to the new window. May or may not result in the <c>Referer</c> header
            /// being sent, depending on the referrer policy.</param>
            /// <param name="postBody">The post data that will be sent to the new window, along with the appropriate headers that will be
            /// set. If no post data is to be sent, the value will be <c>null</c>. Only defined when the window is
            /// being created by a form that set <c>target=_blank</c>.</param>
            /// <param name="disposition">Can be <c>default</c>, <c>foreground-tab</c>, <c>background-tab</c>, <c>new-window</c> or <c>other</c>.</param>
            (
                url: string,
                frameName: string,
                options: BrowserWindowConstructorOptions,
                referrer: Referrer,
                disposition: Enums.WebContents.DidCreateWindow.Details.Disposition,
                ?postBody: PostBody
            ) =
            /// <summary>
            /// URL for the created window.
            /// </summary>
            [<Erase>]
            member val url: string = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// Name given to the created window in the <c>window.open()</c> call.
            /// </summary>
            [<Erase>]
            member val frameName: string = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// The options used to create the BrowserWindow. They are merged in increasing precedence: parsed options from the <c>features</c> string from
            /// <c>window.open()</c>, security-related webPreferences inherited from the parent, and options given by <c>webContents.setWindowOpenHandler</c>. Unrecognized options are not filtered out.
            /// </summary>
            [<Erase>]
            member val options: BrowserWindowConstructorOptions = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// The referrer that will be passed to the new window. May or may not result in the <c>Referer</c> header being
            /// sent, depending on the referrer policy.
            /// </summary>
            [<Erase>]
            member val referrer: Referrer = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// The post data that will be sent to the new window, along with the appropriate headers that will be set.
            /// If no post data is to be sent, the value will be <c>null</c>. Only defined when the window is being
            /// created by a form that set <c>target=_blank</c>.
            /// </summary>
            [<Erase>]
            member val postBody: PostBody = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// Can be <c>default</c>, <c>foreground-tab</c>, <c>background-tab</c>, <c>new-window</c> or <c>other</c>.
            /// </summary>
            [<Erase>]
            member val disposition: Enums.WebContents.DidCreateWindow.Details.Disposition =
                Unchecked.defaultof<_> with get, set

module WebRequest =
    [<JS.Pojo>]
    type details
        /// <param name="id"></param>
        /// <param name="url"></param>
        /// <param name="method"></param>
        /// <param name="webContentsId"></param>
        /// <param name="webContents"></param>
        /// <param name="frame">Requesting frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
        /// <param name="resourceType">Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>, <c>webSocket</c> or <c>other</c>.</param>
        /// <param name="referrer"></param>
        /// <param name="timestamp"></param>
        /// <param name="fromCache"></param>
        /// <param name="error">The error description.</param>
        (
            id: int,
            url: string,
            method: string,
            resourceType: Enums.WebRequest.OnErrorOccurred.Listener.Details.ResourceType,
            referrer: string,
            timestamp: double,
            fromCache: bool,
            error: string,
            ?webContentsId: int,
            ?webContents: WebContents,
            ?frame: Option<WebFrameMain>
        ) =
        [<Erase>]
        member val id: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val method: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val webContentsId: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val webContents: WebContents = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Requesting frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>, <c>webSocket</c> or <c>other</c>.
        /// </summary>
        [<Erase>]
        member val resourceType: Enums.WebRequest.OnErrorOccurred.Listener.Details.ResourceType =
            Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val referrer: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val timestamp: double = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val fromCache: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The error description.
        /// </summary>
        [<Erase>]
        member val error: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="id"></param>
        /// <param name="url"></param>
        /// <param name="method"></param>
        /// <param name="webContentsId"></param>
        /// <param name="webContents"></param>
        /// <param name="frame">Requesting frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
        /// <param name="resourceType">Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>, <c>webSocket</c> or <c>other</c>.</param>
        /// <param name="referrer"></param>
        /// <param name="timestamp"></param>
        /// <param name="responseHeaders"></param>
        /// <param name="fromCache"></param>
        /// <param name="statusCode"></param>
        /// <param name="statusLine"></param>
        /// <param name="error"></param>
        (
            id: int,
            url: string,
            method: string,
            resourceType: Enums.WebRequest.OnCompleted.Listener.Details.ResourceType,
            referrer: string,
            timestamp: double,
            fromCache: bool,
            statusCode: int,
            statusLine: string,
            error: string,
            ?webContentsId: int,
            ?webContents: WebContents,
            ?frame: Option<WebFrameMain>,
            ?responseHeaders: Record<string, string[]>
        ) =
        [<Erase>]
        member val id: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val method: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val webContentsId: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val webContents: WebContents = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Requesting frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>, <c>webSocket</c> or <c>other</c>.
        /// </summary>
        [<Erase>]
        member val resourceType: Enums.WebRequest.OnCompleted.Listener.Details.ResourceType =
            Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val referrer: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val timestamp: double = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val responseHeaders: Record<string, string[]> = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val fromCache: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val statusCode: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val statusLine: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val error: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="id"></param>
        /// <param name="url"></param>
        /// <param name="method"></param>
        /// <param name="webContentsId"></param>
        /// <param name="webContents"></param>
        /// <param name="frame">Requesting frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
        /// <param name="resourceType">Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>, <c>webSocket</c> or <c>other</c>.</param>
        /// <param name="referrer"></param>
        /// <param name="timestamp"></param>
        /// <param name="redirectURL"></param>
        /// <param name="statusCode"></param>
        /// <param name="statusLine"></param>
        /// <param name="ip">The server IP address that the request was actually sent to.</param>
        /// <param name="fromCache"></param>
        /// <param name="responseHeaders"></param>
        (
            id: int,
            url: string,
            method: string,
            resourceType: Enums.WebRequest.OnBeforeRedirect.Listener.Details.ResourceType,
            referrer: string,
            timestamp: double,
            redirectURL: string,
            statusCode: int,
            statusLine: string,
            fromCache: bool,
            ?webContentsId: int,
            ?webContents: WebContents,
            ?frame: Option<WebFrameMain>,
            ?ip: string,
            ?responseHeaders: Record<string, string[]>
        ) =
        [<Erase>]
        member val id: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val method: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val webContentsId: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val webContents: WebContents = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Requesting frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>, <c>webSocket</c> or <c>other</c>.
        /// </summary>
        [<Erase>]
        member val resourceType: Enums.WebRequest.OnBeforeRedirect.Listener.Details.ResourceType =
            Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val referrer: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val timestamp: double = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val redirectURL: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val statusCode: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val statusLine: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The server IP address that the request was actually sent to.
        /// </summary>
        [<Erase>]
        member val ip: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val fromCache: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val responseHeaders: Record<string, string[]> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type details
        /// <param name="id"></param>
        /// <param name="url"></param>
        /// <param name="method"></param>
        /// <param name="webContentsId"></param>
        /// <param name="webContents"></param>
        /// <param name="frame">Requesting frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
        /// <param name="resourceType">Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>, <c>webSocket</c> or <c>other</c>.</param>
        /// <param name="referrer"></param>
        /// <param name="timestamp"></param>
        /// <param name="responseHeaders"></param>
        /// <param name="fromCache">Indicates whether the response was fetched from disk cache.</param>
        /// <param name="statusCode"></param>
        /// <param name="statusLine"></param>
        (
            id: int,
            url: string,
            method: string,
            resourceType: Enums.WebRequest.OnResponseStarted.Listener.Details.ResourceType,
            referrer: string,
            timestamp: double,
            fromCache: bool,
            statusCode: int,
            statusLine: string,
            ?webContentsId: int,
            ?webContents: WebContents,
            ?frame: Option<WebFrameMain>,
            ?responseHeaders: Record<string, string[]>
        ) =
        [<Erase>]
        member val id: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val method: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val webContentsId: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val webContents: WebContents = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Requesting frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>, <c>webSocket</c> or <c>other</c>.
        /// </summary>
        [<Erase>]
        member val resourceType: Enums.WebRequest.OnResponseStarted.Listener.Details.ResourceType =
            Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val referrer: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val timestamp: double = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val responseHeaders: Record<string, string[]> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Indicates whether the response was fetched from disk cache.
        /// </summary>
        [<Erase>]
        member val fromCache: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val statusCode: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val statusLine: string = Unchecked.defaultof<_> with get, set

    module onSendHeaders =
        module listener =
            [<JS.Pojo>]
            type details
                /// <param name="id"></param>
                /// <param name="url"></param>
                /// <param name="method"></param>
                /// <param name="webContentsId"></param>
                /// <param name="webContents"></param>
                /// <param name="frame">Requesting frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.</param>
                /// <param name="resourceType">Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>, <c>webSocket</c> or <c>other</c>.</param>
                /// <param name="referrer"></param>
                /// <param name="timestamp"></param>
                /// <param name="requestHeaders"></param>
                (
                    id: int,
                    url: string,
                    method: string,
                    resourceType: Enums.WebRequest.OnSendHeaders.Listener.Details.ResourceType,
                    referrer: string,
                    timestamp: double,
                    requestHeaders: Record<string, string>,
                    ?webContentsId: int,
                    ?webContents: WebContents,
                    ?frame: Option<WebFrameMain>
                ) =
                [<Erase>]
                member val id: int = Unchecked.defaultof<_> with get, set

                [<Erase>]
                member val url: string = Unchecked.defaultof<_> with get, set

                [<Erase>]
                member val method: string = Unchecked.defaultof<_> with get, set

                [<Erase>]
                member val webContentsId: int = Unchecked.defaultof<_> with get, set

                [<Erase>]
                member val webContents: WebContents = Unchecked.defaultof<_> with get, set

                /// <summary>
                /// Requesting frame. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
                /// </summary>
                [<Erase>]
                member val frame: Option<WebFrameMain> = Unchecked.defaultof<_> with get, set

                /// <summary>
                /// Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>, <c>webSocket</c> or <c>other</c>.
                /// </summary>
                [<Erase>]
                member val resourceType: Enums.WebRequest.OnSendHeaders.Listener.Details.ResourceType =
                    Unchecked.defaultof<_> with get, set

                [<Erase>]
                member val referrer: string = Unchecked.defaultof<_> with get, set

                [<Erase>]
                member val timestamp: double = Unchecked.defaultof<_> with get, set

                [<Erase>]
                member val requestHeaders: Record<string, string> = Unchecked.defaultof<_> with get, set

module ClientRequest =
    [<JS.Pojo>]
    type getUploadProgress
        /// <param name="active">Whether the request is currently active. If this is false no other properties will be set</param>
        /// <param name="started">Whether the upload has started. If this is false both <c>current</c> and <c>total</c> will be set to 0.</param>
        /// <param name="current">The number of bytes that have been uploaded so far</param>
        /// <param name="total">The number of bytes that will be uploaded this request</param>
        (active: bool, started: bool, current: int, total: int) =
        /// <summary>
        /// Whether the request is currently active. If this is false no other properties will be set
        /// </summary>
        [<Erase>]
        member val active: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the upload has started. If this is false both <c>current</c> and <c>total</c> will be set to 0.
        /// </summary>
        [<Erase>]
        member val started: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The number of bytes that have been uploaded so far
        /// </summary>
        [<Erase>]
        member val current: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The number of bytes that will be uploaded this request
        /// </summary>
        [<Erase>]
        member val total: int = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type authInfo
        /// <param name="isProxy"></param>
        /// <param name="scheme"></param>
        /// <param name="host"></param>
        /// <param name="port"></param>
        /// <param name="realm"></param>
        (isProxy: bool, scheme: string, host: string, port: int, realm: string) =
        [<Erase>]
        member val isProxy: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val scheme: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val host: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val port: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val realm: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type options
        /// <param name="method">The HTTP request method. Defaults to the GET method.</param>
        /// <param name="url">The request URL. Must be provided in the absolute form with the protocol scheme specified as http or https.</param>
        /// <param name="headers">Headers to be sent with the request.</param>
        /// <param name="session">The <c>Session</c> instance with which the request is associated.</param>
        /// <param name="partition">The name of the <c>partition</c> with which the request is associated. Defaults to the empty string. The <c>session</c> option
        /// supersedes <c>partition</c>. Thus if a <c>session</c> is explicitly specified, <c>partition</c> is ignored.</param>
        /// <param name="credentials">Can be <c>include</c>, <c>omit</c> or <c>same-origin</c>. Whether to send credentials with this request. If set to <c>include</c>, credentials from
        /// the session associated with the request will be used. If set to <c>omit</c>, credentials will not be sent with the
        /// request (and the <c>'login'</c> event will not be triggered in the event of a 401). If set to <c>same-origin</c>, <c>origin</c>
        /// must also be specified. This matches the behavior of the fetch option of the same name. If this option is
        /// not specified, authentication data from the session will be sent, and cookies will not be sent (unless <c>useSessionCookies</c> is set).</param>
        /// <param name="useSessionCookies">Whether to send cookies with this request from the provided session. If <c>credentials</c> is specified, this option has no
        /// effect. Default is <c>false</c>.</param>
        /// <param name="protocol">Can be <c>http:</c> or <c>https:</c>. The protocol scheme in the form 'scheme:'. Defaults to 'http:'.</param>
        /// <param name="host">The server host provided as a concatenation of the hostname and the port number 'hostname:port'.</param>
        /// <param name="hostname">The server host name.</param>
        /// <param name="port">The server's listening port number.</param>
        /// <param name="path">The path part of the request URL.</param>
        /// <param name="redirect">Can be <c>follow</c>, <c>error</c> or <c>manual</c>. The redirect mode for this request. When mode is <c>error</c>, any redirection will
        /// be aborted. When mode is <c>manual</c> the redirection will be cancelled unless <c>request.followRedirect</c> is invoked synchronously during the <c>redirect</c> event.
        ///  Defaults to <c>follow</c>.</param>
        /// <param name="origin">The origin URL of the request.</param>
        /// <param name="referrerPolicy">can be "", <c>no-referrer</c>, <c>no-referrer-when-downgrade</c>, <c>origin</c>, <c>origin-when-cross-origin</c>, <c>unsafe-url</c>, <c>same-origin</c>, <c>strict-origin</c>, or <c>strict-origin-when-cross-origin</c>. Defaults to <c>strict-origin-when-cross-origin</c>.</param>
        /// <param name="cache">can be <c>default</c>, <c>no-store</c>, <c>reload</c>, <c>no-cache</c>, <c>force-cache</c> or <c>only-if-cached</c>.</param>
        /// <param name="priority">can be <c>throttled</c>, <c>idle</c>, <c>lowest</c>, <c>low</c>, <c>medium</c>, or <c>highest</c>. Defaults to <c>idle</c>.</param>
        /// <param name="priorityIncremental">the incremental loading flag as part of HTTP extensible priorities (RFC 9218). Default is <c>true</c>.</param>
        (
            ?method: string,
            ?url: string,
            ?headers: Record<string, U2<string, string[]>>,
            ?session: Session,
            ?partition: string,
            ?credentials: Enums.ClientRequest.Options.Credentials,
            ?useSessionCookies: bool,
            ?protocol: Enums.ClientRequest.Options.Protocol,
            ?host: string,
            ?hostname: string,
            ?port: int,
            ?path: string,
            ?redirect: Enums.ClientRequest.Options.Redirect,
            ?origin: string,
            ?referrerPolicy: Enums.ClientRequest.Options.ReferrerPolicy,
            ?cache: Enums.ClientRequest.Options.Cache,
            ?priority: Enums.ClientRequest.Options.Priority,
            ?priorityIncremental: bool
        ) =
        /// <summary>
        /// The HTTP request method. Defaults to the GET method.
        /// </summary>
        [<Erase>]
        member val method: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The request URL. Must be provided in the absolute form with the protocol scheme specified as http or https.
        /// </summary>
        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Headers to be sent with the request.
        /// </summary>
        [<Erase>]
        member val headers: Record<string, U2<string, string[]>> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The <c>Session</c> instance with which the request is associated.
        /// </summary>
        [<Erase>]
        member val session: Session = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The name of the <c>partition</c> with which the request is associated. Defaults to the empty string. The <c>session</c> option supersedes
        /// <c>partition</c>. Thus if a <c>session</c> is explicitly specified, <c>partition</c> is ignored.
        /// </summary>
        [<Erase>]
        member val partition: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>include</c>, <c>omit</c> or <c>same-origin</c>. Whether to send credentials with this request. If set to <c>include</c>, credentials from the
        /// session associated with the request will be used. If set to <c>omit</c>, credentials will not be sent with the request
        /// (and the <c>'login'</c> event will not be triggered in the event of a 401). If set to <c>same-origin</c>, <c>origin</c> must
        /// also be specified. This matches the behavior of the fetch option of the same name. If this option is not
        /// specified, authentication data from the session will be sent, and cookies will not be sent (unless <c>useSessionCookies</c> is set).
        /// </summary>
        [<Erase>]
        member val credentials: Enums.ClientRequest.Options.Credentials = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to send cookies with this request from the provided session. If <c>credentials</c> is specified, this option has no effect.
        /// Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val useSessionCookies: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>http:</c> or <c>https:</c>. The protocol scheme in the form 'scheme:'. Defaults to 'http:'.
        /// </summary>
        [<Erase>]
        member val protocol: Enums.ClientRequest.Options.Protocol = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The server host provided as a concatenation of the hostname and the port number 'hostname:port'.
        /// </summary>
        [<Erase>]
        member val host: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The server host name.
        /// </summary>
        [<Erase>]
        member val hostname: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The server's listening port number.
        /// </summary>
        [<Erase>]
        member val port: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The path part of the request URL.
        /// </summary>
        [<Erase>]
        member val path: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>follow</c>, <c>error</c> or <c>manual</c>. The redirect mode for this request. When mode is <c>error</c>, any redirection will be
        /// aborted. When mode is <c>manual</c> the redirection will be cancelled unless <c>request.followRedirect</c> is invoked synchronously during the <c>redirect</c> event.
        /// Defaults to <c>follow</c>.
        /// </summary>
        [<Erase>]
        member val redirect: Enums.ClientRequest.Options.Redirect = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The origin URL of the request.
        /// </summary>
        [<Erase>]
        member val origin: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// can be "", <c>no-referrer</c>, <c>no-referrer-when-downgrade</c>, <c>origin</c>, <c>origin-when-cross-origin</c>, <c>unsafe-url</c>, <c>same-origin</c>, <c>strict-origin</c>, or <c>strict-origin-when-cross-origin</c>. Defaults to <c>strict-origin-when-cross-origin</c>.
        /// </summary>
        [<Erase>]
        member val referrerPolicy: Enums.ClientRequest.Options.ReferrerPolicy = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// can be <c>default</c>, <c>no-store</c>, <c>reload</c>, <c>no-cache</c>, <c>force-cache</c> or <c>only-if-cached</c>.
        /// </summary>
        [<Erase>]
        member val cache: Enums.ClientRequest.Options.Cache = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// can be <c>throttled</c>, <c>idle</c>, <c>lowest</c>, <c>low</c>, <c>medium</c>, or <c>highest</c>. Defaults to <c>idle</c>.
        /// </summary>
        [<Erase>]
        member val priority: Enums.ClientRequest.Options.Priority = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// the incremental loading flag as part of HTTP extensible priorities (RFC 9218). Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val priorityIncremental: bool = Unchecked.defaultof<_> with get, set

module ParentPort =
    module Message =
        [<JS.Pojo>]
        type messageEvent
            /// <param name="data"></param>
            /// <param name="ports"></param>
            (data: obj, ports: MessagePortMain[]) =
            [<Erase>]
            member val data: obj = Unchecked.defaultof<_> with get, set

            [<Erase>]
            member val ports: MessagePortMain[] = Unchecked.defaultof<_> with get, set

module SystemPreferences =
    [<JS.Pojo>]
    type getAnimationSettings
        /// <param name="shouldRenderRichAnimation">Returns true if rich animations should be rendered. Looks at session type (e.g. remote desktop) and accessibility settings to
        /// give guidance for heavy animations.</param>
        /// <param name="scrollAnimationsEnabledBySystem">Determines on a per-platform basis whether scroll animations (e.g. produced by home/end key) should be enabled.</param>
        /// <param name="prefersReducedMotion">Determines whether the user desires reduced motion based on platform APIs.</param>
        (shouldRenderRichAnimation: bool, scrollAnimationsEnabledBySystem: bool, prefersReducedMotion: bool) =
        /// <summary>
        /// Returns true if rich animations should be rendered. Looks at session type (e.g. remote desktop) and accessibility settings to give
        /// guidance for heavy animations.
        /// </summary>
        [<Erase>]
        member val shouldRenderRichAnimation: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Determines on a per-platform basis whether scroll animations (e.g. produced by home/end key) should be enabled.
        /// </summary>
        [<Erase>]
        member val scrollAnimationsEnabledBySystem: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Determines whether the user desires reduced motion based on platform APIs.
        /// </summary>
        [<Erase>]
        member val prefersReducedMotion: bool = Unchecked.defaultof<_> with get, set

module Clipboard =
    [<JS.Pojo>]
    type data
        /// <param name="text"></param>
        /// <param name="html"></param>
        /// <param name="image"></param>
        /// <param name="rtf"></param>
        /// <param name="bookmark">The title of the URL at <c>text</c>.</param>
        (?text: string, ?html: string, ?image: NativeImage, ?rtf: string, ?bookmark: string) =
        [<Erase>]
        member val text: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val html: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val image: NativeImage = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val rtf: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The title of the URL at <c>text</c>.
        /// </summary>
        [<Erase>]
        member val bookmark: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type readBookmark
        /// <param name="title"></param>
        /// <param name="url"></param>
        (title: string, url: string) =
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

module NativeImage =
    module createFromBitmap =
        [<JS.Pojo>]
        type options
            /// <param name="width"></param>
            /// <param name="height"></param>
            /// <param name="scaleFactor">Defaults to 1.0.</param>
            (width: int, height: int, ?scaleFactor: float) =
            [<Erase>]
            member val width: int = Unchecked.defaultof<_> with get, set

            [<Erase>]
            member val height: int = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// Defaults to 1.0.
            /// </summary>
            [<Erase>]
            member val scaleFactor: float = Unchecked.defaultof<_> with get, set

module Process =
    [<JS.Pojo>]
    type getSystemMemoryInfo
        /// <param name="total">The total amount of physical memory in Kilobytes available to the system.</param>
        /// <param name="free">The total amount of memory not being used by applications or disk cache.</param>
        /// <param name="fileBacked">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || The amount of memory
        /// that currently has been paged out to storage. Includes memory for file caches, network buffers, and other system services.</param>
        /// <param name="purgeable">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || The amount of memory
        /// that is marked as "purgeable". The system can reclaim it if memory pressure increases.</param>
        /// <param name="swapTotal">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || The total amount of
        /// swap memory in Kilobytes available to the system.</param>
        /// <param name="swapFree">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || The free amount of
        /// swap memory in Kilobytes available to the system.</param>
        (
            total: int,
            free: int,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            fileBacked: int,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            purgeable: int,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
            swapTotal: int,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
            swapFree: int
            #endif

        ) =
        /// <summary>
        /// The total amount of physical memory in Kilobytes available to the system.
        /// </summary>
        [<Erase>]
        member val total: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The total amount of memory not being used by applications or disk cache.
        /// </summary>
        [<Erase>]
        member val free: int = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// The amount of memory that currently has been paged out to storage. Includes memory for file caches, network buffers, and
        /// other system services.
        /// </summary>
        [<Erase>]
        member val fileBacked: int = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// The amount of memory that is marked as "purgeable". The system can reclaim it if memory pressure increases.
        /// </summary>
        [<Erase>]
        member val purgeable: int = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// The total amount of swap memory in Kilobytes available to the system.
        /// </summary>
        [<Erase>]
        member val swapTotal: int = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// The free amount of swap memory in Kilobytes available to the system.
        /// </summary>
        [<Erase>]
        member val swapFree: int = Unchecked.defaultof<_> with get, set
        #endif


    [<JS.Pojo>]
    type getBlinkMemoryInfo
        /// <param name="allocated">Size of all allocated objects in Kilobytes.</param>
        /// <param name="total">Total allocated space in Kilobytes.</param>
        (allocated: int, total: int) =
        /// <summary>
        /// Size of all allocated objects in Kilobytes.
        /// </summary>
        [<Erase>]
        member val allocated: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Total allocated space in Kilobytes.
        /// </summary>
        [<Erase>]
        member val total: int = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type getHeapStatistics
        /// <param name="totalHeapSize"></param>
        /// <param name="totalHeapSizeExecutable"></param>
        /// <param name="totalPhysicalSize"></param>
        /// <param name="totalAvailableSize"></param>
        /// <param name="usedHeapSize"></param>
        /// <param name="heapSizeLimit"></param>
        /// <param name="mallocedMemory"></param>
        /// <param name="peakMallocedMemory"></param>
        /// <param name="doesZapGarbage"></param>
        (
            totalHeapSize: int,
            totalHeapSizeExecutable: int,
            totalPhysicalSize: int,
            totalAvailableSize: int,
            usedHeapSize: int,
            heapSizeLimit: int,
            mallocedMemory: int,
            peakMallocedMemory: int,
            doesZapGarbage: bool
        ) =
        [<Erase>]
        member val totalHeapSize: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val totalHeapSizeExecutable: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val totalPhysicalSize: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val totalAvailableSize: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val usedHeapSize: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val heapSizeLimit: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val mallocedMemory: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val peakMallocedMemory: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val doesZapGarbage: bool = Unchecked.defaultof<_> with get, set

module WebFrame =
    [<JS.Pojo>]
    type getResourceUsage
        /// <param name="images"></param>
        /// <param name="scripts"></param>
        /// <param name="cssStyleSheets"></param>
        /// <param name="xslStyleSheets"></param>
        /// <param name="fonts"></param>
        /// <param name="other"></param>
        (
            images: MemoryUsageDetails,
            scripts: MemoryUsageDetails,
            cssStyleSheets: MemoryUsageDetails,
            xslStyleSheets: MemoryUsageDetails,
            fonts: MemoryUsageDetails,
            other: MemoryUsageDetails
        ) =
        [<Erase>]
        member val images: MemoryUsageDetails = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val scripts: MemoryUsageDetails = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val cssStyleSheets: MemoryUsageDetails = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val xslStyleSheets: MemoryUsageDetails = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val fonts: MemoryUsageDetails = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val other: MemoryUsageDetails = Unchecked.defaultof<_> with get, set

    module setSpellCheckProvider =
        [<JS.Pojo>]
        type provider
            /// <param name="spellCheck"></param>
            (spellCheck: WebFrame.SetSpellCheckProvider.Provider.SpellCheck) =
            [<Erase>]
            member val spellCheck: WebFrame.SetSpellCheckProvider.Provider.SpellCheck =
                Unchecked.defaultof<_> with get, set

module WebviewTag =
    [<JS.Pojo>]
    type margins
        /// <param name="top">Top margin in inches. Defaults to 1cm (~0.4 inches).</param>
        /// <param name="bottom">Bottom margin in inches. Defaults to 1cm (~0.4 inches).</param>
        /// <param name="left">Left margin in inches. Defaults to 1cm (~0.4 inches).</param>
        /// <param name="right">Right margin in inches. Defaults to 1cm (~0.4 inches).</param>
        (?top: float, ?bottom: float, ?left: float, ?right: float) =
        /// <summary>
        /// Top margin in inches. Defaults to 1cm (~0.4 inches).
        /// </summary>
        [<Erase>]
        member val top: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Bottom margin in inches. Defaults to 1cm (~0.4 inches).
        /// </summary>
        [<Erase>]
        member val bottom: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Left margin in inches. Defaults to 1cm (~0.4 inches).
        /// </summary>
        [<Erase>]
        member val left: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Right margin in inches. Defaults to 1cm (~0.4 inches).
        /// </summary>
        [<Erase>]
        member val right: float = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type pageRanges
        /// <param name="from">Index of the first page to print (0-based).</param>
        /// <param name="``to``">Index of the last page to print (inclusive) (0-based).</param>
        (from: float, ``to``: float) =
        /// <summary>
        /// Index of the first page to print (0-based).
        /// </summary>
        [<Erase>]
        member val from: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Index of the last page to print (inclusive) (0-based).
        /// </summary>
        [<Erase>]
        member val ``to``: float = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type margins
        /// <param name="marginType">Can be <c>default</c>, <c>none</c>, <c>printableArea</c>, or <c>custom</c>. If <c>custom</c> is chosen, you will also need to specify <c>top</c>, <c>bottom</c>,
        /// <c>left</c>, and <c>right</c>.</param>
        /// <param name="top">The top margin of the printed web page, in pixels.</param>
        /// <param name="bottom">The bottom margin of the printed web page, in pixels.</param>
        /// <param name="left">The left margin of the printed web page, in pixels.</param>
        /// <param name="right">The right margin of the printed web page, in pixels.</param>
        (
            ?marginType: Enums.WebviewTag.Print.Options.Margins.MarginType,
            ?top: float,
            ?bottom: float,
            ?left: float,
            ?right: float
        ) =
        /// <summary>
        /// Can be <c>default</c>, <c>none</c>, <c>printableArea</c>, or <c>custom</c>. If <c>custom</c> is chosen, you will also need to specify <c>top</c>, <c>bottom</c>, <c>left</c>,
        /// and <c>right</c>.
        /// </summary>
        [<Erase>]
        member val marginType: Enums.WebviewTag.Print.Options.Margins.MarginType = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The top margin of the printed web page, in pixels.
        /// </summary>
        [<Erase>]
        member val top: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The bottom margin of the printed web page, in pixels.
        /// </summary>
        [<Erase>]
        member val bottom: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The left margin of the printed web page, in pixels.
        /// </summary>
        [<Erase>]
        member val left: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The right margin of the printed web page, in pixels.
        /// </summary>
        [<Erase>]
        member val right: float = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type params
        /// <param name="x">x coordinate.</param>
        /// <param name="y">y coordinate.</param>
        /// <param name="linkURL">URL of the link that encloses the node the context menu was invoked on.</param>
        /// <param name="linkText">Text associated with the link. May be an empty string if the contents of the link are an image.</param>
        /// <param name="pageURL">URL of the top level page that the context menu was invoked on.</param>
        /// <param name="frameURL">URL of the subframe that the context menu was invoked on.</param>
        /// <param name="srcURL">Source URL for the element that the context menu was invoked on. Elements with source URLs are images, audio
        /// and video.</param>
        /// <param name="mediaType">Type of the node the context menu was invoked on. Can be <c>none</c>, <c>image</c>, <c>audio</c>, <c>video</c>, <c>canvas</c>, <c>file</c> or
        /// <c>plugin</c>.</param>
        /// <param name="hasImageContents">Whether the context menu was invoked on an image which has non-empty contents.</param>
        /// <param name="isEditable">Whether the context is editable.</param>
        /// <param name="selectionText">Text of the selection that the context menu was invoked on.</param>
        /// <param name="titleText">Title text of the selection that the context menu was invoked on.</param>
        /// <param name="altText">Alt text of the selection that the context menu was invoked on.</param>
        /// <param name="suggestedFilename">Suggested filename to be used when saving file through 'Save Link As' option of context menu.</param>
        /// <param name="selectionRect">Rect representing the coordinates in the document space of the selection.</param>
        /// <param name="selectionStartOffset">Start position of the selection text.</param>
        /// <param name="referrerPolicy">The referrer policy of the frame on which the menu is invoked.</param>
        /// <param name="misspelledWord">The misspelled word under the cursor, if any.</param>
        /// <param name="dictionarySuggestions">An array of suggested words to show the user to replace the <c>misspelledWord</c>.  Only available if there is
        /// a misspelled word and spellchecker is enabled.</param>
        /// <param name="frameCharset">The character encoding of the frame on which the menu was invoked.</param>
        /// <param name="formControlType">The source that the context menu was invoked on. Possible values include <c>none</c>, <c>button-button</c>, <c>field-set</c>, <c>input-button</c>, <c>input-checkbox</c>, <c>input-color</c>, <c>input-date</c>,
        /// <c>input-datetime-local</c>, <c>input-email</c>, <c>input-file</c>, <c>input-hidden</c>, <c>input-image</c>, <c>input-month</c>, <c>input-number</c>, <c>input-password</c>, <c>input-radio</c>, <c>input-range</c>, <c>input-reset</c>, <c>input-search</c>, <c>input-submit</c>, <c>input-telephone</c>, <c>input-text</c>, <c>input-time</c>, <c>input-url</c>, <c>input-week</c>, <c>output</c>, <c>reset-button</c>,
        /// <c>select-list</c>, <c>select-list</c>, <c>select-multiple</c>, <c>select-one</c>, <c>submit-button</c>, and <c>text-area</c>,</param>
        /// <param name="spellcheckEnabled">If the context is editable, whether or not spellchecking is enabled.</param>
        /// <param name="menuSourceType">Input source that invoked the context menu. Can be <c>none</c>, <c>mouse</c>, <c>keyboard</c>, <c>touch</c>, <c>touchMenu</c>, <c>longPress</c>, <c>longTap</c>, <c>touchHandle</c>, <c>stylus</c>, <c>adjustSelection</c>,
        /// or <c>adjustSelectionReset</c>.</param>
        /// <param name="mediaFlags">The flags for the media element the context menu was invoked on.</param>
        /// <param name="editFlags">These flags indicate whether the renderer believes it is able to perform the corresponding action.</param>
        (
            x: int,
            y: int,
            linkURL: string,
            linkText: string,
            pageURL: string,
            frameURL: string,
            srcURL: string,
            mediaType: Enums.WebviewTag.ContextMenu.Params.MediaType,
            hasImageContents: bool,
            isEditable: bool,
            selectionText: string,
            titleText: string,
            altText: string,
            suggestedFilename: string,
            selectionRect: Rectangle,
            selectionStartOffset: float,
            referrerPolicy: Referrer,
            misspelledWord: string,
            dictionarySuggestions: string[],
            frameCharset: string,
            formControlType: Enums.WebviewTag.ContextMenu.Params.FormControlType,
            spellcheckEnabled: bool,
            menuSourceType: Enums.WebviewTag.ContextMenu.Params.MenuSourceType,
            mediaFlags: WebviewTag.ContextMenu.Params.MediaFlags,
            editFlags: WebviewTag.ContextMenu.Params.EditFlags
        ) =
        /// <summary>
        /// x coordinate.
        /// </summary>
        [<Erase>]
        member val x: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// y coordinate.
        /// </summary>
        [<Erase>]
        member val y: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// URL of the link that encloses the node the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val linkURL: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Text associated with the link. May be an empty string if the contents of the link are an image.
        /// </summary>
        [<Erase>]
        member val linkText: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// URL of the top level page that the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val pageURL: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// URL of the subframe that the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val frameURL: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Source URL for the element that the context menu was invoked on. Elements with source URLs are images, audio and
        /// video.
        /// </summary>
        [<Erase>]
        member val srcURL: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Type of the node the context menu was invoked on. Can be <c>none</c>, <c>image</c>, <c>audio</c>, <c>video</c>, <c>canvas</c>, <c>file</c> or <c>plugin</c>.
        /// </summary>
        [<Erase>]
        member val mediaType: Enums.WebviewTag.ContextMenu.Params.MediaType = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the context menu was invoked on an image which has non-empty contents.
        /// </summary>
        [<Erase>]
        member val hasImageContents: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the context is editable.
        /// </summary>
        [<Erase>]
        member val isEditable: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Text of the selection that the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val selectionText: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Title text of the selection that the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val titleText: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Alt text of the selection that the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val altText: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Suggested filename to be used when saving file through 'Save Link As' option of context menu.
        /// </summary>
        [<Erase>]
        member val suggestedFilename: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Rect representing the coordinates in the document space of the selection.
        /// </summary>
        [<Erase>]
        member val selectionRect: Rectangle = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Start position of the selection text.
        /// </summary>
        [<Erase>]
        member val selectionStartOffset: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The referrer policy of the frame on which the menu is invoked.
        /// </summary>
        [<Erase>]
        member val referrerPolicy: Referrer = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The misspelled word under the cursor, if any.
        /// </summary>
        [<Erase>]
        member val misspelledWord: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of suggested words to show the user to replace the <c>misspelledWord</c>.  Only available if there is a
        /// misspelled word and spellchecker is enabled.
        /// </summary>
        [<Erase>]
        member val dictionarySuggestions: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The character encoding of the frame on which the menu was invoked.
        /// </summary>
        [<Erase>]
        member val frameCharset: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The source that the context menu was invoked on. Possible values include <c>none</c>, <c>button-button</c>, <c>field-set</c>, <c>input-button</c>, <c>input-checkbox</c>, <c>input-color</c>, <c>input-date</c>, <c>input-datetime-local</c>,
        /// <c>input-email</c>, <c>input-file</c>, <c>input-hidden</c>, <c>input-image</c>, <c>input-month</c>, <c>input-number</c>, <c>input-password</c>, <c>input-radio</c>, <c>input-range</c>, <c>input-reset</c>, <c>input-search</c>, <c>input-submit</c>, <c>input-telephone</c>, <c>input-text</c>, <c>input-time</c>, <c>input-url</c>, <c>input-week</c>, <c>output</c>, <c>reset-button</c>, <c>select-list</c>,
        /// <c>select-list</c>, <c>select-multiple</c>, <c>select-one</c>, <c>submit-button</c>, and <c>text-area</c>,
        /// </summary>
        [<Erase>]
        member val formControlType: Enums.WebviewTag.ContextMenu.Params.FormControlType =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// If the context is editable, whether or not spellchecking is enabled.
        /// </summary>
        [<Erase>]
        member val spellcheckEnabled: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Input source that invoked the context menu. Can be <c>none</c>, <c>mouse</c>, <c>keyboard</c>, <c>touch</c>, <c>touchMenu</c>, <c>longPress</c>, <c>longTap</c>, <c>touchHandle</c>, <c>stylus</c>, <c>adjustSelection</c>, or
        /// <c>adjustSelectionReset</c>.
        /// </summary>
        [<Erase>]
        member val menuSourceType: Enums.WebviewTag.ContextMenu.Params.MenuSourceType =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The flags for the media element the context menu was invoked on.
        /// </summary>
        [<Erase>]
        member val mediaFlags: WebviewTag.ContextMenu.Params.MediaFlags = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// These flags indicate whether the renderer believes it is able to perform the corresponding action.
        /// </summary>
        [<Erase>]
        member val editFlags: WebviewTag.ContextMenu.Params.EditFlags = Unchecked.defaultof<_> with get, set

    module FoundInPage =
        [<JS.Pojo>]
        type result
            /// <param name="requestId"></param>
            /// <param name="activeMatchOrdinal">Position of the active match.</param>
            /// <param name="matches">Number of Matches.</param>
            /// <param name="selectionArea">Coordinates of first match region.</param>
            /// <param name="finalUpdate"></param>
            (requestId: int, activeMatchOrdinal: int, matches: int, selectionArea: Rectangle, finalUpdate: bool) =
            [<Erase>]
            member val requestId: int = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// Position of the active match.
            /// </summary>
            [<Erase>]
            member val activeMatchOrdinal: int = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// Number of Matches.
            /// </summary>
            [<Erase>]
            member val matches: int = Unchecked.defaultof<_> with get, set

            /// <summary>
            /// Coordinates of first match region.
            /// </summary>
            [<Erase>]
            member val selectionArea: Rectangle = Unchecked.defaultof<_> with get, set

            [<Erase>]
            member val finalUpdate: bool = Unchecked.defaultof<_> with get, set

module Constants =
    begin end

[<Erase; AutoOpen>]
module Types =
    [<JS.Pojo>]
    type titleBarOverlay
        /// <param name="color">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || The CSS color of
        /// the Window Controls Overlay when enabled. Default is the system color.</param>
        /// <param name="symbolColor">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || The CSS color of
        /// the symbols on the Window Controls Overlay when enabled. Default is the system color.</param>
        /// <param name="height">The height of the title bar and Window Controls Overlay in pixels. Default is system height.</param>
        (
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
            ?color: string,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
            ?symbolColor: string,
            #endif

            ?height: int
        ) =
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// The CSS color of the Window Controls Overlay when enabled. Default is the system color.
        /// </summary>
        [<Erase>]
        member val color: string = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// The CSS color of the symbols on the Window Controls Overlay when enabled. Default is the system color.
        /// </summary>
        [<Erase>]
        member val symbolColor: string = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// The height of the title bar and Window Controls Overlay in pixels. Default is system height.
        /// </summary>
        [<Erase>]
        member val height: int = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type privileges
        /// <param name="standard">Default false.</param>
        /// <param name="secure">Default false.</param>
        /// <param name="bypassCSP">Default false.</param>
        /// <param name="allowServiceWorkers">Default false.</param>
        /// <param name="supportFetchAPI">Default false.</param>
        /// <param name="corsEnabled">Default false.</param>
        /// <param name="stream">Default false.</param>
        /// <param name="codeCache">Enable V8 code cache for the scheme, only works when <c>standard</c> is also set to true. Default false.</param>
        (
            ?standard: bool,
            ?secure: bool,
            ?bypassCSP: bool,
            ?allowServiceWorkers: bool,
            ?supportFetchAPI: bool,
            ?corsEnabled: bool,
            ?stream: bool,
            ?codeCache: bool
        ) =
        /// <summary>
        /// Default false.
        /// </summary>
        [<Erase>]
        member val standard: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Default false.
        /// </summary>
        [<Erase>]
        member val secure: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Default false.
        /// </summary>
        [<Erase>]
        member val bypassCSP: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Default false.
        /// </summary>
        [<Erase>]
        member val allowServiceWorkers: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Default false.
        /// </summary>
        [<Erase>]
        member val supportFetchAPI: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Default false.
        /// </summary>
        [<Erase>]
        member val corsEnabled: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Default false.
        /// </summary>
        [<Erase>]
        member val stream: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Enable V8 code cache for the scheme, only works when <c>standard</c> is also set to true. Default false.
        /// </summary>
        [<Erase>]
        member val codeCache: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type collections
        /// <param name="usage">An integer representing the usage ID component of the HID usage associated with this collection.</param>
        /// <param name="usagePage">An integer representing the usage page component of the HID usage associated with this collection.</param>
        /// <param name="``type``">An 8-bit value representing the collection type, which describes a different relationship between the grouped items.</param>
        /// <param name="children">An array of sub-collections which takes the same format as a top-level collection.</param>
        /// <param name="inputReports">An array of inputReport items which represent individual input reports described in this collection.</param>
        /// <param name="outputReports">An array of outputReport items which represent individual output reports described in this collection.</param>
        /// <param name="featureReports">An array of featureReport items which represent individual feature reports described in this collection.</param>
        (
            usage: int,
            usagePage: int,
            ``type``: int,
            children: Types.HIDDevice.Collections.Children[],
            inputReports: Types.HIDDevice.Collections.InputReports[],
            outputReports: Types.HIDDevice.Collections.OutputReports[],
            featureReports: Types.HIDDevice.Collections.FeatureReports[]
        ) =
        /// <summary>
        /// An integer representing the usage ID component of the HID usage associated with this collection.
        /// </summary>
        [<Erase>]
        member val usage: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An integer representing the usage page component of the HID usage associated with this collection.
        /// </summary>
        [<Erase>]
        member val usagePage: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An 8-bit value representing the collection type, which describes a different relationship between the grouped items.
        /// </summary>
        [<Erase>]
        member val ``type``: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of sub-collections which takes the same format as a top-level collection.
        /// </summary>
        [<Erase>]
        member val children: Types.HIDDevice.Collections.Children[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of inputReport items which represent individual input reports described in this collection.
        /// </summary>
        [<Erase>]
        member val inputReports: Types.HIDDevice.Collections.InputReports[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of outputReport items which represent individual output reports described in this collection.
        /// </summary>
        [<Erase>]
        member val outputReports: Types.HIDDevice.Collections.OutputReports[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of featureReport items which represent individual feature reports described in this collection.
        /// </summary>
        [<Erase>]
        member val featureReports: Types.HIDDevice.Collections.FeatureReports[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type textureInfo
        /// <param name="widgetType">The widget type of the texture. Can be <c>popup</c> or <c>frame</c>.</param>
        /// <param name="pixelFormat">The pixel format of the texture. Can be <c>rgba</c> or <c>bgra</c>.</param>
        /// <param name="codedSize">The full dimensions of the video frame.</param>
        /// <param name="visibleRect">A subsection of [0, 0, codedSize.width(), codedSize.height()]. In OSR case, it is expected to have the full section area.</param>
        /// <param name="contentRect">The region of the video frame that capturer would like to populate. In OSR case, it is the same
        /// with <c>dirtyRect</c> that needs to be painted.</param>
        /// <param name="timestamp">The time in microseconds since the capture start.</param>
        /// <param name="metadata">Extra metadata. See comments in src\media\base\video_frame_metadata.h for accurate details.</param>
        /// <param name="sharedTextureHandle">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || The handle to the
        /// shared texture.</param>
        /// <param name="planes">⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌ || Each plane's info of
        /// the shared texture.</param>
        /// <param name="modifier">⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌ || The modifier is retrieved
        /// from GBM library and passed to EGL driver.</param>
        (
            widgetType: Enums.Types.OffscreenSharedTexture.TextureInfo.WidgetType,
            pixelFormat: Enums.Types.OffscreenSharedTexture.TextureInfo.PixelFormat,
            codedSize: Size,
            visibleRect: Rectangle,
            contentRect: Rectangle,
            timestamp: float,
            metadata: Types.OffscreenSharedTexture.TextureInfo.Metadata,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            sharedTextureHandle: Buffer,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN
            planes: Types.OffscreenSharedTexture.TextureInfo.Planes[],
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN
            modifier: string
            #endif

        ) =
        /// <summary>
        /// The widget type of the texture. Can be <c>popup</c> or <c>frame</c>.
        /// </summary>
        [<Erase>]
        member val widgetType: Enums.Types.OffscreenSharedTexture.TextureInfo.WidgetType =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The pixel format of the texture. Can be <c>rgba</c> or <c>bgra</c>.
        /// </summary>
        [<Erase>]
        member val pixelFormat: Enums.Types.OffscreenSharedTexture.TextureInfo.PixelFormat =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The full dimensions of the video frame.
        /// </summary>
        [<Erase>]
        member val codedSize: Size = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A subsection of [0, 0, codedSize.width(), codedSize.height()]. In OSR case, it is expected to have the full section area.
        /// </summary>
        [<Erase>]
        member val visibleRect: Rectangle = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The region of the video frame that capturer would like to populate. In OSR case, it is the same with
        /// <c>dirtyRect</c> that needs to be painted.
        /// </summary>
        [<Erase>]
        member val contentRect: Rectangle = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The time in microseconds since the capture start.
        /// </summary>
        [<Erase>]
        member val timestamp: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Extra metadata. See comments in src\media\base\video_frame_metadata.h for accurate details.
        /// </summary>
        [<Erase>]
        member val metadata: Types.OffscreenSharedTexture.TextureInfo.Metadata = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// The handle to the shared texture.
        /// </summary>
        [<Erase>]
        member val sharedTextureHandle: Buffer = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// Each plane's info of the shared texture.
        /// </summary>
        [<Erase>]
        member val planes: Types.OffscreenSharedTexture.TextureInfo.Planes[] = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// The modifier is retrieved from GBM library and passed to EGL driver.
        /// </summary>
        [<Erase>]
        member val modifier: string = Unchecked.defaultof<_> with get, set
        #endif


    [<JS.Pojo>]
    type options() =


    [<JS.Pojo>]
    type payment
        /// <param name="productIdentifier">The identifier of the purchased product.</param>
        /// <param name="quantity">The quantity purchased.</param>
        /// <param name="applicationUsername">An opaque identifier for the user’s account on your system.</param>
        /// <param name="paymentDiscount">The details of the discount offer to apply to the payment.</param>
        (productIdentifier: string, quantity: int, applicationUsername: string, ?paymentDiscount: PaymentDiscount) =
        /// <summary>
        /// The identifier of the purchased product.
        /// </summary>
        [<Erase>]
        member val productIdentifier: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The quantity purchased.
        /// </summary>
        [<Erase>]
        member val quantity: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An opaque identifier for the user’s account on your system.
        /// </summary>
        [<Erase>]
        member val applicationUsername: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The details of the discount offer to apply to the payment.
        /// </summary>
        [<Erase>]
        member val paymentDiscount: PaymentDiscount = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type offscreen
        /// <param name="useSharedTexture">Whether to use GPU shared texture for accelerated paint event. Defaults to <c>false</c>. See the offscreen rendering tutorial for
        /// more details.</param>
        (?useSharedTexture: bool) =
        /// <summary>
        /// Whether to use GPU shared texture for accelerated paint event. Defaults to <c>false</c>. See the offscreen rendering tutorial for more
        /// details.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron")>]
        member val useSharedTexture: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type defaultFontFamily
        /// <param name="standard">Defaults to <c>Times New Roman</c>.</param>
        /// <param name="serif">Defaults to <c>Times New Roman</c>.</param>
        /// <param name="sansSerif">Defaults to <c>Arial</c>.</param>
        /// <param name="monospace">Defaults to <c>Courier New</c>.</param>
        /// <param name="cursive">Defaults to <c>Script</c>.</param>
        /// <param name="fantasy">Defaults to <c>Impact</c>.</param>
        /// <param name="math">Defaults to <c>Latin Modern Math</c>.</param>
        (
            ?standard: string,
            ?serif: string,
            ?sansSerif: string,
            ?monospace: string,
            ?cursive: string,
            ?fantasy: string,
            ?math: string
        ) =
        /// <summary>
        /// Defaults to <c>Times New Roman</c>.
        /// </summary>
        [<Erase>]
        member val standard: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>Times New Roman</c>.
        /// </summary>
        [<Erase>]
        member val serif: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>Arial</c>.
        /// </summary>
        [<Erase>]
        member val sansSerif: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>Courier New</c>.
        /// </summary>
        [<Erase>]
        member val monospace: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>Script</c>.
        /// </summary>
        [<Erase>]
        member val cursive: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>Impact</c>.
        /// </summary>
        [<Erase>]
        member val fantasy: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>Latin Modern Math</c>.
        /// </summary>
        [<Erase>]
        member val math: string = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// Unfortunately, Windows does not offer a way to differentiate between a shutdown and a reboot, meaning the 'shutdown' reason is
    /// triggered in both scenarios. For more details on the <c>WM_ENDSESSION</c> message and its associated reasons, refer to the MSDN documentation.
    /// </summary>
    [<JS.Pojo>]
    type WindowSessionEndEvent
        /// <param name="reasons">List of reasons for shutdown. Can be 'shutdown', 'close-app', 'critical', or 'logoff'.</param>
        (reasons: Enums.Types.WindowSessionEndEvent.Reasons[]) =
        /// <summary>
        /// List of reasons for shutdown. Can be 'shutdown', 'close-app', 'critical', or 'logoff'.
        /// </summary>
        [<Erase>]
        member val reasons: Enums.Types.WindowSessionEndEvent.Reasons[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type WindowOpenHandlerResponse
        /// <param name="action">Can be <c>allow</c> or <c>deny</c>. Controls whether new window should be created.</param>
        /// <param name="overrideBrowserWindowOptions">Allows customization of the created window.</param>
        /// <param name="outlivesOpener">By default, child windows are closed when their opener is closed. This can be changed by specifying <c>outlivesOpener: true</c>,
        /// in which case the opened window will not be closed when its opener is closed.</param>
        /// <param name="createWindow">If specified, will be called instead of <c>new BrowserWindow</c> to create the new child window and event <c>did-create-window</c> will
        /// not be emitted. Constructed child window should use passed <c>options</c> object. This can be used for example to have the
        /// new window open as a BrowserView instead of in a separate window.</param>
        (
            action: Enums.Types.WindowOpenHandlerResponse.Action,
            ?overrideBrowserWindowOptions: BrowserWindowConstructorOptions,
            ?outlivesOpener: bool,
            ?createWindow: BrowserWindowConstructorOptions -> WebContents
        ) =
        /// <summary>
        /// Can be <c>allow</c> or <c>deny</c>. Controls whether new window should be created.
        /// </summary>
        [<Erase>]
        member val action: Enums.Types.WindowOpenHandlerResponse.Action = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Allows customization of the created window.
        /// </summary>
        [<Erase>]
        member val overrideBrowserWindowOptions: BrowserWindowConstructorOptions = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// By default, child windows are closed when their opener is closed. This can be changed by specifying <c>outlivesOpener: true</c>, in
        /// which case the opened window will not be closed when its opener is closed.
        /// </summary>
        [<Erase>]
        member val outlivesOpener: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// If specified, will be called instead of <c>new BrowserWindow</c> to create the new child window and event <c>did-create-window</c> will not
        /// be emitted. Constructed child window should use passed <c>options</c> object. This can be used for example to have the new
        /// window open as a BrowserView instead of in a separate window.
        /// </summary>
        [<Erase>]
        member val createWindow: BrowserWindowConstructorOptions -> WebContents = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type WebSource
        /// <param name="code"></param>
        /// <param name="url"></param>
        (code: string, ?url: string) =
        [<Erase>]
        member val code: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type WebRequestFilter
        /// <param name="urls">Array of URL patterns used to include requests that match these patterns. Use the pattern <c>&lt;all_urls&gt;</c> to match all
        /// URLs.</param>
        /// <param name="excludeUrls">Array of URL patterns used to exclude requests that match these patterns.</param>
        /// <param name="types">Array of types that will be used to filter out the requests that do not match the types. When
        /// not specified, all types will be matched. Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c>
        /// or <c>webSocket</c>.</param>
        (urls: string[], ?excludeUrls: string[], ?types: Enums.Types.WebRequestFilter.Types[]) =
        /// <summary>
        /// Array of URL patterns used to include requests that match these patterns. Use the pattern <c>&lt;all_urls&gt;</c> to match all URLs.
        /// </summary>
        [<Erase>]
        member val urls: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Array of URL patterns used to exclude requests that match these patterns.
        /// </summary>
        [<Erase>]
        member val excludeUrls: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Array of types that will be used to filter out the requests that do not match the types. When not
        /// specified, all types will be matched. Can be <c>mainFrame</c>, <c>subFrame</c>, <c>stylesheet</c>, <c>script</c>, <c>image</c>, <c>font</c>, <c>object</c>, <c>xhr</c>, <c>ping</c>, <c>cspReport</c>, <c>media</c> or
        /// <c>webSocket</c>.
        /// </summary>
        [<Erase>]
        member val types: Enums.Types.WebRequestFilter.Types[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type WebPreferences
        /// <param name="devTools">Whether to enable DevTools. If it is set to <c>false</c>, can not use <c>BrowserWindow.webContents.openDevTools()</c> to open DevTools. Default is
        /// <c>true</c>.</param>
        /// <param name="nodeIntegration">Whether node integration is enabled. Default is <c>false</c>.</param>
        /// <param name="nodeIntegrationInWorker">Whether node integration is enabled in web workers. Default is <c>false</c>. More about this can be found in Multithreading.</param>
        /// <param name="nodeIntegrationInSubFrames">Experimental option for enabling Node.js support in sub-frames such as iframes and child windows. All your preloads will load
        /// for every iframe, you can use <c>process.isMainFrame</c> to determine if you are in the main frame or not.</param>
        /// <param name="preload">Specifies a script that will be loaded before other scripts run in the page. This script will always have
        /// access to node APIs no matter whether node integration is turned on or off. The value should be the absolute
        /// file path to the script. When node integration is turned off, the preload script can reintroduce Node global symbols back
        /// to the global scope. See example here.</param>
        /// <param name="sandbox">If set, this will sandbox the renderer associated with the window, making it compatible with the Chromium OS-level sandbox
        /// and disabling the Node.js engine. This is not the same as the <c>nodeIntegration</c> option and the APIs available to the
        /// preload script are more limited. Read more about the option here.</param>
        /// <param name="session">Sets the session used by the page. Instead of passing the Session object directly, you can also choose to
        /// use the <c>partition</c> option instead, which accepts a partition string. When both <c>session</c> and <c>partition</c> are provided, <c>session</c> will be
        /// preferred. Default is the default session.</param>
        /// <param name="partition">Sets the session used by the page according to the session's partition string. If <c>partition</c> starts with <c>persist:</c>, the
        /// page will use a persistent session available to all pages in the app with the same <c>partition</c>. If there is
        /// no <c>persist:</c> prefix, the page will use an in-memory session. By assigning the same <c>partition</c>, multiple pages can share the
        /// same session. Default is the default session.</param>
        /// <param name="zoomFactor">The default zoom factor of the page, <c>3.0</c> represents <c>300%</c>. Default is <c>1.0</c>.</param>
        /// <param name="javascript">Enables JavaScript support. Default is <c>true</c>.</param>
        /// <param name="webSecurity">When <c>false</c>, it will disable the same-origin policy (usually using testing websites by people), and set <c>allowRunningInsecureContent</c> to <c>true</c>
        /// if this options has not been set by user. Default is <c>true</c>.</param>
        /// <param name="allowRunningInsecureContent">Allow an https page to run JavaScript, CSS or plugins from http URLs. Default is <c>false</c>.</param>
        /// <param name="images">Enables image support. Default is <c>true</c>.</param>
        /// <param name="imageAnimationPolicy">Specifies how to run image animations (E.g. GIFs).  Can be <c>animate</c>, <c>animateOnce</c> or <c>noAnimation</c>.  Default is <c>animate</c>.</param>
        /// <param name="textAreasAreResizable">Make TextArea elements resizable. Default is <c>true</c>.</param>
        /// <param name="webgl">Enables WebGL support. Default is <c>true</c>.</param>
        /// <param name="plugins">Whether plugins should be enabled. Default is <c>false</c>.</param>
        /// <param name="experimentalFeatures">Enables Chromium's experimental features. Default is <c>false</c>.</param>
        /// <param name="scrollBounce">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Enables scroll bounce (rubber
        /// banding) effect on macOS. Default is <c>false</c>.</param>
        /// <param name="enableBlinkFeatures">A list of feature strings separated by <c>,</c>, like <c>CSSVariables,KeyboardEventKey</c> to enable. The full list of supported feature strings
        /// can be found in the RuntimeEnabledFeatures.json5 file.</param>
        /// <param name="disableBlinkFeatures">A list of feature strings separated by <c>,</c>, like <c>CSSVariables,KeyboardEventKey</c> to disable. The full list of supported feature strings
        /// can be found in the RuntimeEnabledFeatures.json5 file.</param>
        /// <param name="defaultFontFamily">Sets the default font for the font-family.</param>
        /// <param name="defaultFontSize">Defaults to <c>16</c>.</param>
        /// <param name="defaultMonospaceFontSize">Defaults to <c>13</c>.</param>
        /// <param name="minimumFontSize">Defaults to <c>0</c>.</param>
        /// <param name="defaultEncoding">Defaults to <c>ISO-8859-1</c>.</param>
        /// <param name="backgroundThrottling">Whether to throttle animations and timers when the page becomes background. This also affects the Page Visibility API. When
        /// at least one webContents displayed in a single browserWindow has disabled <c>backgroundThrottling</c> then frames will be drawn and swapped for
        /// the whole window and other webContents displayed by it. Defaults to <c>true</c>.</param>
        /// <param name="offscreen">Whether to enable offscreen rendering for the browser window. Defaults to <c>false</c>. See the offscreen rendering tutorial for more
        /// details.</param>
        /// <param name="contextIsolation">Whether to run Electron APIs and the specified <c>preload</c> script in a separate JavaScript context. Defaults to <c>true</c>. The
        /// context that the <c>preload</c> script runs in will only have access to its own dedicated <c>document</c> and <c>window</c> globals, as
        /// well as its own set of JavaScript builtins (<c>Array</c>, <c>Object</c>, <c>JSON</c>, etc.), which are all invisible to the loaded content.
        /// The Electron API will only be available in the <c>preload</c> script and not the loaded page. This option should be
        /// used when loading potentially untrusted remote content to ensure the loaded content cannot tamper with the <c>preload</c> script and any
        /// Electron APIs being used.  This option uses the same technique used by Chrome Content Scripts.  You can access
        /// this context in the dev tools by selecting the 'Electron Isolated Context' entry in the combo box at the top
        /// of the Console tab.</param>
        /// <param name="webviewTag">Whether to enable the <c>&lt;webview&gt;</c> tag. Defaults to <c>false</c>. **Note:** The <c>preload</c> script configured for the <c>&lt;webview&gt;</c> will have
        /// node integration enabled when it is executed so you should ensure remote/untrusted content is not able to create a <c>&lt;webview&gt;</c>
        /// tag with a possibly malicious <c>preload</c> script. You can use the <c>will-attach-webview</c> event on webContents to strip away the <c>preload</c>
        /// script and to validate or alter the <c>&lt;webview&gt;</c>'s initial settings.</param>
        /// <param name="additionalArguments">A list of strings that will be appended to <c>process.argv</c> in the renderer process of this app.  Useful
        /// for passing small bits of data down to renderer process preload scripts.</param>
        /// <param name="safeDialogs">Whether to enable browser style consecutive dialog protection. Default is <c>false</c>.</param>
        /// <param name="safeDialogsMessage">The message to display when consecutive dialog protection is triggered. If not defined the default message would be used,
        /// note that currently the default message is in English and not localized.</param>
        /// <param name="disableDialogs">Whether to disable dialogs completely. Overrides <c>safeDialogs</c>. Default is <c>false</c>.</param>
        /// <param name="navigateOnDragDrop">Whether dragging and dropping a file or link onto the page causes a navigation. Default is <c>false</c>.</param>
        /// <param name="autoplayPolicy">Autoplay policy to apply to content in the window, can be <c>no-user-gesture-required</c>, <c>user-gesture-required</c>, <c>document-user-activation-required</c>. Defaults to <c>no-user-gesture-required</c>.</param>
        /// <param name="disableHtmlFullscreenWindowResize">Whether to prevent the window from resizing when entering HTML Fullscreen. Default is <c>false</c>.</param>
        /// <param name="accessibleTitle">An alternative title string provided only to accessibility tools such as screen readers. This string is not directly visible
        /// to users.</param>
        /// <param name="spellcheck">Whether to enable the builtin spellchecker. Default is <c>true</c>.</param>
        /// <param name="enableWebSQL">Whether to enable the WebSQL api. Default is <c>true</c>.</param>
        /// <param name="v8CacheOptions">Enforces the v8 code caching policy used by blink. Accepted values are</param>
        /// <param name="enablePreferredSizeMode">Whether to enable preferred size mode. The preferred size is the minimum size needed to contain the layout of
        /// the document—without requiring scrolling. Enabling this will cause the <c>preferred-size-changed</c> event to be emitted on the <c>WebContents</c> when the preferred
        /// size changes. Default is <c>false</c>.</param>
        /// <param name="transparent">Whether to enable background transparency for the guest page. Default is <c>true</c>. **Note:** The guest page's text and background
        /// colors are derived from the color scheme of its root element. When transparency is enabled, the text color will still
        /// change accordingly but the background will remain transparent.</param>
        /// <param name="enableDeprecatedPaste">Whether to enable the <c>paste</c> execCommand. Default is <c>false</c>.</param>
        (
            ?devTools: bool,
            ?nodeIntegration: bool,
            ?nodeIntegrationInWorker: bool,
            ?nodeIntegrationInSubFrames: bool,
            ?preload: string,
            ?sandbox: bool,
            ?session: Session,
            ?partition: string,
            ?zoomFactor: float,
            ?javascript: bool,
            ?webSecurity: bool,
            ?allowRunningInsecureContent: bool,
            ?images: bool,
            ?imageAnimationPolicy: Enums.Types.WebPreferences.ImageAnimationPolicy,
            ?textAreasAreResizable: bool,
            ?webgl: bool,
            ?plugins: bool,
            ?experimentalFeatures: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?scrollBounce: bool,
            #endif

            ?enableBlinkFeatures: string,
            ?disableBlinkFeatures: string,
            ?defaultFontFamily: Types.WebPreferences.DefaultFontFamily,
            ?defaultFontSize: int,
            ?defaultMonospaceFontSize: int,
            ?minimumFontSize: int,
            ?defaultEncoding: string,
            ?backgroundThrottling: bool,
            ?offscreen: U2<Types.WebPreferences.Offscreen, bool>,
            ?contextIsolation: bool,
            ?webviewTag: bool,
            ?additionalArguments: string[],
            ?safeDialogs: bool,
            ?safeDialogsMessage: string,
            ?disableDialogs: bool,
            ?navigateOnDragDrop: bool,
            ?autoplayPolicy: Enums.Types.WebPreferences.AutoplayPolicy,
            ?disableHtmlFullscreenWindowResize: bool,
            ?accessibleTitle: string,
            ?spellcheck: bool,
            ?enableWebSQL: bool,
            ?v8CacheOptions: Enums.Types.WebPreferences.V8CacheOptions,
            ?enablePreferredSizeMode: bool,
            ?transparent: bool,
            ?enableDeprecatedPaste: bool
        ) =
        /// <summary>
        /// Whether to enable DevTools. If it is set to <c>false</c>, can not use <c>BrowserWindow.webContents.openDevTools()</c> to open DevTools. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val devTools: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether node integration is enabled. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val nodeIntegration: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether node integration is enabled in web workers. Default is <c>false</c>. More about this can be found in Multithreading.
        /// </summary>
        [<Erase>]
        member val nodeIntegrationInWorker: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Experimental option for enabling Node.js support in sub-frames such as iframes and child windows. All your preloads will load for
        /// every iframe, you can use <c>process.isMainFrame</c> to determine if you are in the main frame or not.
        /// </summary>
        [<Erase>]
        member val nodeIntegrationInSubFrames: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Specifies a script that will be loaded before other scripts run in the page. This script will always have access
        /// to node APIs no matter whether node integration is turned on or off. The value should be the absolute file
        /// path to the script. When node integration is turned off, the preload script can reintroduce Node global symbols back to
        /// the global scope. See example here.
        /// </summary>
        [<Erase>]
        member val preload: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// If set, this will sandbox the renderer associated with the window, making it compatible with the Chromium OS-level sandbox and
        /// disabling the Node.js engine. This is not the same as the <c>nodeIntegration</c> option and the APIs available to the preload
        /// script are more limited. Read more about the option here.
        /// </summary>
        [<Erase>]
        member val sandbox: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Sets the session used by the page. Instead of passing the Session object directly, you can also choose to use
        /// the <c>partition</c> option instead, which accepts a partition string. When both <c>session</c> and <c>partition</c> are provided, <c>session</c> will be preferred.
        /// Default is the default session.
        /// </summary>
        [<Erase>]
        member val session: Session = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Sets the session used by the page according to the session's partition string. If <c>partition</c> starts with <c>persist:</c>, the page
        /// will use a persistent session available to all pages in the app with the same <c>partition</c>. If there is no
        /// <c>persist:</c> prefix, the page will use an in-memory session. By assigning the same <c>partition</c>, multiple pages can share the same
        /// session. Default is the default session.
        /// </summary>
        [<Erase>]
        member val partition: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The default zoom factor of the page, <c>3.0</c> represents <c>300%</c>. Default is <c>1.0</c>.
        /// </summary>
        [<Erase>]
        member val zoomFactor: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Enables JavaScript support. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val javascript: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// When <c>false</c>, it will disable the same-origin policy (usually using testing websites by people), and set <c>allowRunningInsecureContent</c> to <c>true</c> if
        /// this options has not been set by user. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val webSecurity: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Allow an https page to run JavaScript, CSS or plugins from http URLs. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val allowRunningInsecureContent: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Enables image support. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val images: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Specifies how to run image animations (E.g. GIFs).  Can be <c>animate</c>, <c>animateOnce</c> or <c>noAnimation</c>.  Default is <c>animate</c>.
        /// </summary>
        [<Erase>]
        member val imageAnimationPolicy: Enums.Types.WebPreferences.ImageAnimationPolicy =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Make TextArea elements resizable. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val textAreasAreResizable: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Enables WebGL support. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val webgl: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether plugins should be enabled. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val plugins: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Enables Chromium's experimental features. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val experimentalFeatures: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Enables scroll bounce (rubber banding) effect on macOS. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val scrollBounce: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A list of feature strings separated by <c>,</c>, like <c>CSSVariables,KeyboardEventKey</c> to enable. The full list of supported feature strings can
        /// be found in the RuntimeEnabledFeatures.json5 file.
        /// </summary>
        [<Erase>]
        member val enableBlinkFeatures: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A list of feature strings separated by <c>,</c>, like <c>CSSVariables,KeyboardEventKey</c> to disable. The full list of supported feature strings can
        /// be found in the RuntimeEnabledFeatures.json5 file.
        /// </summary>
        [<Erase>]
        member val disableBlinkFeatures: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Sets the default font for the font-family.
        /// </summary>
        [<Erase>]
        member val defaultFontFamily: Types.WebPreferences.DefaultFontFamily = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>16</c>.
        /// </summary>
        [<Erase>]
        member val defaultFontSize: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>13</c>.
        /// </summary>
        [<Erase>]
        member val defaultMonospaceFontSize: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>0</c>.
        /// </summary>
        [<Erase>]
        member val minimumFontSize: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>ISO-8859-1</c>.
        /// </summary>
        [<Erase>]
        member val defaultEncoding: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to throttle animations and timers when the page becomes background. This also affects the Page Visibility API. When at
        /// least one webContents displayed in a single browserWindow has disabled <c>backgroundThrottling</c> then frames will be drawn and swapped for the
        /// whole window and other webContents displayed by it. Defaults to <c>true</c>.
        /// </summary>
        [<Erase>]
        member val backgroundThrottling: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to enable offscreen rendering for the browser window. Defaults to <c>false</c>. See the offscreen rendering tutorial for more details.
        /// </summary>
        [<Erase>]
        member val offscreen: U2<Types.WebPreferences.Offscreen, bool> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to run Electron APIs and the specified <c>preload</c> script in a separate JavaScript context. Defaults to <c>true</c>. The context
        /// that the <c>preload</c> script runs in will only have access to its own dedicated <c>document</c> and <c>window</c> globals, as well
        /// as its own set of JavaScript builtins (<c>Array</c>, <c>Object</c>, <c>JSON</c>, etc.), which are all invisible to the loaded content. The
        /// Electron API will only be available in the <c>preload</c> script and not the loaded page. This option should be used
        /// when loading potentially untrusted remote content to ensure the loaded content cannot tamper with the <c>preload</c> script and any Electron
        /// APIs being used.  This option uses the same technique used by Chrome Content Scripts.  You can access this
        /// context in the dev tools by selecting the 'Electron Isolated Context' entry in the combo box at the top of
        /// the Console tab.
        /// </summary>
        [<Erase>]
        member val contextIsolation: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to enable the <c>&lt;webview&gt;</c> tag. Defaults to <c>false</c>. **Note:** The <c>preload</c> script configured for the <c>&lt;webview&gt;</c> will have node
        /// integration enabled when it is executed so you should ensure remote/untrusted content is not able to create a <c>&lt;webview&gt;</c> tag
        /// with a possibly malicious <c>preload</c> script. You can use the <c>will-attach-webview</c> event on webContents to strip away the <c>preload</c> script
        /// and to validate or alter the <c>&lt;webview&gt;</c>'s initial settings.
        /// </summary>
        [<Erase>]
        member val webviewTag: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A list of strings that will be appended to <c>process.argv</c> in the renderer process of this app.  Useful for
        /// passing small bits of data down to renderer process preload scripts.
        /// </summary>
        [<Erase>]
        member val additionalArguments: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to enable browser style consecutive dialog protection. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val safeDialogs: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The message to display when consecutive dialog protection is triggered. If not defined the default message would be used, note
        /// that currently the default message is in English and not localized.
        /// </summary>
        [<Erase>]
        member val safeDialogsMessage: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to disable dialogs completely. Overrides <c>safeDialogs</c>. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val disableDialogs: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether dragging and dropping a file or link onto the page causes a navigation. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val navigateOnDragDrop: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Autoplay policy to apply to content in the window, can be <c>no-user-gesture-required</c>, <c>user-gesture-required</c>, <c>document-user-activation-required</c>. Defaults to <c>no-user-gesture-required</c>.
        /// </summary>
        [<Erase>]
        member val autoplayPolicy: Enums.Types.WebPreferences.AutoplayPolicy = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to prevent the window from resizing when entering HTML Fullscreen. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val disableHtmlFullscreenWindowResize: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An alternative title string provided only to accessibility tools such as screen readers. This string is not directly visible to
        /// users.
        /// </summary>
        [<Erase>]
        member val accessibleTitle: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to enable the builtin spellchecker. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val spellcheck: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to enable the WebSQL api. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val enableWebSQL: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Enforces the v8 code caching policy used by blink. Accepted values are
        /// </summary>
        [<Erase>]
        member val v8CacheOptions: Enums.Types.WebPreferences.V8CacheOptions = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to enable preferred size mode. The preferred size is the minimum size needed to contain the layout of the
        /// document—without requiring scrolling. Enabling this will cause the <c>preferred-size-changed</c> event to be emitted on the <c>WebContents</c> when the preferred size
        /// changes. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val enablePreferredSizeMode: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to enable background transparency for the guest page. Default is <c>true</c>. **Note:** The guest page's text and background colors
        /// are derived from the color scheme of its root element. When transparency is enabled, the text color will still change
        /// accordingly but the background will remain transparent.
        /// </summary>
        [<Erase>]
        member val transparent: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether to enable the <c>paste</c> execCommand. Default is <c>false</c>.
        /// </summary>
        [<Erase; System.Obsolete>]
        member val enableDeprecatedPaste: bool = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// This type is a helper alias, no object will ever exist of this type.
    /// </summary>
    [<JS.Pojo>]
    type UserDefaultTypes
        /// <param name="string"></param>
        /// <param name="boolean"></param>
        /// <param name="integer"></param>
        /// <param name="float"></param>
        /// <param name="double"></param>
        /// <param name="url"></param>
        /// <param name="array"></param>
        /// <param name="dictionary"></param>
        (
            string: string,
            boolean: bool,
            integer: float,
            float: float,
            double: float,
            url: string,
            array: obj[],
            dictionary: Record<string, obj>
        ) =
        [<Erase>]
        member val string: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val boolean: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val integer: float = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val float: float = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val double: float = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val array: obj[] = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val dictionary: Record<string, obj> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type USBDevice
        /// <param name="deviceId">Unique identifier for the device.</param>
        /// <param name="vendorId">The USB vendor ID.</param>
        /// <param name="productId">The USB product ID.</param>
        /// <param name="productName">Name of the device.</param>
        /// <param name="serialNumber">The USB device serial number.</param>
        /// <param name="manufacturerName">The manufacturer name of the device.</param>
        /// <param name="usbVersionMajor">The USB protocol major version supported by the device</param>
        /// <param name="usbVersionMinor">The USB protocol minor version supported by the device</param>
        /// <param name="usbVersionSubminor">The USB protocol subminor version supported by the device</param>
        /// <param name="deviceClass">The device class for the communication interface supported by the device</param>
        /// <param name="deviceSubclass">The device subclass for the communication interface supported by the device</param>
        /// <param name="deviceProtocol">The device protocol for the communication interface supported by the device</param>
        /// <param name="deviceVersionMajor">The major version number of the device as defined by the device manufacturer.</param>
        /// <param name="deviceVersionMinor">The minor version number of the device as defined by the device manufacturer.</param>
        /// <param name="deviceVersionSubminor">The subminor version number of the device as defined by the device manufacturer.</param>
        (
            deviceId: string,
            vendorId: int,
            productId: int,
            usbVersionMajor: int,
            usbVersionMinor: int,
            usbVersionSubminor: int,
            deviceClass: int,
            deviceSubclass: int,
            deviceProtocol: int,
            deviceVersionMajor: int,
            deviceVersionMinor: int,
            deviceVersionSubminor: int,
            ?productName: string,
            ?serialNumber: string,
            ?manufacturerName: string
        ) =
        /// <summary>
        /// Unique identifier for the device.
        /// </summary>
        [<Erase>]
        member val deviceId: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB vendor ID.
        /// </summary>
        [<Erase>]
        member val vendorId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB product ID.
        /// </summary>
        [<Erase>]
        member val productId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Name of the device.
        /// </summary>
        [<Erase>]
        member val productName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB device serial number.
        /// </summary>
        [<Erase>]
        member val serialNumber: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The manufacturer name of the device.
        /// </summary>
        [<Erase>]
        member val manufacturerName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB protocol major version supported by the device
        /// </summary>
        [<Erase>]
        member val usbVersionMajor: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB protocol minor version supported by the device
        /// </summary>
        [<Erase>]
        member val usbVersionMinor: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB protocol subminor version supported by the device
        /// </summary>
        [<Erase>]
        member val usbVersionSubminor: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The device class for the communication interface supported by the device
        /// </summary>
        [<Erase>]
        member val deviceClass: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The device subclass for the communication interface supported by the device
        /// </summary>
        [<Erase>]
        member val deviceSubclass: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The device protocol for the communication interface supported by the device
        /// </summary>
        [<Erase>]
        member val deviceProtocol: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The major version number of the device as defined by the device manufacturer.
        /// </summary>
        [<Erase>]
        member val deviceVersionMajor: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The minor version number of the device as defined by the device manufacturer.
        /// </summary>
        [<Erase>]
        member val deviceVersionMinor: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The subminor version number of the device as defined by the device manufacturer.
        /// </summary>
        [<Erase>]
        member val deviceVersionSubminor: int = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type UploadRawData
        /// <param name="``type``"><c>rawData</c>.</param>
        /// <param name="bytes">Data to be uploaded.</param>
        (``type``: string, bytes: Buffer) =
        /// <summary>
        /// <c>rawData</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Data to be uploaded.
        /// </summary>
        [<Erase>]
        member val bytes: Buffer = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type UploadFile
        /// <param name="``type``"><c>file</c>.</param>
        /// <param name="filePath">Path of file to be uploaded.</param>
        /// <param name="offset">Defaults to <c>0</c>.</param>
        /// <param name="length">Number of bytes to read from <c>offset</c>. Defaults to <c>0</c>.</param>
        /// <param name="modificationTime">Last Modification time in number of seconds since the UNIX epoch. Defaults to <c>0</c>.</param>
        (``type``: string, filePath: string, ?offset: int, ?length: int, ?modificationTime: double) =
        /// <summary>
        /// <c>file</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Path of file to be uploaded.
        /// </summary>
        [<Erase>]
        member val filePath: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Defaults to <c>0</c>.
        /// </summary>
        [<Erase>]
        member val offset: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Number of bytes to read from <c>offset</c>. Defaults to <c>0</c>.
        /// </summary>
        [<Erase>]
        member val length: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Last Modification time in number of seconds since the UNIX epoch. Defaults to <c>0</c>.
        /// </summary>
        [<Erase>]
        member val modificationTime: double = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type UploadData
        /// <param name="bytes">Content being sent.</param>
        /// <param name="file">Path of file being uploaded.</param>
        /// <param name="blobUUID">UUID of blob data. Use ses.getBlobData method to retrieve the data.</param>
        (bytes: Buffer, ?file: string, ?blobUUID: string) =
        /// <summary>
        /// Content being sent.
        /// </summary>
        [<Erase>]
        member val bytes: Buffer = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Path of file being uploaded.
        /// </summary>
        [<Erase>]
        member val file: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// UUID of blob data. Use ses.getBlobData method to retrieve the data.
        /// </summary>
        [<Erase>]
        member val blobUUID: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type Transaction
        /// <param name="transactionIdentifier">A string that uniquely identifies a successful payment transaction.</param>
        /// <param name="transactionDate">The date the transaction was added to the App Store’s payment queue.</param>
        /// <param name="originalTransactionIdentifier">The identifier of the restored transaction by the App Store.</param>
        /// <param name="transactionState">The transaction state, can be <c>purchasing</c>, <c>purchased</c>, <c>failed</c>, <c>restored</c> or <c>deferred</c>.</param>
        /// <param name="errorCode">The error code if an error occurred while processing the transaction.</param>
        /// <param name="errorMessage">The error message if an error occurred while processing the transaction.</param>
        /// <param name="payment"></param>
        (
            transactionIdentifier: string,
            transactionDate: string,
            originalTransactionIdentifier: string,
            transactionState: Enums.Types.Transaction.TransactionState,
            errorCode: int,
            errorMessage: string,
            payment: Types.Transaction.Payment
        ) =
        /// <summary>
        /// A string that uniquely identifies a successful payment transaction.
        /// </summary>
        [<Erase>]
        member val transactionIdentifier: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The date the transaction was added to the App Store’s payment queue.
        /// </summary>
        [<Erase>]
        member val transactionDate: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The identifier of the restored transaction by the App Store.
        /// </summary>
        [<Erase>]
        member val originalTransactionIdentifier: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The transaction state, can be <c>purchasing</c>, <c>purchased</c>, <c>failed</c>, <c>restored</c> or <c>deferred</c>.
        /// </summary>
        [<Erase>]
        member val transactionState: Enums.Types.Transaction.TransactionState = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The error code if an error occurred while processing the transaction.
        /// </summary>
        [<Erase>]
        member val errorCode: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The error message if an error occurred while processing the transaction.
        /// </summary>
        [<Erase>]
        member val errorMessage: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val payment: Types.Transaction.Payment = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// An example TraceConfig that roughly matches what Chrome DevTools records:
    /// </summary>
    [<JS.Pojo>]
    type TraceConfig
        /// <param name="recordingMode">Can be <c>record-until-full</c>, <c>record-continuously</c>, <c>record-as-much-as-possible</c> or <c>trace-to-console</c>. Defaults to <c>record-until-full</c>.</param>
        /// <param name="traceBufferSizeInKb">maximum size of the trace recording buffer in kilobytes. Defaults to 100MB.</param>
        /// <param name="traceBufferSizeInEvents">maximum size of the trace recording buffer in events.</param>
        /// <param name="enableArgumentFilter">if true, filter event data according to a specific list of events that have been manually vetted to not
        /// include any PII. See the implementation in Chromium for specifics.</param>
        /// <param name="includedCategories">a list of tracing categories to include. Can include glob-like patterns using <c>*</c> at the end of the category
        /// name. See tracing categories for the list of categories.</param>
        /// <param name="excludedCategories">a list of tracing categories to exclude. Can include glob-like patterns using <c>*</c> at the end of the category
        /// name. See tracing categories for the list of categories.</param>
        /// <param name="includedProcessIds">a list of process IDs to include in the trace. If not specified, trace all processes.</param>
        /// <param name="histogramNames">a list of histogram names to report with the trace.</param>
        /// <param name="memoryDumpConfig">if the <c>disabled-by-default-memory-infra</c> category is enabled, this contains optional additional configuration for data collection. See the Chromium memory-infra docs
        /// for more information.</param>
        (
            ?recordingMode: Enums.Types.TraceConfig.RecordingMode,
            ?traceBufferSizeInKb: float,
            ?traceBufferSizeInEvents: float,
            ?enableArgumentFilter: bool,
            ?includedCategories: string[],
            ?excludedCategories: string[],
            ?includedProcessIds: float[],
            ?histogramNames: string[],
            ?memoryDumpConfig: Record<string, obj>
        ) =
        /// <summary>
        /// Can be <c>record-until-full</c>, <c>record-continuously</c>, <c>record-as-much-as-possible</c> or <c>trace-to-console</c>. Defaults to <c>record-until-full</c>.
        /// </summary>
        [<Erase; Emit("$0.recording_mode{{ = $1 }}")>]
        member _.recordingMode
            with get (): Enums.Types.TraceConfig.RecordingMode = Unchecked.defaultof<_>
            and set (value: Enums.Types.TraceConfig.RecordingMode) = ()

        /// <summary>
        /// maximum size of the trace recording buffer in kilobytes. Defaults to 100MB.
        /// </summary>
        [<Erase; Emit("$0.trace_buffer_size_in_kb{{ = $1 }}")>]
        member _.traceBufferSizeInKb
            with get (): float = Unchecked.defaultof<_>
            and set (value: float) = ()

        /// <summary>
        /// maximum size of the trace recording buffer in events.
        /// </summary>
        [<Erase; Emit("$0.trace_buffer_size_in_events{{ = $1 }}")>]
        member _.traceBufferSizeInEvents
            with get (): float = Unchecked.defaultof<_>
            and set (value: float) = ()

        /// <summary>
        /// if true, filter event data according to a specific list of events that have been manually vetted to not include
        /// any PII. See the implementation in Chromium for specifics.
        /// </summary>
        [<Erase; Emit("$0.enable_argument_filter{{ = $1 }}")>]
        member _.enableArgumentFilter
            with get (): bool = Unchecked.defaultof<_>
            and set (value: bool) = ()

        /// <summary>
        /// a list of tracing categories to include. Can include glob-like patterns using <c>*</c> at the end of the category name.
        /// See tracing categories for the list of categories.
        /// </summary>
        [<Erase; Emit("$0.included_categories{{ = $1 }}")>]
        member _.includedCategories
            with get (): string[] = Unchecked.defaultof<_>
            and set (value: string[]) = ()

        /// <summary>
        /// a list of tracing categories to exclude. Can include glob-like patterns using <c>*</c> at the end of the category name.
        /// See tracing categories for the list of categories.
        /// </summary>
        [<Erase; Emit("$0.excluded_categories{{ = $1 }}")>]
        member _.excludedCategories
            with get (): string[] = Unchecked.defaultof<_>
            and set (value: string[]) = ()

        /// <summary>
        /// a list of process IDs to include in the trace. If not specified, trace all processes.
        /// </summary>
        [<Erase; Emit("$0.included_process_ids{{ = $1 }}")>]
        member _.includedProcessIds
            with get (): float[] = Unchecked.defaultof<_>
            and set (value: float[]) = ()

        /// <summary>
        /// a list of histogram names to report with the trace.
        /// </summary>
        [<Erase; Emit("$0.histogram_names{{ = $1 }}")>]
        member _.histogramNames
            with get (): string[] = Unchecked.defaultof<_>
            and set (value: string[]) = ()

        /// <summary>
        /// if the <c>disabled-by-default-memory-infra</c> category is enabled, this contains optional additional configuration for data collection. See the Chromium memory-infra docs for
        /// more information.
        /// </summary>
        [<Erase; Emit("$0.memory_dump_config{{ = $1 }}")>]
        member _.memoryDumpConfig
            with get (): Record<string, obj> = Unchecked.defaultof<_>
            and set (value: Record<string, obj>) = ()

    [<JS.Pojo>]
    type TraceCategoriesAndOptions
        /// <param name="categoryFilter">A filter to control what category groups should be traced. A filter can have an optional '-' prefix to
        /// exclude category groups that contain a matching category. Having both included and excluded category patterns in the same list is
        /// not supported. Examples: <c>test_MyTest*</c>, <c>test_MyTest*,test_OtherStuff</c>, <c>-excluded_category1,-excluded_category2</c>.</param>
        /// <param name="traceOptions">Controls what kind of tracing is enabled, it is a comma-delimited sequence of the following strings: <c>record-until-full</c>, <c>record-continuously</c>, <c>trace-to-console</c>,
        /// <c>enable-sampling</c>, <c>enable-systrace</c>, e.g. <c>'record-until-full,enable-sampling'</c>. The first 3 options are trace recording modes and hence mutually exclusive. If more than one
        /// trace recording modes appear in the <c>traceOptions</c> string, the last one takes precedence. If none of the trace recording modes
        /// are specified, recording mode is <c>record-until-full</c>. The trace option will first be reset to the default option (<c>record_mode</c> set to
        /// <c>record-until-full</c>, <c>enable_sampling</c> and <c>enable_systrace</c> set to <c>false</c>) before options parsed from <c>traceOptions</c> are applied on it.</param>
        (categoryFilter: string, traceOptions: string) =
        /// <summary>
        /// A filter to control what category groups should be traced. A filter can have an optional '-' prefix to exclude
        /// category groups that contain a matching category. Having both included and excluded category patterns in the same list is not
        /// supported. Examples: <c>test_MyTest*</c>, <c>test_MyTest*,test_OtherStuff</c>, <c>-excluded_category1,-excluded_category2</c>.
        /// </summary>
        [<Erase>]
        member val categoryFilter: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Controls what kind of tracing is enabled, it is a comma-delimited sequence of the following strings: <c>record-until-full</c>, <c>record-continuously</c>, <c>trace-to-console</c>, <c>enable-sampling</c>,
        /// <c>enable-systrace</c>, e.g. <c>'record-until-full,enable-sampling'</c>. The first 3 options are trace recording modes and hence mutually exclusive. If more than one trace
        /// recording modes appear in the <c>traceOptions</c> string, the last one takes precedence. If none of the trace recording modes are
        /// specified, recording mode is <c>record-until-full</c>. The trace option will first be reset to the default option (<c>record_mode</c> set to <c>record-until-full</c>,
        /// <c>enable_sampling</c> and <c>enable_systrace</c> set to <c>false</c>) before options parsed from <c>traceOptions</c> are applied on it.
        /// </summary>
        [<Erase>]
        member val traceOptions: string = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// The <c>flags</c> is an array that can include following <c>string</c>s:<br/><br/>* <c>enabled</c> - The button is active and available to the
    /// user.<br/>* <c>disabled</c> - The button is disabled. It is present, but has a visual state indicating it will not respond
    /// to user action.<br/>* <c>dismissonclick</c> - When the button is clicked, the thumbnail window closes immediately.<br/>* <c>nobackground</c> - Do not draw
    /// a button border, use only the image.<br/>* <c>hidden</c> - The button is not shown to the user.<br/>* <c>noninteractive</c> - The
    /// button is enabled but not interactive; no pressed button state is drawn. This value is intended for instances where the
    /// button is used in a notification.
    /// </summary>
    [<JS.Pojo>]
    type ThumbarButton
        /// <param name="icon">The icon showing in thumbnail toolbar.</param>
        /// <param name="click"></param>
        /// <param name="tooltip">The text of the button's tooltip.</param>
        /// <param name="flags">Control specific states and behaviors of the button. By default, it is <c>['enabled']</c>.</param>
        (icon: NativeImage, click: unit -> unit, ?tooltip: string, ?flags: string[]) =
        /// <summary>
        /// The icon showing in thumbnail toolbar.
        /// </summary>
        [<Erase>]
        member val icon: NativeImage = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val click: unit -> unit = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The text of the button's tooltip.
        /// </summary>
        [<Erase>]
        member val tooltip: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Control specific states and behaviors of the button. By default, it is <c>['enabled']</c>.
        /// </summary>
        [<Erase>]
        member val flags: string[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type Task
        /// <param name="program">Path of the program to execute, usually you should specify <c>process.execPath</c> which opens the current program.</param>
        /// <param name="arguments">The command line arguments when <c>program</c> is executed.</param>
        /// <param name="title">The string to be displayed in a JumpList.</param>
        /// <param name="description">Description of this task.</param>
        /// <param name="iconPath">The absolute path to an icon to be displayed in a JumpList, which can be an arbitrary resource file
        /// that contains an icon. You can usually specify <c>process.execPath</c> to show the icon of the program.</param>
        /// <param name="iconIndex">The icon index in the icon file. If an icon file consists of two or more icons, set this
        /// value to identify the icon. If an icon file consists of one icon, this value is 0.</param>
        /// <param name="workingDirectory">The working directory. Default is empty.</param>
        (
            program: string,
            arguments: string,
            title: string,
            description: string,
            iconPath: string,
            iconIndex: float,
            ?workingDirectory: string
        ) =
        /// <summary>
        /// Path of the program to execute, usually you should specify <c>process.execPath</c> which opens the current program.
        /// </summary>
        [<Erase>]
        member val program: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The command line arguments when <c>program</c> is executed.
        /// </summary>
        [<Erase>]
        member val arguments: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The string to be displayed in a JumpList.
        /// </summary>
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Description of this task.
        /// </summary>
        [<Erase>]
        member val description: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The absolute path to an icon to be displayed in a JumpList, which can be an arbitrary resource file that
        /// contains an icon. You can usually specify <c>process.execPath</c> to show the icon of the program.
        /// </summary>
        [<Erase>]
        member val iconPath: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The icon index in the icon file. If an icon file consists of two or more icons, set this value
        /// to identify the icon. If an icon file consists of one icon, this value is 0.
        /// </summary>
        [<Erase>]
        member val iconIndex: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The working directory. Default is empty.
        /// </summary>
        [<Erase>]
        member val workingDirectory: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type Size
        /// <param name="width"></param>
        /// <param name="height"></param>
        (width: float, height: float) =
        [<Erase>]
        member val width: float = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val height: float = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ShortcutDetails
        /// <param name="target">The target to launch from this shortcut.</param>
        /// <param name="cwd">The working directory. Default is empty.</param>
        /// <param name="args">The arguments to be applied to <c>target</c> when launching from this shortcut. Default is empty.</param>
        /// <param name="description">The description of the shortcut. Default is empty.</param>
        /// <param name="icon">The path to the icon, can be a DLL or EXE. <c>icon</c> and <c>iconIndex</c> have to be set together.
        /// Default is empty, which uses the target's icon.</param>
        /// <param name="iconIndex">The resource ID of icon when <c>icon</c> is a DLL or EXE. Default is 0.</param>
        /// <param name="appUserModelId">The Application User Model ID. Default is empty.</param>
        /// <param name="toastActivatorClsid">The Application Toast Activator CLSID. Needed for participating in Action Center.</param>
        (
            target: string,
            ?cwd: string,
            ?args: string,
            ?description: string,
            ?icon: string,
            ?iconIndex: float,
            ?appUserModelId: string,
            ?toastActivatorClsid: string
        ) =
        /// <summary>
        /// The target to launch from this shortcut.
        /// </summary>
        [<Erase>]
        member val target: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The working directory. Default is empty.
        /// </summary>
        [<Erase>]
        member val cwd: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The arguments to be applied to <c>target</c> when launching from this shortcut. Default is empty.
        /// </summary>
        [<Erase>]
        member val args: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The description of the shortcut. Default is empty.
        /// </summary>
        [<Erase>]
        member val description: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The path to the icon, can be a DLL or EXE. <c>icon</c> and <c>iconIndex</c> have to be set together. Default
        /// is empty, which uses the target's icon.
        /// </summary>
        [<Erase>]
        member val icon: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The resource ID of icon when <c>icon</c> is a DLL or EXE. Default is 0.
        /// </summary>
        [<Erase>]
        member val iconIndex: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The Application User Model ID. Default is empty.
        /// </summary>
        [<Erase>]
        member val appUserModelId: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The Application Toast Activator CLSID. Needed for participating in Action Center.
        /// </summary>
        [<Erase>]
        member val toastActivatorClsid: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type SharingItem
        /// <param name="texts">An array of text to share.</param>
        /// <param name="filePaths">An array of files to share.</param>
        /// <param name="urls">An array of URLs to share.</param>
        (?texts: string[], ?filePaths: string[], ?urls: string[]) =
        /// <summary>
        /// An array of text to share.
        /// </summary>
        [<Erase>]
        member val texts: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of files to share.
        /// </summary>
        [<Erase>]
        member val filePaths: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of URLs to share.
        /// </summary>
        [<Erase>]
        member val urls: string[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type SharedWorkerInfo
        /// <param name="id">The unique id of the shared worker.</param>
        /// <param name="url">The url of the shared worker.</param>
        (id: string, url: string) =
        /// <summary>
        /// The unique id of the shared worker.
        /// </summary>
        [<Erase>]
        member val id: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The url of the shared worker.
        /// </summary>
        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type SharedDictionaryUsageInfo
        /// <param name="frameOrigin">The origin of the frame where the request originates. It’s specific to the individual frame making the request and
        /// is defined by its scheme, host, and port. In practice, will look like a URL.</param>
        /// <param name="topFrameSite">The site of the top-level browsing context (the main frame or tab that contains the request). It’s less granular
        /// than <c>frameOrigin</c> and focuses on the broader "site" scope. In practice, will look like a URL.</param>
        /// <param name="totalSizeBytes">The amount of bytes stored for this shared dictionary information object in Chromium's internal storage (usually Sqlite).</param>
        (frameOrigin: string, topFrameSite: string, totalSizeBytes: float) =
        /// <summary>
        /// The origin of the frame where the request originates. It’s specific to the individual frame making the request and is
        /// defined by its scheme, host, and port. In practice, will look like a URL.
        /// </summary>
        [<Erase>]
        member val frameOrigin: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The site of the top-level browsing context (the main frame or tab that contains the request). It’s less granular than
        /// <c>frameOrigin</c> and focuses on the broader "site" scope. In practice, will look like a URL.
        /// </summary>
        [<Erase>]
        member val topFrameSite: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The amount of bytes stored for this shared dictionary information object in Chromium's internal storage (usually Sqlite).
        /// </summary>
        [<Erase>]
        member val totalSizeBytes: float = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type SharedDictionaryInfo
        /// <param name="``match``">The matching path pattern for the dictionary which was declared in 'use-as-dictionary' response header's <c>match</c> option.</param>
        /// <param name="matchDestinations">An array of matching destinations for the dictionary which was declared in 'use-as-dictionary' response header's <c>match-dest</c> option.</param>
        /// <param name="id">The Id for the dictionary which was declared in 'use-as-dictionary' response header's <c>id</c> option.</param>
        /// <param name="dictionaryUrl">URL of the dictionary.</param>
        /// <param name="lastFetchTime">The time of when the dictionary was received from the network layer.</param>
        /// <param name="responseTime">The time of when the dictionary was received from the server. For cached responses, this time could be "far"
        /// in the past.</param>
        /// <param name="expirationDuration">The expiration time for the dictionary which was declared in 'use-as-dictionary' response header's <c>expires</c> option in seconds.</param>
        /// <param name="lastUsedTime">The time when the dictionary was last used.</param>
        /// <param name="size">The amount of bytes stored for this shared dictionary information object in Chromium's internal storage (usually Sqlite).</param>
        /// <param name="hash">The sha256 hash of the dictionary binary.</param>
        (
            ``match``: string,
            matchDestinations: string[],
            id: string,
            dictionaryUrl: string,
            lastFetchTime: System.DateTime,
            responseTime: System.DateTime,
            expirationDuration: float,
            lastUsedTime: System.DateTime,
            size: float,
            hash: string
        ) =
        /// <summary>
        /// The matching path pattern for the dictionary which was declared in 'use-as-dictionary' response header's <c>match</c> option.
        /// </summary>
        [<Erase>]
        member val ``match``: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of matching destinations for the dictionary which was declared in 'use-as-dictionary' response header's <c>match-dest</c> option.
        /// </summary>
        [<Erase>]
        member val matchDestinations: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The Id for the dictionary which was declared in 'use-as-dictionary' response header's <c>id</c> option.
        /// </summary>
        [<Erase>]
        member val id: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// URL of the dictionary.
        /// </summary>
        [<Erase>]
        member val dictionaryUrl: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The time of when the dictionary was received from the network layer.
        /// </summary>
        [<Erase>]
        member val lastFetchTime: System.DateTime = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The time of when the dictionary was received from the server. For cached responses, this time could be "far" in
        /// the past.
        /// </summary>
        [<Erase>]
        member val responseTime: System.DateTime = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The expiration time for the dictionary which was declared in 'use-as-dictionary' response header's <c>expires</c> option in seconds.
        /// </summary>
        [<Erase>]
        member val expirationDuration: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The time when the dictionary was last used.
        /// </summary>
        [<Erase>]
        member val lastUsedTime: System.DateTime = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The amount of bytes stored for this shared dictionary information object in Chromium's internal storage (usually Sqlite).
        /// </summary>
        [<Erase>]
        member val size: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The sha256 hash of the dictionary binary.
        /// </summary>
        [<Erase>]
        member val hash: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ServiceWorkerInfo
        /// <param name="scriptUrl">The full URL to the script that this service worker runs</param>
        /// <param name="scope">The base URL that this service worker is active for.</param>
        /// <param name="renderProcessId">The virtual ID of the process that this service worker is running in.  This is not an OS
        /// level PID.  This aligns with the ID set used for <c>webContents.getProcessId()</c>.</param>
        /// <param name="versionId">ID of the service worker version</param>
        (scriptUrl: string, scope: string, renderProcessId: float, versionId: float) =
        /// <summary>
        /// The full URL to the script that this service worker runs
        /// </summary>
        [<Erase>]
        member val scriptUrl: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The base URL that this service worker is active for.
        /// </summary>
        [<Erase>]
        member val scope: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The virtual ID of the process that this service worker is running in.  This is not an OS level
        /// PID.  This aligns with the ID set used for <c>webContents.getProcessId()</c>.
        /// </summary>
        [<Erase>]
        member val renderProcessId: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// ID of the service worker version
        /// </summary>
        [<Erase>]
        member val versionId: float = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type SerialPort
        /// <param name="portId">Unique identifier for the port.</param>
        /// <param name="portName">Name of the port.</param>
        /// <param name="displayName">A string suitable for display to the user for describing this device.</param>
        /// <param name="vendorId">The USB vendor ID.</param>
        /// <param name="productId">The USB product ID.</param>
        /// <param name="serialNumber">The USB device serial number.</param>
        /// <param name="usbDriverName">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Represents a single serial
        /// port on macOS can be enumerated by multiple drivers.</param>
        /// <param name="deviceInstanceId">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || A stable identifier on
        /// Windows that can be used for device permissions.</param>
        (
            portId: string,
            portName: string,
            ?displayName: string,
            ?vendorId: string,
            ?productId: string,
            ?serialNumber: string,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?usbDriverName: string,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            ?deviceInstanceId: string
            #endif

        ) =
        /// <summary>
        /// Unique identifier for the port.
        /// </summary>
        [<Erase>]
        member val portId: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Name of the port.
        /// </summary>
        [<Erase>]
        member val portName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A string suitable for display to the user for describing this device.
        /// </summary>
        [<Erase>]
        member val displayName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB vendor ID.
        /// </summary>
        [<Erase>]
        member val vendorId: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB product ID.
        /// </summary>
        [<Erase>]
        member val productId: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB device serial number.
        /// </summary>
        [<Erase>]
        member val serialNumber: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Represents a single serial port on macOS can be enumerated by multiple drivers.
        /// </summary>
        [<Erase>]
        member val usbDriverName: string = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// A stable identifier on Windows that can be used for device permissions.
        /// </summary>
        [<Erase>]
        member val deviceInstanceId: string = Unchecked.defaultof<_> with get, set
        #endif


    [<JS.Pojo>]
    type SegmentedControlSegment
        /// <param name="label">The text to appear in this segment.</param>
        /// <param name="icon">The image to appear in this segment.</param>
        /// <param name="enabled">Whether this segment is selectable. Default: true.</param>
        (?label: string, ?icon: NativeImage, ?enabled: bool) =
        /// <summary>
        /// The text to appear in this segment.
        /// </summary>
        [<Erase>]
        member val label: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The image to appear in this segment.
        /// </summary>
        [<Erase>]
        member val icon: NativeImage = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether this segment is selectable. Default: true.
        /// </summary>
        [<Erase>]
        member val enabled: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ScrubberItem
        /// <param name="label">The text to appear in this item.</param>
        /// <param name="icon">The image to appear in this item.</param>
        (?label: string, ?icon: NativeImage) =
        /// <summary>
        /// The text to appear in this item.
        /// </summary>
        [<Erase>]
        member val label: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The image to appear in this item.
        /// </summary>
        [<Erase>]
        member val icon: NativeImage = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ResolvedHost
        /// <param name="endpoints">resolved DNS entries for the hostname</param>
        (endpoints: ResolvedEndpoint[]) =
        /// <summary>
        /// resolved DNS entries for the hostname
        /// </summary>
        [<Erase>]
        member val endpoints: ResolvedEndpoint[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ResolvedEndpoint
        /// <param name="address"></param>
        /// <param name="family">One of the following:</param>
        (address: string, family: Enums.Types.ResolvedEndpoint.Family) =
        [<Erase>]
        member val address: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// One of the following:
        /// </summary>
        [<Erase>]
        member val family: Enums.Types.ResolvedEndpoint.Family = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type RenderProcessGoneDetails
        /// <param name="reason">The reason the render process is gone.  Possible values:</param>
        /// <param name="exitCode">The exit code of the process, unless <c>reason</c> is <c>launch-failed</c>, in which case <c>exitCode</c> will be a platform-specific launch
        /// failure error code.</param>
        (reason: Enums.Types.RenderProcessGoneDetails.Reason, exitCode: int) =
        /// <summary>
        /// The reason the render process is gone.  Possible values:
        /// </summary>
        [<Erase>]
        member val reason: Enums.Types.RenderProcessGoneDetails.Reason = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The exit code of the process, unless <c>reason</c> is <c>launch-failed</c>, in which case <c>exitCode</c> will be a platform-specific launch failure
        /// error code.
        /// </summary>
        [<Erase>]
        member val exitCode: int = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type Referrer
        /// <param name="url">HTTP Referrer URL.</param>
        /// <param name="policy">Can be <c>default</c>, <c>unsafe-url</c>, <c>no-referrer-when-downgrade</c>, <c>no-referrer</c>, <c>origin</c>, <c>strict-origin-when-cross-origin</c>, <c>same-origin</c> or <c>strict-origin</c>. See the Referrer-Policy spec for more details on
        /// the meaning of these values.</param>
        (url: string, policy: Enums.Types.Referrer.Policy) =
        /// <summary>
        /// HTTP Referrer URL.
        /// </summary>
        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>default</c>, <c>unsafe-url</c>, <c>no-referrer-when-downgrade</c>, <c>no-referrer</c>, <c>origin</c>, <c>strict-origin-when-cross-origin</c>, <c>same-origin</c> or <c>strict-origin</c>. See the Referrer-Policy spec for more details on the
        /// meaning of these values.
        /// </summary>
        [<Erase>]
        member val policy: Enums.Types.Referrer.Policy = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type Rectangle
        /// <param name="x">The x coordinate of the origin of the rectangle (must be an integer).</param>
        /// <param name="y">The y coordinate of the origin of the rectangle (must be an integer).</param>
        /// <param name="width">The width of the rectangle (must be an integer).</param>
        /// <param name="height">The height of the rectangle (must be an integer).</param>
        (x: float, y: float, width: float, height: float) =
        /// <summary>
        /// The x coordinate of the origin of the rectangle (must be an integer).
        /// </summary>
        [<Erase>]
        member val x: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The y coordinate of the origin of the rectangle (must be an integer).
        /// </summary>
        [<Erase>]
        member val y: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The width of the rectangle (must be an integer).
        /// </summary>
        [<Erase>]
        member val width: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The height of the rectangle (must be an integer).
        /// </summary>
        [<Erase>]
        member val height: float = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// When <c>mode</c> is unspecified, <c>pacScript</c> and <c>proxyRules</c> are provided together, the <c>proxyRules</c> option is ignored and <c>pacScript</c> configuration is applied.<br/><br/>The
    /// <c>proxyRules</c> has to follow the rules below:<br/><br/>For example:<br/><br/>* <c>http=foopy:80;ftp=foopy2</c> - Use HTTP proxy <c>foopy:80</c> for <c>http://</c> URLs, and HTTP proxy
    /// <c>foopy2:80</c> for <c>ftp://</c> URLs.<br/>* <c>foopy:80</c> - Use HTTP proxy <c>foopy:80</c> for all URLs.<br/>* <c>foopy:80,bar,direct://</c> - Use HTTP proxy <c>foopy:80</c> for
    /// all URLs, failing over to <c>bar</c> if <c>foopy:80</c> is unavailable, and after that using no proxy.<br/>* <c>socks4://foopy</c> - Use SOCKS
    /// v4 proxy <c>foopy:1080</c> for all URLs.<br/>* <c>http=foopy,socks5://bar.com</c> - Use HTTP proxy <c>foopy</c> for http URLs, and fail over to the
    /// SOCKS5 proxy <c>bar.com</c> if <c>foopy</c> is unavailable.<br/>* <c>http=foopy,direct://</c> - Use HTTP proxy <c>foopy</c> for http URLs, and use no proxy
    /// if <c>foopy</c> is unavailable.<br/>* <c>http=foopy;socks=foopy2</c> - Use HTTP proxy <c>foopy</c> for http URLs, and use <c>socks4://foopy2</c> for all other URLs.<br/><br/>The
    /// <c>proxyBypassRules</c> is a comma separated list of rules described below:<br/><br/>* <c>[ URL_SCHEME "://" ] HOSTNAME_PATTERN [ ":" &lt;port&gt; ]</c><br/><br/>Match all
    /// hostnames that match the pattern HOSTNAME_PATTERN.<br/><br/>Examples: "foobar.com", "*foobar.com", "*.foobar.com", "*foobar.com:99", "https://x.*.y.com:99"<br/>* <c>"." HOSTNAME_SUFFIX_PATTERN [ ":" PORT ]</c><br/><br/>Match a particular domain
    /// suffix.<br/><br/>Examples: ".google.com", ".com", "http://.google.com"<br/>* <c>[ SCHEME "://" ] IP_LITERAL [ ":" PORT ]</c><br/><br/>Match URLs which are IP address literals.<br/><br/>Examples: "127.0.1",
    /// "[0:0::1]", "[::1]", "http://[::1]:99"<br/>* <c>IP_LITERAL "/" PREFIX_LENGTH_IN_BITS</c><br/><br/>Match any URL that is to an IP literal that falls between the given range.
    /// IP range is specified using CIDR notation.<br/><br/>Examples: "192.168.1.1/16", "fefe:13::abc/33".<br/>* <c>&lt;local&gt;</c><br/><br/>Match local addresses. The meaning of <c>&lt;local&gt;</c> is whether the host
    /// matches one of: "127.0.0.1", "::1", "localhost".
    /// </summary>
    [<JS.Pojo>]
    type ProxyConfig
        /// <param name="mode">The proxy mode. Should be one of <c>direct</c>, <c>auto_detect</c>, <c>pac_script</c>, <c>fixed_servers</c> or <c>system</c>. Defaults to <c>pac_script</c> proxy mode if
        /// <c>pacScript</c> option is specified otherwise defaults to <c>fixed_servers</c>.</param>
        /// <param name="pacScript">The URL associated with the PAC file.</param>
        /// <param name="proxyRules">Rules indicating which proxies to use.</param>
        /// <param name="proxyBypassRules">Rules indicating which URLs should bypass the proxy settings.</param>
        (?mode: Enums.Types.ProxyConfig.Mode, ?pacScript: string, ?proxyRules: string, ?proxyBypassRules: string) =
        /// <summary>
        /// The proxy mode. Should be one of <c>direct</c>, <c>auto_detect</c>, <c>pac_script</c>, <c>fixed_servers</c> or <c>system</c>. Defaults to <c>pac_script</c> proxy mode if <c>pacScript</c>
        /// option is specified otherwise defaults to <c>fixed_servers</c>.
        /// </summary>
        [<Erase>]
        member val mode: Enums.Types.ProxyConfig.Mode = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The URL associated with the PAC file.
        /// </summary>
        [<Erase>]
        member val pacScript: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Rules indicating which proxies to use.
        /// </summary>
        [<Erase>]
        member val proxyRules: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Rules indicating which URLs should bypass the proxy settings.
        /// </summary>
        [<Erase>]
        member val proxyBypassRules: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ProtocolResponse
        /// <param name="error">When assigned, the <c>request</c> will fail with the <c>error</c> number . For the available error numbers you can use,
        /// please see the net error list.</param>
        /// <param name="statusCode">The HTTP response code, default is 200.</param>
        /// <param name="charset">The charset of response body, default is <c>"utf-8"</c>.</param>
        /// <param name="mimeType">The MIME type of response body, default is <c>"text/html"</c>. Setting <c>mimeType</c> would implicitly set the <c>content-type</c> header in response,
        /// but if <c>content-type</c> is already set in <c>headers</c>, the <c>mimeType</c> would be ignored.</param>
        /// <param name="headers">An object containing the response headers. The keys must be string, and values must be either string or Array
        /// of string.</param>
        /// <param name="data">The response body. When returning stream as response, this is a Node.js readable stream representing the response body. When
        /// returning <c>Buffer</c> as response, this is a <c>Buffer</c>. When returning <c>string</c> as response, this is a <c>string</c>. This is ignored
        /// for other types of responses.</param>
        /// <param name="path">Path to the file which would be sent as response body. This is only used for file responses.</param>
        /// <param name="url">Download the <c>url</c> and pipe the result as response body. This is only used for URL responses.</param>
        /// <param name="referrer">The <c>referrer</c> URL. This is only used for file and URL responses.</param>
        /// <param name="method">The HTTP <c>method</c>. This is only used for file and URL responses.</param>
        /// <param name="session">The session used for requesting URL. The HTTP request will reuse the current session by default.</param>
        /// <param name="uploadData">The data used as upload data. This is only used for URL responses when <c>method</c> is <c>"POST"</c>.</param>
        (
            ?error: int,
            ?statusCode: float,
            ?charset: string,
            ?mimeType: string,
            ?headers: Record<string, U2<string, string[]>>,
            ?data: U3<Buffer, string, ReadableStream>,
            ?path: string,
            ?url: string,
            ?referrer: string,
            ?method: string,
            ?session: Session,
            ?uploadData: ProtocolResponseUploadData
        ) =
        /// <summary>
        /// When assigned, the <c>request</c> will fail with the <c>error</c> number . For the available error numbers you can use, please
        /// see the net error list.
        /// </summary>
        [<Erase>]
        member val error: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The HTTP response code, default is 200.
        /// </summary>
        [<Erase>]
        member val statusCode: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The charset of response body, default is <c>"utf-8"</c>.
        /// </summary>
        [<Erase>]
        member val charset: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The MIME type of response body, default is <c>"text/html"</c>. Setting <c>mimeType</c> would implicitly set the <c>content-type</c> header in response, but
        /// if <c>content-type</c> is already set in <c>headers</c>, the <c>mimeType</c> would be ignored.
        /// </summary>
        [<Erase>]
        member val mimeType: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An object containing the response headers. The keys must be string, and values must be either string or Array of
        /// string.
        /// </summary>
        [<Erase>]
        member val headers: Record<string, U2<string, string[]>> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The response body. When returning stream as response, this is a Node.js readable stream representing the response body. When returning
        /// <c>Buffer</c> as response, this is a <c>Buffer</c>. When returning <c>string</c> as response, this is a <c>string</c>. This is ignored for
        /// other types of responses.
        /// </summary>
        [<Erase>]
        member val data: U3<Buffer, string, ReadableStream> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Path to the file which would be sent as response body. This is only used for file responses.
        /// </summary>
        [<Erase>]
        member val path: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Download the <c>url</c> and pipe the result as response body. This is only used for URL responses.
        /// </summary>
        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The <c>referrer</c> URL. This is only used for file and URL responses.
        /// </summary>
        [<Erase>]
        member val referrer: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The HTTP <c>method</c>. This is only used for file and URL responses.
        /// </summary>
        [<Erase>]
        member val method: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The session used for requesting URL. The HTTP request will reuse the current session by default.
        /// </summary>
        [<Erase>]
        member val session: Session = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The data used as upload data. This is only used for URL responses when <c>method</c> is <c>"POST"</c>.
        /// </summary>
        [<Erase>]
        member val uploadData: ProtocolResponseUploadData = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ProtocolResponseUploadData
        /// <param name="contentType">MIME type of the content.</param>
        /// <param name="data">Content to be sent.</param>
        (contentType: string, data: U2<string, Buffer>) =
        /// <summary>
        /// MIME type of the content.
        /// </summary>
        [<Erase>]
        member val contentType: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Content to be sent.
        /// </summary>
        [<Erase>]
        member val data: U2<string, Buffer> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ProtocolRequest
        /// <param name="url"></param>
        /// <param name="referrer"></param>
        /// <param name="method"></param>
        /// <param name="uploadData"></param>
        /// <param name="headers"></param>
        (url: string, referrer: string, method: string, headers: Record<string, string>, ?uploadData: UploadData[]) =
        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val referrer: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val method: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val uploadData: UploadData[] = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val headers: Record<string, string> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type Product
        /// <param name="productIdentifier">The string that identifies the product to the Apple App Store.</param>
        /// <param name="localizedDescription">A description of the product.</param>
        /// <param name="localizedTitle">The name of the product.</param>
        /// <param name="price">The cost of the product in the local currency.</param>
        /// <param name="formattedPrice">The locale formatted price of the product.</param>
        /// <param name="currencyCode">3 character code presenting a product's currency based on the ISO 4217 standard.</param>
        /// <param name="introductoryPrice">The object containing introductory price information for the product. available for the product.</param>
        /// <param name="discounts">An array of discount offers</param>
        /// <param name="subscriptionGroupIdentifier">The identifier of the subscription group to which the subscription belongs.</param>
        /// <param name="subscriptionPeriod">The period details for products that are subscriptions.</param>
        /// <param name="isDownloadable">A boolean value that indicates whether the App Store has downloadable content for this product. <c>true</c> if at least
        /// one file has been associated with the product.</param>
        /// <param name="downloadContentVersion">A string that identifies the version of the content.</param>
        /// <param name="downloadContentLengths">The total size of the content, in bytes.</param>
        (
            productIdentifier: string,
            localizedDescription: string,
            localizedTitle: string,
            price: float,
            formattedPrice: string,
            currencyCode: string,
            discounts: ProductDiscount[],
            subscriptionGroupIdentifier: string,
            isDownloadable: bool,
            downloadContentVersion: string,
            downloadContentLengths: float[],
            ?introductoryPrice: ProductDiscount,
            ?subscriptionPeriod: ProductSubscriptionPeriod
        ) =
        /// <summary>
        /// The string that identifies the product to the Apple App Store.
        /// </summary>
        [<Erase>]
        member val productIdentifier: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A description of the product.
        /// </summary>
        [<Erase>]
        member val localizedDescription: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The name of the product.
        /// </summary>
        [<Erase>]
        member val localizedTitle: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The cost of the product in the local currency.
        /// </summary>
        [<Erase>]
        member val price: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The locale formatted price of the product.
        /// </summary>
        [<Erase>]
        member val formattedPrice: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// 3 character code presenting a product's currency based on the ISO 4217 standard.
        /// </summary>
        [<Erase>]
        member val currencyCode: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The object containing introductory price information for the product. available for the product.
        /// </summary>
        [<Erase>]
        member val introductoryPrice: ProductDiscount = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of discount offers
        /// </summary>
        [<Erase>]
        member val discounts: ProductDiscount[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The identifier of the subscription group to which the subscription belongs.
        /// </summary>
        [<Erase>]
        member val subscriptionGroupIdentifier: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The period details for products that are subscriptions.
        /// </summary>
        [<Erase>]
        member val subscriptionPeriod: ProductSubscriptionPeriod = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A boolean value that indicates whether the App Store has downloadable content for this product. <c>true</c> if at least one
        /// file has been associated with the product.
        /// </summary>
        [<Erase>]
        member val isDownloadable: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A string that identifies the version of the content.
        /// </summary>
        [<Erase>]
        member val downloadContentVersion: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The total size of the content, in bytes.
        /// </summary>
        [<Erase>]
        member val downloadContentLengths: float[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ProductSubscriptionPeriod
        /// <param name="numberOfUnits">The number of units per subscription period.</param>
        /// <param name="unit">The increment of time that a subscription period is specified in. Can be <c>day</c>, <c>week</c>, <c>month</c>, <c>year</c>.</param>
        (numberOfUnits: float, unit: Enums.Types.ProductSubscriptionPeriod.Unit) =
        /// <summary>
        /// The number of units per subscription period.
        /// </summary>
        [<Erase>]
        member val numberOfUnits: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The increment of time that a subscription period is specified in. Can be <c>day</c>, <c>week</c>, <c>month</c>, <c>year</c>.
        /// </summary>
        [<Erase>]
        member val unit: Enums.Types.ProductSubscriptionPeriod.Unit = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ProductDiscount
        /// <param name="identifier">A string used to uniquely identify a discount offer for a product.</param>
        /// <param name="``type``">The type of discount offer.</param>
        /// <param name="price">The discount price of the product in the local currency.</param>
        /// <param name="priceLocale">The locale used to format the discount price of the product.</param>
        /// <param name="paymentMode">The payment mode for this product discount. Can be <c>payAsYouGo</c>, <c>payUpFront</c>, or <c>freeTrial</c>.</param>
        /// <param name="numberOfPeriods">An integer that indicates the number of periods the product discount is available.</param>
        /// <param name="subscriptionPeriod">An object that defines the period for the product discount.</param>
        (
            identifier: string,
            ``type``: float,
            price: float,
            priceLocale: string,
            paymentMode: Enums.Types.ProductDiscount.PaymentMode,
            numberOfPeriods: float,
            ?subscriptionPeriod: ProductSubscriptionPeriod
        ) =
        /// <summary>
        /// A string used to uniquely identify a discount offer for a product.
        /// </summary>
        [<Erase>]
        member val identifier: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The type of discount offer.
        /// </summary>
        [<Erase>]
        member val ``type``: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The discount price of the product in the local currency.
        /// </summary>
        [<Erase>]
        member val price: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The locale used to format the discount price of the product.
        /// </summary>
        [<Erase>]
        member val priceLocale: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The payment mode for this product discount. Can be <c>payAsYouGo</c>, <c>payUpFront</c>, or <c>freeTrial</c>.
        /// </summary>
        [<Erase>]
        member val paymentMode: Enums.Types.ProductDiscount.PaymentMode = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An integer that indicates the number of periods the product discount is available.
        /// </summary>
        [<Erase>]
        member val numberOfPeriods: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An object that defines the period for the product discount.
        /// </summary>
        [<Erase>]
        member val subscriptionPeriod: ProductSubscriptionPeriod = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ProcessMetric
        /// <param name="pid">Process id of the process.</param>
        /// <param name="``type``">Process type. One of the following values:</param>
        /// <param name="serviceName">The non-localized name of the process.</param>
        /// <param name="name">The name of the process. Examples for utility: <c>Audio Service</c>, <c>Content Decryption Module Service</c>, <c>Network Service</c>, <c>Video Capture</c>, etc.</param>
        /// <param name="cpu">CPU usage of the process.</param>
        /// <param name="creationTime">Creation time for this process. The time is represented as number of milliseconds since epoch. Since the <c>pid</c> can
        /// be reused after a process dies, it is useful to use both the <c>pid</c> and the <c>creationTime</c> to uniquely identify
        /// a process.</param>
        /// <param name="memory">Memory information for the process.</param>
        /// <param name="sandboxed">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether the process is
        /// sandboxed on OS level.</param>
        /// <param name="integrityLevel">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || One of the following
        /// values:</param>
        (
            pid: int,
            ``type``: Enums.Types.ProcessMetric.Type,
            cpu: CPUUsage,
            creationTime: float,
            memory: MemoryInfo,
            ?serviceName: string,
            ?name: string,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?sandboxed: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            ?integrityLevel: Enums.Types.ProcessMetric.IntegrityLevel
            #endif

        ) =
        /// <summary>
        /// Process id of the process.
        /// </summary>
        [<Erase>]
        member val pid: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Process type. One of the following values:
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.ProcessMetric.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The non-localized name of the process.
        /// </summary>
        [<Erase>]
        member val serviceName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The name of the process. Examples for utility: <c>Audio Service</c>, <c>Content Decryption Module Service</c>, <c>Network Service</c>, <c>Video Capture</c>, etc.
        /// </summary>
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// CPU usage of the process.
        /// </summary>
        [<Erase>]
        member val cpu: CPUUsage = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Creation time for this process. The time is represented as number of milliseconds since epoch. Since the <c>pid</c> can be
        /// reused after a process dies, it is useful to use both the <c>pid</c> and the <c>creationTime</c> to uniquely identify a
        /// process.
        /// </summary>
        [<Erase>]
        member val creationTime: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Memory information for the process.
        /// </summary>
        [<Erase>]
        member val memory: MemoryInfo = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether the process is sandboxed on OS level.
        /// </summary>
        [<Erase>]
        member val sandboxed: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// One of the following values:
        /// </summary>
        [<Erase>]
        member val integrityLevel: Enums.Types.ProcessMetric.IntegrityLevel = Unchecked.defaultof<_> with get, set
        #endif


    [<JS.Pojo>]
    type ProcessMemoryInfo
        /// <param name="residentSet">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || The amount of memory
        /// currently pinned to actual physical RAM in Kilobytes.</param>
        /// <param name="``private``">The amount of memory not shared by other processes, such as JS heap or HTML content in Kilobytes.</param>
        /// <param name="shared">The amount of memory shared between processes, typically memory consumed by the Electron code itself in Kilobytes.</param>
        (
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
            residentSet: int,
            #endif

            ``private``: int,
            shared: int
        ) =
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// The amount of memory currently pinned to actual physical RAM in Kilobytes.
        /// </summary>
        [<Erase>]
        member val residentSet: int = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// The amount of memory not shared by other processes, such as JS heap or HTML content in Kilobytes.
        /// </summary>
        [<Erase>]
        member val ``private``: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The amount of memory shared between processes, typically memory consumed by the Electron code itself in Kilobytes.
        /// </summary>
        [<Erase>]
        member val shared: int = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type PrinterInfo
        /// <param name="name">the name of the printer as understood by the OS.</param>
        /// <param name="displayName">the name of the printer as shown in Print Preview.</param>
        /// <param name="description">a longer description of the printer's type.</param>
        /// <param name="options">an object containing a variable number of platform-specific printer information.</param>
        (name: string, displayName: string, description: string, options: Types.PrinterInfo.Options) =
        /// <summary>
        /// the name of the printer as understood by the OS.
        /// </summary>
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// the name of the printer as shown in Print Preview.
        /// </summary>
        [<Erase>]
        member val displayName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// a longer description of the printer's type.
        /// </summary>
        [<Erase>]
        member val description: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// an object containing a variable number of platform-specific printer information.
        /// </summary>
        [<Erase>]
        member val options: Types.PrinterInfo.Options = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type PreloadScript
        /// <param name="``type``">Context type where the preload script will be executed. Possible values include <c>frame</c> or <c>service-worker</c>.</param>
        /// <param name="id">Unique ID of preload script.</param>
        /// <param name="filePath">Path of the script file. Must be an absolute path.</param>
        (``type``: Enums.Types.PreloadScript.Type, id: string, filePath: string) =
        /// <summary>
        /// Context type where the preload script will be executed. Possible values include <c>frame</c> or <c>service-worker</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.PreloadScript.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Unique ID of preload script.
        /// </summary>
        [<Erase>]
        member val id: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Path of the script file. Must be an absolute path.
        /// </summary>
        [<Erase>]
        member val filePath: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type PreloadScriptRegistration
        /// <param name="``type``">Context type where the preload script will be executed. Possible values include <c>frame</c> or <c>service-worker</c>.</param>
        /// <param name="id">Unique ID of preload script. Defaults to a random UUID.</param>
        /// <param name="filePath">Path of the script file. Must be an absolute path.</param>
        (``type``: Enums.Types.PreloadScriptRegistration.Type, filePath: string, ?id: string) =
        /// <summary>
        /// Context type where the preload script will be executed. Possible values include <c>frame</c> or <c>service-worker</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.PreloadScriptRegistration.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Unique ID of preload script. Defaults to a random UUID.
        /// </summary>
        [<Erase>]
        member val id: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Path of the script file. Must be an absolute path.
        /// </summary>
        [<Erase>]
        member val filePath: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type PostBody
        /// <param name="data">The post data to be sent to the new window.</param>
        /// <param name="contentType">The <c>content-type</c> header used for the data. One of <c>application/x-www-form-urlencoded</c> or <c>multipart/form-data</c>. Corresponds to the <c>enctype</c> attribute of the
        /// submitted HTML form.</param>
        /// <param name="boundary">The boundary used to separate multiple parts of the message. Only valid when <c>contentType</c> is <c>multipart/form-data</c>.</param>
        (data: U2<UploadRawData, UploadFile>[], contentType: string, ?boundary: string) =
        /// <summary>
        /// The post data to be sent to the new window.
        /// </summary>
        [<Erase>]
        member val data: U2<UploadRawData, UploadFile>[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The <c>content-type</c> header used for the data. One of <c>application/x-www-form-urlencoded</c> or <c>multipart/form-data</c>. Corresponds to the <c>enctype</c> attribute of the submitted
        /// HTML form.
        /// </summary>
        [<Erase>]
        member val contentType: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The boundary used to separate multiple parts of the message. Only valid when <c>contentType</c> is <c>multipart/form-data</c>.
        /// </summary>
        [<Erase>]
        member val boundary: string = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// &gt; [!NOTE] Both <c>x</c> and <c>y</c> must be whole integers, when providing a point object as input to an Electron
    /// API we will automatically round your <c>x</c> and <c>y</c> values to the nearest whole integer.
    /// </summary>
    [<JS.Pojo>]
    type Point
        /// <param name="x"></param>
        /// <param name="y"></param>
        (x: float, y: float) =
        [<Erase>]
        member val x: float = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val y: float = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type PermissionRequest
        /// <param name="requestingUrl">The last URL the requesting frame loaded.</param>
        /// <param name="isMainFrame">Whether the frame making the request is the main frame.</param>
        (requestingUrl: string, isMainFrame: bool) =
        /// <summary>
        /// The last URL the requesting frame loaded.
        /// </summary>
        [<Erase>]
        member val requestingUrl: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the frame making the request is the main frame.
        /// </summary>
        [<Erase>]
        member val isMainFrame: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type PaymentDiscount
        /// <param name="identifier">A string used to uniquely identify a discount offer for a product.</param>
        /// <param name="keyIdentifier">A string that identifies the key used to generate the signature.</param>
        /// <param name="nonce">A universally unique ID (UUID) value that you define.</param>
        /// <param name="signature">A UTF-8 string representing the properties of a specific discount offer, cryptographically signed.</param>
        /// <param name="timestamp">The date and time of the signature's creation in milliseconds, formatted in Unix epoch time.</param>
        (identifier: string, keyIdentifier: string, nonce: string, signature: string, timestamp: float) =
        /// <summary>
        /// A string used to uniquely identify a discount offer for a product.
        /// </summary>
        [<Erase>]
        member val identifier: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A string that identifies the key used to generate the signature.
        /// </summary>
        [<Erase>]
        member val keyIdentifier: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A universally unique ID (UUID) value that you define.
        /// </summary>
        [<Erase>]
        member val nonce: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A UTF-8 string representing the properties of a specific discount offer, cryptographically signed.
        /// </summary>
        [<Erase>]
        member val signature: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The date and time of the signature's creation in milliseconds, formatted in Unix epoch time.
        /// </summary>
        [<Erase>]
        member val timestamp: float = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type OpenExternalPermissionRequest
        /// <param name="externalURL">The url of the <c>openExternal</c> request.</param>
        /// <param name="requestingUrl">The last URL the requesting frame loaded.</param>
        /// <param name="isMainFrame">Whether the frame making the request is the main frame.</param>
        (requestingUrl: string, isMainFrame: bool, ?externalURL: string) =
        /// <summary>
        /// The url of the <c>openExternal</c> request.
        /// </summary>
        [<Erase>]
        member val externalURL: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The last URL the requesting frame loaded.
        /// </summary>
        [<Erase>]
        member val requestingUrl: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the frame making the request is the main frame.
        /// </summary>
        [<Erase>]
        member val isMainFrame: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type OffscreenSharedTexture
        /// <param name="textureInfo">The shared texture info.</param>
        /// <param name="release">Release the resources. The <c>texture</c> cannot be directly passed to another process, users need to maintain texture lifecycles in
        /// main process, but it is safe to pass the <c>textureInfo</c> to another process. Only a limited number of textures can
        /// exist at the same time, so it's important that you call <c>texture.release()</c> as soon as you're done with the texture.</param>
        (textureInfo: Types.OffscreenSharedTexture.TextureInfo, release: unit -> unit) =
        /// <summary>
        /// The shared texture info.
        /// </summary>
        [<Erase>]
        member val textureInfo: Types.OffscreenSharedTexture.TextureInfo = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Release the resources. The <c>texture</c> cannot be directly passed to another process, users need to maintain texture lifecycles in main
        /// process, but it is safe to pass the <c>textureInfo</c> to another process. Only a limited number of textures can exist
        /// at the same time, so it's important that you call <c>texture.release()</c> as soon as you're done with the texture.
        /// </summary>
        [<Erase>]
        member val release: unit -> unit = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type NotificationResponse
        /// <param name="actionIdentifier">The identifier string of the action that the user selected.</param>
        /// <param name="date">The delivery date of the notification.</param>
        /// <param name="identifier">The unique identifier for this notification request.</param>
        /// <param name="userInfo">A dictionary of custom information associated with the notification.</param>
        /// <param name="userText">The text entered or chosen by the user.</param>
        (actionIdentifier: string, date: float, identifier: string, userInfo: Record<string, obj>, ?userText: string) =
        /// <summary>
        /// The identifier string of the action that the user selected.
        /// </summary>
        [<Erase>]
        member val actionIdentifier: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The delivery date of the notification.
        /// </summary>
        [<Erase>]
        member val date: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The unique identifier for this notification request.
        /// </summary>
        [<Erase>]
        member val identifier: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A dictionary of custom information associated with the notification.
        /// </summary>
        [<Erase>]
        member val userInfo: Record<string, obj> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The text entered or chosen by the user.
        /// </summary>
        [<Erase>]
        member val userText: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type NotificationAction
        /// <param name="``type``">The type of action, can be <c>button</c>.</param>
        /// <param name="text">The label for the given action.</param>
        (``type``: Enums.Types.NotificationAction.Type, ?text: string) =
        /// <summary>
        /// The type of action, can be <c>button</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.NotificationAction.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The label for the given action.
        /// </summary>
        [<Erase>]
        member val text: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type NavigationEntry
        /// <param name="url"></param>
        /// <param name="title"></param>
        /// <param name="pageState">A base64 encoded data string containing Chromium page state including information like the current scroll position or form values.
        /// It is committed by Chromium before a navigation event and on a regular interval.</param>
        (url: string, title: string, ?pageState: string) =
        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A base64 encoded data string containing Chromium page state including information like the current scroll position or form values. It
        /// is committed by Chromium before a navigation event and on a regular interval.
        /// </summary>
        [<Erase>]
        member val pageState: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type MouseWheelInputEvent
        /// <param name="``type``">The type of the event, can be <c>mouseWheel</c>.</param>
        /// <param name="deltaX"></param>
        /// <param name="deltaY"></param>
        /// <param name="wheelTicksX"></param>
        /// <param name="wheelTicksY"></param>
        /// <param name="accelerationRatioX"></param>
        /// <param name="accelerationRatioY"></param>
        /// <param name="hasPreciseScrollingDeltas"></param>
        /// <param name="canScroll"></param>
        /// <param name="``type``">The type of the event, can be <c>mouseDown</c>, <c>mouseUp</c>, <c>mouseEnter</c>, <c>mouseLeave</c>, <c>contextMenu</c>, <c>mouseWheel</c> or <c>mouseMove</c>.</param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="button">The button pressed, can be <c>left</c>, <c>middle</c>, <c>right</c>.</param>
        /// <param name="globalX"></param>
        /// <param name="globalY"></param>
        /// <param name="movementX"></param>
        /// <param name="movementY"></param>
        /// <param name="clickCount"></param>
        (
            ``type``: Enums.Types.MouseWheelInputEvent.Type,
            ``type``: Enums.Types.MouseInputEvent.Type,
            x: int,
            y: int,
            ?deltaX: int,
            ?deltaY: int,
            ?wheelTicksX: int,
            ?wheelTicksY: int,
            ?accelerationRatioX: int,
            ?accelerationRatioY: int,
            ?hasPreciseScrollingDeltas: bool,
            ?canScroll: bool,
            ?button: Enums.Types.MouseInputEvent.Button,
            ?globalX: int,
            ?globalY: int,
            ?movementX: int,
            ?movementY: int,
            ?clickCount: int
        ) =
        /// <summary>
        /// The type of the event, can be <c>mouseWheel</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.MouseWheelInputEvent.Type = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val deltaX: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val deltaY: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val wheelTicksX: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val wheelTicksY: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val accelerationRatioX: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val accelerationRatioY: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val hasPreciseScrollingDeltas: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val canScroll: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The type of the event, can be <c>mouseDown</c>, <c>mouseUp</c>, <c>mouseEnter</c>, <c>mouseLeave</c>, <c>contextMenu</c>, <c>mouseWheel</c> or <c>mouseMove</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.MouseInputEvent.Type = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val x: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val y: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The button pressed, can be <c>left</c>, <c>middle</c>, <c>right</c>.
        /// </summary>
        [<Erase>]
        member val button: Enums.Types.MouseInputEvent.Button = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val globalX: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val globalY: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val movementX: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val movementY: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val clickCount: int = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type MouseInputEvent
        /// <param name="``type``">The type of the event, can be <c>mouseDown</c>, <c>mouseUp</c>, <c>mouseEnter</c>, <c>mouseLeave</c>, <c>contextMenu</c>, <c>mouseWheel</c> or <c>mouseMove</c>.</param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="button">The button pressed, can be <c>left</c>, <c>middle</c>, <c>right</c>.</param>
        /// <param name="globalX"></param>
        /// <param name="globalY"></param>
        /// <param name="movementX"></param>
        /// <param name="movementY"></param>
        /// <param name="clickCount"></param>
        /// <param name="``type``">Can be <c>undefined</c>, <c>mouseDown</c>, <c>mouseUp</c>, <c>mouseMove</c>, <c>mouseEnter</c>, <c>mouseLeave</c>, <c>contextMenu</c>, <c>mouseWheel</c>, <c>rawKeyDown</c>, <c>keyDown</c>, <c>keyUp</c>, <c>char</c>, <c>gestureScrollBegin</c>, <c>gestureScrollEnd</c>, <c>gestureScrollUpdate</c>, <c>gestureFlingStart</c>, <c>gestureFlingCancel</c>,
        /// <c>gesturePinchBegin</c>, <c>gesturePinchEnd</c>, <c>gesturePinchUpdate</c>, <c>gestureTapDown</c>, <c>gestureShowPress</c>, <c>gestureTap</c>, <c>gestureTapCancel</c>, <c>gestureShortPress</c>, <c>gestureLongPress</c>, <c>gestureLongTap</c>, <c>gestureTwoFingerTap</c>, <c>gestureTapUnconfirmed</c>, <c>gestureDoubleTap</c>, <c>touchStart</c>, <c>touchMove</c>, <c>touchEnd</c>, <c>touchCancel</c>, <c>touchScrollStarted</c>, <c>pointerDown</c>, <c>pointerUp</c>,
        /// <c>pointerMove</c>, <c>pointerRawUpdate</c>, <c>pointerCancel</c> or <c>pointerCausedUaAction</c>.</param>
        /// <param name="modifiers">An array of modifiers of the event, can be <c>shift</c>, <c>control</c>, <c>ctrl</c>, <c>alt</c>, <c>meta</c>, <c>command</c>, <c>cmd</c>, <c>iskeypad</c>, <c>isautorepeat</c>, <c>leftbuttondown</c>,
        /// <c>middlebuttondown</c>, <c>rightbuttondown</c>, <c>capslock</c>, <c>numlock</c>, <c>left</c>, <c>right</c>.</param>
        (
            ``type``: Enums.Types.MouseInputEvent.Type,
            x: int,
            y: int,
            ``type``: Enums.Types.InputEvent.Type,
            ?button: Enums.Types.MouseInputEvent.Button,
            ?globalX: int,
            ?globalY: int,
            ?movementX: int,
            ?movementY: int,
            ?clickCount: int,
            ?modifiers: Enums.Types.InputEvent.Modifiers[]
        ) =
        /// <summary>
        /// The type of the event, can be <c>mouseDown</c>, <c>mouseUp</c>, <c>mouseEnter</c>, <c>mouseLeave</c>, <c>contextMenu</c>, <c>mouseWheel</c> or <c>mouseMove</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.MouseInputEvent.Type = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val x: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val y: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The button pressed, can be <c>left</c>, <c>middle</c>, <c>right</c>.
        /// </summary>
        [<Erase>]
        member val button: Enums.Types.MouseInputEvent.Button = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val globalX: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val globalY: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val movementX: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val movementY: int = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val clickCount: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>undefined</c>, <c>mouseDown</c>, <c>mouseUp</c>, <c>mouseMove</c>, <c>mouseEnter</c>, <c>mouseLeave</c>, <c>contextMenu</c>, <c>mouseWheel</c>, <c>rawKeyDown</c>, <c>keyDown</c>, <c>keyUp</c>, <c>char</c>, <c>gestureScrollBegin</c>, <c>gestureScrollEnd</c>, <c>gestureScrollUpdate</c>, <c>gestureFlingStart</c>, <c>gestureFlingCancel</c>, <c>gesturePinchBegin</c>,
        /// <c>gesturePinchEnd</c>, <c>gesturePinchUpdate</c>, <c>gestureTapDown</c>, <c>gestureShowPress</c>, <c>gestureTap</c>, <c>gestureTapCancel</c>, <c>gestureShortPress</c>, <c>gestureLongPress</c>, <c>gestureLongTap</c>, <c>gestureTwoFingerTap</c>, <c>gestureTapUnconfirmed</c>, <c>gestureDoubleTap</c>, <c>touchStart</c>, <c>touchMove</c>, <c>touchEnd</c>, <c>touchCancel</c>, <c>touchScrollStarted</c>, <c>pointerDown</c>, <c>pointerUp</c>, <c>pointerMove</c>,
        /// <c>pointerRawUpdate</c>, <c>pointerCancel</c> or <c>pointerCausedUaAction</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.InputEvent.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of modifiers of the event, can be <c>shift</c>, <c>control</c>, <c>ctrl</c>, <c>alt</c>, <c>meta</c>, <c>command</c>, <c>cmd</c>, <c>iskeypad</c>, <c>isautorepeat</c>, <c>leftbuttondown</c>, <c>middlebuttondown</c>,
        /// <c>rightbuttondown</c>, <c>capslock</c>, <c>numlock</c>, <c>left</c>, <c>right</c>.
        /// </summary>
        [<Erase>]
        member val modifiers: Enums.Types.InputEvent.Modifiers[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type MimeTypedBuffer
        /// <param name="mimeType">MIME type of the buffer.</param>
        /// <param name="charset">Charset of the buffer.</param>
        /// <param name="data">The actual Buffer content.</param>
        (data: Buffer, ?mimeType: string, ?charset: string) =
        /// <summary>
        /// MIME type of the buffer.
        /// </summary>
        [<Erase>]
        member val mimeType: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Charset of the buffer.
        /// </summary>
        [<Erase>]
        member val charset: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The actual Buffer content.
        /// </summary>
        [<Erase>]
        member val data: Buffer = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type MemoryUsageDetails
        /// <param name="count"></param>
        /// <param name="size"></param>
        /// <param name="liveSize"></param>
        (count: float, size: float, liveSize: float) =
        [<Erase>]
        member val count: float = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val size: float = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val liveSize: float = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// Note that all statistics are reported in Kilobytes.
    /// </summary>
    [<JS.Pojo>]
    type MemoryInfo
        /// <param name="workingSetSize">The amount of memory currently pinned to actual physical RAM.</param>
        /// <param name="peakWorkingSetSize">The maximum amount of memory that has ever been pinned to actual physical RAM.</param>
        /// <param name="privateBytes">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || The amount of memory
        /// not shared by other processes, such as JS heap or HTML content.</param>
        (
            workingSetSize: int,
            peakWorkingSetSize: int,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            ?privateBytes: int
            #endif

        ) =
        /// <summary>
        /// The amount of memory currently pinned to actual physical RAM.
        /// </summary>
        [<Erase>]
        member val workingSetSize: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The maximum amount of memory that has ever been pinned to actual physical RAM.
        /// </summary>
        [<Erase>]
        member val peakWorkingSetSize: int = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// The amount of memory not shared by other processes, such as JS heap or HTML content.
        /// </summary>
        [<Erase>]
        member val privateBytes: int = Unchecked.defaultof<_> with get, set
        #endif


    [<JS.Pojo>]
    type MediaAccessPermissionRequest
        /// <param name="securityOrigin">The security origin of the request.</param>
        /// <param name="mediaTypes">The types of media access being requested - elements can be <c>video</c> or <c>audio</c>.</param>
        /// <param name="requestingUrl">The last URL the requesting frame loaded.</param>
        /// <param name="isMainFrame">Whether the frame making the request is the main frame.</param>
        (
            requestingUrl: string,
            isMainFrame: bool,
            ?securityOrigin: string,
            ?mediaTypes: Enums.Types.MediaAccessPermissionRequest.MediaTypes[]
        ) =
        /// <summary>
        /// The security origin of the request.
        /// </summary>
        [<Erase>]
        member val securityOrigin: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The types of media access being requested - elements can be <c>video</c> or <c>audio</c>.
        /// </summary>
        [<Erase>]
        member val mediaTypes: Enums.Types.MediaAccessPermissionRequest.MediaTypes[] =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The last URL the requesting frame loaded.
        /// </summary>
        [<Erase>]
        member val requestingUrl: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the frame making the request is the main frame.
        /// </summary>
        [<Erase>]
        member val isMainFrame: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type KeyboardInputEvent
        /// <param name="``type``">The type of the event, can be <c>rawKeyDown</c>, <c>keyDown</c>, <c>keyUp</c> or <c>char</c>.</param>
        /// <param name="keyCode">The character that will be sent as the keyboard event. Should only use valid Accelerator key codes.</param>
        /// <param name="``type``">Can be <c>undefined</c>, <c>mouseDown</c>, <c>mouseUp</c>, <c>mouseMove</c>, <c>mouseEnter</c>, <c>mouseLeave</c>, <c>contextMenu</c>, <c>mouseWheel</c>, <c>rawKeyDown</c>, <c>keyDown</c>, <c>keyUp</c>, <c>char</c>, <c>gestureScrollBegin</c>, <c>gestureScrollEnd</c>, <c>gestureScrollUpdate</c>, <c>gestureFlingStart</c>, <c>gestureFlingCancel</c>,
        /// <c>gesturePinchBegin</c>, <c>gesturePinchEnd</c>, <c>gesturePinchUpdate</c>, <c>gestureTapDown</c>, <c>gestureShowPress</c>, <c>gestureTap</c>, <c>gestureTapCancel</c>, <c>gestureShortPress</c>, <c>gestureLongPress</c>, <c>gestureLongTap</c>, <c>gestureTwoFingerTap</c>, <c>gestureTapUnconfirmed</c>, <c>gestureDoubleTap</c>, <c>touchStart</c>, <c>touchMove</c>, <c>touchEnd</c>, <c>touchCancel</c>, <c>touchScrollStarted</c>, <c>pointerDown</c>, <c>pointerUp</c>,
        /// <c>pointerMove</c>, <c>pointerRawUpdate</c>, <c>pointerCancel</c> or <c>pointerCausedUaAction</c>.</param>
        /// <param name="modifiers">An array of modifiers of the event, can be <c>shift</c>, <c>control</c>, <c>ctrl</c>, <c>alt</c>, <c>meta</c>, <c>command</c>, <c>cmd</c>, <c>iskeypad</c>, <c>isautorepeat</c>, <c>leftbuttondown</c>,
        /// <c>middlebuttondown</c>, <c>rightbuttondown</c>, <c>capslock</c>, <c>numlock</c>, <c>left</c>, <c>right</c>.</param>
        (
            ``type``: Enums.Types.KeyboardInputEvent.Type,
            keyCode: string,
            ``type``: Enums.Types.InputEvent.Type,
            ?modifiers: Enums.Types.InputEvent.Modifiers[]
        ) =
        /// <summary>
        /// The type of the event, can be <c>rawKeyDown</c>, <c>keyDown</c>, <c>keyUp</c> or <c>char</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.KeyboardInputEvent.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The character that will be sent as the keyboard event. Should only use valid Accelerator key codes.
        /// </summary>
        [<Erase>]
        member val keyCode: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>undefined</c>, <c>mouseDown</c>, <c>mouseUp</c>, <c>mouseMove</c>, <c>mouseEnter</c>, <c>mouseLeave</c>, <c>contextMenu</c>, <c>mouseWheel</c>, <c>rawKeyDown</c>, <c>keyDown</c>, <c>keyUp</c>, <c>char</c>, <c>gestureScrollBegin</c>, <c>gestureScrollEnd</c>, <c>gestureScrollUpdate</c>, <c>gestureFlingStart</c>, <c>gestureFlingCancel</c>, <c>gesturePinchBegin</c>,
        /// <c>gesturePinchEnd</c>, <c>gesturePinchUpdate</c>, <c>gestureTapDown</c>, <c>gestureShowPress</c>, <c>gestureTap</c>, <c>gestureTapCancel</c>, <c>gestureShortPress</c>, <c>gestureLongPress</c>, <c>gestureLongTap</c>, <c>gestureTwoFingerTap</c>, <c>gestureTapUnconfirmed</c>, <c>gestureDoubleTap</c>, <c>touchStart</c>, <c>touchMove</c>, <c>touchEnd</c>, <c>touchCancel</c>, <c>touchScrollStarted</c>, <c>pointerDown</c>, <c>pointerUp</c>, <c>pointerMove</c>,
        /// <c>pointerRawUpdate</c>, <c>pointerCancel</c> or <c>pointerCausedUaAction</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.InputEvent.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of modifiers of the event, can be <c>shift</c>, <c>control</c>, <c>ctrl</c>, <c>alt</c>, <c>meta</c>, <c>command</c>, <c>cmd</c>, <c>iskeypad</c>, <c>isautorepeat</c>, <c>leftbuttondown</c>, <c>middlebuttondown</c>,
        /// <c>rightbuttondown</c>, <c>capslock</c>, <c>numlock</c>, <c>left</c>, <c>right</c>.
        /// </summary>
        [<Erase>]
        member val modifiers: Enums.Types.InputEvent.Modifiers[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type KeyboardEvent
        /// <param name="ctrlKey">whether the Control key was used in an accelerator to trigger the Event</param>
        /// <param name="metaKey">whether a meta key was used in an accelerator to trigger the Event</param>
        /// <param name="shiftKey">whether a Shift key was used in an accelerator to trigger the Event</param>
        /// <param name="altKey">whether an Alt key was used in an accelerator to trigger the Event</param>
        /// <param name="triggeredByAccelerator">whether an accelerator was used to trigger the event as opposed to another user gesture like mouse click</param>
        (?ctrlKey: bool, ?metaKey: bool, ?shiftKey: bool, ?altKey: bool, ?triggeredByAccelerator: bool) =
        /// <summary>
        /// whether the Control key was used in an accelerator to trigger the Event
        /// </summary>
        [<Erase>]
        member val ctrlKey: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// whether a meta key was used in an accelerator to trigger the Event
        /// </summary>
        [<Erase>]
        member val metaKey: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// whether a Shift key was used in an accelerator to trigger the Event
        /// </summary>
        [<Erase>]
        member val shiftKey: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// whether an Alt key was used in an accelerator to trigger the Event
        /// </summary>
        [<Erase>]
        member val altKey: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// whether an accelerator was used to trigger the event as opposed to another user gesture like mouse click
        /// </summary>
        [<Erase>]
        member val triggeredByAccelerator: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type JumpListItem
        /// <param name="``type``">One of the following:</param>
        /// <param name="path">Path of the file to open, should only be set if <c>type</c> is <c>file</c>.</param>
        /// <param name="program">Path of the program to execute, usually you should specify <c>process.execPath</c> which opens the current program. Should only be
        /// set if <c>type</c> is <c>task</c>.</param>
        /// <param name="args">The command line arguments when <c>program</c> is executed. Should only be set if <c>type</c> is <c>task</c>.</param>
        /// <param name="title">The text to be displayed for the item in the Jump List. Should only be set if <c>type</c> is
        /// <c>task</c>.</param>
        /// <param name="description">Description of the task (displayed in a tooltip). Should only be set if <c>type</c> is <c>task</c>. Maximum length 260
        /// characters.</param>
        /// <param name="iconPath">The absolute path to an icon to be displayed in a Jump List, which can be an arbitrary resource
        /// file that contains an icon (e.g. <c>.ico</c>, <c>.exe</c>, <c>.dll</c>). You can usually specify <c>process.execPath</c> to show the program icon.</param>
        /// <param name="iconIndex">The index of the icon in the resource file. If a resource file contains multiple icons this value can
        /// be used to specify the zero-based index of the icon that should be displayed for this task. If a resource
        /// file contains only one icon, this property should be set to zero.</param>
        /// <param name="workingDirectory">The working directory. Default is empty.</param>
        (
            ?``type``: Enums.Types.JumpListItem.Type,
            ?path: string,
            ?program: string,
            ?args: string,
            ?title: string,
            ?description: string,
            ?iconPath: string,
            ?iconIndex: float,
            ?workingDirectory: string
        ) =
        /// <summary>
        /// One of the following:
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.JumpListItem.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Path of the file to open, should only be set if <c>type</c> is <c>file</c>.
        /// </summary>
        [<Erase>]
        member val path: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Path of the program to execute, usually you should specify <c>process.execPath</c> which opens the current program. Should only be set
        /// if <c>type</c> is <c>task</c>.
        /// </summary>
        [<Erase>]
        member val program: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The command line arguments when <c>program</c> is executed. Should only be set if <c>type</c> is <c>task</c>.
        /// </summary>
        [<Erase>]
        member val args: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The text to be displayed for the item in the Jump List. Should only be set if <c>type</c> is <c>task</c>.
        /// </summary>
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Description of the task (displayed in a tooltip). Should only be set if <c>type</c> is <c>task</c>. Maximum length 260 characters.
        /// </summary>
        [<Erase>]
        member val description: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The absolute path to an icon to be displayed in a Jump List, which can be an arbitrary resource file
        /// that contains an icon (e.g. <c>.ico</c>, <c>.exe</c>, <c>.dll</c>). You can usually specify <c>process.execPath</c> to show the program icon.
        /// </summary>
        [<Erase>]
        member val iconPath: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The index of the icon in the resource file. If a resource file contains multiple icons this value can be
        /// used to specify the zero-based index of the icon that should be displayed for this task. If a resource file
        /// contains only one icon, this property should be set to zero.
        /// </summary>
        [<Erase>]
        member val iconIndex: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The working directory. Default is empty.
        /// </summary>
        [<Erase>]
        member val workingDirectory: string = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// &gt; [!NOTE] If a <c>JumpListCategory</c> object has neither the <c>type</c> nor the <c>name</c> property set then its <c>type</c> is assumed
    /// to be <c>tasks</c>. If the <c>name</c> property is set but the <c>type</c> property is omitted then the <c>type</c> is assumed
    /// to be <c>custom</c>.<br/><br/>&gt; [!NOTE] The maximum length of a Jump List item's <c>description</c> property is 260 characters. Beyond this limit,
    /// the item will not be added to the Jump List, nor will it be displayed.
    /// </summary>
    [<JS.Pojo>]
    type JumpListCategory
        /// <param name="``type``">One of the following:</param>
        /// <param name="name">Must be set if <c>type</c> is <c>custom</c>, otherwise it should be omitted.</param>
        /// <param name="items">Array of <c>JumpListItem</c> objects if <c>type</c> is <c>tasks</c> or <c>custom</c>, otherwise it should be omitted.</param>
        (?``type``: Enums.Types.JumpListCategory.Type, ?name: string, ?items: JumpListItem[]) =
        /// <summary>
        /// One of the following:
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.JumpListCategory.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Must be set if <c>type</c> is <c>custom</c>, otherwise it should be omitted.
        /// </summary>
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Array of <c>JumpListItem</c> objects if <c>type</c> is <c>tasks</c> or <c>custom</c>, otherwise it should be omitted.
        /// </summary>
        [<Erase>]
        member val items: JumpListItem[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type IpcRendererEvent
        /// <param name="sender">The <c>IpcRenderer</c> instance that emitted the event originally</param>
        /// <param name="ports">A list of MessagePorts that were transferred with this message</param>
        (sender: IpcRenderer, ports: MessagePort[]) =
        /// <summary>
        /// The <c>IpcRenderer</c> instance that emitted the event originally
        /// </summary>
        [<Erase>]
        member val sender: IpcRenderer = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A list of MessagePorts that were transferred with this message
        /// </summary>
        [<Erase>]
        member val ports: MessagePort[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type IpcMainServiceWorkerInvokeEvent
        /// <param name="``type``">Possible values include <c>service-worker</c>.</param>
        /// <param name="serviceWorker">The service worker that sent this message</param>
        /// <param name="versionId">The service worker version ID.</param>
        /// <param name="session">The <c>Session</c> instance with which the event is associated.</param>
        (
            ``type``: Enums.Types.IpcMainServiceWorkerInvokeEvent.Type,
            serviceWorker: ServiceWorkerMain,
            versionId: float,
            session: Session
        ) =
        /// <summary>
        /// Possible values include <c>service-worker</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.IpcMainServiceWorkerInvokeEvent.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The service worker that sent this message
        /// </summary>
        [<Erase>]
        member val serviceWorker: ServiceWorkerMain = Unchecked.defaultof<_> with get

        /// <summary>
        /// The service worker version ID.
        /// </summary>
        [<Erase>]
        member val versionId: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The <c>Session</c> instance with which the event is associated.
        /// </summary>
        [<Erase>]
        member val session: Session = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type IpcMainServiceWorkerEvent
        /// <param name="``type``">Possible values include <c>service-worker</c>.</param>
        /// <param name="serviceWorker">The service worker that sent this message</param>
        /// <param name="versionId">The service worker version ID.</param>
        /// <param name="session">The <c>Session</c> instance with which the event is associated.</param>
        /// <param name="returnValue">Set this to the value to be returned in a synchronous message</param>
        /// <param name="ports">A list of MessagePorts that were transferred with this message</param>
        /// <param name="reply">A function that will send an IPC message to the renderer frame that sent the original message that you
        /// are currently handling.  You should use this method to "reply" to the sent message in order to guarantee the
        /// reply will go to the correct process and frame.</param>
        (
            ``type``: Enums.Types.IpcMainServiceWorkerEvent.Type,
            serviceWorker: ServiceWorkerMain,
            versionId: float,
            session: Session,
            returnValue: obj,
            ports: MessagePortMain[],
            reply: Types.IpcMainServiceWorkerEvent.Reply
        ) =
        /// <summary>
        /// Possible values include <c>service-worker</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.IpcMainServiceWorkerEvent.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The service worker that sent this message
        /// </summary>
        [<Erase>]
        member val serviceWorker: ServiceWorkerMain = Unchecked.defaultof<_> with get

        /// <summary>
        /// The service worker version ID.
        /// </summary>
        [<Erase>]
        member val versionId: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The <c>Session</c> instance with which the event is associated.
        /// </summary>
        [<Erase>]
        member val session: Session = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Set this to the value to be returned in a synchronous message
        /// </summary>
        [<Erase>]
        member val returnValue: obj = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A list of MessagePorts that were transferred with this message
        /// </summary>
        [<Erase>]
        member val ports: MessagePortMain[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A function that will send an IPC message to the renderer frame that sent the original message that you are
        /// currently handling.  You should use this method to "reply" to the sent message in order to guarantee the reply
        /// will go to the correct process and frame.
        /// </summary>
        [<Erase>]
        member val reply: Types.IpcMainServiceWorkerEvent.Reply = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type IpcMainInvokeEvent
        /// <param name="``type``">Possible values include <c>frame</c></param>
        /// <param name="processId">The internal ID of the renderer process that sent this message</param>
        /// <param name="frameId">The ID of the renderer frame that sent this message</param>
        /// <param name="sender">Returns the <c>webContents</c> that sent the message</param>
        /// <param name="senderFrame">The frame that sent this message. May be <c>null</c> if accessed after the frame has either navigated or been
        /// destroyed.</param>
        (
            ``type``: Enums.Types.IpcMainInvokeEvent.Type,
            processId: int,
            frameId: int,
            sender: WebContents,
            senderFrame: Option<WebFrameMain>
        ) =
        /// <summary>
        /// Possible values include <c>frame</c>
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.IpcMainInvokeEvent.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The internal ID of the renderer process that sent this message
        /// </summary>
        [<Erase>]
        member val processId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The ID of the renderer frame that sent this message
        /// </summary>
        [<Erase>]
        member val frameId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Returns the <c>webContents</c> that sent the message
        /// </summary>
        [<Erase>]
        member val sender: WebContents = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The frame that sent this message. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val senderFrame: Option<WebFrameMain> = Unchecked.defaultof<_> with get

    [<JS.Pojo>]
    type IpcMainEvent
        /// <param name="``type``">Possible values include <c>frame</c></param>
        /// <param name="processId">The internal ID of the renderer process that sent this message</param>
        /// <param name="frameId">The ID of the renderer frame that sent this message</param>
        /// <param name="returnValue">Set this to the value to be returned in a synchronous message</param>
        /// <param name="sender">Returns the <c>webContents</c> that sent the message</param>
        /// <param name="senderFrame">The frame that sent this message. May be <c>null</c> if accessed after the frame has either navigated or been
        /// destroyed.</param>
        /// <param name="ports">A list of MessagePorts that were transferred with this message</param>
        /// <param name="reply">A function that will send an IPC message to the renderer frame that sent the original message that you
        /// are currently handling.  You should use this method to "reply" to the sent message in order to guarantee the
        /// reply will go to the correct process and frame.</param>
        (
            ``type``: Enums.Types.IpcMainEvent.Type,
            processId: int,
            frameId: int,
            returnValue: obj,
            sender: WebContents,
            senderFrame: Option<WebFrameMain>,
            ports: MessagePortMain[],
            reply: Types.IpcMainEvent.Reply
        ) =
        /// <summary>
        /// Possible values include <c>frame</c>
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.IpcMainEvent.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The internal ID of the renderer process that sent this message
        /// </summary>
        [<Erase>]
        member val processId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The ID of the renderer frame that sent this message
        /// </summary>
        [<Erase>]
        member val frameId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Set this to the value to be returned in a synchronous message
        /// </summary>
        [<Erase>]
        member val returnValue: obj = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Returns the <c>webContents</c> that sent the message
        /// </summary>
        [<Erase>]
        member val sender: WebContents = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The frame that sent this message. May be <c>null</c> if accessed after the frame has either navigated or been destroyed.
        /// </summary>
        [<Erase>]
        member val senderFrame: Option<WebFrameMain> = Unchecked.defaultof<_> with get

        /// <summary>
        /// A list of MessagePorts that were transferred with this message
        /// </summary>
        [<Erase>]
        member val ports: MessagePortMain[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A function that will send an IPC message to the renderer frame that sent the original message that you are
        /// currently handling.  You should use this method to "reply" to the sent message in order to guarantee the reply
        /// will go to the correct process and frame.
        /// </summary>
        [<Erase>]
        member val reply: Types.IpcMainEvent.Reply = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type InputEvent
        /// <param name="``type``">Can be <c>undefined</c>, <c>mouseDown</c>, <c>mouseUp</c>, <c>mouseMove</c>, <c>mouseEnter</c>, <c>mouseLeave</c>, <c>contextMenu</c>, <c>mouseWheel</c>, <c>rawKeyDown</c>, <c>keyDown</c>, <c>keyUp</c>, <c>char</c>, <c>gestureScrollBegin</c>, <c>gestureScrollEnd</c>, <c>gestureScrollUpdate</c>, <c>gestureFlingStart</c>, <c>gestureFlingCancel</c>,
        /// <c>gesturePinchBegin</c>, <c>gesturePinchEnd</c>, <c>gesturePinchUpdate</c>, <c>gestureTapDown</c>, <c>gestureShowPress</c>, <c>gestureTap</c>, <c>gestureTapCancel</c>, <c>gestureShortPress</c>, <c>gestureLongPress</c>, <c>gestureLongTap</c>, <c>gestureTwoFingerTap</c>, <c>gestureTapUnconfirmed</c>, <c>gestureDoubleTap</c>, <c>touchStart</c>, <c>touchMove</c>, <c>touchEnd</c>, <c>touchCancel</c>, <c>touchScrollStarted</c>, <c>pointerDown</c>, <c>pointerUp</c>,
        /// <c>pointerMove</c>, <c>pointerRawUpdate</c>, <c>pointerCancel</c> or <c>pointerCausedUaAction</c>.</param>
        /// <param name="modifiers">An array of modifiers of the event, can be <c>shift</c>, <c>control</c>, <c>ctrl</c>, <c>alt</c>, <c>meta</c>, <c>command</c>, <c>cmd</c>, <c>iskeypad</c>, <c>isautorepeat</c>, <c>leftbuttondown</c>,
        /// <c>middlebuttondown</c>, <c>rightbuttondown</c>, <c>capslock</c>, <c>numlock</c>, <c>left</c>, <c>right</c>.</param>
        (``type``: Enums.Types.InputEvent.Type, ?modifiers: Enums.Types.InputEvent.Modifiers[]) =
        /// <summary>
        /// Can be <c>undefined</c>, <c>mouseDown</c>, <c>mouseUp</c>, <c>mouseMove</c>, <c>mouseEnter</c>, <c>mouseLeave</c>, <c>contextMenu</c>, <c>mouseWheel</c>, <c>rawKeyDown</c>, <c>keyDown</c>, <c>keyUp</c>, <c>char</c>, <c>gestureScrollBegin</c>, <c>gestureScrollEnd</c>, <c>gestureScrollUpdate</c>, <c>gestureFlingStart</c>, <c>gestureFlingCancel</c>, <c>gesturePinchBegin</c>,
        /// <c>gesturePinchEnd</c>, <c>gesturePinchUpdate</c>, <c>gestureTapDown</c>, <c>gestureShowPress</c>, <c>gestureTap</c>, <c>gestureTapCancel</c>, <c>gestureShortPress</c>, <c>gestureLongPress</c>, <c>gestureLongTap</c>, <c>gestureTwoFingerTap</c>, <c>gestureTapUnconfirmed</c>, <c>gestureDoubleTap</c>, <c>touchStart</c>, <c>touchMove</c>, <c>touchEnd</c>, <c>touchCancel</c>, <c>touchScrollStarted</c>, <c>pointerDown</c>, <c>pointerUp</c>, <c>pointerMove</c>,
        /// <c>pointerRawUpdate</c>, <c>pointerCancel</c> or <c>pointerCausedUaAction</c>.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.Types.InputEvent.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An array of modifiers of the event, can be <c>shift</c>, <c>control</c>, <c>ctrl</c>, <c>alt</c>, <c>meta</c>, <c>command</c>, <c>cmd</c>, <c>iskeypad</c>, <c>isautorepeat</c>, <c>leftbuttondown</c>, <c>middlebuttondown</c>,
        /// <c>rightbuttondown</c>, <c>capslock</c>, <c>numlock</c>, <c>left</c>, <c>right</c>.
        /// </summary>
        [<Erase>]
        member val modifiers: Enums.Types.InputEvent.Modifiers[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type HIDDevice
        /// <param name="deviceId">Unique identifier for the device.</param>
        /// <param name="name">Name of the device.</param>
        /// <param name="vendorId">The USB vendor ID.</param>
        /// <param name="productId">The USB product ID.</param>
        /// <param name="serialNumber">The USB device serial number.</param>
        /// <param name="guid">Unique identifier for the HID interface.  A device may have multiple HID interfaces.</param>
        /// <param name="collections">an array of report formats. See MDN documentation for more.</param>
        (
            deviceId: string,
            name: string,
            vendorId: int,
            productId: int,
            collections: Types.HIDDevice.Collections[],
            ?serialNumber: string,
            ?guid: string
        ) =
        /// <summary>
        /// Unique identifier for the device.
        /// </summary>
        [<Erase>]
        member val deviceId: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Name of the device.
        /// </summary>
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB vendor ID.
        /// </summary>
        [<Erase>]
        member val vendorId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB product ID.
        /// </summary>
        [<Erase>]
        member val productId: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The USB device serial number.
        /// </summary>
        [<Erase>]
        member val serialNumber: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Unique identifier for the HID interface.  A device may have multiple HID interfaces.
        /// </summary>
        [<Erase>]
        member val guid: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// an array of report formats. See MDN documentation for more.
        /// </summary>
        [<Erase>]
        member val collections: Types.HIDDevice.Collections[] = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// Possible values:<br/><br/>* <c>disabled_software</c> - Software only. Hardware acceleration disabled (yellow)<br/>* <c>disabled_off</c> - Disabled (red)<br/>* <c>disabled_off_ok</c> - Disabled (yellow)<br/>* <c>unavailable_software</c> -
    /// Software only, hardware acceleration unavailable (yellow)<br/>* <c>unavailable_off</c> - Unavailable (red)<br/>* <c>unavailable_off_ok</c> - Unavailable (yellow)<br/>* <c>enabled_readback</c> - Hardware accelerated but at
    /// reduced performance (yellow)<br/>* <c>enabled_force</c> - Hardware accelerated on all pages (green)<br/>* <c>enabled</c> - Hardware accelerated (green)<br/>* <c>enabled_on</c> - Enabled (green)<br/>*
    /// <c>enabled_force_on</c> - Force enabled (green)
    /// </summary>
    [<JS.Pojo>]
    type GPUFeatureStatus
        /// <param name="2dCanvas">Canvas.</param>
        /// <param name="flash_3d">Flash.</param>
        /// <param name="flashStage3d">Flash Stage3D.</param>
        /// <param name="flashStage3dBaseline">Flash Stage3D Baseline profile.</param>
        /// <param name="gpuCompositing">Compositing.</param>
        /// <param name="multipleRasterThreads">Multiple Raster Threads.</param>
        /// <param name="nativeGpuMemoryBuffers">Native GpuMemoryBuffers.</param>
        /// <param name="rasterization">Rasterization.</param>
        /// <param name="videoDecode">Video Decode.</param>
        /// <param name="videoEncode">Video Encode.</param>
        /// <param name="vpxDecode">VPx Video Decode.</param>
        /// <param name="webgl">WebGL.</param>
        /// <param name="webgl2">WebGL2.</param>
        (
            2dCanvas: string,
            flash_3d: string,
            flashStage3d: string,
            flashStage3dBaseline: string,
            gpuCompositing: string,
            multipleRasterThreads: string,
            nativeGpuMemoryBuffers: string,
            rasterization: string,
            videoDecode: string,
            videoEncode: string,
            vpxDecode: string,
            webgl: string,
            webgl2: string
        ) =
        /// <summary>
        /// Canvas.
        /// </summary>
        [<Erase; Emit("$0.2d_canvas{{ = $1 }}")>]
        member _.2dCanvas
            with get (): string = Unchecked.defaultof<_>
            and set (value: string) = ()

        /// <summary>
        /// Flash.
        /// </summary>
        [<Erase>]
        member val flash_3d: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Flash Stage3D.
        /// </summary>
        [<Erase; Emit("$0.flash_stage3d{{ = $1 }}")>]
        member _.flashStage3d
            with get (): string = Unchecked.defaultof<_>
            and set (value: string) = ()

        /// <summary>
        /// Flash Stage3D Baseline profile.
        /// </summary>
        [<Erase; Emit("$0.flash_stage3d_baseline{{ = $1 }}")>]
        member _.flashStage3dBaseline
            with get (): string = Unchecked.defaultof<_>
            and set (value: string) = ()

        /// <summary>
        /// Compositing.
        /// </summary>
        [<Erase; Emit("$0.gpu_compositing{{ = $1 }}")>]
        member _.gpuCompositing
            with get (): string = Unchecked.defaultof<_>
            and set (value: string) = ()

        /// <summary>
        /// Multiple Raster Threads.
        /// </summary>
        [<Erase; Emit("$0.multiple_raster_threads{{ = $1 }}")>]
        member _.multipleRasterThreads
            with get (): string = Unchecked.defaultof<_>
            and set (value: string) = ()

        /// <summary>
        /// Native GpuMemoryBuffers.
        /// </summary>
        [<Erase; Emit("$0.native_gpu_memory_buffers{{ = $1 }}")>]
        member _.nativeGpuMemoryBuffers
            with get (): string = Unchecked.defaultof<_>
            and set (value: string) = ()

        /// <summary>
        /// Rasterization.
        /// </summary>
        [<Erase>]
        member val rasterization: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Video Decode.
        /// </summary>
        [<Erase; Emit("$0.video_decode{{ = $1 }}")>]
        member _.videoDecode
            with get (): string = Unchecked.defaultof<_>
            and set (value: string) = ()

        /// <summary>
        /// Video Encode.
        /// </summary>
        [<Erase; Emit("$0.video_encode{{ = $1 }}")>]
        member _.videoEncode
            with get (): string = Unchecked.defaultof<_>
            and set (value: string) = ()

        /// <summary>
        /// VPx Video Decode.
        /// </summary>
        [<Erase; Emit("$0.vpx_decode{{ = $1 }}")>]
        member _.vpxDecode
            with get (): string = Unchecked.defaultof<_>
            and set (value: string) = ()

        /// <summary>
        /// WebGL.
        /// </summary>
        [<Erase>]
        member val webgl: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// WebGL2.
        /// </summary>
        [<Erase>]
        member val webgl2: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type FilesystemPermissionRequest
        /// <param name="filePath">The path of the <c>fileSystem</c> request.</param>
        /// <param name="isDirectory">Whether the <c>fileSystem</c> request is a directory.</param>
        /// <param name="fileAccessType">The access type of the <c>fileSystem</c> request. Can be <c>writable</c> or <c>readable</c>.</param>
        /// <param name="requestingUrl">The last URL the requesting frame loaded.</param>
        /// <param name="isMainFrame">Whether the frame making the request is the main frame.</param>
        (
            requestingUrl: string,
            isMainFrame: bool,
            ?filePath: string,
            ?isDirectory: bool,
            ?fileAccessType: Enums.Types.FilesystemPermissionRequest.FileAccessType
        ) =
        /// <summary>
        /// The path of the <c>fileSystem</c> request.
        /// </summary>
        [<Erase>]
        member val filePath: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the <c>fileSystem</c> request is a directory.
        /// </summary>
        [<Erase>]
        member val isDirectory: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The access type of the <c>fileSystem</c> request. Can be <c>writable</c> or <c>readable</c>.
        /// </summary>
        [<Erase>]
        member val fileAccessType: Enums.Types.FilesystemPermissionRequest.FileAccessType =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The last URL the requesting frame loaded.
        /// </summary>
        [<Erase>]
        member val requestingUrl: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the frame making the request is the main frame.
        /// </summary>
        [<Erase>]
        member val isMainFrame: bool = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type FilePathWithHeaders
        /// <param name="path">The path to the file to send.</param>
        /// <param name="headers">Additional headers to be sent.</param>
        (path: string, ?headers: Record<string, string>) =
        /// <summary>
        /// The path to the file to send.
        /// </summary>
        [<Erase>]
        member val path: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Additional headers to be sent.
        /// </summary>
        [<Erase>]
        member val headers: Record<string, string> = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type FileFilter
        /// <param name="name"></param>
        /// <param name="extensions"></param>
        (name: string, extensions: string[]) =
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val extensions: string[] = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type Extension
        /// <param name="id"></param>
        /// <param name="manifest">Copy of the extension's manifest data.</param>
        /// <param name="name"></param>
        /// <param name="path">The extension's file path.</param>
        /// <param name="version"></param>
        /// <param name="url">The extension's <c>chrome-extension://</c> URL.</param>
        (id: string, manifest: obj, name: string, path: string, version: string, url: string) =
        [<Erase>]
        member val id: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Copy of the extension's manifest data.
        /// </summary>
        [<Erase>]
        member val manifest: obj = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The extension's file path.
        /// </summary>
        [<Erase>]
        member val path: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val version: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The extension's <c>chrome-extension://</c> URL.
        /// </summary>
        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type ExtensionInfo
        /// <param name="name"></param>
        /// <param name="version"></param>
        (name: string, version: string) =
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val version: string = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// The <c>Display</c> object represents a physical display connected to the system. A fake <c>Display</c> may exist on a headless system,
    /// or a <c>Display</c> may correspond to a remote, virtual display.
    /// </summary>
    [<JS.Pojo>]
    type Display
        /// <param name="accelerometerSupport">Can be <c>available</c>, <c>unavailable</c>, <c>unknown</c>.</param>
        /// <param name="bounds">the bounds of the display in DIP points.</param>
        /// <param name="colorDepth">The number of bits per pixel.</param>
        /// <param name="colorSpace"> represent a color space (three-dimensional object which contains all realizable color combinations) for the purpose of color conversions.</param>
        /// <param name="depthPerComponent">The number of bits per color component.</param>
        /// <param name="detected"><c>true</c> if the display is detected by the system.</param>
        /// <param name="displayFrequency">The display refresh rate.</param>
        /// <param name="id">Unique identifier associated with the display. A value of of -1 means the display is invalid or the correct
        /// <c>id</c> is not yet known, and a value of -10 means the display is a virtual display assigned to a
        /// unified desktop.</param>
        /// <param name="``internal``"><c>true</c> for an internal display and <c>false</c> for an external display.</param>
        /// <param name="label">User-friendly label, determined by the platform.</param>
        /// <param name="maximumCursorSize">Maximum cursor size in native pixels.</param>
        /// <param name="nativeOrigin">Returns the display's origin in pixel coordinates. Only available on windowing systems like X11 that position displays in pixel
        /// coordinates.</param>
        /// <param name="rotation">Can be 0, 90, 180, 270, represents screen rotation in clock-wise degrees.</param>
        /// <param name="scaleFactor">Output device's pixel scale factor.</param>
        /// <param name="touchSupport">Can be <c>available</c>, <c>unavailable</c>, <c>unknown</c>.</param>
        /// <param name="monochrome">Whether or not the display is a monochrome display.</param>
        /// <param name="size"></param>
        /// <param name="workArea">the work area of the display in DIP points.</param>
        /// <param name="workAreaSize">The size of the work area.</param>
        (
            accelerometerSupport: Enums.Types.Display.AccelerometerSupport,
            bounds: Rectangle,
            colorDepth: float,
            colorSpace: string,
            depthPerComponent: float,
            detected: bool,
            displayFrequency: float,
            id: float,
            ``internal``: bool,
            label: string,
            maximumCursorSize: Size,
            nativeOrigin: Point,
            rotation: float,
            scaleFactor: float,
            touchSupport: Enums.Types.Display.TouchSupport,
            monochrome: bool,
            size: Size,
            workArea: Rectangle,
            workAreaSize: Size
        ) =
        /// <summary>
        /// Can be <c>available</c>, <c>unavailable</c>, <c>unknown</c>.
        /// </summary>
        [<Erase>]
        member val accelerometerSupport: Enums.Types.Display.AccelerometerSupport = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// the bounds of the display in DIP points.
        /// </summary>
        [<Erase>]
        member val bounds: Rectangle = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The number of bits per pixel.
        /// </summary>
        [<Erase>]
        member val colorDepth: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        ///  represent a color space (three-dimensional object which contains all realizable color combinations) for the purpose of color conversions.
        /// </summary>
        [<Erase>]
        member val colorSpace: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The number of bits per color component.
        /// </summary>
        [<Erase>]
        member val depthPerComponent: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// <c>true</c> if the display is detected by the system.
        /// </summary>
        [<Erase>]
        member val detected: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The display refresh rate.
        /// </summary>
        [<Erase>]
        member val displayFrequency: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Unique identifier associated with the display. A value of of -1 means the display is invalid or the correct <c>id</c>
        /// is not yet known, and a value of -10 means the display is a virtual display assigned to a unified
        /// desktop.
        /// </summary>
        [<Erase>]
        member val id: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// <c>true</c> for an internal display and <c>false</c> for an external display.
        /// </summary>
        [<Erase>]
        member val ``internal``: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// User-friendly label, determined by the platform.
        /// </summary>
        [<Erase>]
        member val label: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Maximum cursor size in native pixels.
        /// </summary>
        [<Erase>]
        member val maximumCursorSize: Size = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Returns the display's origin in pixel coordinates. Only available on windowing systems like X11 that position displays in pixel coordinates.
        /// </summary>
        [<Erase>]
        member val nativeOrigin: Point = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be 0, 90, 180, 270, represents screen rotation in clock-wise degrees.
        /// </summary>
        [<Erase>]
        member val rotation: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Output device's pixel scale factor.
        /// </summary>
        [<Erase>]
        member val scaleFactor: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Can be <c>available</c>, <c>unavailable</c>, <c>unknown</c>.
        /// </summary>
        [<Erase>]
        member val touchSupport: Enums.Types.Display.TouchSupport = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether or not the display is a monochrome display.
        /// </summary>
        [<Erase>]
        member val monochrome: bool = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val size: Size = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// the work area of the display in DIP points.
        /// </summary>
        [<Erase>]
        member val workArea: Rectangle = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The size of the work area.
        /// </summary>
        [<Erase>]
        member val workAreaSize: Size = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type DesktopCapturerSource
        /// <param name="id">The identifier of a window or screen that can be used as a <c>chromeMediaSourceId</c> constraint when calling <c>navigator.getUserMedia</c>. The
        /// format of the identifier will be <c>window:XX:YY</c> or <c>screen:ZZ:0</c>. XX is the windowID/handle. YY is 1 for the current process,
        /// and 0 for all others. ZZ is a sequential number that represents the screen, and it does not equal to
        /// the index in the source's name.</param>
        /// <param name="name">A screen source will be named either <c>Entire Screen</c> or <c>Screen &lt;index&gt;</c>, while the name of a window source
        /// will match the window title.</param>
        /// <param name="thumbnail">A thumbnail image. **Note:** There is no guarantee that the size of the thumbnail is the same as the
        /// <c>thumbnailSize</c> specified in the <c>options</c> passed to <c>desktopCapturer.getSources</c>. The actual size depends on the scale of the screen or window.</param>
        /// <param name="displayId">A unique identifier that will correspond to the <c>id</c> of the matching Display returned by the Screen API. On
        /// some platforms, this is equivalent to the <c>XX</c> portion of the <c>id</c> field above and on others it will differ.
        /// It will be an empty string if not available.</param>
        /// <param name="appIcon">An icon image of the application that owns the window or null if the source has a type screen.
        /// The size of the icon is not known in advance and depends on what the application provides.</param>
        (id: string, name: string, thumbnail: NativeImage, displayId: string, appIcon: NativeImage) =
        /// <summary>
        /// The identifier of a window or screen that can be used as a <c>chromeMediaSourceId</c> constraint when calling <c>navigator.getUserMedia</c>. The format
        /// of the identifier will be <c>window:XX:YY</c> or <c>screen:ZZ:0</c>. XX is the windowID/handle. YY is 1 for the current process, and
        /// 0 for all others. ZZ is a sequential number that represents the screen, and it does not equal to the
        /// index in the source's name.
        /// </summary>
        [<Erase>]
        member val id: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A screen source will be named either <c>Entire Screen</c> or <c>Screen &lt;index&gt;</c>, while the name of a window source will
        /// match the window title.
        /// </summary>
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A thumbnail image. **Note:** There is no guarantee that the size of the thumbnail is the same as the <c>thumbnailSize</c>
        /// specified in the <c>options</c> passed to <c>desktopCapturer.getSources</c>. The actual size depends on the scale of the screen or window.
        /// </summary>
        [<Erase>]
        member val thumbnail: NativeImage = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A unique identifier that will correspond to the <c>id</c> of the matching Display returned by the Screen API. On some
        /// platforms, this is equivalent to the <c>XX</c> portion of the <c>id</c> field above and on others it will differ. It
        /// will be an empty string if not available.
        /// </summary>
        [<Erase; Emit("$0.display_id{{ = $1 }}")>]
        member _.displayId
            with get (): string = Unchecked.defaultof<_>
            and set (value: string) = ()

        /// <summary>
        /// An icon image of the application that owns the window or null if the source has a type screen. The
        /// size of the icon is not known in advance and depends on what the application provides.
        /// </summary>
        [<Erase>]
        member val appIcon: NativeImage = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type CustomScheme
        /// <param name="scheme">Custom schemes to be registered with options.</param>
        /// <param name="privileges"></param>
        (scheme: string, ?privileges: Types.CustomScheme.Privileges) =
        /// <summary>
        /// Custom schemes to be registered with options.
        /// </summary>
        [<Erase>]
        member val scheme: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val privileges: Types.CustomScheme.Privileges = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type CrashReport
        /// <param name="date"></param>
        /// <param name="id"></param>
        (date: System.DateTime, id: string) =
        [<Erase>]
        member val date: System.DateTime = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val id: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type CPUUsage
        /// <param name="percentCPUUsage">Percentage of CPU used since the last call to getCPUUsage. First call returns 0.</param>
        /// <param name="cumulativeCPUUsage">Total seconds of CPU time used since process startup.</param>
        /// <param name="idleWakeupsPerSecond">The number of average idle CPU wakeups per second since the last call to getCPUUsage. First call returns 0.
        /// Will always return 0 on Windows.</param>
        (percentCPUUsage: float, idleWakeupsPerSecond: float, ?cumulativeCPUUsage: float) =
        /// <summary>
        /// Percentage of CPU used since the last call to getCPUUsage. First call returns 0.
        /// </summary>
        [<Erase>]
        member val percentCPUUsage: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Total seconds of CPU time used since process startup.
        /// </summary>
        [<Erase>]
        member val cumulativeCPUUsage: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The number of average idle CPU wakeups per second since the last call to getCPUUsage. First call returns 0. Will
        /// always return 0 on Windows.
        /// </summary>
        [<Erase>]
        member val idleWakeupsPerSecond: float = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type Cookie
        /// <param name="name">The name of the cookie.</param>
        /// <param name="value">The value of the cookie.</param>
        /// <param name="domain">The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for
        /// subdomains.</param>
        /// <param name="hostOnly">Whether the cookie is a host-only cookie; this will only be <c>true</c> if no domain was passed.</param>
        /// <param name="path">The path of the cookie.</param>
        /// <param name="secure">Whether the cookie is marked as secure.</param>
        /// <param name="httpOnly">Whether the cookie is marked as HTTP only.</param>
        /// <param name="session">Whether the cookie is a session cookie or a persistent cookie with an expiration date.</param>
        /// <param name="expirationDate">The expiration date of the cookie as the number of seconds since the UNIX epoch. Not provided for session
        /// cookies.</param>
        /// <param name="sameSite">The Same Site policy applied to this cookie.  Can be <c>unspecified</c>, <c>no_restriction</c>, <c>lax</c> or <c>strict</c>.</param>
        (
            name: string,
            value: string,
            sameSite: Enums.Types.Cookie.SameSite,
            ?domain: string,
            ?hostOnly: bool,
            ?path: string,
            ?secure: bool,
            ?httpOnly: bool,
            ?session: bool,
            ?expirationDate: double
        ) =
        /// <summary>
        /// The name of the cookie.
        /// </summary>
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The value of the cookie.
        /// </summary>
        [<Erase>]
        member val value: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for subdomains.
        /// </summary>
        [<Erase>]
        member val domain: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the cookie is a host-only cookie; this will only be <c>true</c> if no domain was passed.
        /// </summary>
        [<Erase>]
        member val hostOnly: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The path of the cookie.
        /// </summary>
        [<Erase>]
        member val path: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the cookie is marked as secure.
        /// </summary>
        [<Erase>]
        member val secure: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the cookie is marked as HTTP only.
        /// </summary>
        [<Erase>]
        member val httpOnly: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the cookie is a session cookie or a persistent cookie with an expiration date.
        /// </summary>
        [<Erase>]
        member val session: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The expiration date of the cookie as the number of seconds since the UNIX epoch. Not provided for session cookies.
        /// </summary>
        [<Erase>]
        member val expirationDate: double = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The Same Site policy applied to this cookie.  Can be <c>unspecified</c>, <c>no_restriction</c>, <c>lax</c> or <c>strict</c>.
        /// </summary>
        [<Erase>]
        member val sameSite: Enums.Types.Cookie.SameSite = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type Certificate
        /// <param name="data">PEM encoded data</param>
        /// <param name="issuer">Issuer principal</param>
        /// <param name="issuerName">Issuer's Common Name</param>
        /// <param name="issuerCert">Issuer certificate (if not self-signed)</param>
        /// <param name="subject">Subject principal</param>
        /// <param name="subjectName">Subject's Common Name</param>
        /// <param name="serialNumber">Hex value represented string</param>
        /// <param name="validStart">Start date of the certificate being valid in seconds</param>
        /// <param name="validExpiry">End date of the certificate being valid in seconds</param>
        /// <param name="fingerprint">Fingerprint of the certificate</param>
        (
            data: string,
            issuer: CertificatePrincipal,
            issuerName: string,
            issuerCert: Certificate,
            subject: CertificatePrincipal,
            subjectName: string,
            serialNumber: string,
            validStart: float,
            validExpiry: float,
            fingerprint: string
        ) =
        /// <summary>
        /// PEM encoded data
        /// </summary>
        [<Erase>]
        member val data: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Issuer principal
        /// </summary>
        [<Erase>]
        member val issuer: CertificatePrincipal = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Issuer's Common Name
        /// </summary>
        [<Erase>]
        member val issuerName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Issuer certificate (if not self-signed)
        /// </summary>
        [<Erase>]
        member val issuerCert: Certificate = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Subject principal
        /// </summary>
        [<Erase>]
        member val subject: CertificatePrincipal = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Subject's Common Name
        /// </summary>
        [<Erase>]
        member val subjectName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Hex value represented string
        /// </summary>
        [<Erase>]
        member val serialNumber: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Start date of the certificate being valid in seconds
        /// </summary>
        [<Erase>]
        member val validStart: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// End date of the certificate being valid in seconds
        /// </summary>
        [<Erase>]
        member val validExpiry: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Fingerprint of the certificate
        /// </summary>
        [<Erase>]
        member val fingerprint: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type CertificatePrincipal
        /// <param name="commonName">Common Name.</param>
        /// <param name="organizations">Organization names.</param>
        /// <param name="organizationUnits">Organization Unit names.</param>
        /// <param name="locality">Locality.</param>
        /// <param name="state">State or province.</param>
        /// <param name="country">Country or region.</param>
        (
            commonName: string,
            organizations: string[],
            organizationUnits: string[],
            locality: string,
            state: string,
            country: string
        ) =
        /// <summary>
        /// Common Name.
        /// </summary>
        [<Erase>]
        member val commonName: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Organization names.
        /// </summary>
        [<Erase>]
        member val organizations: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Organization Unit names.
        /// </summary>
        [<Erase>]
        member val organizationUnits: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Locality.
        /// </summary>
        [<Erase>]
        member val locality: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// State or province.
        /// </summary>
        [<Erase>]
        member val state: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Country or region.
        /// </summary>
        [<Erase>]
        member val country: string = Unchecked.defaultof<_> with get, set

    [<JS.Pojo>]
    type BrowserWindowConstructorOptions
        /// <param name="webPreferences">Settings of web page's features.</param>
        /// <param name="paintWhenInitiallyHidden">Whether the renderer should be active when <c>show</c> is <c>false</c> and it has just been created.  In order
        /// for <c>document.visibilityState</c> to work correctly on first load with <c>show: false</c> you should set this to <c>false</c>.  Setting this
        /// to <c>false</c> will cause the <c>ready-to-show</c> event to not fire.  Default is <c>true</c>.</param>
        /// <param name="width">Window's width in pixels. Default is <c>800</c>.</param>
        /// <param name="height">Window's height in pixels. Default is <c>600</c>.</param>
        /// <param name="x">(**required** if y is used) Window's left offset from screen. Default is to center the window.</param>
        /// <param name="y">(**required** if x is used) Window's top offset from screen. Default is to center the window.</param>
        /// <param name="useContentSize">The <c>width</c> and <c>height</c> would be used as web page's size, which means the actual window's size will include
        /// window frame's size and be slightly larger. Default is <c>false</c>.</param>
        /// <param name="center">Show window in the center of the screen. Default is <c>false</c>.</param>
        /// <param name="minWidth">Window's minimum width. Default is <c>0</c>.</param>
        /// <param name="minHeight">Window's minimum height. Default is <c>0</c>.</param>
        /// <param name="maxWidth">Window's maximum width. Default is no limit.</param>
        /// <param name="maxHeight">Window's maximum height. Default is no limit.</param>
        /// <param name="resizable">Whether window is resizable. Default is <c>true</c>.</param>
        /// <param name="movable">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether window is movable.
        /// This is not implemented on Linux. Default is <c>true</c>.</param>
        /// <param name="minimizable">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether window is minimizable.
        /// This is not implemented on Linux. Default is <c>true</c>.</param>
        /// <param name="maximizable">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether window is maximizable.
        /// This is not implemented on Linux. Default is <c>true</c>.</param>
        /// <param name="closable">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether window is closable.
        /// This is not implemented on Linux. Default is <c>true</c>.</param>
        /// <param name="focusable">Whether the window can be focused. Default is <c>true</c>. On Windows setting <c>focusable: false</c> also implies setting <c>skipTaskbar: true</c>.
        /// On Linux setting <c>focusable: false</c> makes the window stop interacting with wm, so the window will always stay on top
        /// in all workspaces.</param>
        /// <param name="alwaysOnTop">Whether the window should always stay on top of other windows. Default is <c>false</c>.</param>
        /// <param name="fullscreen">Whether the window should show in fullscreen. When explicitly set to <c>false</c> the fullscreen button will be hidden or
        /// disabled on macOS. Default is <c>false</c>.</param>
        /// <param name="fullscreenable">Whether the window can be put into fullscreen mode. On macOS, also whether the maximize/zoom button should toggle full
        /// screen mode or maximize window. Default is <c>true</c>.</param>
        /// <param name="simpleFullscreen">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Use pre-Lion fullscreen on
        /// macOS. Default is <c>false</c>.</param>
        /// <param name="skipTaskbar">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether to show the
        /// window in taskbar. Default is <c>false</c>.</param>
        /// <param name="hiddenInMissionControl">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Whether window should be
        /// hidden when the user toggles into mission control.</param>
        /// <param name="kiosk">Whether the window is in kiosk mode. Default is <c>false</c>.</param>
        /// <param name="title">Default window title. Default is <c>"Electron"</c>. If the HTML tag <c>&lt;title&gt;</c> is defined in the HTML file loaded by
        /// <c>loadURL()</c>, this property will be ignored.</param>
        /// <param name="icon">The window icon. On Windows it is recommended to use <c>ICO</c> icons to get best visual effects, you can
        /// also leave it undefined so the executable's icon will be used.</param>
        /// <param name="show">Whether window should be shown when created. Default is <c>true</c>.</param>
        /// <param name="frame">Specify <c>false</c> to create a frameless window. Default is <c>true</c>.</param>
        /// <param name="parent">Specify parent window. Default is <c>null</c>.</param>
        /// <param name="modal">Whether this is a modal window. This only works when the window is a child window. Default is <c>false</c>.</param>
        /// <param name="acceptFirstMouse">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Whether clicking an inactive
        /// window will also click through to the web contents. Default is <c>false</c> on macOS. This option is not configurable on
        /// other platforms.</param>
        /// <param name="disableAutoHideCursor">Whether to hide cursor when typing. Default is <c>false</c>.</param>
        /// <param name="autoHideMenuBar">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || Auto hide the menu
        /// bar unless the <c>Alt</c> key is pressed. Default is <c>false</c>.</param>
        /// <param name="enableLargerThanScreen">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Enable the window to
        /// be resized larger than screen. Only relevant for macOS, as other OSes allow larger-than-screen windows by default. Default is <c>false</c>.</param>
        /// <param name="backgroundColor">The window's background color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. Alpha in #AARRGGBB format
        /// is supported if <c>transparent</c> is set to <c>true</c>. Default is <c>#FFF</c> (white). See win.setBackgroundColor for more information.</param>
        /// <param name="hasShadow">Whether window should have a shadow. Default is <c>true</c>.</param>
        /// <param name="opacity">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Set the initial opacity
        /// of the window, between 0.0 (fully transparent) and 1.0 (fully opaque). This is only implemented on Windows and macOS.</param>
        /// <param name="darkTheme">Forces using dark theme for the window, only works on some GTK+3 desktop environments. Default is <c>false</c>.</param>
        /// <param name="transparent">Makes the window transparent. Default is <c>false</c>. On Windows, does not work unless the window is frameless.</param>
        /// <param name="``type``">The type of window, default is normal window. See more about this below.</param>
        /// <param name="visualEffectState">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Specify how the material
        /// appearance should reflect window activity state on macOS. Must be used with the <c>vibrancy</c> property. Possible values are:</param>
        /// <param name="titleBarStyle">The style of window title bar. Default is <c>default</c>. Possible values are:</param>
        /// <param name="titleBarOverlay"> When using a frameless window in conjunction with <c>win.setWindowButtonVisibility(true)</c> on macOS or using a <c>titleBarStyle</c> so that the
        /// standard window controls ("traffic lights" on macOS) are visible, this property enables the Window Controls Overlay JavaScript APIs and CSS
        /// Environment Variables. Specifying <c>true</c> will result in an overlay with default system colors. Default is <c>false</c>.</param>
        /// <param name="accentColor">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || The accent color for
        /// the window. By default, follows user preference in System Settings. Set to <c>false</c> to explicitly disable, or set the color
        /// in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. Alpha values will be ignored.</param>
        /// <param name="trafficLightPosition">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Set a custom position
        /// for the traffic light buttons in frameless windows.</param>
        /// <param name="roundedCorners">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether frameless window should
        /// have rounded corners. Default is <c>true</c>. Setting this property to <c>false</c> will prevent the window from being fullscreenable on macOS.
        /// On Windows versions older than Windows 11 Build 22000 this property has no effect, and frameless windows will not have
        /// rounded corners.</param>
        /// <param name="thickFrame">Use <c>WS_THICKFRAME</c> style for frameless windows on Windows, which adds standard window frame. Setting it to <c>false</c> will remove
        /// window shadow and window animations. Default is <c>true</c>.</param>
        /// <param name="vibrancy">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Add a type of
        /// vibrancy effect to the window, only on macOS. Can be <c>appearance-based</c>, <c>titlebar</c>, <c>selection</c>, <c>menu</c>, <c>popover</c>, <c>sidebar</c>, <c>header</c>, <c>sheet</c>, <c>window</c>, <c>hud</c>,
        /// <c>fullscreen-ui</c>, <c>tooltip</c>, <c>content</c>, <c>under-window</c>, or <c>under-page</c>.</param>
        /// <param name="backgroundMaterial">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || Set the window's system-drawn
        /// background material, including behind the non-client area. Can be <c>auto</c>, <c>none</c>, <c>mica</c>, <c>acrylic</c> or <c>tabbed</c>. See win.setBackgroundMaterial for more information.</param>
        /// <param name="zoomToPageWidth">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Controls the behavior on
        /// macOS when option-clicking the green stoplight button on the toolbar or by clicking the Window &gt; Zoom menu item. If
        /// <c>true</c>, the window will grow to the preferred width of the web page when zoomed, <c>false</c> will cause it to
        /// zoom to the width of the screen. This will also affect the behavior when calling <c>maximize()</c> directly. Default is <c>false</c>.</param>
        /// <param name="tabbingIdentifier">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Tab group name, allows
        /// opening the window as a native tab. Windows with the same tabbing identifier will be grouped together. This also adds
        /// a native new tab button to your window's tab bar and allows your <c>app</c> and window to receive the <c>new-window-for-tab</c>
        /// event.</param>
        (
            ?webPreferences: WebPreferences,
            ?paintWhenInitiallyHidden: bool,
            ?width: int,
            ?height: int,
            ?x: int,
            ?y: int,
            ?useContentSize: bool,
            ?center: bool,
            ?minWidth: int,
            ?minHeight: int,
            ?maxWidth: int,
            ?maxHeight: int,
            ?resizable: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?movable: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?minimizable: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?maximizable: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?closable: bool,
            #endif

            ?focusable: bool,
            ?alwaysOnTop: bool,
            ?fullscreen: bool,
            ?fullscreenable: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?simpleFullscreen: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?skipTaskbar: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?hiddenInMissionControl: bool,
            #endif

            ?kiosk: bool,
            ?title: string,
            ?icon: U2<NativeImage, string>,
            ?show: bool,
            ?frame: bool,
            ?parent: BaseWindow,
            ?modal: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?acceptFirstMouse: bool,
            #endif

            ?disableAutoHideCursor: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
            ?autoHideMenuBar: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?enableLargerThanScreen: bool,
            #endif

            ?backgroundColor: string,
            ?hasShadow: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?opacity: float,
            #endif

            ?darkTheme: bool,
            ?transparent: bool,
            ?``type``: string,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?visualEffectState: Enums.Types.BaseWindowConstructorOptions.VisualEffectState,
            #endif

            ?titleBarStyle: Enums.Types.BaseWindowConstructorOptions.TitleBarStyle,
            ?titleBarOverlay: U2<Types.BaseWindowConstructorOptions.TitleBarOverlay, bool>,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            ?accentColor: U2<bool, string>,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?trafficLightPosition: Point,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?roundedCorners: bool,
            #endif

            ?thickFrame: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?vibrancy: Enums.Types.BaseWindowConstructorOptions.Vibrancy,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            ?backgroundMaterial: Enums.Types.BaseWindowConstructorOptions.BackgroundMaterial,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?zoomToPageWidth: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?tabbingIdentifier: string
            #endif

        ) =
        /// <summary>
        /// Settings of web page's features.
        /// </summary>
        [<Erase>]
        member val webPreferences: WebPreferences = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the renderer should be active when <c>show</c> is <c>false</c> and it has just been created.  In order for
        /// <c>document.visibilityState</c> to work correctly on first load with <c>show: false</c> you should set this to <c>false</c>.  Setting this to
        /// <c>false</c> will cause the <c>ready-to-show</c> event to not fire.  Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val paintWhenInitiallyHidden: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's width in pixels. Default is <c>800</c>.
        /// </summary>
        [<Erase>]
        member val width: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's height in pixels. Default is <c>600</c>.
        /// </summary>
        [<Erase>]
        member val height: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// (**required** if y is used) Window's left offset from screen. Default is to center the window.
        /// </summary>
        [<Erase>]
        member val x: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// (**required** if x is used) Window's top offset from screen. Default is to center the window.
        /// </summary>
        [<Erase>]
        member val y: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The <c>width</c> and <c>height</c> would be used as web page's size, which means the actual window's size will include window
        /// frame's size and be slightly larger. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val useContentSize: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Show window in the center of the screen. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val center: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's minimum width. Default is <c>0</c>.
        /// </summary>
        [<Erase>]
        member val minWidth: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's minimum height. Default is <c>0</c>.
        /// </summary>
        [<Erase>]
        member val minHeight: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's maximum width. Default is no limit.
        /// </summary>
        [<Erase>]
        member val maxWidth: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's maximum height. Default is no limit.
        /// </summary>
        [<Erase>]
        member val maxHeight: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether window is resizable. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val resizable: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether window is movable. This is not implemented on Linux. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val movable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether window is minimizable. This is not implemented on Linux. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val minimizable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether window is maximizable. This is not implemented on Linux. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val maximizable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether window is closable. This is not implemented on Linux. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val closable: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Whether the window can be focused. Default is <c>true</c>. On Windows setting <c>focusable: false</c> also implies setting <c>skipTaskbar: true</c>. On
        /// Linux setting <c>focusable: false</c> makes the window stop interacting with wm, so the window will always stay on top in
        /// all workspaces.
        /// </summary>
        [<Erase>]
        member val focusable: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the window should always stay on top of other windows. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val alwaysOnTop: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the window should show in fullscreen. When explicitly set to <c>false</c> the fullscreen button will be hidden or disabled
        /// on macOS. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val fullscreen: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the window can be put into fullscreen mode. On macOS, also whether the maximize/zoom button should toggle full screen
        /// mode or maximize window. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val fullscreenable: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Use pre-Lion fullscreen on macOS. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val simpleFullscreen: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether to show the window in taskbar. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val skipTaskbar: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether window should be hidden when the user toggles into mission control.
        /// </summary>
        [<Erase>]
        member val hiddenInMissionControl: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Whether the window is in kiosk mode. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val kiosk: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Default window title. Default is <c>"Electron"</c>. If the HTML tag <c>&lt;title&gt;</c> is defined in the HTML file loaded by <c>loadURL()</c>,
        /// this property will be ignored.
        /// </summary>
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The window icon. On Windows it is recommended to use <c>ICO</c> icons to get best visual effects, you can also
        /// leave it undefined so the executable's icon will be used.
        /// </summary>
        [<Erase>]
        member val icon: U2<NativeImage, string> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether window should be shown when created. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val show: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Specify <c>false</c> to create a frameless window. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val frame: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Specify parent window. Default is <c>null</c>.
        /// </summary>
        [<Erase>]
        member val parent: BaseWindow = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether this is a modal window. This only works when the window is a child window. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val modal: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether clicking an inactive window will also click through to the web contents. Default is <c>false</c> on macOS. This option
        /// is not configurable on other platforms.
        /// </summary>
        [<Erase>]
        member val acceptFirstMouse: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Whether to hide cursor when typing. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val disableAutoHideCursor: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// Auto hide the menu bar unless the <c>Alt</c> key is pressed. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val autoHideMenuBar: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Enable the window to be resized larger than screen. Only relevant for macOS, as other OSes allow larger-than-screen windows by
        /// default. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val enableLargerThanScreen: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// The window's background color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. Alpha in #AARRGGBB format is
        /// supported if <c>transparent</c> is set to <c>true</c>. Default is <c>#FFF</c> (white). See win.setBackgroundColor for more information.
        /// </summary>
        [<Erase>]
        member val backgroundColor: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether window should have a shadow. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val hasShadow: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Set the initial opacity of the window, between 0.0 (fully transparent) and 1.0 (fully opaque). This is only implemented on
        /// Windows and macOS.
        /// </summary>
        [<Erase>]
        member val opacity: float = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Forces using dark theme for the window, only works on some GTK+3 desktop environments. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val darkTheme: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Makes the window transparent. Default is <c>false</c>. On Windows, does not work unless the window is frameless.
        /// </summary>
        [<Erase>]
        member val transparent: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The type of window, default is normal window. See more about this below.
        /// </summary>
        [<Erase>]
        member val ``type``: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Specify how the material appearance should reflect window activity state on macOS. Must be used with the <c>vibrancy</c> property. Possible
        /// values are:
        /// </summary>
        [<Erase>]
        member val visualEffectState: Enums.Types.BaseWindowConstructorOptions.VisualEffectState =
            Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// The style of window title bar. Default is <c>default</c>. Possible values are:
        /// </summary>
        [<Erase>]
        member val titleBarStyle: Enums.Types.BaseWindowConstructorOptions.TitleBarStyle =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        ///  When using a frameless window in conjunction with <c>win.setWindowButtonVisibility(true)</c> on macOS or using a <c>titleBarStyle</c> so that the standard
        /// window controls ("traffic lights" on macOS) are visible, this property enables the Window Controls Overlay JavaScript APIs and CSS Environment
        /// Variables. Specifying <c>true</c> will result in an overlay with default system colors. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val titleBarOverlay: U2<Types.BaseWindowConstructorOptions.TitleBarOverlay, bool> =
            Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// The accent color for the window. By default, follows user preference in System Settings. Set to <c>false</c> to explicitly disable,
        /// or set the color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. Alpha values will be ignored.
        /// </summary>
        [<Erase>]
        member val accentColor: U2<bool, string> = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Set a custom position for the traffic light buttons in frameless windows.
        /// </summary>
        [<Erase>]
        member val trafficLightPosition: Point = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether frameless window should have rounded corners. Default is <c>true</c>. Setting this property to <c>false</c> will prevent the window from
        /// being fullscreenable on macOS. On Windows versions older than Windows 11 Build 22000 this property has no effect, and frameless
        /// windows will not have rounded corners.
        /// </summary>
        [<Erase>]
        member val roundedCorners: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Use <c>WS_THICKFRAME</c> style for frameless windows on Windows, which adds standard window frame. Setting it to <c>false</c> will remove window
        /// shadow and window animations. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val thickFrame: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Add a type of vibrancy effect to the window, only on macOS. Can be <c>appearance-based</c>, <c>titlebar</c>, <c>selection</c>, <c>menu</c>, <c>popover</c>, <c>sidebar</c>,
        /// <c>header</c>, <c>sheet</c>, <c>window</c>, <c>hud</c>, <c>fullscreen-ui</c>, <c>tooltip</c>, <c>content</c>, <c>under-window</c>, or <c>under-page</c>.
        /// </summary>
        [<Erase>]
        member val vibrancy: Enums.Types.BaseWindowConstructorOptions.Vibrancy = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// Set the window's system-drawn background material, including behind the non-client area. Can be <c>auto</c>, <c>none</c>, <c>mica</c>, <c>acrylic</c> or <c>tabbed</c>. See
        /// win.setBackgroundMaterial for more information.
        /// </summary>
        [<Erase>]
        member val backgroundMaterial: Enums.Types.BaseWindowConstructorOptions.BackgroundMaterial =
            Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Controls the behavior on macOS when option-clicking the green stoplight button on the toolbar or by clicking the Window &gt;
        /// Zoom menu item. If <c>true</c>, the window will grow to the preferred width of the web page when zoomed, <c>false</c>
        /// will cause it to zoom to the width of the screen. This will also affect the behavior when calling <c>maximize()</c>
        /// directly. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val zoomToPageWidth: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Tab group name, allows opening the window as a native tab. Windows with the same tabbing identifier will be grouped
        /// together. This also adds a native new tab button to your window's tab bar and allows your <c>app</c> and window
        /// to receive the <c>new-window-for-tab</c> event.
        /// </summary>
        [<Erase>]
        member val tabbingIdentifier: string = Unchecked.defaultof<_> with get, set
        #endif


    [<JS.Pojo>]
    type BluetoothDevice
        /// <param name="deviceName"></param>
        /// <param name="deviceId"></param>
        (deviceName: string, deviceId: string) =
        [<Erase>]
        member val deviceName: string = Unchecked.defaultof<_> with get, set

        [<Erase>]
        member val deviceId: string = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// When setting minimum or maximum window size with <c>minWidth</c>/<c>maxWidth</c>/ <c>minHeight</c>/<c>maxHeight</c>, it only constrains the users. It won't prevent you from
    /// passing a size that does not follow size constraints to <c>setBounds</c>/<c>setSize</c> or to the constructor of <c>BrowserWindow</c>.<br/><br/>The possible values and
    /// behaviors of the <c>type</c> option are platform dependent. Possible values are:<br/><br/>* On Linux, possible types are <c>desktop</c>, <c>dock</c>, <c>toolbar</c>, <c>splash</c>,
    /// <c>notification</c>.<br/>  * The <c>desktop</c> type places the window at the desktop background window level (kCGDesktopWindowLevel - 1). However, note
    /// that a desktop window will not receive focus, keyboard, or mouse events. You can still use globalShortcut to receive input
    /// sparingly.<br/>  * The <c>dock</c> type creates a dock-like window behavior.<br/>  * The <c>toolbar</c> type creates a window with
    /// a toolbar appearance.<br/>  * The <c>splash</c> type behaves in a specific way. It is not draggable, even if the
    /// CSS styling of the window's body contains -webkit-app-region: drag. This type is commonly used for splash screens.<br/>  * The
    /// <c>notification</c> type creates a window that behaves like a system notification.<br/>* On macOS, possible types are <c>desktop</c>, <c>textured</c>, <c>panel</c>.<br/>
    /// * The <c>textured</c> type adds metal gradient appearance. This option is **deprecated**.<br/>  * The <c>desktop</c> type places the window
    /// at the desktop background window level (<c>kCGDesktopWindowLevel - 1</c>). Note that desktop window will not receive focus, keyboard or mouse
    /// events, but you can use <c>globalShortcut</c> to receive input sparingly.<br/>  * The <c>panel</c> type enables the window to float
    /// on top of full-screened apps by adding the <c>NSWindowStyleMaskNonactivatingPanel</c> style mask, normally reserved for NSPanel, at runtime. Also, the window
    /// will appear on all spaces (desktops).<br/>* On Windows, possible type is <c>toolbar</c>.
    /// </summary>
    [<JS.Pojo>]
    type BaseWindowConstructorOptions
        /// <param name="width">Window's width in pixels. Default is <c>800</c>.</param>
        /// <param name="height">Window's height in pixels. Default is <c>600</c>.</param>
        /// <param name="x">(**required** if y is used) Window's left offset from screen. Default is to center the window.</param>
        /// <param name="y">(**required** if x is used) Window's top offset from screen. Default is to center the window.</param>
        /// <param name="useContentSize">The <c>width</c> and <c>height</c> would be used as web page's size, which means the actual window's size will include
        /// window frame's size and be slightly larger. Default is <c>false</c>.</param>
        /// <param name="center">Show window in the center of the screen. Default is <c>false</c>.</param>
        /// <param name="minWidth">Window's minimum width. Default is <c>0</c>.</param>
        /// <param name="minHeight">Window's minimum height. Default is <c>0</c>.</param>
        /// <param name="maxWidth">Window's maximum width. Default is no limit.</param>
        /// <param name="maxHeight">Window's maximum height. Default is no limit.</param>
        /// <param name="resizable">Whether window is resizable. Default is <c>true</c>.</param>
        /// <param name="movable">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether window is movable.
        /// This is not implemented on Linux. Default is <c>true</c>.</param>
        /// <param name="minimizable">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether window is minimizable.
        /// This is not implemented on Linux. Default is <c>true</c>.</param>
        /// <param name="maximizable">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether window is maximizable.
        /// This is not implemented on Linux. Default is <c>true</c>.</param>
        /// <param name="closable">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether window is closable.
        /// This is not implemented on Linux. Default is <c>true</c>.</param>
        /// <param name="focusable">Whether the window can be focused. Default is <c>true</c>. On Windows setting <c>focusable: false</c> also implies setting <c>skipTaskbar: true</c>.
        /// On Linux setting <c>focusable: false</c> makes the window stop interacting with wm, so the window will always stay on top
        /// in all workspaces.</param>
        /// <param name="alwaysOnTop">Whether the window should always stay on top of other windows. Default is <c>false</c>.</param>
        /// <param name="fullscreen">Whether the window should show in fullscreen. When explicitly set to <c>false</c> the fullscreen button will be hidden or
        /// disabled on macOS. Default is <c>false</c>.</param>
        /// <param name="fullscreenable">Whether the window can be put into fullscreen mode. On macOS, also whether the maximize/zoom button should toggle full
        /// screen mode or maximize window. Default is <c>true</c>.</param>
        /// <param name="simpleFullscreen">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Use pre-Lion fullscreen on
        /// macOS. Default is <c>false</c>.</param>
        /// <param name="skipTaskbar">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether to show the
        /// window in taskbar. Default is <c>false</c>.</param>
        /// <param name="hiddenInMissionControl">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Whether window should be
        /// hidden when the user toggles into mission control.</param>
        /// <param name="kiosk">Whether the window is in kiosk mode. Default is <c>false</c>.</param>
        /// <param name="title">Default window title. Default is <c>"Electron"</c>. If the HTML tag <c>&lt;title&gt;</c> is defined in the HTML file loaded by
        /// <c>loadURL()</c>, this property will be ignored.</param>
        /// <param name="icon">The window icon. On Windows it is recommended to use <c>ICO</c> icons to get best visual effects, you can
        /// also leave it undefined so the executable's icon will be used.</param>
        /// <param name="show">Whether window should be shown when created. Default is <c>true</c>.</param>
        /// <param name="frame">Specify <c>false</c> to create a frameless window. Default is <c>true</c>.</param>
        /// <param name="parent">Specify parent window. Default is <c>null</c>.</param>
        /// <param name="modal">Whether this is a modal window. This only works when the window is a child window. Default is <c>false</c>.</param>
        /// <param name="acceptFirstMouse">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Whether clicking an inactive
        /// window will also click through to the web contents. Default is <c>false</c> on macOS. This option is not configurable on
        /// other platforms.</param>
        /// <param name="disableAutoHideCursor">Whether to hide cursor when typing. Default is <c>false</c>.</param>
        /// <param name="autoHideMenuBar">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || Auto hide the menu
        /// bar unless the <c>Alt</c> key is pressed. Default is <c>false</c>.</param>
        /// <param name="enableLargerThanScreen">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Enable the window to
        /// be resized larger than screen. Only relevant for macOS, as other OSes allow larger-than-screen windows by default. Default is <c>false</c>.</param>
        /// <param name="backgroundColor">The window's background color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. Alpha in #AARRGGBB format
        /// is supported if <c>transparent</c> is set to <c>true</c>. Default is <c>#FFF</c> (white). See win.setBackgroundColor for more information.</param>
        /// <param name="hasShadow">Whether window should have a shadow. Default is <c>true</c>.</param>
        /// <param name="opacity">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Set the initial opacity
        /// of the window, between 0.0 (fully transparent) and 1.0 (fully opaque). This is only implemented on Windows and macOS.</param>
        /// <param name="darkTheme">Forces using dark theme for the window, only works on some GTK+3 desktop environments. Default is <c>false</c>.</param>
        /// <param name="transparent">Makes the window transparent. Default is <c>false</c>. On Windows, does not work unless the window is frameless.</param>
        /// <param name="``type``">The type of window, default is normal window. See more about this below.</param>
        /// <param name="visualEffectState">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Specify how the material
        /// appearance should reflect window activity state on macOS. Must be used with the <c>vibrancy</c> property. Possible values are:</param>
        /// <param name="titleBarStyle">The style of window title bar. Default is <c>default</c>. Possible values are:</param>
        /// <param name="titleBarOverlay"> When using a frameless window in conjunction with <c>win.setWindowButtonVisibility(true)</c> on macOS or using a <c>titleBarStyle</c> so that the
        /// standard window controls ("traffic lights" on macOS) are visible, this property enables the Window Controls Overlay JavaScript APIs and CSS
        /// Environment Variables. Specifying <c>true</c> will result in an overlay with default system colors. Default is <c>false</c>.</param>
        /// <param name="accentColor">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || The accent color for
        /// the window. By default, follows user preference in System Settings. Set to <c>false</c> to explicitly disable, or set the color
        /// in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. Alpha values will be ignored.</param>
        /// <param name="trafficLightPosition">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Set a custom position
        /// for the traffic light buttons in frameless windows.</param>
        /// <param name="roundedCorners">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Whether frameless window should
        /// have rounded corners. Default is <c>true</c>. Setting this property to <c>false</c> will prevent the window from being fullscreenable on macOS.
        /// On Windows versions older than Windows 11 Build 22000 this property has no effect, and frameless windows will not have
        /// rounded corners.</param>
        /// <param name="thickFrame">Use <c>WS_THICKFRAME</c> style for frameless windows on Windows, which adds standard window frame. Setting it to <c>false</c> will remove
        /// window shadow and window animations. Default is <c>true</c>.</param>
        /// <param name="vibrancy">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Add a type of
        /// vibrancy effect to the window, only on macOS. Can be <c>appearance-based</c>, <c>titlebar</c>, <c>selection</c>, <c>menu</c>, <c>popover</c>, <c>sidebar</c>, <c>header</c>, <c>sheet</c>, <c>window</c>, <c>hud</c>,
        /// <c>fullscreen-ui</c>, <c>tooltip</c>, <c>content</c>, <c>under-window</c>, or <c>under-page</c>.</param>
        /// <param name="backgroundMaterial">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || Set the window's system-drawn
        /// background material, including behind the non-client area. Can be <c>auto</c>, <c>none</c>, <c>mica</c>, <c>acrylic</c> or <c>tabbed</c>. See win.setBackgroundMaterial for more information.</param>
        /// <param name="zoomToPageWidth">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Controls the behavior on
        /// macOS when option-clicking the green stoplight button on the toolbar or by clicking the Window &gt; Zoom menu item. If
        /// <c>true</c>, the window will grow to the preferred width of the web page when zoomed, <c>false</c> will cause it to
        /// zoom to the width of the screen. This will also affect the behavior when calling <c>maximize()</c> directly. Default is <c>false</c>.</param>
        /// <param name="tabbingIdentifier">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Tab group name, allows
        /// opening the window as a native tab. Windows with the same tabbing identifier will be grouped together. This also adds
        /// a native new tab button to your window's tab bar and allows your <c>app</c> and window to receive the <c>new-window-for-tab</c>
        /// event.</param>
        (
            ?width: int,
            ?height: int,
            ?x: int,
            ?y: int,
            ?useContentSize: bool,
            ?center: bool,
            ?minWidth: int,
            ?minHeight: int,
            ?maxWidth: int,
            ?maxHeight: int,
            ?resizable: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?movable: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?minimizable: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?maximizable: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?closable: bool,
            #endif

            ?focusable: bool,
            ?alwaysOnTop: bool,
            ?fullscreen: bool,
            ?fullscreenable: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?simpleFullscreen: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?skipTaskbar: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?hiddenInMissionControl: bool,
            #endif

            ?kiosk: bool,
            ?title: string,
            ?icon: U2<NativeImage, string>,
            ?show: bool,
            ?frame: bool,
            ?parent: BaseWindow,
            ?modal: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?acceptFirstMouse: bool,
            #endif

            ?disableAutoHideCursor: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
            ?autoHideMenuBar: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?enableLargerThanScreen: bool,
            #endif

            ?backgroundColor: string,
            ?hasShadow: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?opacity: float,
            #endif

            ?darkTheme: bool,
            ?transparent: bool,
            ?``type``: string,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?visualEffectState: Enums.Types.BaseWindowConstructorOptions.VisualEffectState,
            #endif

            ?titleBarStyle: Enums.Types.BaseWindowConstructorOptions.TitleBarStyle,
            ?titleBarOverlay: U2<Types.BaseWindowConstructorOptions.TitleBarOverlay, bool>,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            ?accentColor: U2<bool, string>,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?trafficLightPosition: Point,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
            ?roundedCorners: bool,
            #endif

            ?thickFrame: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?vibrancy: Enums.Types.BaseWindowConstructorOptions.Vibrancy,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            ?backgroundMaterial: Enums.Types.BaseWindowConstructorOptions.BackgroundMaterial,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?zoomToPageWidth: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?tabbingIdentifier: string
            #endif

        ) =
        /// <summary>
        /// Window's width in pixels. Default is <c>800</c>.
        /// </summary>
        [<Erase>]
        member val width: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's height in pixels. Default is <c>600</c>.
        /// </summary>
        [<Erase>]
        member val height: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// (**required** if y is used) Window's left offset from screen. Default is to center the window.
        /// </summary>
        [<Erase>]
        member val x: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// (**required** if x is used) Window's top offset from screen. Default is to center the window.
        /// </summary>
        [<Erase>]
        member val y: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The <c>width</c> and <c>height</c> would be used as web page's size, which means the actual window's size will include window
        /// frame's size and be slightly larger. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val useContentSize: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Show window in the center of the screen. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val center: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's minimum width. Default is <c>0</c>.
        /// </summary>
        [<Erase>]
        member val minWidth: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's minimum height. Default is <c>0</c>.
        /// </summary>
        [<Erase>]
        member val minHeight: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's maximum width. Default is no limit.
        /// </summary>
        [<Erase>]
        member val maxWidth: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Window's maximum height. Default is no limit.
        /// </summary>
        [<Erase>]
        member val maxHeight: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether window is resizable. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val resizable: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether window is movable. This is not implemented on Linux. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val movable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether window is minimizable. This is not implemented on Linux. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val minimizable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether window is maximizable. This is not implemented on Linux. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val maximizable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether window is closable. This is not implemented on Linux. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val closable: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Whether the window can be focused. Default is <c>true</c>. On Windows setting <c>focusable: false</c> also implies setting <c>skipTaskbar: true</c>. On
        /// Linux setting <c>focusable: false</c> makes the window stop interacting with wm, so the window will always stay on top in
        /// all workspaces.
        /// </summary>
        [<Erase>]
        member val focusable: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the window should always stay on top of other windows. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val alwaysOnTop: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the window should show in fullscreen. When explicitly set to <c>false</c> the fullscreen button will be hidden or disabled
        /// on macOS. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val fullscreen: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether the window can be put into fullscreen mode. On macOS, also whether the maximize/zoom button should toggle full screen
        /// mode or maximize window. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val fullscreenable: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Use pre-Lion fullscreen on macOS. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val simpleFullscreen: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether to show the window in taskbar. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val skipTaskbar: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether window should be hidden when the user toggles into mission control.
        /// </summary>
        [<Erase>]
        member val hiddenInMissionControl: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Whether the window is in kiosk mode. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val kiosk: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Default window title. Default is <c>"Electron"</c>. If the HTML tag <c>&lt;title&gt;</c> is defined in the HTML file loaded by <c>loadURL()</c>,
        /// this property will be ignored.
        /// </summary>
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The window icon. On Windows it is recommended to use <c>ICO</c> icons to get best visual effects, you can also
        /// leave it undefined so the executable's icon will be used.
        /// </summary>
        [<Erase>]
        member val icon: U2<NativeImage, string> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether window should be shown when created. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val show: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Specify <c>false</c> to create a frameless window. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val frame: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Specify parent window. Default is <c>null</c>.
        /// </summary>
        [<Erase>]
        member val parent: BaseWindow = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether this is a modal window. This only works when the window is a child window. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val modal: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether clicking an inactive window will also click through to the web contents. Default is <c>false</c> on macOS. This option
        /// is not configurable on other platforms.
        /// </summary>
        [<Erase>]
        member val acceptFirstMouse: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Whether to hide cursor when typing. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val disableAutoHideCursor: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// Auto hide the menu bar unless the <c>Alt</c> key is pressed. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val autoHideMenuBar: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Enable the window to be resized larger than screen. Only relevant for macOS, as other OSes allow larger-than-screen windows by
        /// default. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val enableLargerThanScreen: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// The window's background color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. Alpha in #AARRGGBB format is
        /// supported if <c>transparent</c> is set to <c>true</c>. Default is <c>#FFF</c> (white). See win.setBackgroundColor for more information.
        /// </summary>
        [<Erase>]
        member val backgroundColor: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Whether window should have a shadow. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val hasShadow: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Set the initial opacity of the window, between 0.0 (fully transparent) and 1.0 (fully opaque). This is only implemented on
        /// Windows and macOS.
        /// </summary>
        [<Erase>]
        member val opacity: float = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Forces using dark theme for the window, only works on some GTK+3 desktop environments. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val darkTheme: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Makes the window transparent. Default is <c>false</c>. On Windows, does not work unless the window is frameless.
        /// </summary>
        [<Erase>]
        member val transparent: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// The type of window, default is normal window. See more about this below.
        /// </summary>
        [<Erase>]
        member val ``type``: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Specify how the material appearance should reflect window activity state on macOS. Must be used with the <c>vibrancy</c> property. Possible
        /// values are:
        /// </summary>
        [<Erase>]
        member val visualEffectState: Enums.Types.BaseWindowConstructorOptions.VisualEffectState =
            Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// The style of window title bar. Default is <c>default</c>. Possible values are:
        /// </summary>
        [<Erase>]
        member val titleBarStyle: Enums.Types.BaseWindowConstructorOptions.TitleBarStyle =
            Unchecked.defaultof<_> with get, set

        /// <summary>
        ///  When using a frameless window in conjunction with <c>win.setWindowButtonVisibility(true)</c> on macOS or using a <c>titleBarStyle</c> so that the standard
        /// window controls ("traffic lights" on macOS) are visible, this property enables the Window Controls Overlay JavaScript APIs and CSS Environment
        /// Variables. Specifying <c>true</c> will result in an overlay with default system colors. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val titleBarOverlay: U2<Types.BaseWindowConstructorOptions.TitleBarOverlay, bool> =
            Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// The accent color for the window. By default, follows user preference in System Settings. Set to <c>false</c> to explicitly disable,
        /// or set the color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. Alpha values will be ignored.
        /// </summary>
        [<Erase>]
        member val accentColor: U2<bool, string> = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Set a custom position for the traffic light buttons in frameless windows.
        /// </summary>
        [<Erase>]
        member val trafficLightPosition: Point = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Whether frameless window should have rounded corners. Default is <c>true</c>. Setting this property to <c>false</c> will prevent the window from
        /// being fullscreenable on macOS. On Windows versions older than Windows 11 Build 22000 this property has no effect, and frameless
        /// windows will not have rounded corners.
        /// </summary>
        [<Erase>]
        member val roundedCorners: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Use <c>WS_THICKFRAME</c> style for frameless windows on Windows, which adds standard window frame. Setting it to <c>false</c> will remove window
        /// shadow and window animations. Default is <c>true</c>.
        /// </summary>
        [<Erase>]
        member val thickFrame: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Add a type of vibrancy effect to the window, only on macOS. Can be <c>appearance-based</c>, <c>titlebar</c>, <c>selection</c>, <c>menu</c>, <c>popover</c>, <c>sidebar</c>,
        /// <c>header</c>, <c>sheet</c>, <c>window</c>, <c>hud</c>, <c>fullscreen-ui</c>, <c>tooltip</c>, <c>content</c>, <c>under-window</c>, or <c>under-page</c>.
        /// </summary>
        [<Erase>]
        member val vibrancy: Enums.Types.BaseWindowConstructorOptions.Vibrancy = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// Set the window's system-drawn background material, including behind the non-client area. Can be <c>auto</c>, <c>none</c>, <c>mica</c>, <c>acrylic</c> or <c>tabbed</c>. See
        /// win.setBackgroundMaterial for more information.
        /// </summary>
        [<Erase>]
        member val backgroundMaterial: Enums.Types.BaseWindowConstructorOptions.BackgroundMaterial =
            Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Controls the behavior on macOS when option-clicking the green stoplight button on the toolbar or by clicking the Window &gt;
        /// Zoom menu item. If <c>true</c>, the window will grow to the preferred width of the web page when zoomed, <c>false</c>
        /// will cause it to zoom to the width of the screen. This will also affect the behavior when calling <c>maximize()</c>
        /// directly. Default is <c>false</c>.
        /// </summary>
        [<Erase>]
        member val zoomToPageWidth: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// Tab group name, allows opening the window as a native tab. Windows with the same tabbing identifier will be grouped
        /// together. This also adds a native new tab button to your window's tab bar and allows your <c>app</c> and window
        /// to receive the <c>new-window-for-tab</c> event.
        /// </summary>
        [<Erase>]
        member val tabbingIdentifier: string = Unchecked.defaultof<_> with get, set
        #endif


[<Erase; AutoOpen>]
module Enums =
    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type ConflictType =
        | [<CompiledName("exists")>] Exists
        | [<CompiledName("existsAndRunning")>] ExistsAndRunning

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        /// <summary>
        /// The primary application.
        /// </summary>
        | [<CompiledName("mainAppService")>] MainAppService
        /// <summary>
        /// The property list name for a launch agent. The property list name must correspond to a property list in the
        /// app’s <c>Contents/Library/LaunchAgents</c> directory.
        /// </summary>
        | [<CompiledName("agentService")>] AgentService
        /// <summary>
        /// The property list name for a launch agent. The property list name must correspond to a property list in the
        /// app’s <c>Contents/Library/LaunchDaemons</c> directory.
        /// </summary>
        | [<CompiledName("daemonService")>] DaemonService
        /// <summary>
        /// The property list name for a login item service. The property list name must correspond to a property list in
        /// the app’s <c>Contents/Library/LoginItems</c> directory.
        /// </summary>
        | [<CompiledName("loginItemService")>] LoginItemService

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type InfoType =
        | [<CompiledName("basic")>] Basic
        | [<CompiledName("complete")>] Complete

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SecureDnsMode =
        | [<CompiledName("off")>] Off
        | [<CompiledName("automatic")>] Automatic
        | [<CompiledName("secure")>] Secure

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Policy =
        | [<CompiledName("regular")>] Regular
        | [<CompiledName("accessory")>] Accessory
        | [<CompiledName("prohibited")>] Prohibited

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SetJumpList =
        /// <summary>
        /// Nothing went wrong.
        /// </summary>
        | [<CompiledName("ok")>] Ok
        /// <summary>
        /// One or more errors occurred, enable runtime logging to figure out the likely cause.
        /// </summary>
        | [<CompiledName("error")>] Error
        /// <summary>
        /// An attempt was made to add a separator to a custom category in the Jump List. Separators are only allowed
        /// in the standard <c>Tasks</c> category.
        /// </summary>
        | [<CompiledName("invalidSeparatorError")>] InvalidSeparatorError
        /// <summary>
        /// An attempt was made to add a file link to the Jump List for a file type the app isn't
        /// registered to handle.
        /// </summary>
        | [<CompiledName("fileTypeRegistrationError")>] FileTypeRegistrationError
        /// <summary>
        /// Custom categories can't be added to the Jump List due to user privacy or group policy settings.
        /// </summary>
        | [<CompiledName("customCategoryAccessDeniedError")>] CustomCategoryAccessDeniedError

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Name =
        | [<CompiledName("home")>] Home
        /// <summary>
        /// user application data directory, which by default points to:
        /// </summary>
        | [<CompiledName("appData")>] AppData
        | [<CompiledName("assets")>] Assets
        | [<CompiledName("userData")>] UserData
        | [<CompiledName("sessionData")>] SessionData
        | [<CompiledName("temp")>] Temp
        | [<CompiledName("exe")>] Exe
        | [<CompiledName("module")>] Module
        | [<CompiledName("desktop")>] Desktop
        | [<CompiledName("documents")>] Documents
        | [<CompiledName("downloads")>] Downloads
        | [<CompiledName("music")>] Music
        | [<CompiledName("pictures")>] Pictures
        | [<CompiledName("videos")>] Videos
        | [<CompiledName("recent")>] Recent
        | [<CompiledName("logs")>] Logs
        | [<CompiledName("crashDumps")>] CrashDumps

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type ServerType =
        | [<CompiledName("json")>] Json
        | [<CompiledName("default")>] Default

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Material =
        /// <summary>
        /// Let the Desktop Window Manager (DWM) automatically decide the system-drawn backdrop material for this window. This is the default.
        /// </summary>
        | [<CompiledName("auto")>] Auto
        /// <summary>
        /// Don't draw any system backdrop.
        /// </summary>
        | [<CompiledName("none")>] None
        /// <summary>
        /// Draw the backdrop material effect corresponding to a long-lived window.
        /// </summary>
        | [<CompiledName("mica")>] Mica
        /// <summary>
        /// Draw the backdrop material effect corresponding to a transient window.
        /// </summary>
        | [<CompiledName("acrylic")>] Acrylic
        /// <summary>
        /// Draw the backdrop material effect corresponding to a window with a tabbed title bar.
        /// </summary>
        | [<CompiledName("tabbed")>] Tabbed

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("titlebar")>] Titlebar
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("menu")>] Menu
        | [<CompiledName("popover")>] Popover
        | [<CompiledName("sidebar")>] Sidebar
        | [<CompiledName("header")>] Header
        | [<CompiledName("sheet")>] Sheet
        | [<CompiledName("window")>] Window
        | [<CompiledName("hud")>] Hud
        | [<CompiledName("fullscreen-ui")>] FullscreenUi
        | [<CompiledName("tooltip")>] Tooltip
        | [<CompiledName("content")>] Content
        | [<CompiledName("under-window")>] UnderWindow
        | [<CompiledName("under-page")>] UnderPage

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Level =
        | [<CompiledName("normal")>] Normal
        | [<CompiledName("floating")>] Floating
        | [<CompiledName("torn-off-menu")>] TornOffMenu
        | [<CompiledName("modal-panel")>] ModalPanel
        | [<CompiledName("main-menu")>] MainMenu
        | [<CompiledName("status")>] Status
        | [<CompiledName("pop-up-menu")>] PopUpMenu
        | [<CompiledName("screen-saver")>] ScreenSaver
        | [<CompiledName("dock")>] Dock

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Material =
        /// <summary>
        /// Let the Desktop Window Manager (DWM) automatically decide the system-drawn backdrop material for this window. This is the default.
        /// </summary>
        | [<CompiledName("auto")>] Auto
        /// <summary>
        /// Don't draw any system backdrop.
        /// </summary>
        | [<CompiledName("none")>] None
        /// <summary>
        /// Draw the backdrop material effect corresponding to a long-lived window.
        /// </summary>
        | [<CompiledName("mica")>] Mica
        /// <summary>
        /// Draw the backdrop material effect corresponding to a transient window.
        /// </summary>
        | [<CompiledName("acrylic")>] Acrylic
        /// <summary>
        /// Draw the backdrop material effect corresponding to a window with a tabbed title bar.
        /// </summary>
        | [<CompiledName("tabbed")>] Tabbed

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("titlebar")>] Titlebar
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("menu")>] Menu
        | [<CompiledName("popover")>] Popover
        | [<CompiledName("sidebar")>] Sidebar
        | [<CompiledName("header")>] Header
        | [<CompiledName("sheet")>] Sheet
        | [<CompiledName("window")>] Window
        | [<CompiledName("hud")>] Hud
        | [<CompiledName("fullscreen-ui")>] FullscreenUi
        | [<CompiledName("tooltip")>] Tooltip
        | [<CompiledName("content")>] Content
        | [<CompiledName("under-window")>] UnderWindow
        | [<CompiledName("under-page")>] UnderPage

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Level =
        | [<CompiledName("normal")>] Normal
        | [<CompiledName("floating")>] Floating
        | [<CompiledName("torn-off-menu")>] TornOffMenu
        | [<CompiledName("modal-panel")>] ModalPanel
        | [<CompiledName("main-menu")>] MainMenu
        | [<CompiledName("status")>] Status
        | [<CompiledName("pop-up-menu")>] PopUpMenu
        | [<CompiledName("screen-saver")>] ScreenSaver
        | [<CompiledName("dock")>] Dock

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SameSite =
        | [<CompiledName("unspecified")>] Unspecified
        | [<CompiledName("no_restriction")>] NoRestriction
        | [<CompiledName("lax")>] Lax
        | [<CompiledName("strict")>] Strict

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Cause =
        /// <summary>
        /// The cookie was changed directly by a consumer's action.
        /// </summary>
        | [<CompiledName("explicit")>] Explicit
        /// <summary>
        /// The cookie was automatically removed due to an insert operation that overwrote it.
        /// </summary>
        | [<CompiledName("overwrite")>] Overwrite
        /// <summary>
        /// The cookie was automatically removed as it expired.
        /// </summary>
        | [<CompiledName("expired")>] Expired
        /// <summary>
        /// The cookie was automatically evicted during garbage collection.
        /// </summary>
        | [<CompiledName("evicted")>] Evicted
        /// <summary>
        /// The cookie was overwritten with an already-expired expiration date.
        /// </summary>
        | [<CompiledName("expired-overwrite")>] ExpiredOverwrite

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Types =
        | [<CompiledName("screen")>] Screen
        | [<CompiledName("window")>] Window

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Properties =
        /// <summary>
        /// Show hidden files in dialog.
        /// </summary>
        | [<CompiledName("showHiddenFiles")>] ShowHiddenFiles
        /// <summary>
        /// Allow creating new directories from dialog.
        /// </summary>
        | [<CompiledName("createDirectory")>] CreateDirectory
        /// <summary>
        /// Treat packages, such as <c>.app</c> folders, as a directory instead of a file.
        /// </summary>
        | [<CompiledName("treatPackageAsDirectory")>] TreatPackageAsDirectory
        /// <summary>
        /// Sets whether the user will be presented a confirmation dialog if the user types a file name that already exists.
        /// </summary>
        | [<CompiledName("showOverwriteConfirmation")>] ShowOverwriteConfirmation
        /// <summary>
        /// Do not add the item being saved to the recent documents list.
        /// </summary>
        | [<CompiledName("dontAddToRecent")>] DontAddToRecent

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Properties =
        /// <summary>
        /// Show hidden files in dialog.
        /// </summary>
        | [<CompiledName("showHiddenFiles")>] ShowHiddenFiles
        /// <summary>
        /// Allow creating new directories from dialog.
        /// </summary>
        | [<CompiledName("createDirectory")>] CreateDirectory
        /// <summary>
        /// Treat packages, such as <c>.app</c> folders, as a directory instead of a file.
        /// </summary>
        | [<CompiledName("treatPackageAsDirectory")>] TreatPackageAsDirectory
        /// <summary>
        /// Sets whether the user will be presented a confirmation dialog if the user types a file name that already exists.
        /// </summary>
        | [<CompiledName("showOverwriteConfirmation")>] ShowOverwriteConfirmation
        /// <summary>
        /// Do not add the item being saved to the recent documents list.
        /// </summary>
        | [<CompiledName("dontAddToRecent")>] DontAddToRecent

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Properties =
        /// <summary>
        /// Allow files to be selected.
        /// </summary>
        | [<CompiledName("openFile")>] OpenFile
        /// <summary>
        /// Allow directories to be selected.
        /// </summary>
        | [<CompiledName("openDirectory")>] OpenDirectory
        /// <summary>
        /// Allow multiple paths to be selected.
        /// </summary>
        | [<CompiledName("multiSelections")>] MultiSelections
        /// <summary>
        /// Show hidden files in dialog.
        /// </summary>
        | [<CompiledName("showHiddenFiles")>] ShowHiddenFiles
        /// <summary>
        /// Allow creating new directories from dialog.
        /// </summary>
        | [<CompiledName("createDirectory")>] CreateDirectory
        /// <summary>
        /// Prompt for creation if the file path entered in the dialog does not exist. This does not actually create the
        /// file at the path but allows non-existent paths to be returned that should be created by the application.
        /// </summary>
        | [<CompiledName("promptToCreate")>] PromptToCreate
        /// <summary>
        /// Disable the automatic alias (symlink) path resolution. Selected aliases will now return the alias path instead of their target path.
        /// </summary>
        | [<CompiledName("noResolveAliases")>] NoResolveAliases
        /// <summary>
        /// Treat packages, such as <c>.app</c> folders, as a directory instead of a file.
        /// </summary>
        | [<CompiledName("treatPackageAsDirectory")>] TreatPackageAsDirectory
        /// <summary>
        /// Do not add the item being opened to the recent documents list.
        /// </summary>
        | [<CompiledName("dontAddToRecent")>] DontAddToRecent

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Properties =
        /// <summary>
        /// Allow files to be selected.
        /// </summary>
        | [<CompiledName("openFile")>] OpenFile
        /// <summary>
        /// Allow directories to be selected.
        /// </summary>
        | [<CompiledName("openDirectory")>] OpenDirectory
        /// <summary>
        /// Allow multiple paths to be selected.
        /// </summary>
        | [<CompiledName("multiSelections")>] MultiSelections
        /// <summary>
        /// Show hidden files in dialog.
        /// </summary>
        | [<CompiledName("showHiddenFiles")>] ShowHiddenFiles
        /// <summary>
        /// Allow creating new directories from dialog.
        /// </summary>
        | [<CompiledName("createDirectory")>] CreateDirectory
        /// <summary>
        /// Prompt for creation if the file path entered in the dialog does not exist. This does not actually create the
        /// file at the path but allows non-existent paths to be returned that should be created by the application.
        /// </summary>
        | [<CompiledName("promptToCreate")>] PromptToCreate
        /// <summary>
        /// Disable the automatic alias (symlink) path resolution. Selected aliases will now return the alias path instead of their target path.
        /// </summary>
        | [<CompiledName("noResolveAliases")>] NoResolveAliases
        /// <summary>
        /// Treat packages, such as <c>.app</c> folders, as a directory instead of a file.
        /// </summary>
        | [<CompiledName("treatPackageAsDirectory")>] TreatPackageAsDirectory
        /// <summary>
        /// Do not add the item being opened to the recent documents list.
        /// </summary>
        | [<CompiledName("dontAddToRecent")>] DontAddToRecent

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("critical")>] Critical
        | [<CompiledName("informational")>] Informational

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type GetState =
        | [<CompiledName("progressing")>] Progressing
        | [<CompiledName("completed")>] Completed
        | [<CompiledName("cancelled")>] Cancelled
        | [<CompiledName("interrupted")>] Interrupted

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type State =
        | [<CompiledName("completed")>] Completed
        | [<CompiledName("cancelled")>] Cancelled
        | [<CompiledName("interrupted")>] Interrupted

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type State =
        | [<CompiledName("progressing")>] Progressing
        | [<CompiledName("interrupted")>] Interrupted

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Role =
        | [<CompiledName("undo")>] Undo
        | [<CompiledName("redo")>] Redo
        | [<CompiledName("cut")>] Cut
        | [<CompiledName("copy")>] Copy
        | [<CompiledName("paste")>] Paste
        | [<CompiledName("pasteAndMatchStyle")>] PasteAndMatchStyle
        | [<CompiledName("delete")>] Delete
        | [<CompiledName("selectAll")>] SelectAll
        | [<CompiledName("reload")>] Reload
        | [<CompiledName("forceReload")>] ForceReload
        | [<CompiledName("toggleDevTools")>] ToggleDevTools
        | [<CompiledName("resetZoom")>] ResetZoom
        | [<CompiledName("zoomIn")>] ZoomIn
        | [<CompiledName("zoomOut")>] ZoomOut
        | [<CompiledName("toggleSpellChecker")>] ToggleSpellChecker
        | [<CompiledName("togglefullscreen")>] Togglefullscreen
        | [<CompiledName("window")>] Window
        | [<CompiledName("minimize")>] Minimize
        | [<CompiledName("close")>] Close
        | [<CompiledName("help")>] Help
        | [<CompiledName("about")>] About
        | [<CompiledName("services")>] Services
        | [<CompiledName("hide")>] Hide
        | [<CompiledName("hideOthers")>] HideOthers
        | [<CompiledName("unhide")>] Unhide
        | [<CompiledName("quit")>] Quit
        | [<CompiledName("startSpeaking")>] StartSpeaking
        | [<CompiledName("stopSpeaking")>] StopSpeaking
        | [<CompiledName("zoom")>] Zoom
        | [<CompiledName("front")>] Front
        | [<CompiledName("appMenu")>] AppMenu
        | [<CompiledName("fileMenu")>] FileMenu
        | [<CompiledName("editMenu")>] EditMenu
        | [<CompiledName("viewMenu")>] ViewMenu
        | [<CompiledName("shareMenu")>] ShareMenu
        | [<CompiledName("recentDocuments")>] RecentDocuments
        | [<CompiledName("toggleTabBar")>] ToggleTabBar
        | [<CompiledName("selectNextTab")>] SelectNextTab
        | [<CompiledName("selectPreviousTab")>] SelectPreviousTab
        | [<CompiledName("showAllTabs")>] ShowAllTabs
        | [<CompiledName("mergeAllWindows")>] MergeAllWindows
        | [<CompiledName("clearRecentDocuments")>] ClearRecentDocuments
        | [<CompiledName("moveTabToNewWindow")>] MoveTabToNewWindow
        | [<CompiledName("windowMenu")>] WindowMenu

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("normal")>] Normal
        | [<CompiledName("separator")>] Separator
        | [<CompiledName("submenu")>] Submenu
        | [<CompiledName("checkbox")>] Checkbox
        | [<CompiledName("radio")>] Radio
        | [<CompiledName("header")>] Header
        | [<CompiledName("palette")>] Palette

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("normal")>] Normal
        | [<CompiledName("separator")>] Separator
        | [<CompiledName("submenu")>] Submenu
        | [<CompiledName("checkbox")>] Checkbox
        | [<CompiledName("radio")>] Radio
        /// <summary>
        /// Only available on macOS 14 and up.
        /// </summary>
        | [<CompiledName("header")>] Header
        /// <summary>
        /// Only available on macOS 14 and up.
        /// </summary>
        | [<CompiledName("palette")>] Palette

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Role =
        | [<CompiledName("undo")>] Undo
        | [<CompiledName("redo")>] Redo
        | [<CompiledName("cut")>] Cut
        | [<CompiledName("copy")>] Copy
        | [<CompiledName("paste")>] Paste
        | [<CompiledName("pasteAndMatchStyle")>] PasteAndMatchStyle
        | [<CompiledName("delete")>] Delete
        | [<CompiledName("selectAll")>] SelectAll
        | [<CompiledName("reload")>] Reload
        | [<CompiledName("forceReload")>] ForceReload
        | [<CompiledName("toggleDevTools")>] ToggleDevTools
        | [<CompiledName("resetZoom")>] ResetZoom
        | [<CompiledName("zoomIn")>] ZoomIn
        | [<CompiledName("zoomOut")>] ZoomOut
        | [<CompiledName("toggleSpellChecker")>] ToggleSpellChecker
        | [<CompiledName("togglefullscreen")>] Togglefullscreen
        | [<CompiledName("window")>] Window
        | [<CompiledName("minimize")>] Minimize
        | [<CompiledName("close")>] Close
        | [<CompiledName("help")>] Help
        | [<CompiledName("about")>] About
        | [<CompiledName("services")>] Services
        | [<CompiledName("hide")>] Hide
        | [<CompiledName("hideOthers")>] HideOthers
        | [<CompiledName("unhide")>] Unhide
        | [<CompiledName("quit")>] Quit
        | [<CompiledName("showSubstitutions")>] ShowSubstitutions
        | [<CompiledName("toggleSmartQuotes")>] ToggleSmartQuotes
        | [<CompiledName("toggleSmartDashes")>] ToggleSmartDashes
        | [<CompiledName("toggleTextReplacement")>] ToggleTextReplacement
        | [<CompiledName("startSpeaking")>] StartSpeaking
        | [<CompiledName("stopSpeaking")>] StopSpeaking
        | [<CompiledName("zoom")>] Zoom
        | [<CompiledName("front")>] Front
        | [<CompiledName("appMenu")>] AppMenu
        | [<CompiledName("fileMenu")>] FileMenu
        | [<CompiledName("editMenu")>] EditMenu
        | [<CompiledName("viewMenu")>] ViewMenu
        | [<CompiledName("shareMenu")>] ShareMenu
        | [<CompiledName("recentDocuments")>] RecentDocuments
        | [<CompiledName("toggleTabBar")>] ToggleTabBar
        | [<CompiledName("selectNextTab")>] SelectNextTab
        | [<CompiledName("selectPreviousTab")>] SelectPreviousTab
        | [<CompiledName("showAllTabs")>] ShowAllTabs
        | [<CompiledName("mergeAllWindows")>] MergeAllWindows
        | [<CompiledName("clearRecentDocuments")>] ClearRecentDocuments
        | [<CompiledName("moveTabToNewWindow")>] MoveTabToNewWindow
        | [<CompiledName("windowMenu")>] WindowMenu

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SourceType =
        | [<CompiledName("none")>] None
        | [<CompiledName("mouse")>] Mouse
        | [<CompiledName("keyboard")>] Keyboard
        | [<CompiledName("touch")>] Touch
        | [<CompiledName("touchMenu")>] TouchMenu
        | [<CompiledName("longPress")>] LongPress
        | [<CompiledName("longTap")>] LongTap
        | [<CompiledName("touchHandle")>] TouchHandle
        | [<CompiledName("stylus")>] Stylus
        | [<CompiledName("adjustSelection")>] AdjustSelection
        | [<CompiledName("adjustSelectionReset")>] AdjustSelectionReset

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type ThemeSource =
        | [<CompiledName("system")>] System
        | [<CompiledName("light")>] Light
        | [<CompiledName("dark")>] Dark

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type CaptureMode =
        | [<CompiledName("default")>] Default
        | [<CompiledName("includeSensitive")>] IncludeSensitive
        | [<CompiledName("everything")>] Everything

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type TimeoutType =
        | [<CompiledName("default")>] Default
        | [<CompiledName("never")>] Never

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Urgency =
        | [<CompiledName("normal")>] Normal
        | [<CompiledName("critical")>] Critical
        | [<CompiledName("low")>] Low

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Urgency =
        | [<CompiledName("normal")>] Normal
        | [<CompiledName("critical")>] Critical
        | [<CompiledName("low")>] Low

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type TimeoutType =
        | [<CompiledName("default")>] Default
        | [<CompiledName("never")>] Never

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type GetCurrentThermalState =
        | [<CompiledName("unknown")>] Unknown
        | [<CompiledName("nominal")>] Nominal
        | [<CompiledName("fair")>] Fair
        | [<CompiledName("serious")>] Serious
        | [<CompiledName("critical")>] Critical

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type GetSystemIdleState =
        | [<CompiledName("active")>] Active
        | [<CompiledName("idle")>] Idle
        | [<CompiledName("locked")>] Locked
        | [<CompiledName("unknown")>] Unknown

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        /// <summary>
        /// Prevent the application from being suspended. Keeps system active but allows screen to be turned off. Example use cases: downloading
        /// a file or playing audio.
        /// </summary>
        | [<CompiledName("prevent-app-suspension")>] PreventAppSuspension
        /// <summary>
        /// Prevent the display from going to sleep. Keeps system and screen active. Example use case: playing video.
        /// </summary>
        | [<CompiledName("prevent-display-sleep")>] PreventDisplaySleep

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type GetSelectedStorageBackend =
        /// <summary>
        /// When the desktop environment is not recognised or if the following command line flag is provided <c>--password-store="basic"</c>.
        /// </summary>
        | [<CompiledName("basic_text")>] BasicText
        /// <summary>
        /// When the desktop environment is <c>X-Cinnamon</c>, <c>Deepin</c>, <c>GNOME</c>, <c>Pantheon</c>, <c>XFCE</c>, <c>UKUI</c>, <c>unity</c> or if the following command line flag is
        /// provided <c>--password-store="gnome-libsecret"</c>.
        /// </summary>
        | [<CompiledName("gnome_libsecret")>] GnomeLibsecret
        /// <summary>
        /// When the desktop session is <c>kde4</c> or if the following command line flag is provided <c>--password-store="kwallet"</c>.
        /// </summary>
        | [<CompiledName("kwallet")>] Kwallet
        /// <summary>
        /// When the desktop session is <c>kde5</c> or if the following command line flag is provided <c>--password-store="kwallet5"</c>.
        /// </summary>
        | [<CompiledName("kwallet5")>] Kwallet5
        /// <summary>
        /// When the desktop session is <c>kde6</c> or if the following command line flag is provided <c>--password-store="kwallet6"</c>.
        /// </summary>
        | [<CompiledName("kwallet6")>] Kwallet6
        /// <summary>
        /// When the function is called before app has emitted the <c>ready</c> event.
        /// </summary>
        | [<CompiledName("unknown")>] Unknown

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type OriginMatchingMode =
        /// <summary>
        /// Storage is matched on origin in first-party contexts and top-level-site in third-party contexts.
        /// </summary>
        | [<CompiledName("third-parties-included")>] ThirdPartiesIncluded
        /// <summary>
        /// Storage is matched on origin only in all contexts.
        /// </summary>
        | [<CompiledName("origin-in-all-contexts")>] OriginInAllContexts

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type DataTypes =
        /// <summary>
        /// Background Fetch
        /// </summary>
        | [<CompiledName("backgroundFetch")>] BackgroundFetch
        /// <summary>
        /// Cache (includes <c>cachestorage</c> and <c>shadercache</c>)
        /// </summary>
        | [<CompiledName("cache")>] Cache
        /// <summary>
        /// Cookies
        /// </summary>
        | [<CompiledName("cookies")>] Cookies
        /// <summary>
        /// Downloads
        /// </summary>
        | [<CompiledName("downloads")>] Downloads
        /// <summary>
        /// File Systems
        /// </summary>
        | [<CompiledName("fileSystems")>] FileSystems
        /// <summary>
        /// IndexedDB
        /// </summary>
        | [<CompiledName("indexedDB")>] IndexedDB
        /// <summary>
        /// Local Storage
        /// </summary>
        | [<CompiledName("localStorage")>] LocalStorage
        /// <summary>
        /// Service Workers
        /// </summary>
        | [<CompiledName("serviceWorkers")>] ServiceWorkers
        /// <summary>
        /// WebSQL
        /// </summary>
        | [<CompiledName("webSQL")>] WebSQL

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type MaxVersion =
        | [<CompiledName("tls1.2")>] Tls1.2
        | [<CompiledName("tls1.3")>] Tls1.3

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type MinVersion =
        | [<CompiledName("tls1")>] Tls1
        | [<CompiledName("tls1.1")>] Tls1.1
        | [<CompiledName("tls1.2")>] Tls1.2
        | [<CompiledName("tls1.3")>] Tls1.3

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SecureDnsPolicy =
        | [<CompiledName("allow")>] Allow
        | [<CompiledName("disable")>] Disable

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type CacheUsage =
        /// <summary>
        /// Results may come from the host cache if non-stale
        /// </summary>
        | [<CompiledName("allowed")>] Allowed
        /// <summary>
        /// Results may come from the host cache even if stale (by expiration or network changes)
        /// </summary>
        | [<CompiledName("staleAllowed")>] StaleAllowed
        /// <summary>
        /// Results will not come from the host cache.
        /// </summary>
        | [<CompiledName("disallowed")>] Disallowed

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Source =
        /// <summary>
        /// Resolver will pick an appropriate source. Results could come from DNS, MulticastDNS, HOSTS file, etc
        /// </summary>
        | [<CompiledName("any")>] Any
        /// <summary>
        /// Results will only be retrieved from the system or OS, e.g. via the <c>getaddrinfo()</c> system call
        /// </summary>
        | [<CompiledName("system")>] System
        /// <summary>
        /// Results will only come from DNS queries
        /// </summary>
        | [<CompiledName("dns")>] Dns
        /// <summary>
        /// Results will only come from Multicast DNS queries
        /// </summary>
        | [<CompiledName("mdns")>] Mdns
        /// <summary>
        /// No external sources will be used. Results will only come from fast local sources that are available no matter the
        /// source setting, e.g. cache, hosts file, IP literal resolution, etc.
        /// </summary>
        | [<CompiledName("localOnly")>] LocalOnly

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type QueryType =
        /// <summary>
        /// Fetch only A records
        /// </summary>
        | [<CompiledName("A")>] A
        /// <summary>
        /// Fetch only AAAA records.
        /// </summary>
        | [<CompiledName("AAAA")>] AAAA

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Quotas = | [<CompiledName("temporary")>] Temporary

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Storages =
        | [<CompiledName("cookies")>] Cookies
        | [<CompiledName("filesystem")>] Filesystem
        | [<CompiledName("indexdb")>] Indexdb
        | [<CompiledName("localstorage")>] Localstorage
        | [<CompiledName("shadercache")>] Shadercache
        | [<CompiledName("websql")>] Websql
        | [<CompiledName("serviceworkers")>] Serviceworkers
        | [<CompiledName("cachestorage")>] Cachestorage

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Action =
        /// <summary>
        /// This will allow <c>path</c> to be accessed despite restricted status.
        /// </summary>
        | [<CompiledName("allow")>] Allow
        /// <summary>
        /// This will block the access request and trigger an <c>AbortError</c>.
        /// </summary>
        | [<CompiledName("deny")>] Deny
        /// <summary>
        /// This will open a new file picker and allow the user to choose another path.
        /// </summary>
        | [<CompiledName("tryAgain")>] TryAgain

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type IconPosition =
        | [<CompiledName("left")>] Left
        | [<CompiledName("right")>] Right
        | [<CompiledName("overlay")>] Overlay

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type IconPosition =
        | [<CompiledName("left")>] Left
        | [<CompiledName("right")>] Right
        | [<CompiledName("overlay")>] Overlay

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Mode =
        /// <summary>
        /// Maps to <c>NSScrubberModeFixed</c>.
        /// </summary>
        | [<CompiledName("fixed")>] Fixed
        /// <summary>
        /// Maps to <c>NSScrubberModeFree</c>.
        /// </summary>
        | [<CompiledName("free")>] Free

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type OverlayStyle =
        /// <summary>
        /// Maps to <c>[NSScrubberSelectionStyle roundedBackgroundStyle]</c>.
        /// </summary>
        | [<CompiledName("background")>] Background
        /// <summary>
        /// Maps to <c>[NSScrubberSelectionStyle outlineOverlayStyle]</c>.
        /// </summary>
        | [<CompiledName("outline")>] Outline
        /// <summary>
        /// Removes all styles.
        /// </summary>
        | [<CompiledName("none")>] None

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SelectedStyle =
        /// <summary>
        /// Maps to <c>[NSScrubberSelectionStyle roundedBackgroundStyle]</c>.
        /// </summary>
        | [<CompiledName("background")>] Background
        /// <summary>
        /// Maps to <c>[NSScrubberSelectionStyle outlineOverlayStyle]</c>.
        /// </summary>
        | [<CompiledName("outline")>] Outline
        /// <summary>
        /// Removes all styles.
        /// </summary>
        | [<CompiledName("none")>] None

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Mode =
        | [<CompiledName("fixed")>] Fixed
        | [<CompiledName("free")>] Free

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type OverlayStyle =
        | [<CompiledName("background")>] Background
        | [<CompiledName("outline")>] Outline
        | [<CompiledName("none")>] None

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SelectedStyle =
        | [<CompiledName("background")>] Background
        | [<CompiledName("outline")>] Outline
        | [<CompiledName("none")>] None

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Mode =
        | [<CompiledName("single")>] Single
        | [<CompiledName("multiple")>] Multiple
        | [<CompiledName("buttons")>] Buttons

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Mode =
        /// <summary>
        /// Default. One item selected at a time, selecting one deselects the previously selected item. Maps to <c>NSSegmentSwitchTrackingSelectOne</c>.
        /// </summary>
        | [<CompiledName("single")>] Single
        /// <summary>
        /// Multiple items can be selected at a time. Maps to <c>NSSegmentSwitchTrackingSelectAny</c>.
        /// </summary>
        | [<CompiledName("multiple")>] Multiple
        /// <summary>
        /// Make the segments act as buttons, each segment can be pressed and released but never marked as active. Maps to
        /// <c>NSSegmentSwitchTrackingMomentary</c>.
        /// </summary>
        | [<CompiledName("buttons")>] Buttons

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SegmentStyle =
        /// <summary>
        /// Default. The appearance of the segmented control is automatically determined based on the type of window in which the control
        /// is displayed and the position within the window. Maps to <c>NSSegmentStyleAutomatic</c>.
        /// </summary>
        | [<CompiledName("automatic")>] Automatic
        /// <summary>
        /// The control is displayed using the rounded style. Maps to <c>NSSegmentStyleRounded</c>.
        /// </summary>
        | [<CompiledName("rounded")>] Rounded
        /// <summary>
        /// The control is displayed using the textured rounded style. Maps to <c>NSSegmentStyleTexturedRounded</c>.
        /// </summary>
        | [<CompiledName("textured-rounded")>] TexturedRounded
        /// <summary>
        /// The control is displayed using the round rect style. Maps to <c>NSSegmentStyleRoundRect</c>.
        /// </summary>
        | [<CompiledName("round-rect")>] RoundRect
        /// <summary>
        /// The control is displayed using the textured square style. Maps to <c>NSSegmentStyleTexturedSquare</c>.
        /// </summary>
        | [<CompiledName("textured-square")>] TexturedSquare
        /// <summary>
        /// The control is displayed using the capsule style. Maps to <c>NSSegmentStyleCapsule</c>.
        /// </summary>
        | [<CompiledName("capsule")>] Capsule
        /// <summary>
        /// The control is displayed using the small square style. Maps to <c>NSSegmentStyleSmallSquare</c>.
        /// </summary>
        | [<CompiledName("small-square")>] SmallSquare
        /// <summary>
        /// The segments in the control are displayed very close to each other but not touching. Maps to <c>NSSegmentStyleSeparated</c>.
        /// </summary>
        | [<CompiledName("separated")>] Separated

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Size =
        | [<CompiledName("small")>] Small
        | [<CompiledName("large")>] Large
        | [<CompiledName("flexible")>] Flexible

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Size =
        /// <summary>
        /// Small space between items. Maps to <c>NSTouchBarItemIdentifierFixedSpaceSmall</c>. This is the default.
        /// </summary>
        | [<CompiledName("small")>] Small
        /// <summary>
        /// Large space between items. Maps to <c>NSTouchBarItemIdentifierFixedSpaceLarge</c>.
        /// </summary>
        | [<CompiledName("large")>] Large
        /// <summary>
        /// Take up all available space. Maps to <c>NSTouchBarItemIdentifierFlexibleSpace</c>.
        /// </summary>
        | [<CompiledName("flexible")>] Flexible

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type IconType =
        | [<CompiledName("none")>] None
        | [<CompiledName("info")>] Info
        | [<CompiledName("warning")>] Warning
        | [<CompiledName("error")>] Error
        | [<CompiledName("custom")>] Custom

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type FontType =
        | [<CompiledName("monospaced")>] Monospaced
        | [<CompiledName("monospacedDigit")>] MonospacedDigit

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Stdio =
        | [<CompiledName("pipe")>] Pipe
        | [<CompiledName("ignore")>] Ignore
        | [<CompiledName("inherit")>] Inherit

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Policy =
        | [<CompiledName("animate")>] Animate
        | [<CompiledName("animateOnce")>] AnimateOnce
        | [<CompiledName("noAnimation")>] NoAnimation

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type GetType =
        | [<CompiledName("backgroundPage")>] BackgroundPage
        | [<CompiledName("window")>] Window
        | [<CompiledName("browserView")>] BrowserView
        | [<CompiledName("remote")>] Remote
        | [<CompiledName("webview")>] Webview
        | [<CompiledName("offscreen")>] Offscreen

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Policy =
        /// <summary>
        /// Exposes user's public and local IPs. This is the default behavior. When this policy is used, WebRTC has the right
        /// to enumerate all interfaces and bind them to discover public interfaces.
        /// </summary>
        | [<CompiledName("default")>] Default
        /// <summary>
        /// Exposes user's public IP, but does not expose user's local IP. When this policy is used, WebRTC should only use
        /// the default route used by http. This doesn't expose any local addresses.
        /// </summary>
        | [<CompiledName("default_public_interface_only")>] DefaultPublicInterfaceOnly
        /// <summary>
        /// Exposes user's public and local IPs. When this policy is used, WebRTC should only use the default route used by
        /// http. This also exposes the associated default private address. Default route is the route chosen by the OS on a
        /// multi-homed endpoint.
        /// </summary>
        | [<CompiledName("default_public_and_private_interfaces")>] DefaultPublicAndPrivateInterfaces
        /// <summary>
        /// Does not expose public or local IPs. When this policy is used, WebRTC should only use TCP to contact peers
        /// or servers unless the proxy server supports UDP.
        /// </summary>
        | [<CompiledName("disable_non_proxied_udp")>] DisableNonProxiedUdp

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SaveType =
        /// <summary>
        /// Save only the HTML of the page.
        /// </summary>
        | [<CompiledName("HTMLOnly")>] HTMLOnly
        /// <summary>
        /// Save complete-html page.
        /// </summary>
        | [<CompiledName("HTMLComplete")>] HTMLComplete
        /// <summary>
        /// Save complete-html page as MHTML.
        /// </summary>
        | [<CompiledName("MHTML")>] MHTML

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type ScreenPosition =
        /// <summary>
        /// Desktop screen type.
        /// </summary>
        | [<CompiledName("desktop")>] Desktop
        /// <summary>
        /// Mobile screen type.
        /// </summary>
        | [<CompiledName("mobile")>] Mobile

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Mode =
        | [<CompiledName("left")>] Left
        | [<CompiledName("right")>] Right
        | [<CompiledName("bottom")>] Bottom
        | [<CompiledName("undocked")>] Undocked
        | [<CompiledName("detach")>] Detach

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type PageSize =
        | [<CompiledName("A0")>] A0
        | [<CompiledName("A1")>] A1
        | [<CompiledName("A2")>] A2
        | [<CompiledName("A3")>] A3
        | [<CompiledName("A4")>] A4
        | [<CompiledName("A5")>] A5
        | [<CompiledName("A6")>] A6
        | [<CompiledName("Legal")>] Legal
        | [<CompiledName("Letter")>] Letter
        | [<CompiledName("Tabloid")>] Tabloid
        | [<CompiledName("Ledger")>] Ledger

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Action =
        /// <summary>
        /// Clear the selection.
        /// </summary>
        | [<CompiledName("clearSelection")>] ClearSelection
        /// <summary>
        /// Translate the selection into a normal selection.
        /// </summary>
        | [<CompiledName("keepSelection")>] KeepSelection
        /// <summary>
        /// Focus and click the selection node.
        /// </summary>
        | [<CompiledName("activateSelection")>] ActivateSelection

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type CssOrigin =
        | [<CompiledName("user")>] User
        | [<CompiledName("author")>] Author

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type ZoomDirection =
        | [<CompiledName("in")>] In
        | [<CompiledName("out")>] Out

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SecureDnsPolicy =
        | [<CompiledName("allow")>] Allow
        | [<CompiledName("disable")>] Disable

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type CacheUsage =
        /// <summary>
        /// Results may come from the host cache if non-stale
        /// </summary>
        | [<CompiledName("allowed")>] Allowed
        /// <summary>
        /// Results may come from the host cache even if stale (by expiration or network changes)
        /// </summary>
        | [<CompiledName("staleAllowed")>] StaleAllowed
        /// <summary>
        /// Results will not come from the host cache.
        /// </summary>
        | [<CompiledName("disallowed")>] Disallowed

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Source =
        /// <summary>
        /// Resolver will pick an appropriate source. Results could come from DNS, MulticastDNS, HOSTS file, etc
        /// </summary>
        | [<CompiledName("any")>] Any
        /// <summary>
        /// Results will only be retrieved from the system or OS, e.g. via the <c>getaddrinfo()</c> system call
        /// </summary>
        | [<CompiledName("system")>] System
        /// <summary>
        /// Results will only come from DNS queries
        /// </summary>
        | [<CompiledName("dns")>] Dns
        /// <summary>
        /// Results will only come from Multicast DNS queries
        /// </summary>
        | [<CompiledName("mdns")>] Mdns
        /// <summary>
        /// No external sources will be used. Results will only come from fast local sources that are available no matter the
        /// source setting, e.g. cache, hosts file, IP literal resolution, etc.
        /// </summary>
        | [<CompiledName("localOnly")>] LocalOnly

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type QueryType =
        /// <summary>
        /// Fetch only A records
        /// </summary>
        | [<CompiledName("A")>] A
        /// <summary>
        /// Fetch only AAAA records.
        /// </summary>
        | [<CompiledName("AAAA")>] AAAA

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type EffectiveAppearance =
        | [<CompiledName("dark")>] Dark
        | [<CompiledName("light")>] Light
        | [<CompiledName("unknown")>] Unknown

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type MediaType =
        | [<CompiledName("microphone")>] Microphone
        | [<CompiledName("camera")>] Camera

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type GetMediaAccessStatus =
        | [<CompiledName("not-determined")>] NotDetermined
        | [<CompiledName("granted")>] Granted
        | [<CompiledName("denied")>] Denied
        | [<CompiledName("restricted")>] Restricted
        | [<CompiledName("unknown")>] Unknown

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type MediaType =
        | [<CompiledName("microphone")>] Microphone
        | [<CompiledName("camera")>] Camera
        | [<CompiledName("screen")>] Screen

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type GetEffectiveAppearance =
        | [<CompiledName("dark")>] Dark
        | [<CompiledName("light")>] Light
        | [<CompiledName("unknown")>] Unknown

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Color =
        | [<CompiledName("blue")>] Blue
        | [<CompiledName("brown")>] Brown
        | [<CompiledName("gray")>] Gray
        | [<CompiledName("green")>] Green
        | [<CompiledName("orange")>] Orange
        | [<CompiledName("pink")>] Pink
        | [<CompiledName("purple")>] Purple
        | [<CompiledName("red")>] Red
        | [<CompiledName("yellow")>] Yellow

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Color =
        /// <summary>
        /// Dark shadow for three-dimensional display elements.
        /// </summary>
        | [<CompiledName("3d-dark-shadow")>] 3dDarkShadow
        /// <summary>
        /// Face color for three-dimensional display elements and for dialog box backgrounds.
        /// </summary>
        | [<CompiledName("3d-face")>] 3dFace
        /// <summary>
        /// Highlight color for three-dimensional display elements.
        /// </summary>
        | [<CompiledName("3d-highlight")>] 3dHighlight
        /// <summary>
        /// Light color for three-dimensional display elements.
        /// </summary>
        | [<CompiledName("3d-light")>] 3dLight
        /// <summary>
        /// Shadow color for three-dimensional display elements.
        /// </summary>
        | [<CompiledName("3d-shadow")>] 3dShadow
        /// <summary>
        /// Active window border.
        /// </summary>
        | [<CompiledName("active-border")>] ActiveBorder
        /// <summary>
        /// Active window title bar. Specifies the left side color in the color gradient of an active window's title bar if
        /// the gradient effect is enabled.
        /// </summary>
        | [<CompiledName("active-caption")>] ActiveCaption
        /// <summary>
        /// Right side color in the color gradient of an active window's title bar.
        /// </summary>
        | [<CompiledName("active-caption-gradient")>] ActiveCaptionGradient
        /// <summary>
        /// Background color of multiple document interface (MDI) applications.
        /// </summary>
        | [<CompiledName("app-workspace")>] AppWorkspace
        /// <summary>
        /// Text on push buttons.
        /// </summary>
        | [<CompiledName("button-text")>] ButtonText
        /// <summary>
        /// Text in caption, size box, and scroll bar arrow box.
        /// </summary>
        | [<CompiledName("caption-text")>] CaptionText
        /// <summary>
        /// Desktop background color.
        /// </summary>
        | [<CompiledName("desktop")>] Desktop
        /// <summary>
        /// Grayed (disabled) text.
        /// </summary>
        | [<CompiledName("disabled-text")>] DisabledText
        /// <summary>
        /// Item(s) selected in a control.
        /// </summary>
        | [<CompiledName("highlight")>] Highlight
        /// <summary>
        /// Text of item(s) selected in a control.
        /// </summary>
        | [<CompiledName("highlight-text")>] HighlightText
        /// <summary>
        /// Color for a hyperlink or hot-tracked item.
        /// </summary>
        | [<CompiledName("hotlight")>] Hotlight
        /// <summary>
        /// Inactive window border.
        /// </summary>
        | [<CompiledName("inactive-border")>] InactiveBorder
        /// <summary>
        /// Inactive window caption. Specifies the left side color in the color gradient of an inactive window's title bar if the
        /// gradient effect is enabled.
        /// </summary>
        | [<CompiledName("inactive-caption")>] InactiveCaption
        /// <summary>
        /// Right side color in the color gradient of an inactive window's title bar.
        /// </summary>
        | [<CompiledName("inactive-caption-gradient")>] InactiveCaptionGradient
        /// <summary>
        /// Color of text in an inactive caption.
        /// </summary>
        | [<CompiledName("inactive-caption-text")>] InactiveCaptionText
        /// <summary>
        /// Background color for tooltip controls.
        /// </summary>
        | [<CompiledName("info-background")>] InfoBackground
        /// <summary>
        /// Text color for tooltip controls.
        /// </summary>
        | [<CompiledName("info-text")>] InfoText
        /// <summary>
        /// Menu background.
        /// </summary>
        | [<CompiledName("menu")>] Menu
        /// <summary>
        /// The color used to highlight menu items when the menu appears as a flat menu.
        /// </summary>
        | [<CompiledName("menu-highlight")>] MenuHighlight
        /// <summary>
        /// The background color for the menu bar when menus appear as flat menus.
        /// </summary>
        | [<CompiledName("menubar")>] Menubar
        /// <summary>
        /// Text in menus.
        /// </summary>
        | [<CompiledName("menu-text")>] MenuText
        /// <summary>
        /// Scroll bar gray area.
        /// </summary>
        | [<CompiledName("scrollbar")>] Scrollbar
        /// <summary>
        /// Window background.
        /// </summary>
        | [<CompiledName("window")>] Window
        /// <summary>
        /// Window frame.
        /// </summary>
        | [<CompiledName("window-frame")>] WindowFrame
        /// <summary>
        /// Text in windows.
        /// </summary>
        | [<CompiledName("window-text")>] WindowText
        /// <summary>
        /// The background of a large interface element, such as a browser or table.
        /// </summary>
        | [<CompiledName("control-background")>] ControlBackground
        /// <summary>
        /// The surface of a control.
        /// </summary>
        | [<CompiledName("control")>] Control
        /// <summary>
        /// The text of a control that isn’t disabled.
        /// </summary>
        | [<CompiledName("control-text")>] ControlText
        /// <summary>
        /// The text of a control that’s disabled.
        /// </summary>
        | [<CompiledName("disabled-control-text")>] DisabledControlText
        /// <summary>
        /// The color of a find indicator.
        /// </summary>
        | [<CompiledName("find-highlight")>] FindHighlight
        /// <summary>
        /// The gridlines of an interface element such as a table.
        /// </summary>
        | [<CompiledName("grid")>] Grid
        /// <summary>
        /// The text of a header cell in a table.
        /// </summary>
        | [<CompiledName("header-text")>] HeaderText
        /// <summary>
        /// The virtual light source onscreen.
        /// </summary>
        | [<CompiledName("highlight")>] Highlight
        /// <summary>
        /// The ring that appears around the currently focused control when using the keyboard for interface navigation.
        /// </summary>
        | [<CompiledName("keyboard-focus-indicator")>] KeyboardFocusIndicator
        /// <summary>
        /// The text of a label containing primary content.
        /// </summary>
        | [<CompiledName("label")>] Label
        /// <summary>
        /// A link to other content.
        /// </summary>
        | [<CompiledName("link")>] Link
        /// <summary>
        ///  A placeholder string in a control or text view.
        /// </summary>
        | [<CompiledName("placeholder-text")>] PlaceholderText
        /// <summary>
        /// The text of a label of lesser importance than a tertiary label such as watermark text.
        /// </summary>
        | [<CompiledName("quaternary-label")>] QuaternaryLabel
        /// <summary>
        /// The background of a scrubber in the Touch Bar.
        /// </summary>
        | [<CompiledName("scrubber-textured-background")>] ScrubberTexturedBackground
        /// <summary>
        /// The text of a label of lesser importance than a normal label such as a label used to represent a
        /// subheading or additional information.
        /// </summary>
        | [<CompiledName("secondary-label")>] SecondaryLabel
        /// <summary>
        /// The background for selected content in a key window or view.
        /// </summary>
        | [<CompiledName("selected-content-background")>] SelectedContentBackground
        /// <summary>
        /// The surface of a selected control.
        /// </summary>
        | [<CompiledName("selected-control")>] SelectedControl
        /// <summary>
        /// The text of a selected control.
        /// </summary>
        | [<CompiledName("selected-control-text")>] SelectedControlText
        /// <summary>
        /// The text of a selected menu.
        /// </summary>
        | [<CompiledName("selected-menu-item-text")>] SelectedMenuItemText
        /// <summary>
        /// The background of selected text.
        /// </summary>
        | [<CompiledName("selected-text-background")>] SelectedTextBackground
        /// <summary>
        /// Selected text.
        /// </summary>
        | [<CompiledName("selected-text")>] SelectedText
        /// <summary>
        /// A separator between different sections of content.
        /// </summary>
        | [<CompiledName("separator")>] Separator
        /// <summary>
        /// The virtual shadow cast by a raised object onscreen.
        /// </summary>
        | [<CompiledName("shadow")>] Shadow
        /// <summary>
        /// The text of a label of lesser importance than a secondary label such as a label used to represent disabled
        /// text.
        /// </summary>
        | [<CompiledName("tertiary-label")>] TertiaryLabel
        /// <summary>
        /// Text background.
        /// </summary>
        | [<CompiledName("text-background")>] TextBackground
        /// <summary>
        ///  The text in a document.
        /// </summary>
        | [<CompiledName("text")>] Text
        /// <summary>
        ///  The background behind a document's content.
        /// </summary>
        | [<CompiledName("under-page-background")>] UnderPageBackground
        /// <summary>
        /// The selected content in a non-key window or view.
        /// </summary>
        | [<CompiledName("unemphasized-selected-content-background")>] UnemphasizedSelectedContentBackground
        /// <summary>
        /// A background for selected text in a non-key window or view.
        /// </summary>
        | [<CompiledName("unemphasized-selected-text-background")>] UnemphasizedSelectedTextBackground
        /// <summary>
        /// Selected text in a non-key window or view.
        /// </summary>
        | [<CompiledName("unemphasized-selected-text")>] UnemphasizedSelectedText
        /// <summary>
        /// The background of a window.
        /// </summary>
        | [<CompiledName("window-background")>] WindowBackground
        /// <summary>
        /// The text in the window's titlebar area.
        /// </summary>
        | [<CompiledName("window-frame-text")>] WindowFrameText

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("clipboard")>] Clipboard

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Quality =
        | [<CompiledName("good")>] Good
        | [<CompiledName("better")>] Better
        | [<CompiledName("best")>] Best

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        /// <summary>
        /// The main process
        /// </summary>
        | [<CompiledName("browser")>] Browser
        /// <summary>
        /// A renderer process
        /// </summary>
        | [<CompiledName("renderer")>] Renderer
        /// <summary>
        /// In a service worker
        /// </summary>
        | [<CompiledName("service-worker")>] ServiceWorker
        /// <summary>
        /// In a web worker
        /// </summary>
        | [<CompiledName("worker")>] Worker
        /// <summary>
        /// In a node process launched as a service
        /// </summary>
        | [<CompiledName("utility")>] Utility

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Operation =
        /// <summary>
        /// Creates a new shortcut, overwriting if necessary.
        /// </summary>
        | [<CompiledName("create")>] Create
        /// <summary>
        /// Updates specified properties only on an existing shortcut.
        /// </summary>
        | [<CompiledName("update")>] Update
        /// <summary>
        /// Overwrites an existing shortcut, fails if the shortcut doesn't exist.
        /// </summary>
        | [<CompiledName("replace")>] Replace

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type = | [<CompiledName("FatalError")>] FatalError

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type CssOrigin =
        | [<CompiledName("user")>] User
        | [<CompiledName("author")>] Author

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type PageSize =
        | [<CompiledName("A0")>] A0
        | [<CompiledName("A1")>] A1
        | [<CompiledName("A2")>] A2
        | [<CompiledName("A3")>] A3
        | [<CompiledName("A4")>] A4
        | [<CompiledName("A5")>] A5
        | [<CompiledName("A6")>] A6
        | [<CompiledName("Legal")>] Legal
        | [<CompiledName("Letter")>] Letter
        | [<CompiledName("Tabloid")>] Tabloid
        | [<CompiledName("Ledger")>] Ledger

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type PageSize =
        | [<CompiledName("A3")>] A3
        | [<CompiledName("A4")>] A4
        | [<CompiledName("A5")>] A5
        | [<CompiledName("Legal")>] Legal
        | [<CompiledName("Letter")>] Letter
        | [<CompiledName("Tabloid")>] Tabloid

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type DuplexMode =
        | [<CompiledName("simplex")>] Simplex
        | [<CompiledName("shortEdge")>] ShortEdge
        | [<CompiledName("longEdge")>] LongEdge

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Action =
        /// <summary>
        /// Clear the selection.
        /// </summary>
        | [<CompiledName("clearSelection")>] ClearSelection
        /// <summary>
        /// Translate the selection into a normal selection.
        /// </summary>
        | [<CompiledName("keepSelection")>] KeepSelection
        /// <summary>
        /// Focus and click the selection node.
        /// </summary>
        | [<CompiledName("activateSelection")>] ActivateSelection

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type BackgroundMaterial =
        | [<CompiledName("auto")>] Auto
        | [<CompiledName("none")>] None
        | [<CompiledName("mica")>] Mica
        | [<CompiledName("acrylic")>] Acrylic
        | [<CompiledName("tabbed")>] Tabbed

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Vibrancy =
        | [<CompiledName("appearance-based")>] AppearanceBased
        | [<CompiledName("titlebar")>] Titlebar
        | [<CompiledName("selection")>] Selection
        | [<CompiledName("menu")>] Menu
        | [<CompiledName("popover")>] Popover
        | [<CompiledName("sidebar")>] Sidebar
        | [<CompiledName("header")>] Header
        | [<CompiledName("sheet")>] Sheet
        | [<CompiledName("window")>] Window
        | [<CompiledName("hud")>] Hud
        | [<CompiledName("fullscreen-ui")>] FullscreenUi
        | [<CompiledName("tooltip")>] Tooltip
        | [<CompiledName("content")>] Content
        | [<CompiledName("under-window")>] UnderWindow
        | [<CompiledName("under-page")>] UnderPage

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type TitleBarStyle =
        /// <summary>
        /// Results in the standard title bar for macOS or Windows respectively.
        /// </summary>
        | [<CompiledName("default")>] Default
        /// <summary>
        /// Results in a hidden title bar and a full size content window. On macOS, the window still has the standard
        /// window controls (“traffic lights”) in the top left. On Windows and Linux, when combined with <c>titleBarOverlay: true</c> it will activate
        /// the Window Controls Overlay (see <c>titleBarOverlay</c> for more information), otherwise no window controls will be shown.
        /// </summary>
        | [<CompiledName("hidden")>] Hidden
        /// <summary>
        /// Results in a hidden title bar with an alternative look where the traffic light buttons are slightly more inset from
        /// the window edge.
        /// </summary>
        | [<CompiledName("hiddenInset")>] HiddenInset
        /// <summary>
        /// Results in a hidden title bar and a full size content window, the traffic light buttons will display when being
        /// hovered over in the top left of the window. **Note:** This option is currently experimental.
        /// </summary>
        | [<CompiledName("customButtonsOnHover")>] CustomButtonsOnHover

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type VisualEffectState =
        /// <summary>
        /// The backdrop should automatically appear active when the window is active, and inactive when it is not. This is the
        /// default.
        /// </summary>
        | [<CompiledName("followWindow")>] FollowWindow
        /// <summary>
        /// The backdrop should always appear active.
        /// </summary>
        | [<CompiledName("active")>] Active
        /// <summary>
        /// The backdrop should always appear inactive.
        /// </summary>
        | [<CompiledName("inactive")>] Inactive

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type SameSite =
        | [<CompiledName("unspecified")>] Unspecified
        | [<CompiledName("no_restriction")>] NoRestriction
        | [<CompiledName("lax")>] Lax
        | [<CompiledName("strict")>] Strict

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type TouchSupport =
        | [<CompiledName("available")>] Available
        | [<CompiledName("unavailable")>] Unavailable
        | [<CompiledName("unknown")>] Unknown

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type AccelerometerSupport =
        | [<CompiledName("available")>] Available
        | [<CompiledName("unavailable")>] Unavailable
        | [<CompiledName("unknown")>] Unknown

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type FileAccessType =
        | [<CompiledName("writable")>] Writable
        | [<CompiledName("readable")>] Readable

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type = | [<CompiledName("frame")>] Frame

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type = | [<CompiledName("frame")>] Frame

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type = | [<CompiledName("service-worker")>] ServiceWorker

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type = | [<CompiledName("service-worker")>] ServiceWorker

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        /// <summary>
        /// Items in this category will be placed into the standard <c>Tasks</c> category. There can be only one such category, and
        /// it will always be displayed at the bottom of the Jump List.
        /// </summary>
        | [<CompiledName("tasks")>] Tasks
        /// <summary>
        /// Displays a list of files frequently opened by the app, the name of the category and its items are set
        /// by Windows.
        /// </summary>
        | [<CompiledName("frequent")>] Frequent
        /// <summary>
        /// Displays a list of files recently opened by the app, the name of the category and its items are set
        /// by Windows. Items may be added to this category indirectly using <c>app.addRecentDocument(path)</c>.
        /// </summary>
        | [<CompiledName("recent")>] Recent
        /// <summary>
        /// Displays tasks or file links, <c>name</c> must be set by the app.
        /// </summary>
        | [<CompiledName("custom")>] Custom

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        /// <summary>
        /// A task will launch an app with specific arguments.
        /// </summary>
        | [<CompiledName("task")>] Task
        /// <summary>
        /// Can be used to separate items in the standard <c>Tasks</c> category.
        /// </summary>
        | [<CompiledName("separator")>] Separator
        /// <summary>
        /// A file link will open a file using the app that created the Jump List, for this to work the
        /// app must be registered as a handler for the file type (though it doesn't have to be the default handler).
        /// </summary>
        | [<CompiledName("file")>] File

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("rawKeyDown")>] RawKeyDown
        | [<CompiledName("keyDown")>] KeyDown
        | [<CompiledName("keyUp")>] KeyUp
        | [<CompiledName("char")>] Char

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type MediaTypes =
        | [<CompiledName("video")>] Video
        | [<CompiledName("audio")>] Audio

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Modifiers =
        | [<CompiledName("shift")>] Shift
        | [<CompiledName("control")>] Control
        | [<CompiledName("ctrl")>] Ctrl
        | [<CompiledName("alt")>] Alt
        | [<CompiledName("meta")>] Meta
        | [<CompiledName("command")>] Command
        | [<CompiledName("cmd")>] Cmd
        | [<CompiledName("iskeypad")>] IsKeypad
        | [<CompiledName("isautorepeat")>] IsAutoRepeat
        | [<CompiledName("leftbuttondown")>] LeftButtonDown
        | [<CompiledName("middlebuttondown")>] MiddleButtonDown
        | [<CompiledName("rightbuttondown")>] RightButtonDown
        | [<CompiledName("capslock")>] CapsLock
        | [<CompiledName("numlock")>] NumLock
        | [<CompiledName("left")>] Left
        | [<CompiledName("right")>] Right

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("undefined")>] Undefined
        | [<CompiledName("mouseDown")>] MouseDown
        | [<CompiledName("mouseUp")>] MouseUp
        | [<CompiledName("mouseMove")>] MouseMove
        | [<CompiledName("mouseEnter")>] MouseEnter
        | [<CompiledName("mouseLeave")>] MouseLeave
        | [<CompiledName("contextMenu")>] ContextMenu
        | [<CompiledName("mouseWheel")>] MouseWheel
        | [<CompiledName("rawKeyDown")>] RawKeyDown
        | [<CompiledName("keyDown")>] KeyDown
        | [<CompiledName("keyUp")>] KeyUp
        | [<CompiledName("char")>] Char
        | [<CompiledName("gestureScrollBegin")>] GestureScrollBegin
        | [<CompiledName("gestureScrollEnd")>] GestureScrollEnd
        | [<CompiledName("gestureScrollUpdate")>] GestureScrollUpdate
        | [<CompiledName("gestureFlingStart")>] GestureFlingStart
        | [<CompiledName("gestureFlingCancel")>] GestureFlingCancel
        | [<CompiledName("gesturePinchBegin")>] GesturePinchBegin
        | [<CompiledName("gesturePinchEnd")>] GesturePinchEnd
        | [<CompiledName("gesturePinchUpdate")>] GesturePinchUpdate
        | [<CompiledName("gestureTapDown")>] GestureTapDown
        | [<CompiledName("gestureShowPress")>] GestureShowPress
        | [<CompiledName("gestureTap")>] GestureTap
        | [<CompiledName("gestureTapCancel")>] GestureTapCancel
        | [<CompiledName("gestureShortPress")>] GestureShortPress
        | [<CompiledName("gestureLongPress")>] GestureLongPress
        | [<CompiledName("gestureLongTap")>] GestureLongTap
        | [<CompiledName("gestureTwoFingerTap")>] GestureTwoFingerTap
        | [<CompiledName("gestureTapUnconfirmed")>] GestureTapUnconfirmed
        | [<CompiledName("gestureDoubleTap")>] GestureDoubleTap
        | [<CompiledName("touchStart")>] TouchStart
        | [<CompiledName("touchMove")>] TouchMove
        | [<CompiledName("touchEnd")>] TouchEnd
        | [<CompiledName("touchCancel")>] TouchCancel
        | [<CompiledName("touchScrollStarted")>] TouchScrollStarted
        | [<CompiledName("pointerDown")>] PointerDown
        | [<CompiledName("pointerUp")>] PointerUp
        | [<CompiledName("pointerMove")>] PointerMove
        | [<CompiledName("pointerRawUpdate")>] PointerRawUpdate
        | [<CompiledName("pointerCancel")>] PointerCancel
        | [<CompiledName("pointerCausedUaAction")>] PointerCausedUaAction

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Button =
        | [<CompiledName("left")>] Left
        | [<CompiledName("middle")>] Middle
        | [<CompiledName("right")>] Right

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("mouseDown")>] MouseDown
        | [<CompiledName("mouseUp")>] MouseUp
        | [<CompiledName("mouseEnter")>] MouseEnter
        | [<CompiledName("mouseLeave")>] MouseLeave
        | [<CompiledName("contextMenu")>] ContextMenu
        | [<CompiledName("mouseWheel")>] MouseWheel
        | [<CompiledName("mouseMove")>] MouseMove

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type = | [<CompiledName("mouseWheel")>] MouseWheel

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type = | [<CompiledName("button")>] Button

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("frame")>] Frame
        | [<CompiledName("service-worker")>] ServiceWorker

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("frame")>] Frame
        | [<CompiledName("service-worker")>] ServiceWorker

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type IntegrityLevel =
        | [<CompiledName("untrusted")>] Untrusted
        | [<CompiledName("low")>] Low
        | [<CompiledName("medium")>] Medium
        | [<CompiledName("high")>] High
        | [<CompiledName("unknown")>] Unknown

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Type =
        | [<CompiledName("Browser")>] Browser
        | [<CompiledName("Tab")>] Tab
        | [<CompiledName("Utility")>] Utility
        | [<CompiledName("Zygote")>] Zygote
        | [<CompiledName("Sandbox helper")>] SandboxHelper
        | [<CompiledName("GPU")>] GPU
        | [<CompiledName("Pepper Plugin")>] PepperPlugin
        | [<CompiledName("Pepper Plugin Broker")>] PepperPluginBroker
        | [<CompiledName("Unknown")>] Unknown

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type PaymentMode =
        | [<CompiledName("payAsYouGo")>] PayAsYouGo
        | [<CompiledName("payUpFront")>] PayUpFront
        | [<CompiledName("freeTrial")>] FreeTrial

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Unit =
        | [<CompiledName("day")>] Day
        | [<CompiledName("week")>] Week
        | [<CompiledName("month")>] Month
        | [<CompiledName("year")>] Year

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Mode =
        /// <summary>
        /// In direct mode all connections are created directly, without any proxy involved.
        /// </summary>
        | [<CompiledName("direct")>] Direct
        /// <summary>
        /// In auto_detect mode the proxy configuration is determined by a PAC script that can be downloaded at http://wpad/wpad.dat.
        /// </summary>
        | [<CompiledName("auto_detect")>] AutoDetect
        /// <summary>
        /// In pac_script mode the proxy configuration is determined by a PAC script that is retrieved from the URL specified in
        /// the <c>pacScript</c>. This is the default mode if <c>pacScript</c> is specified.
        /// </summary>
        | [<CompiledName("pac_script")>] PacScript
        /// <summary>
        /// In fixed_servers mode the proxy configuration is specified in <c>proxyRules</c>. This is the default mode if <c>proxyRules</c> is specified.
        /// </summary>
        | [<CompiledName("fixed_servers")>] FixedServers
        /// <summary>
        /// In system mode the proxy configuration is taken from the operating system. Note that the system mode is different from
        /// setting no proxy configuration. In the latter case, Electron falls back to the system settings only if no command-line options
        /// influence the proxy configuration.
        /// </summary>
        | [<CompiledName("system")>] System

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Policy =
        | [<CompiledName("default")>] Default
        | [<CompiledName("unsafe-url")>] UnsafeUrl
        | [<CompiledName("no-referrer-when-downgrade")>] NoReferrerWhenDowngrade
        | [<CompiledName("no-referrer")>] NoReferrer
        | [<CompiledName("origin")>] Origin
        | [<CompiledName("strict-origin-when-cross-origin")>] StrictOriginWhenCrossOrigin
        | [<CompiledName("same-origin")>] SameOrigin
        | [<CompiledName("strict-origin")>] StrictOrigin

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Reason =
        /// <summary>
        /// Process exited with an exit code of zero
        /// </summary>
        | [<CompiledName("clean-exit")>] CleanExit
        /// <summary>
        /// Process exited with a non-zero exit code
        /// </summary>
        | [<CompiledName("abnormal-exit")>] AbnormalExit
        /// <summary>
        /// Process was sent a SIGTERM or otherwise killed externally
        /// </summary>
        | [<CompiledName("killed")>] Killed
        /// <summary>
        /// Process crashed
        /// </summary>
        | [<CompiledName("crashed")>] Crashed
        /// <summary>
        /// Process ran out of memory
        /// </summary>
        | [<CompiledName("oom")>] Oom
        /// <summary>
        /// Process never successfully launched
        /// </summary>
        | [<CompiledName("launch-failed")>] LaunchFailed
        /// <summary>
        /// Windows code integrity checks failed
        /// </summary>
        | [<CompiledName("integrity-failure")>] IntegrityFailure

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Family =
        /// <summary>
        /// Corresponds to <c>AF_INET</c>
        /// </summary>
        | [<CompiledName("ipv4")>] Ipv4
        /// <summary>
        /// Corresponds to <c>AF_INET6</c>
        /// </summary>
        | [<CompiledName("ipv6")>] Ipv6
        /// <summary>
        /// Corresponds to <c>AF_UNSPEC</c>
        /// </summary>
        | [<CompiledName("unspec")>] Unspec

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type RecordingMode =
        | [<CompiledName("record-until-full")>] RecordUntilFull
        | [<CompiledName("record-continuously")>] RecordContinuously
        | [<CompiledName("record-as-much-as-possible")>] RecordAsMuchAsPossible
        | [<CompiledName("trace-to-console")>] TraceToConsole

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type TransactionState =
        | [<CompiledName("purchasing")>] Purchasing
        | [<CompiledName("purchased")>] Purchased
        | [<CompiledName("failed")>] Failed
        | [<CompiledName("restored")>] Restored
        | [<CompiledName("deferred")>] Deferred

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type V8CacheOptions =
        /// <summary>
        /// Disables code caching
        /// </summary>
        | [<CompiledName("none")>] None
        /// <summary>
        /// Heuristic based code caching
        /// </summary>
        | [<CompiledName("code")>] Code
        /// <summary>
        /// Bypass code caching heuristics but with lazy compilation
        /// </summary>
        | [<CompiledName("bypassHeatCheck")>] BypassHeatCheck
        /// <summary>
        /// Same as above except compilation is eager. Default policy is <c>code</c>.
        /// </summary>
        | [<CompiledName("bypassHeatCheckAndEagerCompile")>] BypassHeatCheckAndEagerCompile

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type AutoplayPolicy =
        | [<CompiledName("no-user-gesture-required")>] NoUserGestureRequired
        | [<CompiledName("user-gesture-required")>] UserGestureRequired
        | [<CompiledName("document-user-activation-required")>] DocumentUserActivationRequired

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type ImageAnimationPolicy =
        | [<CompiledName("animate")>] Animate
        | [<CompiledName("animateOnce")>] AnimateOnce
        | [<CompiledName("noAnimation")>] NoAnimation

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Types =
        | [<CompiledName("mainFrame")>] MainFrame
        | [<CompiledName("subFrame")>] SubFrame
        | [<CompiledName("stylesheet")>] Stylesheet
        | [<CompiledName("script")>] Script
        | [<CompiledName("image")>] Image
        | [<CompiledName("font")>] Font
        | [<CompiledName("object")>] Object
        | [<CompiledName("xhr")>] Xhr
        | [<CompiledName("ping")>] Ping
        | [<CompiledName("cspReport")>] CspReport
        | [<CompiledName("media")>] Media
        | [<CompiledName("webSocket")>] WebSocket

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Action =
        | [<CompiledName("allow")>] Allow
        | [<CompiledName("deny")>] Deny

    [<StringEnum(CaseRules.None); RequireQualifiedAccess>]
    type Reasons =
        | [<CompiledName("shutdown")>] Shutdown
        | [<CompiledName("close-app")>] CloseApp
        | [<CompiledName("critical")>] Critical
        | [<CompiledName("logoff")>] Logoff

module Renderer =
    /// <summary>
    /// <para>⚠ Process Availability: Main ❌ | Renderer ✔ | Utility ❌ | Exported ❌</para>
    /// <br/><br/>### Warning<br/><br/>Electron's <c>webview</c> tag is based on Chromium's <c>webview</c>, which is undergoing dramatic architectural changes. This impacts the stability of
    /// <c>webviews</c>, including rendering, navigation, and event routing. We currently recommend to not use the <c>webview</c> tag and to consider alternatives,
    /// like <c>iframe</c>, a <c>WebContentsView</c>, or an architecture that avoids embedded content altogether.<br/><br/>### Enabling<br/><br/>By default the <c>webview</c> tag is disabled in
    /// Electron &gt;= 5.  You need to enable the tag by setting the <c>webviewTag</c> webPreferences option when constructing your <c>BrowserWindow</c>.
    /// For more information see the BrowserWindow constructor docs.<br/><br/>### Overview<br/><br/>&gt; Display external web content in an isolated frame and process.<br/><br/>Process: Renderer<br/>
    /// _This class is not exported from the <c>'electron'</c> module. It is only available as a return value of other methods
    /// in the Electron API._<br/><br/>Use the <c>webview</c> tag to embed 'guest' content (such as web pages) in your Electron app. The
    /// guest content is contained within the <c>webview</c> container. An embedded page within your app controls how the guest content is
    /// laid out and rendered.<br/><br/>Unlike an <c>iframe</c>, the <c>webview</c> runs in a separate process than your app. It doesn't have the
    /// same permissions as your web page and all interactions between your app and embedded content will be asynchronous. This keeps
    /// your app safe from the embedded content.<br/><br/>&gt; [!NOTE] Most methods called on the webview from the host page require a
    /// synchronous call to the main process.<br/><br/>### Example<br/><br/>To embed a web page in your app, add the <c>webview</c> tag to your
    /// app's embedder page (this is the app page that will display the guest content). In its simplest form, the <c>webview</c>
    /// tag includes the <c>src</c> of the web page and css styles that control the appearance of the <c>webview</c> container:<br/><br/><code><br/>&lt;webview id="foo"
    /// src="https://www.github.com/" style="display:inline-flex; width:640px; height:480px"&gt;&lt;/webview&gt;<br/></code><br/><br/>If you want to control the guest content in any way, you can write JavaScript that listens
    /// for <c>webview</c> events and responds to those events using the <c>webview</c> methods. Here's sample code with two event listeners: one
    /// that listens for the web page to start loading, the other for the web page to stop loading, and displays
    /// a "loading..." message during the load time:<br/><br/><code><br/>&lt;script&gt;<br/>  onload = () =&gt; {<br/>    const webview = document.querySelector('webview')<br/>
    ///    const indicator = document.querySelector('.indicator')<br/><br/>    const loadstart = () =&gt; {<br/>
    ///  indicator.innerText = 'loading...'<br/>    }<br/><br/>    const loadstop = () =&gt; {<br/>
    ///   indicator.innerText = ''<br/>    }<br/><br/>    webview.addEventListener('did-start-loading', loadstart)<br/>    webview.addEventListener('did-stop-loading', loadstop)<br/>
    /// }<br/>&lt;/script&gt;<br/></code><br/><br/>### Internal implementation<br/><br/>Under the hood <c>webview</c> is implemented with Out-of-Process iframes (OOPIFs). The <c>webview</c> tag is essentially a custom element
    /// using shadow DOM to wrap an <c>iframe</c> element inside it.<br/><br/>So the behavior of <c>webview</c> is very similar to a cross-domain
    /// <c>iframe</c>, as examples:<br/><br/>* When clicking into a <c>webview</c>, the page focus will move from the embedder frame to <c>webview</c>.<br/>* You
    /// can not add keyboard, mouse, and scroll event listeners to <c>webview</c>.<br/>* All reactions between the embedder frame and <c>webview</c> are
    /// asynchronous.<br/><br/>### CSS Styling Notes<br/><br/>Please note that the <c>webview</c> tag's style uses <c>display:flex;</c> internally to ensure the child <c>iframe</c> element fills
    /// the full height and width of its <c>webview</c> container when used with traditional and flexbox layouts. Please do not overwrite
    /// the default <c>display:flex;</c> CSS property, unless specifying <c>display:inline-flex;</c> for inline layout.<br/><br/>### Tag Attributes<br/><br/>The <c>webview</c> tag has the following attributes:<br/><br/>### <c>src</c><br/><br/><code><br/>&lt;webview
    /// src="https://www.github.com/"&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>string</c> representing the visible URL. Writing to this attribute initiates top-level navigation.<br/><br/>Assigning <c>src</c> its own value will reload the
    /// current page.<br/><br/>The <c>src</c> attribute can also accept data URLs, such as <c>data:text/plain,Hello, world!</c>.<br/><br/>### <c>nodeintegration</c><br/><br/><code><br/>&lt;webview src="https://www.google.com/" nodeintegration&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>boolean</c>. When this attribute
    /// is present the guest page in <c>webview</c> will have node integration and can use node APIs like <c>require</c> and <c>process</c>
    /// to access low level system resources. Node integration is disabled by default in the guest page.<br/><br/>### <c>nodeintegrationinsubframes</c><br/><br/><code><br/>&lt;webview src="https://www.google.com/" nodeintegrationinsubframes&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>boolean</c>
    /// for the experimental option for enabling NodeJS support in sub-frames such as iframes inside the <c>webview</c>. All your preloads will
    /// load for every iframe, you can use <c>process.isMainFrame</c> to determine if you are in the main frame or not. This
    /// option is disabled by default in the guest page.<br/><br/>### <c>plugins</c><br/><br/><code><br/>&lt;webview src="https://www.github.com/" plugins&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>boolean</c>. When this attribute is present the guest
    /// page in <c>webview</c> will be able to use browser plugins. Plugins are disabled by default.<br/><br/>### <c>preload</c><br/><br/><code><br/>&lt;!-- from a file --&gt;<br/>&lt;webview
    /// src="https://www.github.com/" preload="./test.js"&gt;&lt;/webview&gt;<br/>&lt;!-- or if you want to load from an asar archive --&gt;<br/>&lt;webview src="https://www.github.com/" preload="./app.asar/test.js"&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>string</c> that specifies a script
    /// that will be loaded before other scripts run in the guest page. The protocol of script's URL must be <c>file:</c>
    /// (even when using <c>asar:</c> archives) because it will be loaded by Node's <c>require</c> under the hood, which treats <c>asar:</c> archives
    /// as virtual directories.<br/><br/>When the guest page doesn't have node integration this script will still have access to all Node APIs,
    /// but global objects injected by Node will be deleted after this script has finished executing.<br/><br/>### <c>httpreferrer</c><br/><br/><code><br/>&lt;webview src="https://www.github.com/" httpreferrer="https://example.com/"&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>string</c> that
    /// sets the referrer URL for the guest page.<br/><br/>### <c>useragent</c><br/><br/><code><br/>&lt;webview src="https://www.github.com/" useragent="Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko"&gt;&lt;/webview&gt;<br/></code><br/><br/>A
    /// <c>string</c> that sets the user agent for the guest page before the page is navigated to. Once the page is
    /// loaded, use the <c>setUserAgent</c> method to change the user agent.<br/><br/>### <c>disablewebsecurity</c><br/><br/><code><br/>&lt;webview src="https://www.github.com/" disablewebsecurity&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>boolean</c>. When this attribute is present the
    /// guest page will have web security disabled. Web security is enabled by default.<br/><br/>This value can only be modified before the
    /// first navigation.<br/><br/>### <c>partition</c><br/><br/><code><br/>&lt;webview src="https://github.com" partition="persist:github"&gt;&lt;/webview&gt;<br/>&lt;webview src="https://electronjs.org" partition="electron"&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>string</c> that sets the session used by the page. If <c>partition</c> starts with
    /// <c>persist:</c>, the page will use a persistent session available to all pages in the app with the same <c>partition</c>. if
    /// there is no <c>persist:</c> prefix, the page will use an in-memory session. By assigning the same <c>partition</c>, multiple pages can
    /// share the same session. If the <c>partition</c> is unset then default session of the app will be used.<br/><br/>This value can
    /// only be modified before the first navigation, since the session of an active renderer process cannot change. Subsequent attempts to
    /// modify the value will fail with a DOM exception.<br/><br/>### <c>allowpopups</c><br/><br/><code><br/>&lt;webview src="https://www.github.com/" allowpopups&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>boolean</c>. When this attribute is present the guest
    /// page will be allowed to open new windows. Popups are disabled by default.<br/><br/>### <c>webpreferences</c><br/><br/><code><br/>&lt;webview src="https://github.com" webpreferences="allowRunningInsecureContent, javascript=no"&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>string</c> which is
    /// a comma separated list of strings which specifies the web preferences to be set on the webview. The full list
    /// of supported preference strings can be found in BrowserWindow.<br/><br/>The string follows the same format as the features string in <c>window.open</c>.
    /// A name by itself is given a <c>true</c> boolean value. A preference can be set to another value by including
    /// an <c>=</c>, followed by the value. Special values <c>yes</c> and <c>1</c> are interpreted as <c>true</c>, while <c>no</c> and <c>0</c> are
    /// interpreted as <c>false</c>.<br/><br/>### <c>enableblinkfeatures</c><br/><br/><code><br/>&lt;webview src="https://www.github.com/" enableblinkfeatures="PreciseMemoryInfo, CSSVariables"&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>string</c> which is a list of strings which specifies the blink features to
    /// be enabled separated by <c>,</c>. The full list of supported feature strings can be found in the RuntimeEnabledFeatures.json5 file.<br/><br/>### <c>disableblinkfeatures</c><br/><br/><code><br/>&lt;webview
    /// src="https://www.github.com/" disableblinkfeatures="PreciseMemoryInfo, CSSVariables"&gt;&lt;/webview&gt;<br/></code><br/><br/>A <c>string</c> which is a list of strings which specifies the blink features to be disabled separated by
    /// <c>,</c>. The full list of supported feature strings can be found in the RuntimeEnabledFeatures.json5 file.
    /// </summary>
    [<Import("webviewTag", "electron")>]
    type WebviewTag =
        interface EventEmitter

        /// <summary>
        /// Fired when a load has committed. This includes navigation within the current document as well as subframe document-level loads, but
        /// does not include asynchronous resource loads.
        /// </summary>
        [<Emit("$0.on('load-commit', $1)")>]
        member inline _.onLoadCommit(handler: string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a load has committed. This includes navigation within the current document as well as subframe document-level loads, but
        /// does not include asynchronous resource loads.
        /// </summary>
        [<Emit("$0.on('load-commit', $1)")>]
        member inline _.onLoadCommit(handler: Fable.Electron.EventInterfaces.Root.IOnLoadCommit -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a load has committed. This includes navigation within the current document as well as subframe document-level loads, but
        /// does not include asynchronous resource loads.
        /// </summary>
        [<Emit("$0.once('load-commit', $1)")>]
        member inline _.onceLoadCommit(handler: string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a load has committed. This includes navigation within the current document as well as subframe document-level loads, but
        /// does not include asynchronous resource loads.
        /// </summary>
        [<Emit("$0.once('load-commit', $1)")>]
        member inline _.onceLoadCommit(handler: Fable.Electron.EventInterfaces.Root.IOnLoadCommit -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a load has committed. This includes navigation within the current document as well as subframe document-level loads, but
        /// does not include asynchronous resource loads.
        /// </summary>
        [<Emit("$0.off('load-commit', $1)")>]
        member inline _.offLoadCommit(handler: string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a load has committed. This includes navigation within the current document as well as subframe document-level loads, but
        /// does not include asynchronous resource loads.
        /// </summary>
        [<Emit("$0.off('load-commit', $1)")>]
        member inline _.offLoadCommit(handler: Fable.Electron.EventInterfaces.Root.IOnLoadCommit -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the navigation is done, i.e. the spinner of the tab will stop spinning, and the <c>onload</c> event is
        /// dispatched.
        /// </summary>
        [<Emit("$0.on('did-finish-load', $1)")>]
        member inline _.onDidFinishLoad(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the navigation is done, i.e. the spinner of the tab will stop spinning, and the <c>onload</c> event is
        /// dispatched.
        /// </summary>
        [<Emit("$0.once('did-finish-load', $1)")>]
        member inline _.onceDidFinishLoad(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the navigation is done, i.e. the spinner of the tab will stop spinning, and the <c>onload</c> event is
        /// dispatched.
        /// </summary>
        [<Emit("$0.off('did-finish-load', $1)")>]
        member inline _.offDidFinishLoad(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c>, but fired when the load failed or was cancelled, e.g. <c>window.stop()</c> is invoked.
        /// </summary>
        [<Emit("$0.on('did-fail-load', $1)")>]
        member inline _.onDidFailLoad(handler: int -> string -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c>, but fired when the load failed or was cancelled, e.g. <c>window.stop()</c> is invoked.
        /// </summary>
        [<Emit("$0.on('did-fail-load', $1)")>]
        member inline _.onDidFailLoad(handler: Fable.Electron.EventInterfaces.Root.IOnDidFailLoad -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c>, but fired when the load failed or was cancelled, e.g. <c>window.stop()</c> is invoked.
        /// </summary>
        [<Emit("$0.once('did-fail-load', $1)")>]
        member inline _.onceDidFailLoad(handler: int -> string -> string -> bool -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c>, but fired when the load failed or was cancelled, e.g. <c>window.stop()</c> is invoked.
        /// </summary>
        [<Emit("$0.once('did-fail-load', $1)")>]
        member inline _.onceDidFailLoad(handler: Fable.Electron.EventInterfaces.Root.IOnDidFailLoad -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c>, but fired when the load failed or was cancelled, e.g. <c>window.stop()</c> is invoked.
        /// </summary>
        [<Emit("$0.off('did-fail-load', $1)")>]
        member inline _.offDidFailLoad(handler: int -> string -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c>, but fired when the load failed or was cancelled, e.g. <c>window.stop()</c> is invoked.
        /// </summary>
        [<Emit("$0.off('did-fail-load', $1)")>]
        member inline _.offDidFailLoad(handler: Fable.Electron.EventInterfaces.Root.IOnDidFailLoad -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a frame has done navigation.
        /// </summary>
        [<Emit("$0.on('did-frame-finish-load', $1)")>]
        member inline _.onDidFrameFinishLoad(handler: bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a frame has done navigation.
        /// </summary>
        [<Emit("$0.once('did-frame-finish-load', $1)")>]
        member inline _.onceDidFrameFinishLoad(handler: bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a frame has done navigation.
        /// </summary>
        [<Emit("$0.off('did-frame-finish-load', $1)")>]
        member inline _.offDidFrameFinishLoad(handler: bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab starts spinning.
        /// </summary>
        [<Emit("$0.on('did-start-loading', $1)")>]
        member inline _.onDidStartLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab starts spinning.
        /// </summary>
        [<Emit("$0.once('did-start-loading', $1)")>]
        member inline _.onceDidStartLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab starts spinning.
        /// </summary>
        [<Emit("$0.off('did-start-loading', $1)")>]
        member inline _.offDidStartLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab stops spinning.
        /// </summary>
        [<Emit("$0.on('did-stop-loading', $1)")>]
        member inline _.onDidStopLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab stops spinning.
        /// </summary>
        [<Emit("$0.once('did-stop-loading', $1)")>]
        member inline _.onceDidStopLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab stops spinning.
        /// </summary>
        [<Emit("$0.off('did-stop-loading', $1)")>]
        member inline _.offDidStopLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when attached to the embedder web contents.
        /// </summary>
        [<Emit("$0.on('did-attach', $1)")>]
        member inline _.onDidAttach(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when attached to the embedder web contents.
        /// </summary>
        [<Emit("$0.once('did-attach', $1)")>]
        member inline _.onceDidAttach(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when attached to the embedder web contents.
        /// </summary>
        [<Emit("$0.off('did-attach', $1)")>]
        member inline _.offDidAttach(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when document in the given frame is loaded.
        /// </summary>
        [<Emit("$0.on('dom-ready', $1)")>]
        member inline _.onDomReady(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when document in the given frame is loaded.
        /// </summary>
        [<Emit("$0.once('dom-ready', $1)")>]
        member inline _.onceDomReady(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when document in the given frame is loaded.
        /// </summary>
        [<Emit("$0.off('dom-ready', $1)")>]
        member inline _.offDomReady(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.on('page-title-updated', $1)")>]
        member inline _.onPageTitleUpdated(handler: string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.on('page-title-updated', $1)")>]
        member inline _.onPageTitleUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageTitleUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.once('page-title-updated', $1)")>]
        member inline _.oncePageTitleUpdated(handler: string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.once('page-title-updated', $1)")>]
        member inline _.oncePageTitleUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageTitleUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.off('page-title-updated', $1)")>]
        member inline _.offPageTitleUpdated(handler: string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.off('page-title-updated', $1)")>]
        member inline _.offPageTitleUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageTitleUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page receives favicon urls.
        /// </summary>
        [<Emit("$0.on('page-favicon-updated', $1)")>]
        member inline _.onPageFaviconUpdated(handler: string[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page receives favicon urls.
        /// </summary>
        [<Emit("$0.once('page-favicon-updated', $1)")>]
        member inline _.oncePageFaviconUpdated(handler: string[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page receives favicon urls.
        /// </summary>
        [<Emit("$0.off('page-favicon-updated', $1)")>]
        member inline _.offPageFaviconUpdated(handler: string[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page enters fullscreen triggered by HTML API.
        /// </summary>
        [<Emit("$0.on('enter-html-full-screen', $1)")>]
        member inline _.onEnterHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page enters fullscreen triggered by HTML API.
        /// </summary>
        [<Emit("$0.once('enter-html-full-screen', $1)")>]
        member inline _.onceEnterHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page enters fullscreen triggered by HTML API.
        /// </summary>
        [<Emit("$0.off('enter-html-full-screen', $1)")>]
        member inline _.offEnterHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page leaves fullscreen triggered by HTML API.
        /// </summary>
        [<Emit("$0.on('leave-html-full-screen', $1)")>]
        member inline _.onLeaveHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page leaves fullscreen triggered by HTML API.
        /// </summary>
        [<Emit("$0.once('leave-html-full-screen', $1)")>]
        member inline _.onceLeaveHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page leaves fullscreen triggered by HTML API.
        /// </summary>
        [<Emit("$0.off('leave-html-full-screen', $1)")>]
        member inline _.offLeaveHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest window logs a console message.<br/><br/>The following example code forwards all log messages to the embedder's console
        /// without regard for log level or other properties.
        /// </summary>
        [<Emit("$0.on('console-message', $1)")>]
        member inline _.onConsoleMessage(handler: int -> string -> int -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest window logs a console message.<br/><br/>The following example code forwards all log messages to the embedder's console
        /// without regard for log level or other properties.
        /// </summary>
        [<Emit("$0.on('console-message', $1)")>]
        member inline _.onConsoleMessage
            (handler: Fable.Electron.EventInterfaces.Root.IOnConsoleMessage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest window logs a console message.<br/><br/>The following example code forwards all log messages to the embedder's console
        /// without regard for log level or other properties.
        /// </summary>
        [<Emit("$0.once('console-message', $1)")>]
        member inline _.onceConsoleMessage(handler: int -> string -> int -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest window logs a console message.<br/><br/>The following example code forwards all log messages to the embedder's console
        /// without regard for log level or other properties.
        /// </summary>
        [<Emit("$0.once('console-message', $1)")>]
        member inline _.onceConsoleMessage
            (handler: Fable.Electron.EventInterfaces.Root.IOnConsoleMessage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest window logs a console message.<br/><br/>The following example code forwards all log messages to the embedder's console
        /// without regard for log level or other properties.
        /// </summary>
        [<Emit("$0.off('console-message', $1)")>]
        member inline _.offConsoleMessage(handler: int -> string -> int -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest window logs a console message.<br/><br/>The following example code forwards all log messages to the embedder's console
        /// without regard for log level or other properties.
        /// </summary>
        [<Emit("$0.off('console-message', $1)")>]
        member inline _.offConsoleMessage
            (handler: Fable.Electron.EventInterfaces.Root.IOnConsoleMessage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a result is available for <c>webview.findInPage</c> request.
        /// </summary>
        [<Emit("$0.on('found-in-page', $1)")>]
        member inline _.onFoundInPage(handler: WebviewTag.FoundInPage.Result -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a result is available for <c>webview.findInPage</c> request.
        /// </summary>
        [<Emit("$0.once('found-in-page', $1)")>]
        member inline _.onceFoundInPage(handler: WebviewTag.FoundInPage.Result -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when a result is available for <c>webview.findInPage</c> request.
        /// </summary>
        [<Emit("$0.off('found-in-page', $1)")>]
        member inline _.offFoundInPage(handler: WebviewTag.FoundInPage.Result -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation. It can happen when the <c>window.location</c> object is changed
        /// or a user clicks a link in the page.<br/><br/>This event will not emit when the navigation is started programmatically with
        /// APIs like <c>&lt;webview&gt;.loadURL</c> and <c>&lt;webview&gt;.back</c>.<br/><br/>It is also not emitted during in-page navigation, such as clicking anchor links or updating the
        /// <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> does **NOT** have any effect.
        /// </summary>
        [<Emit("$0.on('will-navigate', $1)")>]
        member inline _.onWillNavigate(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation. It can happen when the <c>window.location</c> object is changed
        /// or a user clicks a link in the page.<br/><br/>This event will not emit when the navigation is started programmatically with
        /// APIs like <c>&lt;webview&gt;.loadURL</c> and <c>&lt;webview&gt;.back</c>.<br/><br/>It is also not emitted during in-page navigation, such as clicking anchor links or updating the
        /// <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> does **NOT** have any effect.
        /// </summary>
        [<Emit("$0.once('will-navigate', $1)")>]
        member inline _.onceWillNavigate(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation. It can happen when the <c>window.location</c> object is changed
        /// or a user clicks a link in the page.<br/><br/>This event will not emit when the navigation is started programmatically with
        /// APIs like <c>&lt;webview&gt;.loadURL</c> and <c>&lt;webview&gt;.back</c>.<br/><br/>It is also not emitted during in-page navigation, such as clicking anchor links or updating the
        /// <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> does **NOT** have any effect.
        /// </summary>
        [<Emit("$0.off('will-navigate', $1)")>]
        member inline _.offWillNavigate(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation anywhere in the <c>&lt;webview&gt;</c> or any frames embedded within.
        /// It can happen when the <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will
        /// not emit when the navigation is started programmatically with APIs like <c>&lt;webview&gt;.loadURL</c> and <c>&lt;webview&gt;.back</c>.<br/><br/>It is also not emitted during in-page
        /// navigation, such as clicking anchor links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> does **NOT** have
        /// any effect.
        /// </summary>
        [<Emit("$0.on('will-frame-navigate', $1)")>]
        member inline _.onWillFrameNavigate(handler: string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation anywhere in the <c>&lt;webview&gt;</c> or any frames embedded within.
        /// It can happen when the <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will
        /// not emit when the navigation is started programmatically with APIs like <c>&lt;webview&gt;.loadURL</c> and <c>&lt;webview&gt;.back</c>.<br/><br/>It is also not emitted during in-page
        /// navigation, such as clicking anchor links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> does **NOT** have
        /// any effect.
        /// </summary>
        [<Emit("$0.on('will-frame-navigate', $1)")>]
        member inline _.onWillFrameNavigate
            (handler: Fable.Electron.EventInterfaces.Root.IOnWillFrameNavigate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation anywhere in the <c>&lt;webview&gt;</c> or any frames embedded within.
        /// It can happen when the <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will
        /// not emit when the navigation is started programmatically with APIs like <c>&lt;webview&gt;.loadURL</c> and <c>&lt;webview&gt;.back</c>.<br/><br/>It is also not emitted during in-page
        /// navigation, such as clicking anchor links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> does **NOT** have
        /// any effect.
        /// </summary>
        [<Emit("$0.once('will-frame-navigate', $1)")>]
        member inline _.onceWillFrameNavigate(handler: string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation anywhere in the <c>&lt;webview&gt;</c> or any frames embedded within.
        /// It can happen when the <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will
        /// not emit when the navigation is started programmatically with APIs like <c>&lt;webview&gt;.loadURL</c> and <c>&lt;webview&gt;.back</c>.<br/><br/>It is also not emitted during in-page
        /// navigation, such as clicking anchor links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> does **NOT** have
        /// any effect.
        /// </summary>
        [<Emit("$0.once('will-frame-navigate', $1)")>]
        member inline _.onceWillFrameNavigate
            (handler: Fable.Electron.EventInterfaces.Root.IOnWillFrameNavigate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation anywhere in the <c>&lt;webview&gt;</c> or any frames embedded within.
        /// It can happen when the <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will
        /// not emit when the navigation is started programmatically with APIs like <c>&lt;webview&gt;.loadURL</c> and <c>&lt;webview&gt;.back</c>.<br/><br/>It is also not emitted during in-page
        /// navigation, such as clicking anchor links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> does **NOT** have
        /// any effect.
        /// </summary>
        [<Emit("$0.off('will-frame-navigate', $1)")>]
        member inline _.offWillFrameNavigate(handler: string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation anywhere in the <c>&lt;webview&gt;</c> or any frames embedded within.
        /// It can happen when the <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will
        /// not emit when the navigation is started programmatically with APIs like <c>&lt;webview&gt;.loadURL</c> and <c>&lt;webview&gt;.back</c>.<br/><br/>It is also not emitted during in-page
        /// navigation, such as clicking anchor links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> does **NOT** have
        /// any effect.
        /// </summary>
        [<Emit("$0.off('will-frame-navigate', $1)")>]
        member inline _.offWillFrameNavigate
            (handler: Fable.Electron.EventInterfaces.Root.IOnWillFrameNavigate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating. <c>isInPlace</c> will be <c>true</c> for in-page navigations.
        /// </summary>
        [<Emit("$0.on('did-start-navigation', $1)")>]
        member inline _.onDidStartNavigation(handler: string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating. <c>isInPlace</c> will be <c>true</c> for in-page navigations.
        /// </summary>
        [<Emit("$0.on('did-start-navigation', $1)")>]
        member inline _.onDidStartNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidStartNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating. <c>isInPlace</c> will be <c>true</c> for in-page navigations.
        /// </summary>
        [<Emit("$0.once('did-start-navigation', $1)")>]
        member inline _.onceDidStartNavigation(handler: string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating. <c>isInPlace</c> will be <c>true</c> for in-page navigations.
        /// </summary>
        [<Emit("$0.once('did-start-navigation', $1)")>]
        member inline _.onceDidStartNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidStartNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating. <c>isInPlace</c> will be <c>true</c> for in-page navigations.
        /// </summary>
        [<Emit("$0.off('did-start-navigation', $1)")>]
        member inline _.offDidStartNavigation(handler: string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating. <c>isInPlace</c> will be <c>true</c> for in-page navigations.
        /// </summary>
        [<Emit("$0.off('did-start-navigation', $1)")>]
        member inline _.offDidStartNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidStartNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation. For example a 302 redirect.
        /// </summary>
        [<Emit("$0.on('did-redirect-navigation', $1)")>]
        member inline _.onDidRedirectNavigation(handler: string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation. For example a 302 redirect.
        /// </summary>
        [<Emit("$0.on('did-redirect-navigation', $1)")>]
        member inline _.onDidRedirectNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidRedirectNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation. For example a 302 redirect.
        /// </summary>
        [<Emit("$0.once('did-redirect-navigation', $1)")>]
        member inline _.onceDidRedirectNavigation(handler: string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation. For example a 302 redirect.
        /// </summary>
        [<Emit("$0.once('did-redirect-navigation', $1)")>]
        member inline _.onceDidRedirectNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidRedirectNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation. For example a 302 redirect.
        /// </summary>
        [<Emit("$0.off('did-redirect-navigation', $1)")>]
        member inline _.offDidRedirectNavigation(handler: string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation. For example a 302 redirect.
        /// </summary>
        [<Emit("$0.off('did-redirect-navigation', $1)")>]
        member inline _.offDidRedirectNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidRedirectNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or updating
        /// the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.on('did-navigate', $1)")>]
        member inline _.onDidNavigate(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or updating
        /// the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.once('did-navigate', $1)")>]
        member inline _.onceDidNavigate(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or updating
        /// the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.off('did-navigate', $1)")>]
        member inline _.offDidNavigate(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.on('did-frame-navigate', $1)")>]
        member inline _.onDidFrameNavigate(handler: string -> int -> string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.on('did-frame-navigate', $1)")>]
        member inline _.onDidFrameNavigate
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFrameNavigate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.once('did-frame-navigate', $1)")>]
        member inline _.onceDidFrameNavigate(handler: string -> int -> string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.once('did-frame-navigate', $1)")>]
        member inline _.onceDidFrameNavigate
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFrameNavigate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.off('did-frame-navigate', $1)")>]
        member inline _.offDidFrameNavigate(handler: string -> int -> string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.off('did-frame-navigate', $1)")>]
        member inline _.offDidFrameNavigate
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFrameNavigate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened.<br/><br/>When in-page navigation happens, the page URL changes but does not cause navigation outside of
        /// the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c> event is triggered.
        /// </summary>
        [<Emit("$0.on('did-navigate-in-page', $1)")>]
        member inline _.onDidNavigateInPage(handler: bool -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened.<br/><br/>When in-page navigation happens, the page URL changes but does not cause navigation outside of
        /// the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c> event is triggered.
        /// </summary>
        [<Emit("$0.on('did-navigate-in-page', $1)")>]
        member inline _.onDidNavigateInPage
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidNavigateInPage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened.<br/><br/>When in-page navigation happens, the page URL changes but does not cause navigation outside of
        /// the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c> event is triggered.
        /// </summary>
        [<Emit("$0.once('did-navigate-in-page', $1)")>]
        member inline _.onceDidNavigateInPage(handler: bool -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened.<br/><br/>When in-page navigation happens, the page URL changes but does not cause navigation outside of
        /// the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c> event is triggered.
        /// </summary>
        [<Emit("$0.once('did-navigate-in-page', $1)")>]
        member inline _.onceDidNavigateInPage
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidNavigateInPage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened.<br/><br/>When in-page navigation happens, the page URL changes but does not cause navigation outside of
        /// the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c> event is triggered.
        /// </summary>
        [<Emit("$0.off('did-navigate-in-page', $1)")>]
        member inline _.offDidNavigateInPage(handler: bool -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened.<br/><br/>When in-page navigation happens, the page URL changes but does not cause navigation outside of
        /// the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c> event is triggered.
        /// </summary>
        [<Emit("$0.off('did-navigate-in-page', $1)")>]
        member inline _.offDidNavigateInPage
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidNavigateInPage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest page attempts to close itself.<br/><br/>The following example code navigates the <c>webview</c> to <c>about:blank</c> when the guest
        /// attempts to close itself.
        /// </summary>
        [<Emit("$0.on('close', $1)")>]
        member inline _.onClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest page attempts to close itself.<br/><br/>The following example code navigates the <c>webview</c> to <c>about:blank</c> when the guest
        /// attempts to close itself.
        /// </summary>
        [<Emit("$0.once('close', $1)")>]
        member inline _.onceClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest page attempts to close itself.<br/><br/>The following example code navigates the <c>webview</c> to <c>about:blank</c> when the guest
        /// attempts to close itself.
        /// </summary>
        [<Emit("$0.off('close', $1)")>]
        member inline _.offClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest page has sent an asynchronous message to embedder page.<br/><br/>With <c>sendToHost</c> method and <c>ipc-message</c> event you can
        /// communicate between guest page and embedder page:
        /// </summary>
        [<Emit("$0.on('ipc-message', $1)")>]
        member inline _.onIpcMessage(handler: float * float -> string -> obj[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest page has sent an asynchronous message to embedder page.<br/><br/>With <c>sendToHost</c> method and <c>ipc-message</c> event you can
        /// communicate between guest page and embedder page:
        /// </summary>
        [<Emit("$0.on('ipc-message', $1)")>]
        member inline _.onIpcMessage(handler: Fable.Electron.EventInterfaces.Root.IOnIpcMessage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest page has sent an asynchronous message to embedder page.<br/><br/>With <c>sendToHost</c> method and <c>ipc-message</c> event you can
        /// communicate between guest page and embedder page:
        /// </summary>
        [<Emit("$0.once('ipc-message', $1)")>]
        member inline _.onceIpcMessage(handler: float * float -> string -> obj[] -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest page has sent an asynchronous message to embedder page.<br/><br/>With <c>sendToHost</c> method and <c>ipc-message</c> event you can
        /// communicate between guest page and embedder page:
        /// </summary>
        [<Emit("$0.once('ipc-message', $1)")>]
        member inline _.onceIpcMessage(handler: Fable.Electron.EventInterfaces.Root.IOnIpcMessage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest page has sent an asynchronous message to embedder page.<br/><br/>With <c>sendToHost</c> method and <c>ipc-message</c> event you can
        /// communicate between guest page and embedder page:
        /// </summary>
        [<Emit("$0.off('ipc-message', $1)")>]
        member inline _.offIpcMessage(handler: float * float -> string -> obj[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the guest page has sent an asynchronous message to embedder page.<br/><br/>With <c>sendToHost</c> method and <c>ipc-message</c> event you can
        /// communicate between guest page and embedder page:
        /// </summary>
        [<Emit("$0.off('ipc-message', $1)")>]
        member inline _.offIpcMessage(handler: Fable.Electron.EventInterfaces.Root.IOnIpcMessage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the renderer process unexpectedly disappears. This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.on('render-process-gone', $1)")>]
        member inline _.onRenderProcessGone(handler: RenderProcessGoneDetails -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the renderer process unexpectedly disappears. This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.once('render-process-gone', $1)")>]
        member inline _.onceRenderProcessGone(handler: RenderProcessGoneDetails -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the renderer process unexpectedly disappears. This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.off('render-process-gone', $1)")>]
        member inline _.offRenderProcessGone(handler: RenderProcessGoneDetails -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the WebContents is destroyed.
        /// </summary>
        [<Emit("$0.on('destroyed', $1)")>]
        member inline _.onDestroyed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the WebContents is destroyed.
        /// </summary>
        [<Emit("$0.once('destroyed', $1)")>]
        member inline _.onceDestroyed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when the WebContents is destroyed.
        /// </summary>
        [<Emit("$0.off('destroyed', $1)")>]
        member inline _.offDestroyed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media starts playing.
        /// </summary>
        [<Emit("$0.on('media-started-playing', $1)")>]
        member inline _.onMediaStartedPlaying(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media starts playing.
        /// </summary>
        [<Emit("$0.once('media-started-playing', $1)")>]
        member inline _.onceMediaStartedPlaying(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media starts playing.
        /// </summary>
        [<Emit("$0.off('media-started-playing', $1)")>]
        member inline _.offMediaStartedPlaying(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media is paused or done playing.
        /// </summary>
        [<Emit("$0.on('media-paused', $1)")>]
        member inline _.onMediaPaused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media is paused or done playing.
        /// </summary>
        [<Emit("$0.once('media-paused', $1)")>]
        member inline _.onceMediaPaused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media is paused or done playing.
        /// </summary>
        [<Emit("$0.off('media-paused', $1)")>]
        member inline _.offMediaPaused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a page's theme color changes. This is usually due to encountering a meta tag:
        /// </summary>
        [<Emit("$0.on('did-change-theme-color', $1)")>]
        member inline _.onDidChangeThemeColor(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a page's theme color changes. This is usually due to encountering a meta tag:
        /// </summary>
        [<Emit("$0.once('did-change-theme-color', $1)")>]
        member inline _.onceDidChangeThemeColor(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a page's theme color changes. This is usually due to encountering a meta tag:
        /// </summary>
        [<Emit("$0.off('did-change-theme-color', $1)")>]
        member inline _.offDidChangeThemeColor(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when mouse moves over a link or the keyboard moves the focus to a link.
        /// </summary>
        [<Emit("$0.on('update-target-url', $1)")>]
        member inline _.onUpdateTargetUrl(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when mouse moves over a link or the keyboard moves the focus to a link.
        /// </summary>
        [<Emit("$0.once('update-target-url', $1)")>]
        member inline _.onceUpdateTargetUrl(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when mouse moves over a link or the keyboard moves the focus to a link.
        /// </summary>
        [<Emit("$0.off('update-target-url', $1)")>]
        member inline _.offUpdateTargetUrl(handler: string -> unit) : unit = Unchecked.defaultof<_>

        [<Emit("$0.on('devtools-open-url', $1)")>]
        member inline _.onDevtoolsOpenUrl(handler: string -> unit) : unit = Unchecked.defaultof<_>

        [<Emit("$0.once('devtools-open-url', $1)")>]
        member inline _.onceDevtoolsOpenUrl(handler: string -> unit) : unit = Unchecked.defaultof<_>

        [<Emit("$0.off('devtools-open-url', $1)")>]
        member inline _.offDevtoolsOpenUrl(handler: string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.on('devtools-search-query', $1)")>]
        member inline _.onDevtoolsSearchQuery(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.on('devtools-search-query', $1)")>]
        member inline _.onDevtoolsSearchQuery
            (handler: Fable.Electron.EventInterfaces.Root.IOnDevtoolsSearchQuery -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.once('devtools-search-query', $1)")>]
        member inline _.onceDevtoolsSearchQuery(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.once('devtools-search-query', $1)")>]
        member inline _.onceDevtoolsSearchQuery
            (handler: Fable.Electron.EventInterfaces.Root.IOnDevtoolsSearchQuery -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.off('devtools-search-query', $1)")>]
        member inline _.offDevtoolsSearchQuery(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.off('devtools-search-query', $1)")>]
        member inline _.offDevtoolsSearchQuery
            (handler: Fable.Electron.EventInterfaces.Root.IOnDevtoolsSearchQuery -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is opened.
        /// </summary>
        [<Emit("$0.on('devtools-opened', $1)")>]
        member inline _.onDevtoolsOpened(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is opened.
        /// </summary>
        [<Emit("$0.once('devtools-opened', $1)")>]
        member inline _.onceDevtoolsOpened(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is opened.
        /// </summary>
        [<Emit("$0.off('devtools-opened', $1)")>]
        member inline _.offDevtoolsOpened(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is closed.
        /// </summary>
        [<Emit("$0.on('devtools-closed', $1)")>]
        member inline _.onDevtoolsClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is closed.
        /// </summary>
        [<Emit("$0.once('devtools-closed', $1)")>]
        member inline _.onceDevtoolsClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is closed.
        /// </summary>
        [<Emit("$0.off('devtools-closed', $1)")>]
        member inline _.offDevtoolsClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is focused / opened.
        /// </summary>
        [<Emit("$0.on('devtools-focused', $1)")>]
        member inline _.onDevtoolsFocused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is focused / opened.
        /// </summary>
        [<Emit("$0.once('devtools-focused', $1)")>]
        member inline _.onceDevtoolsFocused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is focused / opened.
        /// </summary>
        [<Emit("$0.off('devtools-focused', $1)")>]
        member inline _.offDevtoolsFocused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is a new context menu that needs to be handled.
        /// </summary>
        [<Emit("$0.on('context-menu', $1)")>]
        member inline _.onContextMenu(handler: WebviewTag.ContextMenu.Params -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is a new context menu that needs to be handled.
        /// </summary>
        [<Emit("$0.once('context-menu', $1)")>]
        member inline _.onceContextMenu(handler: WebviewTag.ContextMenu.Params -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is a new context menu that needs to be handled.
        /// </summary>
        [<Emit("$0.off('context-menu', $1)")>]
        member inline _.offContextMenu(handler: WebviewTag.ContextMenu.Params -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The promise will resolve when the page has finished loading (see <c>did-finish-load</c>), and rejects if the page fails to load
        /// (see <c>did-fail-load</c>).<br/><br/>Loads the <c>url</c> in the webview, the <c>url</c> must contain the protocol prefix, e.g. the <c>http://</c> or <c>file://</c>.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="httpReferrer">An HTTP Referrer url.</param>
        /// <param name="userAgent">A user agent originating the request.</param>
        /// <param name="extraHeaders">Extra headers separated by "\n"</param>
        /// <param name="postData"></param>
        /// <param name="baseURLForDataURL">Base url (with trailing path separator) for files to be loaded by the data url. This is needed only
        /// if the specified <c>url</c> is a data url and needs to load other files.</param>
        [<Erase; ParamObject(1)>]
        member inline _.loadURL
            (
                url: URL,
                ?httpReferrer: U2<string, Referrer>,
                ?userAgent: string,
                ?extraHeaders: string,
                ?postData: U2<UploadRawData, UploadFile>[],
                ?baseURLForDataURL: string
            ) : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Initiates a download of the resource at <c>url</c> without navigating.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="headers">HTTP request headers.</param>
        [<Erase; ParamObject(1)>]
        member inline _.downloadURL(url: string, ?headers: Record<string, string>) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The URL of guest page.
        /// </summary>
        [<Erase>]
        member inline _.getURL() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The title of guest page.
        /// </summary>
        [<Erase>]
        member inline _.getTitle() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Whether guest page is still loading resources.
        /// </summary>
        [<Erase>]
        member inline _.isLoading() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the main frame (and not just iframes or frames within it) is still loading.
        /// </summary>
        [<Erase>]
        member inline _.isLoadingMainFrame() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the guest page is waiting for a first-response for the main resource of the page.
        /// </summary>
        [<Erase>]
        member inline _.isWaitingForResponse() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Stops any pending navigation.
        /// </summary>
        [<Erase>]
        member inline _.stop() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Reloads the guest page.
        /// </summary>
        [<Erase>]
        member inline _.reload() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Reloads the guest page and ignores cache.
        /// </summary>
        [<Erase>]
        member inline _.reloadIgnoringCache() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the guest page can go back.
        /// </summary>
        [<Erase>]
        member inline _.canGoBack() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the guest page can go forward.
        /// </summary>
        [<Erase>]
        member inline _.canGoForward() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the guest page can go to <c>offset</c>.
        /// </summary>
        /// <param name="offset"></param>
        [<Erase>]
        member inline _.canGoToOffset(offset: int) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Clears the navigation history.
        /// </summary>
        [<Erase>]
        member inline _.clearHistory() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Makes the guest page go back.
        /// </summary>
        [<Erase>]
        member inline _.goBack() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Makes the guest page go forward.
        /// </summary>
        [<Erase>]
        member inline _.goForward() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Navigates to the specified absolute index.
        /// </summary>
        /// <param name="index"></param>
        [<Erase>]
        member inline _.goToIndex(index: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Navigates to the specified offset from the "current entry".
        /// </summary>
        /// <param name="offset"></param>
        [<Erase>]
        member inline _.goToOffset(offset: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the renderer process has crashed.
        /// </summary>
        [<Erase>]
        member inline _.isCrashed() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Overrides the user agent for the guest page.
        /// </summary>
        /// <param name="userAgent"></param>
        [<Erase>]
        member inline _.setUserAgent(userAgent: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The user agent for guest page.
        /// </summary>
        [<Erase>]
        member inline _.getUserAgent() : string = Unchecked.defaultof<_>

        /// <summary>
        /// A promise that resolves with a key for the inserted CSS that can later be used to remove the CSS
        /// via <c>&lt;webview&gt;.removeInsertedCSS(key)</c>.<br/><br/>Injects CSS into the current web page and returns a unique key for the inserted stylesheet.
        /// </summary>
        /// <param name="css"></param>
        [<Erase>]
        member inline _.insertCSS(css: string) : Promise<string> = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves if the removal was successful.<br/><br/>Removes the inserted CSS from the current web page. The stylesheet is identified by its
        /// key, which is returned from <c>&lt;webview&gt;.insertCSS(css)</c>.
        /// </summary>
        /// <param name="key"></param>
        [<Erase>]
        member inline _.removeInsertedCSS(key: string) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// A promise that resolves with the result of the executed code or is rejected if the result of the code
        /// is a rejected promise.<br/><br/>Evaluates <c>code</c> in page. If <c>userGesture</c> is set, it will create the user gesture context in the
        /// page. HTML APIs like <c>requestFullScreen</c>, which require user action, can take advantage of this option for automation.
        /// </summary>
        /// <param name="code"></param>
        /// <param name="userGesture">Default <c>false</c>.</param>
        [<Erase>]
        member inline _.executeJavaScript(code: string, ?userGesture: bool) : Promise<obj> = Unchecked.defaultof<_>

        /// <summary>
        /// Opens a DevTools window for guest page.
        /// </summary>
        [<Erase>]
        member inline _.openDevTools() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Closes the DevTools window of guest page.
        /// </summary>
        [<Erase>]
        member inline _.closeDevTools() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether guest page has a DevTools window attached.
        /// </summary>
        [<Erase>]
        member inline _.isDevToolsOpened() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether DevTools window of guest page is focused.
        /// </summary>
        [<Erase>]
        member inline _.isDevToolsFocused() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Starts inspecting element at position (<c>x</c>, <c>y</c>) of guest page.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        [<Erase>]
        member inline _.inspectElement(x: int, y: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Opens the DevTools for the shared worker context present in the guest page.
        /// </summary>
        [<Erase>]
        member inline _.inspectSharedWorker() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Opens the DevTools for the service worker context present in the guest page.
        /// </summary>
        [<Erase>]
        member inline _.inspectServiceWorker() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Set guest page muted.
        /// </summary>
        /// <param name="muted"></param>
        [<Erase>]
        member inline _.setAudioMuted(muted: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether guest page has been muted.
        /// </summary>
        [<Erase>]
        member inline _.isAudioMuted() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether audio is currently playing.
        /// </summary>
        [<Erase>]
        member inline _.isCurrentlyAudible() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>undo</c> in page.
        /// </summary>
        [<Erase>]
        member inline _.undo() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>redo</c> in page.
        /// </summary>
        [<Erase>]
        member inline _.redo() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>cut</c> in page.
        /// </summary>
        [<Erase>]
        member inline _.cut() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>copy</c> in page.
        /// </summary>
        [<Erase>]
        member inline _.copy() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Centers the current text selection in page.
        /// </summary>
        [<Erase>]
        member inline _.centerSelection() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>paste</c> in page.
        /// </summary>
        [<Erase>]
        member inline _.paste() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>pasteAndMatchStyle</c> in page.
        /// </summary>
        [<Erase>]
        member inline _.pasteAndMatchStyle() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>delete</c> in page.
        /// </summary>
        [<Erase>]
        member inline _.delete() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>selectAll</c> in page.
        /// </summary>
        [<Erase>]
        member inline _.selectAll() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>unselect</c> in page.
        /// </summary>
        [<Erase>]
        member inline _.unselect() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Scrolls to the top of the current <c>&lt;webview&gt;</c>.
        /// </summary>
        [<Erase>]
        member inline _.scrollToTop() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Scrolls to the bottom of the current <c>&lt;webview&gt;</c>.
        /// </summary>
        [<Erase>]
        member inline _.scrollToBottom() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Adjusts the current text selection starting and ending points in the focused frame by the given amounts. A negative amount
        /// moves the selection towards the beginning of the document, and a positive amount moves the selection towards the end of
        /// the document.<br/><br/>See <c>webContents.adjustSelection</c> for examples.
        /// </summary>
        /// <param name="start">Amount to shift the start index of the current selection.</param>
        /// <param name="``end``">Amount to shift the end index of the current selection.</param>
        [<Erase; ParamObject(0)>]
        member inline _.adjustSelection(?start: float, ?``end``: float) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>replace</c> in page.
        /// </summary>
        /// <param name="text"></param>
        [<Erase>]
        member inline _.replace(text: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes editing command <c>replaceMisspelling</c> in page.
        /// </summary>
        /// <param name="text"></param>
        [<Erase>]
        member inline _.replaceMisspelling(text: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Inserts <c>text</c> to the focused element.
        /// </summary>
        /// <param name="text"></param>
        [<Erase>]
        member inline _.insertText(text: string) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// The request id used for the request.<br/><br/>Starts a request to find all matches for the <c>text</c> in the web page.
        /// The result of the request can be obtained by subscribing to <c>found-in-page</c> event.
        /// </summary>
        /// <param name="text">Content to be searched, must not be empty.</param>
        /// <param name="forward">Whether to search forward or backward, defaults to <c>true</c>.</param>
        /// <param name="findNext">Whether to begin a new text finding session with this request. Should be <c>true</c> for initial requests, and <c>false</c>
        /// for follow-up requests. Defaults to <c>false</c>.</param>
        /// <param name="matchCase">Whether search should be case-sensitive, defaults to <c>false</c>.</param>
        [<Erase; ParamObject(1)>]
        member inline _.findInPage(text: string, ?forward: bool, ?findNext: bool, ?matchCase: bool) : int =
            Unchecked.defaultof<_>

        /// <summary>
        /// Stops any <c>findInPage</c> request for the <c>webview</c> with the provided <c>action</c>.
        /// </summary>
        /// <param name="action">Specifies the action to take place when ending <c>&lt;webview&gt;.findInPage</c> request.</param>
        [<Erase>]
        member inline _.stopFindInPage(action: Enums.WebviewTag.StopFindInPage.Action) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Prints <c>webview</c>'s web page. Same as <c>webContents.print([options])</c>.
        /// </summary>
        /// <param name="silent">Don't ask user for print settings. Default is <c>false</c>.</param>
        /// <param name="printBackground">Prints the background color and image of the web page. Default is <c>false</c>.</param>
        /// <param name="deviceName">Set the printer device name to use. Must be the system-defined name and not the 'friendly' name, e.g 'Brother_QL_820NWB'
        /// and not 'Brother QL-820NWB'.</param>
        /// <param name="color">Set whether the printed web page will be in color or grayscale. Default is <c>true</c>.</param>
        /// <param name="margins"></param>
        /// <param name="landscape">Whether the web page should be printed in landscape mode. Default is <c>false</c>.</param>
        /// <param name="scaleFactor">The scale factor of the web page.</param>
        /// <param name="pagesPerSheet">The number of pages to print per page sheet.</param>
        /// <param name="collate">Whether the web page should be collated.</param>
        /// <param name="copies">The number of copies of the web page to print.</param>
        /// <param name="pageRanges">The page range to print.</param>
        /// <param name="duplexMode">Set the duplex mode of the printed web page. Can be <c>simplex</c>, <c>shortEdge</c>, or <c>longEdge</c>.</param>
        /// <param name="dpi"></param>
        /// <param name="header">string to be printed as page header.</param>
        /// <param name="footer">string to be printed as page footer.</param>
        /// <param name="pageSize">Specify page size of the printed document. Can be <c>A3</c>, <c>A4</c>, <c>A5</c>, <c>Legal</c>, <c>Letter</c>, <c>Tabloid</c> or an Object containing
        /// <c>height</c> in microns.</param>
        [<Erase; ParamObject(0)>]
        member inline _.print
            (
                ?silent: bool,
                ?printBackground: bool,
                ?deviceName: string,
                ?color: bool,
                ?margins: WebviewTag.Print.Options.Margins,
                ?landscape: bool,
                ?scaleFactor: float,
                ?pagesPerSheet: float,
                ?collate: bool,
                ?copies: float,
                ?pageRanges: WebviewTag.Print.Options.PageRanges[],
                ?duplexMode: Enums.WebviewTag.Print.Options.DuplexMode,
                ?dpi: Record<string, float>,
                ?header: string,
                ?footer: string,
                ?pageSize: U2<Enums.WebviewTag.Print.Options.PageSize, Size>
            ) : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with the generated PDF data.<br/><br/>Prints <c>webview</c>'s web page as PDF, Same as <c>webContents.printToPDF(options)</c>.
        /// </summary>
        /// <param name="landscape">Paper orientation.<c>true</c> for landscape, <c>false</c> for portrait. Defaults to false.</param>
        /// <param name="displayHeaderFooter">Whether to display header and footer. Defaults to false.</param>
        /// <param name="printBackground">Whether to print background graphics. Defaults to false.</param>
        /// <param name="scale">Scale of the webpage rendering. Defaults to 1.</param>
        /// <param name="pageSize">Specify page size of the generated PDF. Can be <c>A0</c>, <c>A1</c>, <c>A2</c>, <c>A3</c>, <c>A4</c>, <c>A5</c>, <c>A6</c>, <c>Legal</c>, <c>Letter</c>, <c>Tabloid</c>,
        /// <c>Ledger</c>, or an Object containing <c>height</c> and <c>width</c> in inches. Defaults to <c>Letter</c>.</param>
        /// <param name="margins"></param>
        /// <param name="pageRanges">Page ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.</param>
        /// <param name="headerTemplate">HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values
        /// into them: <c>date</c> (formatted print date), <c>title</c> (document title), <c>url</c> (document location), <c>pageNumber</c> (current page number) and <c>totalPages</c> (total pages
        /// in the document). For example, <c>&lt;span class=title&gt;&lt;/span&gt;</c> would generate span containing the title.</param>
        /// <param name="footerTemplate">HTML template for the print footer. Should use the same format as the <c>headerTemplate</c>.</param>
        /// <param name="preferCSSPageSize">Whether or not to prefer page size as defined by css. Defaults to false, in which case the content
        /// will be scaled to fit the paper size.</param>
        /// <param name="generateTaggedPDF">Whether or not to generate a tagged (accessible) PDF. Defaults to false. As this property is experimental, the generated
        /// PDF may not adhere fully to PDF/UA and WCAG standards.</param>
        /// <param name="generateDocumentOutline">Whether or not to generate a PDF document outline from content headers. Defaults to false.</param>
        [<Erase; ParamObject(0)>]
        member inline _.printToPDF
            (
                ?landscape: bool,
                ?displayHeaderFooter: bool,
                ?printBackground: bool,
                ?scale: float,
                ?pageSize: U2<Enums.WebviewTag.PrintToPDF.Options.PageSize, Size>,
                ?margins: WebviewTag.PrintToPDF.Options.Margins,
                ?pageRanges: string,
                ?headerTemplate: string,
                ?footerTemplate: string,
                ?preferCSSPageSize: bool,
                ?generateTaggedPDF: bool,
                ?generateDocumentOutline: bool
            ) : Promise<Uint8Array> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with a NativeImage<br/><br/>Captures a snapshot of the page within <c>rect</c>. Omitting <c>rect</c> will capture the whole visible page.
        /// </summary>
        /// <param name="rect">The area of the page to be captured.</param>
        [<Erase>]
        member inline _.capturePage(?rect: Rectangle) : Promise<NativeImage> = Unchecked.defaultof<_>

        /// <summary>
        /// Send an asynchronous message to renderer process via <c>channel</c>, you can also send arbitrary arguments. The renderer process can handle
        /// the message by listening to the <c>channel</c> event with the <c>ipcRenderer</c> module.<br/><br/>See webContents.send for examples.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="...args"></param>
        [<Erase>]
        member inline _.send(channel: string, [<System.ParamArray>] args: obj[]) : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Send an asynchronous message to renderer process via <c>channel</c>, you can also send arbitrary arguments. The renderer process can handle
        /// the message by listening to the <c>channel</c> event with the <c>ipcRenderer</c> module.<br/><br/>See webContents.sendToFrame for examples.
        /// </summary>
        /// <param name="frameId"><c>[processId, frameId]</c></param>
        /// <param name="channel"></param>
        /// <param name="...args"></param>
        [<Erase>]
        member inline _.sendToFrame
            (frameId: float * float, channel: string, [<System.ParamArray>] args: obj[])
            : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Sends an input <c>event</c> to the page.<br/><br/>See webContents.sendInputEvent for detailed description of <c>event</c> object.
        /// </summary>
        /// <param name="event"></param>
        [<Erase>]
        member inline _.sendInputEvent
            (event: U3<MouseInputEvent, MouseWheelInputEvent, KeyboardInputEvent>)
            : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Changes the zoom factor to the specified factor. Zoom factor is zoom percent divided by 100, so 300% = 3.0.
        /// </summary>
        /// <param name="factor">Zoom factor.</param>
        [<Erase>]
        member inline _.setZoomFactor(factor: float) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Changes the zoom level to the specified level. The original size is 0 and each increment above or below represents
        /// zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively. The formula for this
        /// is <c>scale := 1.2 ^ level</c>.<br/><br/>&gt; [!NOTE] The zoom policy at the Chromium level is same-origin, meaning that the zoom
        /// level for a specific domain propagates across all instances of windows with the same domain. Differentiating the window URLs will
        /// make zoom work per-window.
        /// </summary>
        /// <param name="level">Zoom level.</param>
        [<Erase>]
        member inline _.setZoomLevel(level: float) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// the current zoom factor.
        /// </summary>
        [<Erase>]
        member inline _.getZoomFactor() : float = Unchecked.defaultof<_>

        /// <summary>
        /// the current zoom level.
        /// </summary>
        [<Erase>]
        member inline _.getZoomLevel() : float = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the maximum and minimum pinch-to-zoom level.
        /// </summary>
        /// <param name="minimumLevel"></param>
        /// <param name="maximumLevel"></param>
        [<Erase>]
        member inline _.setVisualZoomLevelLimits(minimumLevel: float, maximumLevel: float) : Promise<unit> =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Shows pop-up dictionary that searches the selected word on the page.
        /// </summary>
        [<Erase>]
        member inline _.showDefinitionForSelection() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// The WebContents ID of this <c>webview</c>.
        /// </summary>
        [<Erase>]
        member inline _.getWebContentsId() : float = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>string</c> representing the visible URL. Writing to this attribute initiates top-level navigation.<br/><br/>Assigning <c>src</c> its own value will reload the
        /// current page.<br/><br/>The <c>src</c> attribute can also accept data URLs, such as <c>data:text/plain,Hello, world!</c>.
        /// </summary>
        [<Erase>]
        member val src: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c>. When this attribute is present the guest page in <c>webview</c> will have node integration and can use node
        /// APIs like <c>require</c> and <c>process</c> to access low level system resources. Node integration is disabled by default in the guest
        /// page.
        /// </summary>
        [<Erase>]
        member val nodeintegration: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> for the experimental option for enabling NodeJS support in sub-frames such as iframes inside the <c>webview</c>. All your
        /// preloads will load for every iframe, you can use <c>process.isMainFrame</c> to determine if you are in the main frame or
        /// not. This option is disabled by default in the guest page.
        /// </summary>
        [<Erase>]
        member val nodeintegrationinsubframes: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c>. When this attribute is present the guest page in <c>webview</c> will be able to use browser plugins. Plugins
        /// are disabled by default.
        /// </summary>
        [<Erase>]
        member val plugins: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> that specifies a script that will be loaded before other scripts run in the guest page. The protocol
        /// of script's URL must be <c>file:</c> (even when using <c>asar:</c> archives) because it will be loaded by Node's <c>require</c> under
        /// the hood, which treats <c>asar:</c> archives as virtual directories.<br/><br/>When the guest page doesn't have node integration this script will still
        /// have access to all Node APIs, but global objects injected by Node will be deleted after this script has finished
        /// executing.
        /// </summary>
        [<Erase>]
        member val preload: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> that sets the referrer URL for the guest page.
        /// </summary>
        [<Erase>]
        member val httpreferrer: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> that sets the user agent for the guest page before the page is navigated to. Once the page
        /// is loaded, use the <c>setUserAgent</c> method to change the user agent.
        /// </summary>
        [<Erase>]
        member val useragent: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c>. When this attribute is present the guest page will have web security disabled. Web security is enabled by
        /// default.<br/><br/>This value can only be modified before the first navigation.
        /// </summary>
        [<Erase>]
        member val disablewebsecurity: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> that sets the session used by the page. If <c>partition</c> starts with <c>persist:</c>, the page will use a
        /// persistent session available to all pages in the app with the same <c>partition</c>. if there is no <c>persist:</c> prefix, the
        /// page will use an in-memory session. By assigning the same <c>partition</c>, multiple pages can share the same session. If the
        /// <c>partition</c> is unset then default session of the app will be used.<br/><br/>This value can only be modified before the first
        /// navigation, since the session of an active renderer process cannot change. Subsequent attempts to modify the value will fail with
        /// a DOM exception.
        /// </summary>
        [<Erase>]
        member val partition: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c>. When this attribute is present the guest page will be allowed to open new windows. Popups are disabled
        /// by default.
        /// </summary>
        [<Erase>]
        member val allowpopups: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> which is a comma separated list of strings which specifies the web preferences to be set on the
        /// webview. The full list of supported preference strings can be found in BrowserWindow.<br/><br/>The string follows the same format as the
        /// features string in <c>window.open</c>. A name by itself is given a <c>true</c> boolean value. A preference can be set to
        /// another value by including an <c>=</c>, followed by the value. Special values <c>yes</c> and <c>1</c> are interpreted as <c>true</c>, while
        /// <c>no</c> and <c>0</c> are interpreted as <c>false</c>.
        /// </summary>
        [<Erase>]
        member val webpreferences: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> which is a list of strings which specifies the blink features to be enabled separated by <c>,</c>. The
        /// full list of supported feature strings can be found in the RuntimeEnabledFeatures.json5 file.
        /// </summary>
        [<Erase>]
        member val enableblinkfeatures: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> which is a list of strings which specifies the blink features to be disabled separated by <c>,</c>. The
        /// full list of supported feature strings can be found in the RuntimeEnabledFeatures.json5 file.
        /// </summary>
        [<Erase>]
        member val disableblinkfeatures: string = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ❌ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; A utility layer to interact with Web API objects (Files, Blobs, etc.)<br/><br/>Process: Renderer<br/><br/>&gt; [!IMPORTANT] If you want to call
    /// this API from a renderer process with context isolation enabled, place the API call in your preload script and expose
    /// it using the <c>contextBridge</c> API.
    /// </summary>
    [<Import("webUtils", "electron")>]
    type WebUtils =
        /// <summary>
        /// The file system path that this <c>File</c> object points to. In the case where the object passed in is not
        /// a <c>File</c> object an exception is thrown. In the case where the File object passed in was constructed in JS
        /// and is not backed by a file on disk an empty string is returned.<br/><br/>This method superseded the previous augmentation to
        /// the <c>File</c> object with the <c>path</c> property.  An example is included below.
        /// </summary>
        /// <param name="file">A web File object.</param>
        [<Erase>]
        static member mutable getPathForFile(file: File) : string = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ❌ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Customize the rendering of the current web page.<br/><br/>Process: Renderer<br/><br/>&gt; [!IMPORTANT] If you want to call this API from a
    /// renderer process with context isolation enabled, place the API call in your preload script and expose it using the <c>contextBridge</c>
    /// API.<br/><br/><c>webFrame</c> export of the Electron module is an instance of the <c>WebFrame</c> class representing the current frame. Sub-frames can be
    /// retrieved by certain properties and methods (e.g. <c>webFrame.firstChild</c>).<br/><br/>An example of zooming current page to 200%.
    /// </summary>
    [<Import("webFrame", "electron")>]
    type WebFrame =
        /// <summary>
        /// Changes the zoom factor to the specified factor. Zoom factor is zoom percent divided by 100, so 300% = 3.0.<br/><br/>The
        /// factor must be greater than 0.0.
        /// </summary>
        /// <param name="factor">Zoom factor; default is 1.0.</param>
        [<Erase>]
        static member mutable setZoomFactor(factor: double) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The current zoom factor.
        /// </summary>
        [<Erase>]
        static member mutable getZoomFactor() : float = Unchecked.defaultof<_>

        /// <summary>
        /// Changes the zoom level to the specified level. The original size is 0 and each increment above or below represents
        /// zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively.<br/><br/>&gt; [!NOTE] The zoom policy
        /// at the Chromium level is same-origin, meaning that the zoom level for a specific domain propagates across all instances of
        /// windows with the same domain. Differentiating the window URLs will make zoom work per-window.
        /// </summary>
        /// <param name="level">Zoom level.</param>
        [<Erase>]
        static member mutable setZoomLevel(level: float) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The current zoom level.
        /// </summary>
        [<Erase>]
        static member mutable getZoomLevel() : float = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the maximum and minimum pinch-to-zoom level.<br/><br/>&gt; [!NOTE] Visual zoom is disabled by default in Electron. To re-enable it, call:<br/><br/>&gt;
        /// [!NOTE] Visual zoom only applies to pinch-to-zoom behavior. Cmd+/-/0 zoom shortcuts are controlled by the 'zoomIn', 'zoomOut', and 'resetZoom' MenuItem
        /// roles in the application Menu. To disable shortcuts, manually define the Menu and omit zoom roles from the definition.
        /// </summary>
        /// <param name="minimumLevel"></param>
        /// <param name="maximumLevel"></param>
        [<Erase>]
        static member mutable setVisualZoomLevelLimits(minimumLevel: float, maximumLevel: float) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Sets a provider for spell checking in input fields and text areas.<br/><br/>If you want to use this method you must
        /// disable the builtin spellchecker when you construct the window.<br/><br/>The <c>provider</c> must be an object that has a <c>spellCheck</c> method that
        /// accepts an array of individual words for spellchecking. The <c>spellCheck</c> function runs asynchronously and calls the <c>callback</c> function with an
        /// array of misspelt words when complete.<br/><br/>An example of using node-spellchecker as provider:
        /// </summary>
        /// <param name="language"></param>
        /// <param name="provider"></param>
        [<Erase>]
        static member mutable setSpellCheckProvider
            (language: string, provider: WebFrame.SetSpellCheckProvider.Provider)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// A key for the inserted CSS that can later be used to remove the CSS via <c>webFrame.removeInsertedCSS(key)</c>.<br/><br/>Injects CSS into the
        /// current web page and returns a unique key for the inserted stylesheet.
        /// </summary>
        /// <param name="css"></param>
        /// <param name="cssOrigin">Can be 'user' or 'author'. Sets the cascade origin of the inserted stylesheet. Default is 'author'.</param>
        [<Erase; ParamObject(1)>]
        static member mutable insertCSS(css: string, ?cssOrigin: Enums.WebFrame.InsertCSS.Options.CssOrigin) : string =
            Unchecked.defaultof<_>

        /// <summary>
        /// Removes the inserted CSS from the current web page. The stylesheet is identified by its key, which is returned from
        /// <c>webFrame.insertCSS(css)</c>.
        /// </summary>
        /// <param name="key"></param>
        [<Erase>]
        static member mutable removeInsertedCSS(key: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Inserts <c>text</c> to the focused element.
        /// </summary>
        /// <param name="text"></param>
        [<Erase>]
        static member mutable insertText(text: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// A promise that resolves with the result of the executed code or is rejected if execution throws or results in
        /// a rejected promise.<br/><br/>Evaluates <c>code</c> in page.<br/><br/>In the browser window some HTML APIs like <c>requestFullScreen</c> can only be invoked by a
        /// gesture from the user. Setting <c>userGesture</c> to <c>true</c> will remove this limitation.
        /// </summary>
        /// <param name="code"></param>
        /// <param name="userGesture">Default is <c>false</c>.</param>
        /// <param name="callback">Called after script has been executed. Unless the frame is suspended (e.g. showing a modal alert), execution will be
        /// synchronous and the callback will be invoked before the method returns. For compatibility with an older version of this method,
        /// the error parameter is second.</param>
        [<Erase>]
        static member mutable executeJavaScript
            (code: string, ?userGesture: bool, ?callback: WebFrame.ExecuteJavaScript.Callback)
            : Promise<obj> =
            Unchecked.defaultof<_>

        /// <summary>
        /// A promise that resolves with the result of the executed code or is rejected if execution could not start.<br/><br/>Works like
        /// <c>executeJavaScript</c> but evaluates <c>scripts</c> in an isolated context.<br/><br/>Note that when the execution of script fails, the returned promise will not
        /// reject and the <c>result</c> would be <c>undefined</c>. This is because Chromium does not dispatch errors of isolated worlds to foreign
        /// worlds.
        /// </summary>
        /// <param name="worldId">The ID of the world to run the javascript in, <c>0</c> is the default main world (where content runs),
        /// <c>999</c> is the world used by Electron's <c>contextIsolation</c> feature. Accepts values in the range 1..536870911.</param>
        /// <param name="scripts"></param>
        /// <param name="userGesture">Default is <c>false</c>.</param>
        /// <param name="callback">Called after script has been executed. Unless the frame is suspended (e.g. showing a modal alert), execution will be
        /// synchronous and the callback will be invoked before the method returns.  For compatibility with an older version of this
        /// method, the error parameter is second.</param>
        [<Erase>]
        static member mutable executeJavaScriptInIsolatedWorld
            (
                worldId: int,
                scripts: WebSource[],
                ?userGesture: bool,
                ?callback: WebFrame.ExecuteJavaScriptInIsolatedWorld.Callback
            ) : Promise<obj> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Set the security origin, content security policy and name of the isolated world.<br/><br/>&gt; [!NOTE] If the <c>csp</c> is specified, then
        /// the <c>securityOrigin</c> also has to be specified.
        /// </summary>
        /// <param name="worldId">The ID of the world to run the javascript in, <c>0</c> is the default world, <c>999</c> is the world
        /// used by Electron's <c>contextIsolation</c> feature. Chrome extensions reserve the range of IDs in <c>[1 &lt;&lt; 20, 1 &lt;&lt; 29)</c>. You
        /// can provide any integer here.</param>
        /// <param name="securityOrigin">Security origin for the isolated world.</param>
        /// <param name="csp">Content Security Policy for the isolated world.</param>
        /// <param name="name">Name for isolated world. Useful in devtools.</param>
        [<Erase; ParamObject(1)>]
        static member mutable setIsolatedWorldInfo
            (worldId: int, ?securityOrigin: string, ?csp: string, ?name: string)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// * <c>images</c> MemoryUsageDetails<br/>* <c>scripts</c> MemoryUsageDetails<br/>* <c>cssStyleSheets</c> MemoryUsageDetails<br/>* <c>xslStyleSheets</c> MemoryUsageDetails<br/>* <c>fonts</c> MemoryUsageDetails<br/>* <c>other</c> MemoryUsageDetails<br/><br/>Returns an object describing usage information of Blink's
        /// internal memory caches.<br/><br/>This will generate:
        /// </summary>
        [<Erase>]
        static member mutable getResourceUsage() : WebFrame.GetResourceUsage = Unchecked.defaultof<_>

        /// <summary>
        /// Attempts to free memory that is no longer being used (like images from a previous navigation).<br/><br/>Note that blindly calling this
        /// method probably makes Electron slower since it will have to refill these emptied caches, you should only call it if
        /// an event in your app has occurred that makes you think your page is actually using less memory (i.e. you
        /// have navigated from a super heavy page to a mostly empty one, and intend to stay there).
        /// </summary>
        [<Erase>]
        static member mutable clearCache() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The frame element in <c>webFrame's</c> document selected by <c>selector</c>, <c>null</c> would be returned if <c>selector</c> does not select a frame
        /// or if the frame is not in the current renderer process.
        /// </summary>
        /// <param name="selector">CSS selector for a frame element.</param>
        [<Erase>]
        static member mutable getFrameForSelector(selector: string) : Option<WebFrame> = Unchecked.defaultof<_>

        /// <summary>
        /// A child of <c>webFrame</c> with the supplied <c>name</c>, <c>null</c> would be returned if there's no such frame or if the
        /// frame is not in the current renderer process.
        /// </summary>
        /// <param name="name"></param>
        [<Erase>]
        static member mutable findFrameByName(name: string) : Option<WebFrame> = Unchecked.defaultof<_>

        /// <summary>
        /// that has the supplied <c>routingId</c>, <c>null</c> if not found.<br/><br/>**Deprecated:** Use the new <c>webFrame.findFrameByToken</c> API.
        /// </summary>
        /// <param name="routingId">An <c>Integer</c> representing the unique frame id in the current renderer process. Routing IDs can be retrieved from <c>WebFrame</c>
        /// instances (<c>webFrame.routingId</c>) and are also passed by frame specific <c>WebContents</c> navigation events (e.g. <c>did-frame-navigate</c>)</param>
        [<Erase; System.Obsolete>]
        static member mutable findFrameByRoutingId(routingId: int) : Option<WebFrame> = Unchecked.defaultof<_>

        /// <summary>
        /// that has the supplied <c>frameToken</c>, <c>null</c> if not found.
        /// </summary>
        /// <param name="frameToken">A <c>string</c> representing the unique frame id in the current renderer process. Frame tokens can be retrieved from <c>WebFrame</c>
        /// instances (<c>webFrame.frameToken</c>) and can also be retrieved from <c>WebFrameMain</c> instances using <c>webFrameMain.frameToken</c>.</param>
        [<Erase>]
        static member mutable findFrameByToken(frameToken: string) : Option<WebFrame> = Unchecked.defaultof<_>

        /// <summary>
        /// True if the word is misspelled according to the built in spellchecker, false otherwise. If no dictionary is loaded, always
        /// return false.
        /// </summary>
        /// <param name="word">The word to be spellchecked.</param>
        [<Erase>]
        static member mutable isWordMisspelled(word: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// A list of suggested words for a given word. If the word is spelled correctly, the result will be empty.
        /// </summary>
        /// <param name="word">The misspelled word.</param>
        [<Erase>]
        static member mutable getWordSuggestions(word: string) : string[] = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>WebFrame | null</c> representing top frame in frame hierarchy to which <c>webFrame</c> belongs, the property would be <c>null</c> if
        /// top frame is not in the current renderer process.
        /// </summary>
        [<Erase>]
        static member val top: Option<WebFrame> = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebFrame | null</c> representing the frame which opened <c>webFrame</c>, the property would be <c>null</c> if there's no opener or
        /// opener is not in the current renderer process.
        /// </summary>
        [<Erase>]
        static member val opener: Option<WebFrame> = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebFrame | null</c> representing parent frame of <c>webFrame</c>, the property would be <c>null</c> if <c>webFrame</c> is top or parent
        /// is not in the current renderer process.
        /// </summary>
        [<Erase>]
        static member val parent: Option<WebFrame> = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebFrame | null</c> representing the first child frame of <c>webFrame</c>, the property would be <c>null</c> if <c>webFrame</c> has no
        /// children or if first child is not in the current renderer process.
        /// </summary>
        [<Erase>]
        static member val firstChild: Option<WebFrame> = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebFrame | null</c> representing next sibling frame, the property would be <c>null</c> if <c>webFrame</c> is the last frame in
        /// its parent or if the next sibling is not in the current renderer process.
        /// </summary>
        [<Erase>]
        static member val nextSibling: Option<WebFrame> = Unchecked.defaultof<_> with get

        /// <summary>
        /// An <c>Integer</c> representing the unique frame id in the current renderer process. Distinct WebFrame instances that refer to the same
        /// underlying frame will have the same <c>routingId</c>.<br/><br/>**Deprecated:** Use the new <c>webFrame.frameToken</c> API.
        /// </summary>
        [<Erase; System.Obsolete>]
        static member val routingId: int = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing the unique frame token in the current renderer process. Distinct WebFrame instances that refer to the same
        /// underlying frame will have the same <c>frameToken</c>.
        /// </summary>
        [<Erase>]
        static member val frameToken: string = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ✔ | Exported ❌</para>
    /// </summary>
    [<Import("UtilityProcess", "electron")>]
    type UtilityProcess =
        interface EventEmitter

        /// <summary>
        /// Emitted once the child process has spawned successfully.
        /// </summary>
        [<Emit("$0.on('spawn', $1)")>]
        member inline _.onSpawn(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once the child process has spawned successfully.
        /// </summary>
        [<Emit("$0.once('spawn', $1)")>]
        member inline _.onceSpawn(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once the child process has spawned successfully.
        /// </summary>
        [<Emit("$0.off('spawn', $1)")>]
        member inline _.offSpawn(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.on('error', $1)")>]
        member inline _.onError(handler: Enums.UtilityProcess.Error.Type -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.on('error', $1)")>]
        member inline _.onError(handler: Fable.Electron.EventInterfaces.Root.IOnError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.once('error', $1)")>]
        member inline _.onceError(handler: Enums.UtilityProcess.Error.Type -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.once('error', $1)")>]
        member inline _.onceError(handler: Fable.Electron.EventInterfaces.Root.IOnError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.off('error', $1)")>]
        member inline _.offError(handler: Enums.UtilityProcess.Error.Type -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.off('error', $1)")>]
        member inline _.offError(handler: Fable.Electron.EventInterfaces.Root.IOnError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the child process ends.
        /// </summary>
        [<Emit("$0.on('exit', $1)")>]
        member inline _.onExit(handler: float -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the child process ends.
        /// </summary>
        [<Emit("$0.once('exit', $1)")>]
        member inline _.onceExit(handler: float -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the child process ends.
        /// </summary>
        [<Emit("$0.off('exit', $1)")>]
        member inline _.offExit(handler: float -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process sends a message using <c>process.parentPort.postMessage()</c>.
        /// </summary>
        [<Emit("$0.on('message', $1)")>]
        member inline _.onMessage(handler: obj -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process sends a message using <c>process.parentPort.postMessage()</c>.
        /// </summary>
        [<Emit("$0.once('message', $1)")>]
        member inline _.onceMessage(handler: obj -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process sends a message using <c>process.parentPort.postMessage()</c>.
        /// </summary>
        [<Emit("$0.off('message', $1)")>]
        member inline _.offMessage(handler: obj -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Send a message to the child process, optionally transferring ownership of zero or more <c>MessagePortMain</c> objects.<br/><br/>For example:
        /// </summary>
        /// <param name="message"></param>
        /// <param name="transfer"></param>
        [<Erase>]
        member inline _.postMessage(message: obj, ?transfer: MessagePortMain[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Terminates the process gracefully. On POSIX, it uses SIGTERM but will ensure the process is reaped on exit. This function
        /// returns true if the kill is successful, and false otherwise.
        /// </summary>
        [<Erase>]
        member inline _.kill() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>Integer | undefined</c> representing the process identifier (PID) of the child process. Until the child process has spawned successfully,
        /// the value is <c>undefined</c>. When the child process exits, then the value is <c>undefined</c> after the <c>exit</c> event is emitted.<br/><br/>&gt;
        /// [!NOTE] You can use the <c>pid</c> to determine if the process is currently running.
        /// </summary>
        [<Erase>]
        member val pid: Option<int> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>NodeJS.ReadableStream | null</c> that represents the child process's stdout. If the child was spawned with options.stdio[1] set to anything
        /// other than 'pipe', then this will be <c>null</c>. When the child process exits, then the value is <c>null</c> after the
        /// <c>exit</c> event is emitted.
        /// </summary>
        [<Erase>]
        member val stdout: Option<NodeJS.ReadableStream> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>NodeJS.ReadableStream | null</c> that represents the child process's stderr. If the child was spawned with options.stdio[2] set to anything
        /// other than 'pipe', then this will be <c>null</c>. When the child process exits, then the value is <c>null</c> after the
        /// <c>exit</c> event is emitted.
        /// </summary>
        [<Erase>]
        member val stderr: Option<NodeJS.ReadableStream> = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Manage files and URLs using their default applications.<br/><br/>Process: Main, Renderer (non-sandboxed only)<br/><br/>The <c>shell</c> module provides functions related to desktop
    /// integration.<br/><br/>An example of opening a URL in the user's default browser:<br/><br/><code><br/>const { shell } = require('electron')<br/><br/>shell.openExternal('https://github.com')<br/></code><br/><br/>&gt; [!WARNING] While the <c>shell</c>
    /// module can be used in the renderer process, it will not function in a sandboxed renderer.
    /// </summary>
    [<Import("shell", "electron")>]
    type Shell =
        /// <summary>
        /// Show the given file in a file manager. If possible, select the file.
        /// </summary>
        /// <param name="fullPath"></param>
        [<Erase>]
        static member mutable showItemInFolder(fullPath: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with a string containing the error message corresponding to the failure if a failure occurred, otherwise "".<br/><br/>Open the given
        /// file in the desktop's default manner.
        /// </summary>
        /// <param name="path"></param>
        [<Erase>]
        static member mutable openPath(path: string) : Promise<string> = Unchecked.defaultof<_>

        /// <summary>
        /// Open the given external protocol URL in the desktop's default manner. (For example, mailto: URLs in the user's default mail
        /// agent).
        /// </summary>
        /// <param name="url">Max 2081 characters on Windows.</param>
        /// <param name="activate">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || <c>true</c> to bring the
        /// opened application to the foreground. The default is <c>true</c>.</param>
        /// <param name="workingDirectory">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || The working directory.</param>
        /// <param name="logUsage">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || Indicates a user initiated
        /// launch that enables tracking of frequently used programs and other behaviors. The default is <c>false</c>.</param>
        [<Erase; ParamObject(1)>]
        static member mutable openExternal
            (url: string, ?activate: bool, ?workingDirectory: string, ?logUsage: bool)
            : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resolves when the operation has been completed. Rejects if there was an error while deleting the requested item.<br/><br/>This moves a
        /// path to the OS-specific trash location (Trash on macOS, Recycle Bin on Windows, and a desktop-environment-specific location on Linux).
        /// </summary>
        /// <param name="path">path to the item to be moved to the trash.</param>
        [<Erase>]
        static member mutable trashItem(path: string) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// Play the beep sound.
        /// </summary>
        [<Erase>]
        static member mutable beep() : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the shortcut was created successfully.<br/><br/>Creates or updates a shortcut link at <c>shortcutPath</c>.
        /// </summary>
        /// <param name="shortcutPath"></param>
        /// <param name="operation">Default is <c>create</c>, can be one of following:</param>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable writeShortcutLink
            (shortcutPath: string, ?operation: Enums.Shell.WriteShortcutLink.Operation, options: ShortcutDetails)
            : bool =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Resolves the shortcut link at <c>shortcutPath</c>.<br/><br/>An exception will be thrown when any error happens.
        /// </summary>
        /// <param name="shortcutPath"></param>
        [<Erase>]
        static member mutable readShortcutLink(shortcutPath: string) : ShortcutDetails = Unchecked.defaultof<_>
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Extensions to process object.<br/><br/>Process: Main, Renderer<br/><br/>Electron's <c>process</c> object is extended from the Node.js <c>process</c> object. It adds the following
    /// events, properties, and methods:<br/><br/>### Sandbox<br/><br/>In sandboxed renderers the <c>process</c> object contains only a subset of the APIs:<br/><br/>* <c>crash()</c><br/>* <c>hang()</c><br/>* <c>getCreationTime()</c><br/>*
    /// <c>getHeapStatistics()</c><br/>* <c>getBlinkMemoryInfo()</c><br/>* <c>getProcessMemoryInfo()</c><br/>* <c>getSystemMemoryInfo()</c><br/>* <c>getSystemVersion()</c><br/>* <c>getCPUUsage()</c><br/>* <c>uptime()</c><br/>* <c>argv</c><br/>* <c>execPath</c><br/>* <c>env</c><br/>* <c>pid</c><br/>* <c>arch</c><br/>* <c>platform</c><br/>* <c>sandboxed</c><br/>* <c>contextIsolated</c><br/>* <c>type</c><br/>* <c>version</c><br/>* <c>versions</c><br/>* <c>mas</c><br/>* <c>windowsStore</c><br/>*
    /// <c>contextId</c>
    /// </summary>
    [<Import("process", "electron")>]
    type Process =
        interface EventEmitter

        /// <summary>
        /// Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main
        /// script.
        /// </summary>
        [<Emit("$0.on('loaded', $1)"); Import("process", "electron")>]
        static member mutable onLoaded(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main
        /// script.
        /// </summary>
        [<Emit("$0.once('loaded', $1)"); Import("process", "electron")>]
        static member mutable onceLoaded(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main
        /// script.
        /// </summary>
        [<Emit("$0.off('loaded', $1)"); Import("process", "electron")>]
        static member mutable offLoaded(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Causes the main thread of the current process crash.
        /// </summary>
        [<Erase>]
        static member mutable crash() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The number of milliseconds since epoch, or <c>null</c> if the information is unavailable<br/><br/>Indicates the creation time of the application. The
        /// time is represented as number of milliseconds since epoch. It returns null if it is unable to get the process
        /// creation time.
        /// </summary>
        [<Erase>]
        static member mutable getCreationTime() : Option<float> = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        [<Erase>]
        static member mutable getCPUUsage() : CPUUsage = Unchecked.defaultof<_>

        /// <summary>
        /// * <c>totalHeapSize</c> Integer<br/>* <c>totalHeapSizeExecutable</c> Integer<br/>* <c>totalPhysicalSize</c> Integer<br/>* <c>totalAvailableSize</c> Integer<br/>* <c>usedHeapSize</c> Integer<br/>* <c>heapSizeLimit</c> Integer<br/>* <c>mallocedMemory</c> Integer<br/>* <c>peakMallocedMemory</c> Integer<br/>* <c>doesZapGarbage</c> boolean<br/><br/>Returns an
        /// object with V8 heap statistics. Note that all statistics are reported in Kilobytes.
        /// </summary>
        [<Erase>]
        static member mutable getHeapStatistics() : Process.GetHeapStatistics = Unchecked.defaultof<_>

        /// <summary>
        /// * <c>allocated</c> Integer - Size of all allocated objects in Kilobytes.<br/>* <c>total</c> Integer - Total allocated space in Kilobytes.<br/><br/>Returns an
        /// object with Blink memory information. It can be useful for debugging rendering / DOM related memory issues. Note that all
        /// values are reported in Kilobytes.
        /// </summary>
        [<Erase>]
        static member mutable getBlinkMemoryInfo() : Process.GetBlinkMemoryInfo = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with a ProcessMemoryInfo<br/><br/>Returns an object giving memory usage statistics about the current process. Note that all statistics are reported
        /// in Kilobytes. This api should be called after app ready.<br/><br/>Chromium does not provide <c>residentSet</c> value for macOS. This is because
        /// macOS performs in-memory compression of pages that haven't been recently used. As a result the resident set size value is
        /// not what one would expect. <c>private</c> memory is more representative of the actual pre-compression memory usage of the process on
        /// macOS.
        /// </summary>
        [<Erase>]
        static member mutable getProcessMemoryInfo() : Promise<ProcessMemoryInfo> = Unchecked.defaultof<_>

        /// <summary>
        /// * <c>total</c> Integer - The total amount of physical memory in Kilobytes available to the system.<br/>* <c>free</c> Integer - The
        /// total amount of memory not being used by applications or disk cache.<br/>* <c>fileBacked</c> Integer _macOS_ - The amount of memory
        /// that currently has been paged out to storage. Includes memory for file caches, network buffers, and other system services.<br/>* <c>purgeable</c>
        /// Integer _macOS_ - The amount of memory that is marked as "purgeable". The system can reclaim it if memory pressure
        /// increases.<br/>* <c>swapTotal</c> Integer _Windows_ _Linux_ - The total amount of swap memory in Kilobytes available to the system.<br/>* <c>swapFree</c> Integer
        /// _Windows_ _Linux_ - The free amount of swap memory in Kilobytes available to the system.<br/><br/>Returns an object giving memory usage
        /// statistics about the entire system. Note that all statistics are reported in Kilobytes.
        /// </summary>
        [<Erase>]
        static member mutable getSystemMemoryInfo() : Process.GetSystemMemoryInfo = Unchecked.defaultof<_>

        /// <summary>
        /// The version of the host operating system.<br/><br/>Example:<br/><br/>&gt; [!NOTE] It returns the actual operating system version instead of kernel version on
        /// macOS unlike <c>os.release()</c>.
        /// </summary>
        [<Erase>]
        static member mutable getSystemVersion() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Indicates whether the snapshot has been created successfully.<br/><br/>Takes a V8 heap snapshot and saves it to <c>filePath</c>.
        /// </summary>
        /// <param name="filePath">Path to the output file.</param>
        [<Erase>]
        static member mutable takeHeapSnapshot(filePath: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Causes the main thread of the current process hang.
        /// </summary>
        [<Erase>]
        static member mutable hang() : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets the file descriptor soft limit to <c>maxDescriptors</c> or the OS hard limit, whichever is lower for the current process.
        /// </summary>
        /// <param name="maxDescriptors"></param>
        [<Erase>]
        static member mutable setFdLimit(maxDescriptors: int) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// A <c>boolean</c>. When the app is started by being passed as parameter to the default Electron executable, this property is
        /// <c>true</c> in the main process, otherwise it is <c>undefined</c>. For example when running the app with <c>electron .</c>, it is
        /// <c>true</c>, even if the app is packaged (<c>isPackaged</c>) is <c>true</c>. This can be useful to determine how many arguments will
        /// need to be sliced off from <c>process.argv</c>.
        /// </summary>
        [<Erase>]
        static member val defaultApp: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c>, <c>true</c> when the current renderer context is the "main" renderer frame. If you want the ID of the
        /// current frame you should use <c>webFrame.routingId</c>.
        /// </summary>
        [<Erase>]
        static member val isMainFrame: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c>. For Mac App Store build, this property is <c>true</c>, for other builds it is <c>undefined</c>.
        /// </summary>
        [<Erase>]
        static member val mas: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c> that controls ASAR support inside your application. Setting this to <c>true</c> will disable the support for <c>asar</c> archives
        /// in Node's built-in modules.
        /// </summary>
        [<Erase>]
        static member val noAsar: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> that controls whether or not deprecation warnings are printed to <c>stderr</c>. Setting this to <c>true</c> will silence deprecation
        /// warnings. This property is used instead of the <c>--no-deprecation</c> command line flag.
        /// </summary>
        [<Erase>]
        static member val noDeprecation: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the path to the resources directory.
        /// </summary>
        [<Erase>]
        static member val resourcesPath: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c>. When the renderer process is sandboxed, this property is <c>true</c>, otherwise it is <c>undefined</c>.
        /// </summary>
        [<Erase>]
        static member val sandboxed: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c> that indicates whether the current renderer context has <c>contextIsolation</c> enabled. It is <c>undefined</c> in the main process.
        /// </summary>
        [<Erase>]
        static member val contextIsolated: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c> that controls whether or not deprecation warnings will be thrown as exceptions. Setting this to <c>true</c> will throw
        /// errors for deprecations. This property is used instead of the <c>--throw-deprecation</c> command line flag.
        /// </summary>
        [<Erase>]
        static member val throwDeprecation: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> that controls whether or not deprecations printed to <c>stderr</c> include their stack trace. Setting this to <c>true</c> will
        /// print stack traces for deprecations. This property is instead of the <c>--trace-deprecation</c> command line flag.
        /// </summary>
        [<Erase>]
        static member val traceDeprecation: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> that controls whether or not process warnings printed to <c>stderr</c> include their stack trace. Setting this to <c>true</c>
        /// will print stack traces for process warnings (including deprecations). This property is instead of the <c>--trace-warnings</c> command line flag.
        /// </summary>
        [<Erase>]
        static member val traceProcessWarnings: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the current process's type, can be:<br/><br/>* <c>browser</c> - The main process<br/>* <c>renderer</c> - A renderer process<br/>* <c>service-worker</c>
        /// - In a service worker<br/>* <c>worker</c> - In a web worker<br/>* <c>utility</c> - In a node process launched as a
        /// service
        /// </summary>
        [<Erase>]
        static member val ``type``: Enums.Process.Type = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing Chrome's version string.
        /// </summary>
        [<Erase>]
        static member val chrome: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing Electron's version string.
        /// </summary>
        [<Erase>]
        static member val electron: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c>. If the app is running as a Windows Store app (appx), this property is <c>true</c>, for otherwise it
        /// is <c>undefined</c>.
        /// </summary>
        [<Erase>]
        static member val windowsStore: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> (optional) representing a globally unique ID of the current JavaScript context. Each frame has its own JavaScript context.
        /// When contextIsolation is enabled, the isolated world also has a separate JavaScript context. This property is only available in the
        /// renderer process.
        /// </summary>
        [<Erase>]
        static member val contextId: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>Electron.ParentPort</c> property if this is a <c>UtilityProcess</c> (or <c>null</c> otherwise) allowing communication with the parent process.
        /// </summary>
        [<Erase>]
        static member val parentPort: Electron.ParentPort = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("NativeImage", "electron")>]
    type NativeImage =
        /// <summary>
        /// A Buffer that contains the image's <c>PNG</c> encoded data.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase; ParamObject(0)>]
        member inline _.toPNG(?scaleFactor: float) : Buffer = Unchecked.defaultof<_>

        /// <summary>
        /// A Buffer that contains the image's <c>JPEG</c> encoded data.
        /// </summary>
        /// <param name="quality">Between 0 - 100.</param>
        [<Erase>]
        member inline _.toJPEG(quality: int) : Buffer = Unchecked.defaultof<_>

        /// <summary>
        /// A Buffer that contains a copy of the image's raw bitmap pixel data.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase; ParamObject(0)>]
        member inline _.toBitmap(?scaleFactor: float) : Buffer = Unchecked.defaultof<_>

        /// <summary>
        /// The Data URL of the image.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase; ParamObject(0)>]
        member inline _.toDataURL(?scaleFactor: float) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Legacy alias for <c>image.toBitmap()</c>.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase; ParamObject(0); System.Obsolete>]
        member inline _.getBitmap(?scaleFactor: float) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// A Buffer that stores C pointer to underlying native handle of the image. On macOS, a pointer to <c>NSImage</c> instance
        /// is returned.<br/><br/>Notice that the returned pointer is a weak pointer to the underlying native image instead of a copy, so
        /// you _must_ ensure that the associated <c>nativeImage</c> instance is kept around.
        /// </summary>
        [<Erase>]
        member inline _.getNativeHandle() : Buffer = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Whether the image is empty.
        /// </summary>
        [<Erase>]
        member inline _.isEmpty() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// If <c>scaleFactor</c> is passed, this will return the size corresponding to the image representation most closely matching the passed value.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase>]
        member inline _.getSize(?scaleFactor: float) : Size = Unchecked.defaultof<_>

        /// <summary>
        /// Marks the image as a macOS template image.
        /// </summary>
        /// <param name="option"></param>
        [<Erase>]
        member inline _.setTemplateImage(option: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the image is a macOS template image.
        /// </summary>
        [<Erase>]
        member inline _.isTemplateImage() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// The cropped image.
        /// </summary>
        /// <param name="rect">The area of the image to crop.</param>
        [<Erase>]
        member inline _.crop(rect: Rectangle) : NativeImage = Unchecked.defaultof<_>

        /// <summary>
        /// The resized image.<br/><br/>If only the <c>height</c> or the <c>width</c> are specified then the current aspect ratio will be preserved in
        /// the resized image.
        /// </summary>
        /// <param name="width">Defaults to the image's width.</param>
        /// <param name="height">Defaults to the image's height.</param>
        /// <param name="quality">The desired quality of the resize image. Possible values include <c>good</c>, <c>better</c>, or <c>best</c>. The default is <c>best</c>. These
        /// values express a desired quality/speed tradeoff. They are translated into an algorithm-specific method that depends on the capabilities (CPU, GPU)
        /// of the underlying platform. It is possible for all three methods to be mapped to the same algorithm on a
        /// given platform.</param>
        [<Erase; ParamObject(0)>]
        member inline _.resize
            (?width: int, ?height: int, ?quality: Enums.NativeImage.Resize.Options.Quality)
            : NativeImage =
            Unchecked.defaultof<_>

        /// <summary>
        /// The image's aspect ratio (width divided by height).<br/><br/>If <c>scaleFactor</c> is passed, this will return the aspect ratio corresponding to the
        /// image representation most closely matching the passed value.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase>]
        member inline _.getAspectRatio(?scaleFactor: float) : float = Unchecked.defaultof<_>

        /// <summary>
        /// An array of all scale factors corresponding to representations for a given <c>NativeImage</c>.
        /// </summary>
        [<Erase>]
        member inline _.getScaleFactors() : float[] = Unchecked.defaultof<_>

        /// <summary>
        /// Add an image representation for a specific scale factor. This can be used to programmatically add different scale factor representations
        /// to an image. This can be called on empty images.
        /// </summary>
        /// <param name="scaleFactor">The scale factor to add the image representation for.</param>
        /// <param name="width">Defaults to 0. Required if a bitmap buffer is specified as <c>buffer</c>.</param>
        /// <param name="height">Defaults to 0. Required if a bitmap buffer is specified as <c>buffer</c>.</param>
        /// <param name="buffer">The buffer containing the raw image data.</param>
        /// <param name="dataURL">The data URL containing either a base 64 encoded PNG or JPEG image.</param>
        [<Erase; ParamObject(0)>]
        member inline _.addRepresentation
            (?scaleFactor: float, ?width: int, ?height: int, ?buffer: Buffer, ?dataURL: string)
            : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the image is considered a template image.<br/><br/>Please note that this property only has an
        /// effect on macOS.
        /// </summary>
        [<Erase>]
        member val isMacTemplateImage: bool = Unchecked.defaultof<_> with get, set
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Create tray, dock, and application icons using PNG or JPG files.<br/><br/>Process: Main, Renderer<br/><br/>&gt; [!IMPORTANT] If you want to call
    /// this API from a renderer process with context isolation enabled, place the API call in your preload script and expose
    /// it using the <c>contextBridge</c> API.<br/><br/>The <c>nativeImage</c> module provides a unified interface for manipulating system images. These can be handy if
    /// you want to provide multiple scaled versions of the same icon or take advantage of macOS template images.<br/><br/>Electron APIs that
    /// take image files accept either file paths or <c>NativeImage</c> instances. An empty and transparent image will be used when <c>null</c>
    /// is passed.<br/><br/>For example, when creating a Tray or setting a BrowserWindow's icon, you can either pass an image file path
    /// as a string:<br/><br/><code><br/>const { BrowserWindow, Tray } = require('electron')<br/><br/>const tray = new Tray('/Users/somebody/images/icon.png')<br/>const win = new BrowserWindow({ icon: '/Users/somebody/images/window.png' })<br/></code><br/><br/>or
    /// generate a <c>NativeImage</c> instance from the same file:<br/><br/>### Supported Formats<br/><br/>Currently, <c>PNG</c> and <c>JPEG</c> image formats are supported across all platforms.
    /// <c>PNG</c> is recommended because of its support for transparency and lossless compression.<br/><br/>On Windows, you can also load <c>ICO</c> icons from
    /// file paths. For best visual quality, we recommend including at least the following sizes:<br/><br/>* Small icon<br/>  * 16x16 (100%
    /// DPI scale)<br/>  * 20x20 (125% DPI scale)<br/>  * 24x24 (150% DPI scale)<br/>  * 32x32 (200% DPI scale)<br/>*
    /// Large icon<br/>  * 32x32 (100% DPI scale)<br/>  * 40x40 (125% DPI scale)<br/>  * 48x48 (150% DPI scale)<br/>
    ///  * 64x64 (200% DPI scale)<br/>  * 256x256<br/><br/>Check the _Icon Scaling_ section in the Windows App Icon Construction reference.<br/><br/>:::note<br/><br/>EXIF
    /// metadata is currently not supported and will not be taken into account during image encoding and decoding.<br/><br/>:::<br/><br/>### High Resolution Image<br/><br/>On
    /// platforms that support high pixel density displays (such as Apple Retina), you can append <c>@2x</c> after image's base filename to
    /// mark it as a 2x scale high resolution image.<br/><br/>For example, if <c>icon.png</c> is a normal image that has standard resolution,
    /// then <c>icon@2x.png</c> will be treated as a high resolution image that has double Dots per Inch (DPI) density.<br/><br/>If you want
    /// to support displays with different DPI densities at the same time, you can put images with different sizes in the
    /// same folder and use the filename without DPI suffixes within Electron. For example:<br/><br/><code><br/>images/<br/>├── icon.png<br/>├── icon@2x.png<br/>└── icon@3x.png<br/></code><br/><br/><code><br/>const { Tray } =
    /// require('electron')<br/><br/>const appTray = new Tray('/Users/somebody/images/icon.png')<br/></code><br/><br/>The following suffixes for DPI are also supported:<br/><br/>* <c>@1x</c><br/>* <c>@1.25x</c><br/>* <c>@1.33x</c><br/>* <c>@1.4x</c><br/>* <c>@1.5x</c><br/>* <c>@1.8x</c><br/>* <c>@2x</c><br/>* <c>@2.5x</c><br/>*
    /// <c>@3x</c><br/>* <c>@4x</c><br/>* <c>@5x</c><br/><br/>### Template Image _macOS_<br/><br/>On macOS, template images consist of black and an alpha channel. Template images are not
    /// intended to be used as standalone images and are usually mixed with other content to create the desired final appearance.<br/><br/>The
    /// most common case is to use template images for a menu bar (Tray) icon, so it can adapt to both
    /// light and dark menu bars.<br/><br/>To mark an image as a template image, its base filename should end with the word
    /// <c>Template</c> (e.g. <c>xxxTemplate.png</c>). You can also specify template images at different DPI densities (e.g. <c>xxxTemplate@2x.png</c>).
    /// </summary>
    [<Import("nativeImage", "electron")>]
    type NativeImage =
        /// <summary>
        /// Creates an empty <c>NativeImage</c> instance.
        /// </summary>
        [<Erase>]
        static member mutable createEmpty() : NativeImage = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// fulfilled with the file's thumbnail preview image, which is a NativeImage.<br/><br/>&gt; [!NOTE] Windows implementation will ignore <c>size.height</c> and scale the
        /// height according to <c>size.width</c>.
        /// </summary>
        /// <param name="path">path to a file that we intend to construct a thumbnail out of.</param>
        /// <param name="size">the desired width and height (positive numbers) of the thumbnail.</param>
        [<Erase>]
        static member mutable createThumbnailFromPath(path: string, size: Size) : Promise<NativeImage> =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Creates a new <c>NativeImage</c> instance from an image file (e.g., PNG or JPEG) located at <c>path</c>. This method returns an
        /// empty image if the <c>path</c> does not exist, cannot be read, or is not a valid image.
        /// </summary>
        /// <param name="path">path to a file that we intend to construct an image out of.</param>
        [<Erase>]
        static member mutable createFromPath(path: string) : NativeImage = Unchecked.defaultof<_>

        /// <summary>
        /// Creates a new <c>NativeImage</c> instance from <c>buffer</c> that contains the raw bitmap pixel data returned by <c>toBitmap()</c>. The specific format
        /// is platform-dependent.
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable createFromBitmap
            (buffer: Buffer, options: NativeImage.CreateFromBitmap.Options)
            : NativeImage =
            Unchecked.defaultof<_>

        /// <summary>
        /// Creates a new <c>NativeImage</c> instance from <c>buffer</c>. Tries to decode as PNG or JPEG first.
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="width">Required for bitmap buffers.</param>
        /// <param name="height">Required for bitmap buffers.</param>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase; ParamObject(1)>]
        static member mutable createFromBuffer
            (buffer: Buffer, ?width: int, ?height: int, ?scaleFactor: float)
            : NativeImage =
            Unchecked.defaultof<_>

        /// <summary>
        /// Creates a new <c>NativeImage</c> instance from <c>dataUrl</c>, a base 64 encoded Data URL string.
        /// </summary>
        /// <param name="dataURL"></param>
        [<Erase>]
        static member mutable createFromDataURL(dataURL: string) : NativeImage = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Creates a new <c>NativeImage</c> instance from the <c>NSImage</c> that maps to the given image name. See Apple's <c>NSImageName</c> documentation for
        /// a list of possible values.<br/><br/>The <c>hslShift</c> is applied to the image with the following rules:<br/><br/>* <c>hsl_shift[0]</c> (hue): The absolute hue
        /// value for the image - 0 and 1 map to 0 and 360 on the hue color wheel (red).<br/>* <c>hsl_shift[1]</c>
        /// (saturation): A saturation shift for the image, with the following key values: 0 = remove all color. 0.5 = leave
        /// unchanged. 1 = fully saturate the image.<br/>* <c>hsl_shift[2]</c> (lightness): A lightness shift for the image, with the following key values:
        /// 0 = remove all lightness (make all pixels black). 0.5 = leave unchanged. 1 = full lightness (make all pixels
        /// white).<br/><br/>This means that <c>[-1, 0, 1]</c> will make the image completely white and <c>[-1, 1, 0]</c> will make the image
        /// completely black.<br/><br/>In some cases, the <c>NSImageName</c> doesn't match its string representation; one example of this is <c>NSFolderImageName</c>, whose string representation
        /// would actually be <c>NSFolder</c>. Therefore, you'll need to determine the correct string representation for your image before passing it in.
        /// This can be done with the following:<br/><br/>where <c>SYSTEM_IMAGE_NAME</c> should be replaced with any value from this list.
        /// </summary>
        /// <param name="imageName"></param>
        /// <param name="hslShift"></param>
        [<Erase>]
        static member mutable createFromNamedImage(imageName: string, ?hslShift: float[]) : NativeImage =
            Unchecked.defaultof<_>
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ❌ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// <br/><br/>### ipcRenderer<br/><br/>&gt; Communicate asynchronously from a renderer process to the main process.<br/><br/>Process: Renderer<br/><br/>&gt; [!IMPORTANT] If you want to call this
    /// API from a renderer process with context isolation enabled, place the API call in your preload script and expose it
    /// using the <c>contextBridge</c> API.<br/><br/>The <c>ipcRenderer</c> module is an  EventEmitter. It provides a few methods so you can send synchronous
    /// and asynchronous messages from the render process (web page) to the main process. You can also receive replies from the
    /// main process.<br/><br/>See IPC tutorial for code examples.
    /// </summary>
    [<Import("ipcRenderer", "electron")>]
    type IpcRenderer =
        /// <summary>
        /// Listens to <c>channel</c>, when a new message arrives <c>listener</c> would be called with <c>listener(event, args...)</c>.<br/><br/>:::warning Do not expose the <c>event</c>
        /// argument to the renderer for security reasons! Wrap any callback that you receive from the renderer in another function like
        /// this: <c>ipcRenderer.on('my-channel', (event, ...args) =&gt; callback(...args))</c>. Not wrapping the callback in such a function would expose dangerous Electron APIs to
        /// the renderer process. See the security guide for more info. :::
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable on(channel: string, listener: IpcRenderer.On.Listener) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Removes the specified <c>listener</c> from the listener array for the specified <c>channel</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable off(channel: string, listener: IpcRenderer.Off.Listener) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Adds a one time <c>listener</c> function for the event. This <c>listener</c> is invoked only the next time a message is
        /// sent to <c>channel</c>, after which it is removed.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable once(channel: string, listener: IpcRenderer.Once.Listener) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Alias for <c>ipcRenderer.on</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable addListener(channel: string, listener: IpcRenderer.AddListener.Listener) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Alias for <c>ipcRenderer.off</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable removeListener(channel: string, listener: IpcRenderer.RemoveListener.Listener) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Removes all listeners from the specified <c>channel</c>. Removes all listeners from all channels if no channel is specified.
        /// </summary>
        /// <param name="channel"></param>
        [<Erase>]
        static member mutable removeAllListeners(?channel: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Send an asynchronous message to the main process via <c>channel</c>, along with arguments. Arguments will be serialized with the Structured
        /// Clone Algorithm, just like <c>window.postMessage</c>, so prototype chains will not be included. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will
        /// throw an exception.<br/><br/>&gt; **NOTE:** Sending non-standard JavaScript types such as DOM objects or special Electron objects will throw an exception.<br/><br/>Since
        /// the main process does not have support for DOM objects such as <c>ImageBitmap</c>, <c>File</c>, <c>DOMMatrix</c> and so on, such objects
        /// cannot be sent over Electron's IPC to the main process, as the main process would have no way to decode
        /// them. Attempting to send such objects over IPC will result in an error.<br/><br/>The main process handles it by listening for
        /// <c>channel</c> with the <c>ipcMain</c> module.<br/><br/>If you need to transfer a <c>MessagePort</c> to the main process, use <c>ipcRenderer.postMessage</c>.<br/><br/>If you want to
        /// receive a single response from the main process, like the result of a method call, consider using <c>ipcRenderer.invoke</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="...args"></param>
        [<Erase>]
        static member mutable send(channel: string, [<System.ParamArray>] args: obj[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with the response from the main process.<br/><br/>Send a message to the main process via <c>channel</c> and expect a result
        /// asynchronously. Arguments will be serialized with the Structured Clone Algorithm, just like <c>window.postMessage</c>, so prototype chains will not be included.
        /// Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will throw an exception.<br/><br/>The main process should listen for <c>channel</c> with <c>ipcMain.handle()</c>.<br/><br/>For example:<br/><br/>If
        /// you need to transfer a <c>MessagePort</c> to the main process, use <c>ipcRenderer.postMessage</c>.<br/><br/>If you do not need a response to the
        /// message, consider using <c>ipcRenderer.send</c>.<br/><br/>&gt; [!NOTE] Sending non-standard JavaScript types such as DOM objects or special Electron objects will throw an
        /// exception.<br/><br/>Since the main process does not have support for DOM objects such as <c>ImageBitmap</c>, <c>File</c>, <c>DOMMatrix</c> and so on, such
        /// objects cannot be sent over Electron's IPC to the main process, as the main process would have no way to
        /// decode them. Attempting to send such objects over IPC will result in an error.<br/><br/>&gt; [!NOTE] If the handler in the
        /// main process throws an error, the promise returned by <c>invoke</c> will reject. However, the <c>Error</c> object in the renderer process
        /// will not be the same as the one thrown in the main process.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="...args"></param>
        [<Erase>]
        static member mutable invoke(channel: string, [<System.ParamArray>] args: obj[]) : Promise<obj> =
            Unchecked.defaultof<_>

        /// <summary>
        /// The value sent back by the <c>ipcMain</c> handler.<br/><br/>Send a message to the main process via <c>channel</c> and expect a result
        /// synchronously. Arguments will be serialized with the Structured Clone Algorithm, just like <c>window.postMessage</c>, so prototype chains will not be included.
        /// Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will throw an exception.<br/><br/>&gt; **NOTE:** Sending non-standard JavaScript types such as DOM objects
        /// or special Electron objects will throw an exception.<br/><br/>Since the main process does not have support for DOM objects such as
        /// <c>ImageBitmap</c>, <c>File</c>, <c>DOMMatrix</c> and so on, such objects cannot be sent over Electron's IPC to the main process, as the
        /// main process would have no way to decode them. Attempting to send such objects over IPC will result in an
        /// error.<br/><br/>The main process handles it by listening for <c>channel</c> with <c>ipcMain</c> module, and replies by setting <c>event.returnValue</c>.<br/><br/>&gt; [!WARNING] Sending a
        /// synchronous message will block the whole renderer process until the reply is received, so use this method only as a
        /// last resort. It's much better to use the asynchronous version, <c>invoke()</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="...args"></param>
        [<Erase>]
        static member mutable sendSync(channel: string, [<System.ParamArray>] args: obj[]) : obj =
            Unchecked.defaultof<_>

        /// <summary>
        /// Send a message to the main process, optionally transferring ownership of zero or more <c>MessagePort</c> objects.<br/><br/>The transferred <c>MessagePort</c> objects will
        /// be available in the main process as <c>MessagePortMain</c> objects by accessing the <c>ports</c> property of the emitted event.<br/><br/>For example:<br/><br/>For more
        /// information on using <c>MessagePort</c> and <c>MessageChannel</c>, see the MDN documentation.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="message"></param>
        /// <param name="transfer"></param>
        [<Erase>]
        static member mutable postMessage(channel: string, message: obj, ?transfer: MessagePort[]) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Like <c>ipcRenderer.send</c> but the event will be sent to the <c>&lt;webview&gt;</c> element in the host page instead of the main
        /// process.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="...args"></param>
        [<Erase>]
        static member mutable sendToHost(channel: string, [<System.ParamArray>] args: obj[]) : unit =
            Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Submit crash reports to a remote server.<br/><br/>Process: Main, Renderer<br/><br/>&gt; [!IMPORTANT] If you want to call this API from a
    /// renderer process with context isolation enabled, place the API call in your preload script and expose it using the <c>contextBridge</c>
    /// API.<br/><br/>The following is an example of setting up Electron to automatically submit crash reports to a remote server:<br/><br/><code><br/>const { crashReporter
    /// } = require('electron')<br/><br/>crashReporter.start({ submitURL: 'https://your-domain.com/url-to-submit' })<br/></code><br/><br/>For setting up a server to accept and process crash reports, you can use following
    /// projects:<br/><br/>* socorro<br/>* mini-breakpad-server<br/><br/>&gt; [!NOTE] Electron uses Crashpad, not Breakpad, to collect and upload crashes, but for the time being, the
    /// upload protocol is the same.<br/><br/>Or use a 3rd party hosted solution:<br/><br/>* Backtrace<br/>* Sentry<br/>* BugSplat<br/>* Bugsnag<br/><br/>Crash reports are stored temporarily before
    /// being uploaded in a directory underneath the app's user data directory, called 'Crashpad'. You can override this directory by calling
    /// <c>app.setPath('crashDumps', '/path/to/crashes')</c> before starting the crash reporter.<br/><br/>Electron uses crashpad to monitor and report crashes.
    /// </summary>
    [<Import("crashReporter", "electron")>]
    type CrashReporter =
        /// <summary>
        /// This method must be called before using any other <c>crashReporter</c> APIs. Once initialized this way, the crashpad handler collects crashes
        /// from all subsequently created processes. The crash reporter cannot be disabled once started.<br/><br/>This method should be called as early as
        /// possible in app startup, preferably before <c>app.on('ready')</c>. If the crash reporter is not initialized at the time a renderer process
        /// is created, then that renderer process will not be monitored by the crash reporter.<br/><br/>&gt; [!NOTE] You can test out the
        /// crash reporter by generating a crash using <c>process.crash()</c>.<br/><br/>&gt; [!NOTE] If you need to send additional/updated <c>extra</c> parameters after your first
        /// call <c>start</c> you can call <c>addExtraParameter</c>.<br/><br/>&gt; [!NOTE] Parameters passed in <c>extra</c>, <c>globalExtra</c> or set with <c>addExtraParameter</c> have limits on the
        /// length of the keys and values. Key names must be at most 39 bytes long, and values must be no
        /// longer than 127 bytes. Keys with names longer than the maximum will be silently ignored. Key values longer than the
        /// maximum length will be truncated.<br/><br/>&gt; [!NOTE] This method is only available in the main process.
        /// </summary>
        /// <param name="submitURL">URL that crash reports will be sent to as POST. Required unless <c>uploadToServer</c> is <c>false</c>.</param>
        /// <param name="productName">Defaults to <c>app.name</c>.</param>
        /// <param name="companyName">Deprecated alias for <c>{ globalExtra: { _companyName: ... } }</c>.</param>
        /// <param name="uploadToServer">Whether crash reports should be sent to the server. If false, crash reports will be collected and stored in
        /// the crashes directory, but not uploaded. Default is <c>true</c>.</param>
        /// <param name="ignoreSystemCrashHandler">If true, crashes generated in the main process will not be forwarded to the system crash handler. Default is
        /// <c>false</c>.</param>
        /// <param name="rateLimit">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || If true, limit the
        /// number of crashes uploaded to 1/hour. Default is <c>false</c>.</param>
        /// <param name="compress">If true, crash reports will be compressed and uploaded with <c>Content-Encoding: gzip</c>. Default is <c>true</c>.</param>
        /// <param name="extra">Extra string key/value annotations that will be sent along with crash reports that are generated in the main process.
        /// Only string values are supported. Crashes generated in child processes will not include these extra parameters. To add extra parameters
        /// to crash reports generated from child processes, call <c>addExtraParameter</c> from the child process.</param>
        /// <param name="globalExtra">Extra string key/value annotations that will be sent along with any crash reports generated in any process. These annotations
        /// cannot be changed once the crash reporter has been started. If a key is present in both the global extra
        /// parameters and the process-specific extra parameters, then the global one will take precedence. By default, <c>productName</c> and the app version
        /// are included, as well as the Electron version.</param>
        [<Erase; ParamObject(0)>]
        static member mutable start
            (
                ?submitURL: string,
                ?productName: string,
                ?companyName: string,
                ?uploadToServer: bool,
                ?ignoreSystemCrashHandler: bool,
                ?rateLimit: bool,
                ?compress: bool,
                ?extra: Record<string, string>,
                ?globalExtra: Record<string, string>
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The date and ID of the last crash report. Only crash reports that have been uploaded will be returned; even
        /// if a crash report is present on disk it will not be returned until it is uploaded. In the case
        /// that there are no uploaded reports, <c>null</c> is returned.<br/><br/>&gt; [!NOTE] This method is only available in the main process.
        /// </summary>
        [<Erase>]
        static member mutable getLastCrashReport() : Option<CrashReport> = Unchecked.defaultof<_>

        /// <summary>
        /// Returns all uploaded crash reports. Each report contains the date and uploaded ID.<br/><br/>&gt; [!NOTE] This method is only available in
        /// the main process.
        /// </summary>
        [<Erase>]
        static member mutable getUploadedReports() : CrashReport[] = Unchecked.defaultof<_>

        /// <summary>
        /// Whether reports should be submitted to the server. Set through the <c>start</c> method or <c>setUploadToServer</c>.<br/><br/>&gt; [!NOTE] This method is only
        /// available in the main process.
        /// </summary>
        [<Erase>]
        static member mutable getUploadToServer() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// This would normally be controlled by user preferences. This has no effect if called before <c>start</c> is called.<br/><br/>&gt; [!NOTE] This
        /// method is only available in the main process.
        /// </summary>
        /// <param name="uploadToServer">Whether reports should be submitted to the server.</param>
        [<Erase>]
        static member mutable setUploadToServer(uploadToServer: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Set an extra parameter to be sent with the crash report. The values specified here will be sent in addition
        /// to any values set via the <c>extra</c> option when <c>start</c> was called.<br/><br/>Parameters added in this fashion (or via the <c>extra</c>
        /// parameter to <c>crashReporter.start</c>) are specific to the calling process. Adding extra parameters in the main process will not cause those
        /// parameters to be sent along with crashes from renderer or other child processes. Similarly, adding extra parameters in a renderer
        /// process will not result in those parameters being sent with crashes that occur in other renderer processes or in the
        /// main process.<br/><br/>&gt; [!NOTE] Parameters have limits on the length of the keys and values. Key names must be no longer
        /// than 39 bytes, and values must be no longer than 20320 bytes. Keys with names longer than the maximum will
        /// be silently ignored. Key values longer than the maximum length will be truncated.
        /// </summary>
        /// <param name="key">Parameter key, must be no longer than 39 bytes.</param>
        /// <param name="value">Parameter value, must be no longer than 127 bytes.</param>
        [<Erase>]
        static member mutable addExtraParameter(key: string, value: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Remove an extra parameter from the current set of parameters. Future crashes will not include this parameter.
        /// </summary>
        /// <param name="key">Parameter key, must be no longer than 39 bytes.</param>
        [<Erase>]
        static member mutable removeExtraParameter(key: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The current 'extra' parameters of the crash reporter.
        /// </summary>
        [<Erase>]
        static member mutable getParameters() : Record<string, string> = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ❌ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Create a safe, bi-directional, synchronous bridge across isolated contexts<br/><br/>Process: Renderer<br/><br/>An example of exposing an API to a renderer from
    /// an isolated preload script is given below:<br/><br/><code><br/>// Preload (Isolated World)<br/>const { contextBridge, ipcRenderer } = require('electron')<br/><br/>contextBridge.exposeInMainWorld(<br/>  'electron',<br/>  {<br/>
    ///    doThing: () =&gt; ipcRenderer.send('do-a-thing')<br/>  }<br/>)<br/></code><br/><br/>### Glossary<br/><br/><br/><br/>### Main World<br/><br/>The "Main World" is the JavaScript context that your
    /// main renderer code runs in. By default, the page you load in your renderer executes code in this world.<br/><br/>### Isolated
    /// World<br/><br/>When <c>contextIsolation</c> is enabled in your <c>webPreferences</c> (this is the default behavior since Electron 12.0.0), your <c>preload</c> scripts run in
    /// an "Isolated World".  You can read more about context isolation and what it affects in the security docs.
    /// </summary>
    [<Import("contextBridge", "electron")>]
    type ContextBridge =
        /// <summary>
        /// </summary>
        /// <param name="apiKey">The key to inject the API onto <c>window</c> with.  The API will be accessible on <c>window[apiKey]</c>.</param>
        /// <param name="api">Your API, more information on what this API can be and how it works is available below.</param>
        [<Erase>]
        static member mutable exposeInMainWorld(apiKey: string, api: obj) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        /// <param name="worldId">The ID of the world to inject the API into. <c>0</c> is the default world, <c>999</c> is the world
        /// used by Electron's <c>contextIsolation</c> feature. Using 999 would expose the object for preload context. We recommend using 1000+ while creating
        /// isolated world.</param>
        /// <param name="apiKey">The key to inject the API onto <c>window</c> with.  The API will be accessible on <c>window[apiKey]</c>.</param>
        /// <param name="api">Your API, more information on what this API can be and how it works is available below.</param>
        [<Erase>]
        static member mutable exposeInIsolatedWorld(worldId: int, apiKey: string, api: obj) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// A copy of the resulting value from executing the function in the main world. Refer to the table on how
        /// values are copied between worlds.
        /// </summary>
        /// <param name="func">A JavaScript function to execute. This function will be serialized which means that any bound parameters and execution context
        /// will be lost.</param>
        /// <param name="args">An array of arguments to pass to the provided function. These arguments will be copied between worlds in accordance
        /// with the table of supported types.</param>
        [<Erase; ParamObject(0); Experimental("Experimental according to Electron")>]
        static member mutable executeInMainWorld(func: (...args: any[]) => any, ?args: obj[]) : obj =
            Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Perform copy and paste operations on the system clipboard.<br/><br/>Process: Main, Renderer (non-sandboxed only)<br/><br/>&gt; [!IMPORTANT] If you want to call
    /// this API from a renderer process with context isolation enabled, place the API call in your preload script and expose
    /// it using the <c>contextBridge</c> API.<br/><br/>On Linux, there is also a <c>selection</c> clipboard. To manipulate it you need to pass <c>selection</c>
    /// to each method:
    /// </summary>
    [<Import("clipboard", "electron")>]
    type Clipboard =
        /// <summary>
        /// The content in the clipboard as plain text.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable readText(?``type``: Enums.Clipboard.ReadText.Type) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Writes the <c>text</c> into the clipboard as plain text.
        /// </summary>
        /// <param name="text"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable writeText(text: string, ?``type``: Enums.Clipboard.WriteText.Type) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The content in the clipboard as markup.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable readHTML(?``type``: Enums.Clipboard.ReadHTML.Type) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Writes <c>markup</c> to the clipboard.
        /// </summary>
        /// <param name="markup"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable writeHTML(markup: string, ?``type``: Enums.Clipboard.WriteHTML.Type) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The image content in the clipboard.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable readImage(?``type``: Enums.Clipboard.ReadImage.Type) : NativeImage =
            Unchecked.defaultof<_>

        /// <summary>
        /// Writes <c>image</c> to the clipboard.
        /// </summary>
        /// <param name="image"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable writeImage(image: NativeImage, ?``type``: Enums.Clipboard.WriteImage.Type) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The content in the clipboard as RTF.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable readRTF(?``type``: Enums.Clipboard.ReadRTF.Type) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Writes the <c>text</c> into the clipboard in RTF.
        /// </summary>
        /// <param name="text"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable writeRTF(text: string, ?``type``: Enums.Clipboard.WriteRTF.Type) : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// * <c>title</c> string<br/>* <c>url</c> string<br/><br/>Returns an Object containing <c>title</c> and <c>url</c> keys representing the bookmark in the clipboard. The <c>title</c>
        /// and <c>url</c> values will be empty strings when the bookmark is unavailable.  The <c>title</c> value will always be empty
        /// on Windows.
        /// </summary>
        [<Erase>]
        static member mutable readBookmark() : Clipboard.ReadBookmark = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Writes the <c>title</c> (macOS only) and <c>url</c> into the clipboard as a bookmark.<br/><br/>&gt; [!NOTE] Most apps on Windows don't support
        /// pasting bookmarks into them so you can use <c>clipboard.write</c> to write both a bookmark and fallback text to the clipboard.
        /// </summary>
        /// <param name="title">Unused on Windows</param>
        /// <param name="url"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable writeBookmark
            (title: string, url: string, ?``type``: Enums.Clipboard.WriteBookmark.Type)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The text on the find pasteboard, which is the pasteboard that holds information about the current state of the active
        /// application’s find panel.<br/><br/>This method uses synchronous IPC when called from the renderer process. The cached value is reread from the
        /// find pasteboard whenever the application is activated.
        /// </summary>
        [<Erase>]
        static member mutable readFindText() : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Writes the <c>text</c> into the find pasteboard (the pasteboard that holds information about the current state of the active application’s
        /// find panel) as plain text. This method uses synchronous IPC when called from the renderer process.
        /// </summary>
        /// <param name="text"></param>
        [<Erase>]
        static member mutable writeFindText(text: string) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Clears the clipboard content.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable clear(?``type``: Enums.Clipboard.Clear.Type) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// An array of supported formats for the clipboard <c>type</c>.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable availableFormats(?``type``: Enums.Clipboard.AvailableFormats.Type) : string[] =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the clipboard supports the specified <c>format</c>.
        /// </summary>
        /// <param name="format"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase; Experimental("Experimental according to Electron")>]
        static member mutable has(format: string, ?``type``: Enums.Clipboard.Has.Type) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Reads <c>format</c> type from the clipboard.<br/><br/><c>format</c> should contain valid ASCII characters and have <c>/</c> separator. <c>a/c</c>, <c>a/bc</c> are valid formats
        /// while <c>/abc</c>, <c>abc/</c>, <c>a/</c>, <c>/a</c>, <c>a</c> are not valid.
        /// </summary>
        /// <param name="format"></param>
        [<Erase; Experimental("Experimental according to Electron")>]
        static member mutable read(format: string) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Reads <c>format</c> type from the clipboard.
        /// </summary>
        /// <param name="format"></param>
        [<Erase; Experimental("Experimental according to Electron")>]
        static member mutable readBuffer(format: string) : Buffer = Unchecked.defaultof<_>

        /// <summary>
        /// Writes the <c>buffer</c> into the clipboard as <c>format</c>.
        /// </summary>
        /// <param name="format"></param>
        /// <param name="buffer"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase; Experimental("Experimental according to Electron")>]
        static member mutable writeBuffer
            (format: string, buffer: Buffer, ?``type``: Enums.Clipboard.WriteBuffer.Type)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Writes <c>data</c> to the clipboard.
        /// </summary>
        /// <param name="data"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable write(data: Clipboard.Write.Data, ?``type``: Enums.Clipboard.Write.Type) : unit =
            Unchecked.defaultof<_>

module Utility =
    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ✔ | Exported ❌</para>
    /// </summary>
    [<Import("UtilityProcess", "electron")>]
    type UtilityProcess =
        interface EventEmitter

        /// <summary>
        /// Emitted once the child process has spawned successfully.
        /// </summary>
        [<Emit("$0.on('spawn', $1)")>]
        member inline _.onSpawn(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once the child process has spawned successfully.
        /// </summary>
        [<Emit("$0.once('spawn', $1)")>]
        member inline _.onceSpawn(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once the child process has spawned successfully.
        /// </summary>
        [<Emit("$0.off('spawn', $1)")>]
        member inline _.offSpawn(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.on('error', $1)")>]
        member inline _.onError(handler: Enums.UtilityProcess.Error.Type -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.on('error', $1)")>]
        member inline _.onError(handler: Fable.Electron.EventInterfaces.Root.IOnError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.once('error', $1)")>]
        member inline _.onceError(handler: Enums.UtilityProcess.Error.Type -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.once('error', $1)")>]
        member inline _.onceError(handler: Fable.Electron.EventInterfaces.Root.IOnError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.off('error', $1)")>]
        member inline _.offError(handler: Enums.UtilityProcess.Error.Type -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.off('error', $1)")>]
        member inline _.offError(handler: Fable.Electron.EventInterfaces.Root.IOnError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the child process ends.
        /// </summary>
        [<Emit("$0.on('exit', $1)")>]
        member inline _.onExit(handler: float -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the child process ends.
        /// </summary>
        [<Emit("$0.once('exit', $1)")>]
        member inline _.onceExit(handler: float -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the child process ends.
        /// </summary>
        [<Emit("$0.off('exit', $1)")>]
        member inline _.offExit(handler: float -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process sends a message using <c>process.parentPort.postMessage()</c>.
        /// </summary>
        [<Emit("$0.on('message', $1)")>]
        member inline _.onMessage(handler: obj -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process sends a message using <c>process.parentPort.postMessage()</c>.
        /// </summary>
        [<Emit("$0.once('message', $1)")>]
        member inline _.onceMessage(handler: obj -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process sends a message using <c>process.parentPort.postMessage()</c>.
        /// </summary>
        [<Emit("$0.off('message', $1)")>]
        member inline _.offMessage(handler: obj -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Send a message to the child process, optionally transferring ownership of zero or more <c>MessagePortMain</c> objects.<br/><br/>For example:
        /// </summary>
        /// <param name="message"></param>
        /// <param name="transfer"></param>
        [<Erase>]
        member inline _.postMessage(message: obj, ?transfer: MessagePortMain[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Terminates the process gracefully. On POSIX, it uses SIGTERM but will ensure the process is reaped on exit. This function
        /// returns true if the kill is successful, and false otherwise.
        /// </summary>
        [<Erase>]
        member inline _.kill() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>Integer | undefined</c> representing the process identifier (PID) of the child process. Until the child process has spawned successfully,
        /// the value is <c>undefined</c>. When the child process exits, then the value is <c>undefined</c> after the <c>exit</c> event is emitted.<br/><br/>&gt;
        /// [!NOTE] You can use the <c>pid</c> to determine if the process is currently running.
        /// </summary>
        [<Erase>]
        member val pid: Option<int> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>NodeJS.ReadableStream | null</c> that represents the child process's stdout. If the child was spawned with options.stdio[1] set to anything
        /// other than 'pipe', then this will be <c>null</c>. When the child process exits, then the value is <c>null</c> after the
        /// <c>exit</c> event is emitted.
        /// </summary>
        [<Erase>]
        member val stdout: Option<NodeJS.ReadableStream> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>NodeJS.ReadableStream | null</c> that represents the child process's stderr. If the child was spawned with options.stdio[2] set to anything
        /// other than 'pipe', then this will be <c>null</c>. When the child process exits, then the value is <c>null</c> after the
        /// <c>exit</c> event is emitted.
        /// </summary>
        [<Erase>]
        member val stderr: Option<NodeJS.ReadableStream> = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ✔ | Exported ✔</para>
    /// &gt; Get system preferences.<br/><br/>Process: Main, Utility
    /// </summary>
    [<Import("systemPreferences", "electron")>]
    type SystemPreferences =
        interface EventEmitter
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.on('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onAccentColorChanged(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.on('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onAccentColorChanged
            (handler: Fable.Electron.EventInterfaces.SystemPreferences.IOnAccentColorChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.once('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onceAccentColorChanged(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.once('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onceAccentColorChanged
            (handler: Fable.Electron.EventInterfaces.SystemPreferences.IOnAccentColorChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.off('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable offAccentColorChanged(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.off('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable offAccentColorChanged
            (handler: Fable.Electron.EventInterfaces.SystemPreferences.IOnAccentColorChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.on('color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onColorChanged(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.once('color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onceColorChanged(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.off('color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable offColorChanged(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the Swipe between pages setting is on.
        /// </summary>
        [<Erase>]
        static member mutable isSwipeTrackingFromScrollEventsEnabled() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Posts <c>event</c> as native notifications of macOS. The <c>userInfo</c> is an Object that contains the user information dictionary sent along
        /// with the notification.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="userInfo"></param>
        /// <param name="deliverImmediately"><c>true</c> to post notifications immediately even when the subscribing app is inactive.</param>
        [<Erase>]
        static member mutable postNotification
            (event: string, userInfo: Record<string, obj>, ?deliverImmediately: bool)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Posts <c>event</c> as native notifications of macOS. The <c>userInfo</c> is an Object that contains the user information dictionary sent along
        /// with the notification.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="userInfo"></param>
        [<Erase>]
        static member mutable postLocalNotification(event: string, userInfo: Record<string, obj>) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Posts <c>event</c> as native notifications of macOS. The <c>userInfo</c> is an Object that contains the user information dictionary sent along
        /// with the notification.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="userInfo"></param>
        [<Erase>]
        static member mutable postWorkspaceNotification(event: string, userInfo: Record<string, obj>) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The ID of this subscription<br/><br/>Subscribes to native notifications of macOS, <c>callback</c> will be called with <c>callback(event, userInfo)</c> when the corresponding
        /// <c>event</c> happens. The <c>userInfo</c> is an Object that contains the user information dictionary sent along with the notification. The <c>object</c>
        /// is the sender of the notification, and only supports <c>NSString</c> values for now.<br/><br/>The <c>id</c> of the subscriber is returned, which
        /// can be used to unsubscribe the <c>event</c>.<br/><br/>Under the hood this API subscribes to <c>NSDistributedNotificationCenter</c>, example values of <c>event</c> are:<br/><br/>* <c>AppleInterfaceThemeChangedNotification</c><br/>*
        /// <c>AppleAquaColorVariantChanged</c><br/>* <c>AppleColorPreferencesChangedNotification</c><br/>* <c>AppleShowScrollBarsSettingChanged</c><br/><br/>If <c>event</c> is null, the <c>NSDistributedNotificationCenter</c> doesn’t use it as criteria for delivery to the observer. See docs
        ///  for more information.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="callback"></param>
        [<Erase>]
        static member mutable subscribeNotification
            (event: Option<string>, callback: SystemPreferences.SubscribeNotification.Callback)
            : float =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The ID of this subscription<br/><br/>Same as <c>subscribeNotification</c>, but uses <c>NSNotificationCenter</c> for local defaults. This is necessary for events such as
        /// <c>NSUserDefaultsDidChangeNotification</c>.<br/><br/>If <c>event</c> is null, the <c>NSNotificationCenter</c> doesn’t use it as criteria for delivery to the observer. See docs for more
        /// information.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="callback"></param>
        [<Erase>]
        static member mutable subscribeLocalNotification
            (event: Option<string>, callback: SystemPreferences.SubscribeLocalNotification.Callback)
            : float =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The ID of this subscription<br/><br/>Same as <c>subscribeNotification</c>, but uses <c>NSWorkspace.sharedWorkspace.notificationCenter</c>. This is necessary for events such as <c>NSWorkspaceDidActivateApplicationNotification</c>.<br/><br/>If <c>event</c> is
        /// null, the <c>NSWorkspaceNotificationCenter</c> doesn’t use it as criteria for delivery to the observer. See docs for more information.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="callback"></param>
        [<Erase>]
        static member mutable subscribeWorkspaceNotification
            (event: Option<string>, callback: SystemPreferences.SubscribeWorkspaceNotification.Callback)
            : float =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Removes the subscriber with <c>id</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable unsubscribeNotification(id: int) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Same as <c>unsubscribeNotification</c>, but removes the subscriber from <c>NSNotificationCenter</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable unsubscribeLocalNotification(id: int) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Same as <c>unsubscribeNotification</c>, but removes the subscriber from <c>NSWorkspace.sharedWorkspace.notificationCenter</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable unsubscribeWorkspaceNotification(id: int) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Add the specified defaults to your application's <c>NSUserDefaults</c>.
        /// </summary>
        /// <param name="defaults">a dictionary of (<c>key: value</c>) user defaults</param>
        [<Erase>]
        static member mutable registerDefaults(defaults: Record<string, U3<string, bool, float>>) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The value of <c>key</c> in <c>NSUserDefaults</c>.<br/><br/>Some popular <c>key</c> and <c>type</c>s are:<br/><br/>* <c>AppleInterfaceStyle</c>: <c>string</c><br/>* <c>AppleAquaColorVariant</c>: <c>integer</c><br/>* <c>AppleHighlightColor</c>: <c>string</c><br/>* <c>AppleShowScrollBars</c>: <c>string</c><br/>* <c>NSNavRecentPlaces</c>:
        /// <c>array</c><br/>* <c>NSPreferredWebServices</c>: <c>dictionary</c><br/>* <c>NSUserDictionaryReplacementItems</c>: <c>array</c>
        /// </summary>
        /// <param name="key"></param>
        /// <param name="``type``">Can be <c>string</c>, <c>boolean</c>, <c>integer</c>, <c>float</c>, <c>double</c>, <c>url</c>, <c>array</c> or <c>dictionary</c>.</param>
        [<Erase>]
        static member mutable getUserDefault(key: string, ``type``: Type) : UserDefaultTypes[Type] =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Set the value of <c>key</c> in <c>NSUserDefaults</c>.<br/><br/>Note that <c>type</c> should match actual type of <c>value</c>. An exception is thrown if
        /// they don't.<br/><br/>Some popular <c>key</c> and <c>type</c>s are:<br/><br/>* <c>ApplePressAndHoldEnabled</c>: <c>boolean</c>
        /// </summary>
        /// <param name="key"></param>
        /// <param name="``type``">Can be <c>string</c>, <c>boolean</c>, <c>integer</c>, <c>float</c>, <c>double</c>, <c>url</c>, <c>array</c> or <c>dictionary</c>.</param>
        /// <param name="value"></param>
        [<Erase>]
        static member mutable setUserDefault(key: string, ``type``: Type, value: UserDefaultTypes[Type]) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Removes the <c>key</c> in <c>NSUserDefaults</c>. This can be used to restore the default or global value of a <c>key</c> previously
        /// set with <c>setUserDefault</c>.
        /// </summary>
        /// <param name="key"></param>
        [<Erase>]
        static member mutable removeUserDefault(key: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The users current system wide accent color preference in RGBA hexadecimal form.<br/><br/>This API is only available on macOS 10.14 Mojave
        /// or newer.
        /// </summary>
        [<Erase>]
        static member mutable getAccentColor() : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The system color setting in RGBA hexadecimal form (<c>#RRGGBBAA</c>). See the Windows docs and the macOS docs for more details.<br/><br/>The
        /// following colors are only available on macOS 10.14: <c>find-highlight</c>, <c>selected-content-background</c>, <c>separator</c>, <c>unemphasized-selected-content-background</c>, <c>unemphasized-selected-text-background</c>, and <c>unemphasized-selected-text</c>.
        /// </summary>
        /// <param name="color">One of the following values:</param>
        [<Erase>]
        static member mutable getColor(color: Enums.SystemPreferences.GetColor.Color) : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The standard system color formatted as <c>#RRGGBBAA</c>.<br/><br/>Returns one of several standard system colors that automatically adapt to vibrancy and changes
        /// in accessibility settings like 'Increase contrast' and 'Reduce transparency'. See Apple Documentation for  more details.
        /// </summary>
        /// <param name="color">One of the following values:</param>
        [<Erase>]
        static member mutable getSystemColor(color: Enums.SystemPreferences.GetSystemColor.Color) : string =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Can be <c>dark</c>, <c>light</c> or <c>unknown</c>.<br/><br/>Gets the macOS appearance setting that is currently applied to your application, maps to NSApplication.effectiveAppearance
        /// </summary>
        [<Erase>]
        static member mutable getEffectiveAppearance() : Enums.SystemPreferences.GetEffectiveAppearance =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// whether or not this device has the ability to use Touch ID.
        /// </summary>
        [<Erase>]
        static member mutable canPromptTouchID() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// resolves if the user has successfully authenticated with Touch ID.<br/><br/>This API itself will not protect your user data; rather, it
        /// is a mechanism to allow you to do so. Native apps will need to set Access Control Constants like <c>kSecAccessControlUserPresence</c>
        /// on their keychain entry so that reading it would auto-prompt for Touch ID biometric consent. This could be done with
        /// <c>node-keytar</c>, such that one would store an encryption key with <c>node-keytar</c> and only fetch it if <c>promptTouchID()</c> resolves.
        /// </summary>
        /// <param name="reason">The reason you are asking for Touch ID authentication</param>
        [<Erase>]
        static member mutable promptTouchID(reason: string) : Promise<unit> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// <c>true</c> if the current process is a trusted accessibility client and <c>false</c> if it is not.
        /// </summary>
        /// <param name="prompt">whether or not the user will be informed via prompt if the current process is untrusted.</param>
        [<Erase>]
        static member mutable isTrustedAccessibilityClient(prompt: bool) : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Can be <c>not-determined</c>, <c>granted</c>, <c>denied</c>, <c>restricted</c> or <c>unknown</c>.<br/><br/>This user consent was not required on macOS 10.13 High Sierra so this
        /// method will always return <c>granted</c>. macOS 10.14 Mojave or higher requires consent for <c>microphone</c> and <c>camera</c> access. macOS 10.15 Catalina
        /// or higher requires consent for <c>screen</c> access.<br/><br/>Windows 10 has a global setting controlling <c>microphone</c> and <c>camera</c> access for all win32
        /// applications. It will always return <c>granted</c> for <c>screen</c> and for all media types on older versions of Windows.
        /// </summary>
        /// <param name="mediaType">Can be <c>microphone</c>, <c>camera</c> or <c>screen</c>.</param>
        [<Erase>]
        static member mutable getMediaAccessStatus
            (mediaType: Enums.SystemPreferences.GetMediaAccessStatus.MediaType)
            : Enums.SystemPreferences.GetMediaAccessStatus =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// A promise that resolves with <c>true</c> if consent was granted and <c>false</c> if it was denied. If an invalid <c>mediaType</c>
        /// is passed, the promise will be rejected. If an access request was denied and later is changed through the System
        /// Preferences pane, a restart of the app will be required for the new permissions to take effect. If access has
        /// already been requested and denied, it _must_ be changed through the preference pane; an alert will not pop up and
        /// the promise will resolve with the existing access status.<br/><br/>**Important:** In order to properly leverage this API, you must set the
        /// <c>NSMicrophoneUsageDescription</c> and <c>NSCameraUsageDescription</c> strings in your app's <c>Info.plist</c> file. The values for these keys will be used to populate the
        /// permission dialogs so that the user will be properly informed as to the purpose of the permission request. See Electron
        /// Application Distribution for more information about how to set these in the context of Electron.<br/><br/>This user consent was not required
        /// until macOS 10.14 Mojave, so this method will always return <c>true</c> if your system is running 10.13 High Sierra.
        /// </summary>
        /// <param name="mediaType">the type of media being requested; can be <c>microphone</c>, <c>camera</c>.</param>
        [<Erase>]
        static member mutable askForMediaAccess
            (mediaType: Enums.SystemPreferences.AskForMediaAccess.MediaType)
            : Promise<bool> =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// * <c>shouldRenderRichAnimation</c> boolean - Returns true if rich animations should be rendered. Looks at session type (e.g. remote desktop) and
        /// accessibility settings to give guidance for heavy animations.<br/>* <c>scrollAnimationsEnabledBySystem</c> boolean - Determines on a per-platform basis whether scroll animations (e.g.
        /// produced by home/end key) should be enabled.<br/>* <c>prefersReducedMotion</c> boolean - Determines whether the user desires reduced motion based on platform
        /// APIs.<br/><br/>Returns an object with system animation settings.
        /// </summary>
        [<Erase>]
        static member mutable getAnimationSettings() : SystemPreferences.GetAnimationSettings = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property which determines whether the app avoids using semitransparent backgrounds. This maps to NSWorkspace.accessibilityDisplayShouldReduceTransparency<br/><br/>**Deprecated:** Use the new <c>nativeTheme.prefersReducedTransparency</c>
        /// API.
        /// </summary>
        [<Erase; System.Obsolete>]
        static member val accessibilityDisplayShouldReduceTransparency: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>string</c> property that can be <c>dark</c>, <c>light</c> or <c>unknown</c>.<br/><br/>Returns the macOS appearance setting that is currently applied to your
        /// application, maps to NSApplication.effectiveAppearance
        /// </summary>
        [<Erase>]
        static member val effectiveAppearance: Enums.SystemPreferences.EffectiveAppearance =
            Unchecked.defaultof<_> with get
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ❌ | Renderer ❌ | Utility ✔ | Exported ✔</para>
    /// &gt; Interface for communication with parent process.<br/><br/>Process: Utility<br/><br/><c>parentPort</c> is an EventEmitter. _This object is not exported from the <c>'electron'</c> module.
    /// It is only available as a property of the process object in the Electron API._
    /// </summary>
    [<Import("parentPort", "electron")>]
    type ParentPort =
        interface EventEmitter

        /// <summary>
        /// Emitted when the process receives a message. Messages received on this port will be queued up until a handler is
        /// registered for this event.
        /// </summary>
        [<Emit("$0.on('message', $1)"); Import("parentPort", "electron")>]
        static member mutable onMessage(handler: ParentPort.Message.MessageEvent -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the process receives a message. Messages received on this port will be queued up until a handler is
        /// registered for this event.
        /// </summary>
        [<Emit("$0.once('message', $1)"); Import("parentPort", "electron")>]
        static member mutable onceMessage(handler: ParentPort.Message.MessageEvent -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the process receives a message. Messages received on this port will be queued up until a handler is
        /// registered for this event.
        /// </summary>
        [<Emit("$0.off('message', $1)"); Import("parentPort", "electron")>]
        static member mutable offMessage(handler: ParentPort.Message.MessageEvent -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Sends a message from the process to its parent.
        /// </summary>
        /// <param name="message"></param>
        [<Erase>]
        static member mutable postMessage(message: obj) : unit = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ✔ | Exported ✔</para>
    /// &gt; Issue HTTP/HTTPS requests using Chromium's native networking library<br/><br/>Process: Main, Utility<br/><br/>The <c>net</c> module is a client-side API for issuing HTTP(S)
    /// requests. It is similar to the HTTP and HTTPS modules of Node.js but uses Chromium's native networking library instead of
    /// the Node.js implementation, offering better support for web proxies. It also supports checking network status.<br/><br/>The following is a non-exhaustive list
    /// of why you may consider using the <c>net</c> module instead of the native Node.js modules:<br/><br/>* Automatic management of system proxy
    /// configuration, support of the wpad protocol and proxy pac configuration files.<br/>* Automatic tunneling of HTTPS requests.<br/>* Support for authenticating proxies
    /// using basic, digest, NTLM, Kerberos or negotiate authentication schemes.<br/>* Support for traffic monitoring proxies: Fiddler-like proxies used for access control
    /// and monitoring.<br/><br/>The API components (including classes, methods, properties and event names) are similar to those used in Node.js.<br/><br/>Example usage:<br/><br/><code><br/>const {
    /// app } = require('electron')<br/><br/>app.whenReady().then(() =&gt; {<br/>  const { net } = require('electron')<br/>  const request = net.request('https://github.com')<br/>  request.on('response',
    /// (response) =&gt; {<br/>    console.log(<c>STATUS: ${response.statusCode}</c>)<br/>    console.log(<c>HEADERS: ${JSON.stringify(response.headers)}</c>)<br/>    response.on('data', (chunk) =&gt; {<br/>
    ///      console.log(<c>BODY: ${chunk}</c>)<br/>    })<br/>    response.on('end', () =&gt; {<br/>
    ///    console.log('No more data in response.')<br/>    })<br/>  })<br/>  request.end()<br/>})<br/></code><br/><br/>The <c>net</c> API can be
    /// used only after the application emits the <c>ready</c> event. Trying to use the module before the <c>ready</c> event will throw
    /// an error.
    /// </summary>
    [<Import("net", "electron")>]
    type Net =
        /// <summary>
        /// Creates a <c>ClientRequest</c> instance using the provided <c>options</c> which are directly forwarded to the <c>ClientRequest</c> constructor. The <c>net.request</c> method would
        /// be used to issue both secure and insecure HTTP requests according to the specified protocol scheme in the <c>options</c> object.
        /// </summary>
        /// <param name="options">The <c>ClientRequest</c> constructor options.</param>
        [<Erase>]
        static member mutable request(options: U2<ClientRequestConstructorOptions, string>) : ClientRequest =
            Unchecked.defaultof<_>

        /// <summary>
        /// see Response.<br/><br/>Sends a request, similarly to how <c>fetch()</c> works in the renderer, using Chrome's network stack. This differs from Node's
        /// <c>fetch()</c>, which uses Node.js's HTTP stack.<br/><br/>Example:<br/><br/>This method will issue requests from the default session. To send a <c>fetch</c> request from
        /// another session, use ses.fetch().<br/><br/>See the MDN documentation for <c>fetch()</c> for more details.<br/><br/>Limitations:<br/><br/>* <c>net.fetch()</c> does not support the <c>data:</c> or <c>blob:</c>
        /// schemes.<br/>* The value of the <c>integrity</c> option is ignored.<br/>* The <c>.type</c> and <c>.url</c> values of the returned <c>Response</c> object are
        /// incorrect.<br/><br/>By default, requests made with <c>net.fetch</c> can be made to custom protocols as well as <c>file:</c>, and will trigger webRequest
        /// handlers if present. When the non-standard <c>bypassCustomProtocolHandlers</c> option is set in RequestInit, custom protocol handlers will not be called for
        /// this request. This allows forwarding an intercepted request to the built-in handler. webRequest handlers will still be triggered when bypassing
        /// custom protocols.<br/><br/>&gt; [!NOTE] In the utility process, custom protocols are not supported.
        /// </summary>
        /// <param name="input"></param>
        /// <param name="init"></param>
        [<Erase>]
        static member mutable fetch(input: U2<string, GlobalRequest>, ?init: RequestInit) : Promise<GlobalResponse> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether there is currently internet connection.<br/><br/>A return value of <c>false</c> is a pretty strong indicator that the user won't be
        /// able to connect to remote sites. However, a return value of <c>true</c> is inconclusive; even if some link is up,
        /// it is uncertain whether a particular connection attempt to a particular remote site will be successful.
        /// </summary>
        [<Erase>]
        static member mutable isOnline() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with the resolved IP addresses for the <c>host</c>.<br/><br/>This method will resolve hosts from the default session. To resolve a
        /// host from another session, use ses.resolveHost().
        /// </summary>
        /// <param name="host">Hostname to resolve.</param>
        /// <param name="queryType">Requested DNS query type. If unspecified, resolver will pick A or AAAA (or both) based on IPv4/IPv6 settings:</param>
        /// <param name="source">The source to use for resolved addresses. Default allows the resolver to pick an appropriate source. Only affects use
        /// of big external sources (e.g. calling the system for resolution or using DNS). Even if a source is specified, results
        /// can still come from cache, resolving "localhost" or IP literals, etc. One of the following values:</param>
        /// <param name="cacheUsage">Indicates what DNS cache entries, if any, can be used to provide a response. One of the following values:</param>
        /// <param name="secureDnsPolicy">Controls the resolver's Secure DNS behavior for this request. One of the following values:</param>
        [<Erase; ParamObject(1)>]
        static member mutable resolveHost
            (
                host: string,
                ?queryType: Enums.Net.ResolveHost.Options.QueryType,
                ?source: Enums.Net.ResolveHost.Options.Source,
                ?cacheUsage: Enums.Net.ResolveHost.Options.CacheUsage,
                ?secureDnsPolicy: Enums.Net.ResolveHost.Options.SecureDnsPolicy
            ) : Promise<ResolvedHost> =
            Unchecked.defaultof<_>

        /// <summary>
        /// A <c>boolean</c> property. Whether there is currently internet connection.<br/><br/>A return value of <c>false</c> is a pretty strong indicator that the
        /// user won't be able to connect to remote sites. However, a return value of <c>true</c> is inconclusive; even if some
        /// link is up, it is uncertain whether a particular connection attempt to a particular remote site will be successful.
        /// </summary>
        [<Erase>]
        static member val online: bool = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ✔ | Exported ❌</para>
    /// </summary>
    [<Import("IncomingMessage", "electron")>]
    type IncomingMessage =
        interface EventEmitter

        /// <summary>
        /// The <c>data</c> event is the usual method of transferring response data into applicative code.
        /// </summary>
        [<Emit("$0.on('data', $1)")>]
        member inline _.onData(handler: Buffer -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>data</c> event is the usual method of transferring response data into applicative code.
        /// </summary>
        [<Emit("$0.once('data', $1)")>]
        member inline _.onceData(handler: Buffer -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>data</c> event is the usual method of transferring response data into applicative code.
        /// </summary>
        [<Emit("$0.off('data', $1)")>]
        member inline _.offData(handler: Buffer -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Indicates that response body has ended. Must be placed before 'data' event.
        /// </summary>
        [<Emit("$0.on('end', $1)")>]
        member inline _.onEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Indicates that response body has ended. Must be placed before 'data' event.
        /// </summary>
        [<Emit("$0.once('end', $1)")>]
        member inline _.onceEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Indicates that response body has ended. Must be placed before 'data' event.
        /// </summary>
        [<Emit("$0.off('end', $1)")>]
        member inline _.offEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a request has been canceled during an ongoing HTTP transaction.
        /// </summary>
        [<Emit("$0.on('aborted', $1)")>]
        member inline _.onAborted(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a request has been canceled during an ongoing HTTP transaction.
        /// </summary>
        [<Emit("$0.once('aborted', $1)")>]
        member inline _.onceAborted(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a request has been canceled during an ongoing HTTP transaction.
        /// </summary>
        [<Emit("$0.off('aborted', $1)")>]
        member inline _.offAborted(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an error was encountered while streaming response data events. For instance, if the server closes the underlying while
        /// the response is still streaming, an <c>error</c> event will be emitted on the response object and a <c>close</c> event will
        /// subsequently follow on the request object.
        /// </summary>
        [<Emit("$0.on('error', $1)")>]
        member inline _.onError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an error was encountered while streaming response data events. For instance, if the server closes the underlying while
        /// the response is still streaming, an <c>error</c> event will be emitted on the response object and a <c>close</c> event will
        /// subsequently follow on the request object.
        /// </summary>
        [<Emit("$0.once('error', $1)")>]
        member inline _.onceError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an error was encountered while streaming response data events. For instance, if the server closes the underlying while
        /// the response is still streaming, an <c>error</c> event will be emitted on the response object and a <c>close</c> event will
        /// subsequently follow on the request object.
        /// </summary>
        [<Emit("$0.off('error', $1)")>]
        member inline _.offError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// An <c>Integer</c> indicating the HTTP response status code.
        /// </summary>
        [<Erase>]
        member val statusCode: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the HTTP status message.
        /// </summary>
        [<Erase>]
        member val statusMessage: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>Record&lt;string, string | string[]&gt;</c> representing the HTTP response headers. The <c>headers</c> object is formatted as follows:<br/><br/>* All header names
        /// are lowercased.<br/>* Duplicates of <c>age</c>, <c>authorization</c>, <c>content-length</c>, <c>content-type</c>, <c>etag</c>, <c>expires</c>, <c>from</c>, <c>host</c>, <c>if-modified-since</c>, <c>if-unmodified-since</c>, <c>last-modified</c>, <c>location</c>, <c>max-forwards</c>, <c>proxy-authorization</c>, <c>referer</c>, <c>retry-after</c>,
        /// <c>server</c>, or <c>user-agent</c> are discarded.<br/>* <c>set-cookie</c> is always an array. Duplicates are added to the array.<br/>* For duplicate <c>cookie</c> headers,
        /// the values are joined together with '; '.<br/>* For all other headers, the values are joined together with ', '.
        /// </summary>
        [<Erase>]
        member val headers: Record<string, U2<string, string[]>> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> indicating the HTTP protocol version number. Typical values are '1.0' or '1.1'. Additionally <c>httpVersionMajor</c> and <c>httpVersionMinor</c> are two
        /// Integer-valued readable properties that return respectively the HTTP major and minor version numbers.
        /// </summary>
        [<Erase>]
        member val httpVersion: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An <c>Integer</c> indicating the HTTP protocol major version number.
        /// </summary>
        [<Erase>]
        member val httpVersionMajor: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An <c>Integer</c> indicating the HTTP protocol minor version number.
        /// </summary>
        [<Erase>]
        member val httpVersionMinor: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string[]</c> containing the raw HTTP response headers exactly as they were received. The keys and values are in the
        /// same list. It is not a list of tuples. So, the even-numbered offsets are key values, and the odd-numbered offsets
        /// are the associated values. Header names are not lowercased, and duplicates are not merged.
        /// </summary>
        [<Erase>]
        member val rawHeaders: string[] = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ✔ | Exported ❌</para>
    /// &gt; Make HTTP/HTTPS requests.<br/><br/>Process: Main, Utility<br/> _This class is not exported from the <c>'electron'</c> module. It is only available as
    /// a return value of other methods in the Electron API._<br/><br/><c>ClientRequest</c> implements the Writable Stream interface and is therefore an EventEmitter.
    /// </summary>
    [<Import("ClientRequest", "electron")>]
    type ClientRequest
        /// <param name="options">If <c>options</c> is a string, it is interpreted as the request URL. If it is an object, it is
        /// expected to fully specify an HTTP request via the following properties:</param>
        (options: U2<ClientRequest.Options, string>) =
        interface EventEmitter

        [<Emit("$0.on('response', $1)")>]
        member inline _.onResponse(handler: IncomingMessage -> unit) : unit = Unchecked.defaultof<_>

        [<Emit("$0.once('response', $1)")>]
        member inline _.onceResponse(handler: IncomingMessage -> unit) : unit = Unchecked.defaultof<_>

        [<Emit("$0.off('response', $1)")>]
        member inline _.offResponse(handler: IncomingMessage -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.on('login', $1)")>]
        member inline _.onLogin(handler: ClientRequest.Login.AuthInfo -> ClientRequest.Login.Callback -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.on('login', $1)")>]
        member inline _.onLogin(handler: Fable.Electron.EventInterfaces.Root.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.once('login', $1)")>]
        member inline _.onceLogin
            (handler: ClientRequest.Login.AuthInfo -> ClientRequest.Login.Callback -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.once('login', $1)")>]
        member inline _.onceLogin(handler: Fable.Electron.EventInterfaces.Root.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.off('login', $1)")>]
        member inline _.offLogin(handler: ClientRequest.Login.AuthInfo -> ClientRequest.Login.Callback -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.off('login', $1)")>]
        member inline _.offLogin(handler: Fable.Electron.EventInterfaces.Root.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted just after the last chunk of the <c>request</c>'s data has been written into the <c>request</c> object.
        /// </summary>
        [<Emit("$0.on('finish', $1)")>]
        member inline _.onFinish(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted just after the last chunk of the <c>request</c>'s data has been written into the <c>request</c> object.
        /// </summary>
        [<Emit("$0.once('finish', $1)")>]
        member inline _.onceFinish(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted just after the last chunk of the <c>request</c>'s data has been written into the <c>request</c> object.
        /// </summary>
        [<Emit("$0.off('finish', $1)")>]
        member inline _.offFinish(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>request</c> is aborted. The <c>abort</c> event will not be fired if the <c>request</c> is already closed.
        /// </summary>
        [<Emit("$0.on('abort', $1)")>]
        member inline _.onAbort(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>request</c> is aborted. The <c>abort</c> event will not be fired if the <c>request</c> is already closed.
        /// </summary>
        [<Emit("$0.once('abort', $1)")>]
        member inline _.onceAbort(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>request</c> is aborted. The <c>abort</c> event will not be fired if the <c>request</c> is already closed.
        /// </summary>
        [<Emit("$0.off('abort', $1)")>]
        member inline _.offAbort(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>net</c> module fails to issue a network request. Typically when the <c>request</c> object emits an <c>error</c> event,
        /// a <c>close</c> event will subsequently follow and no response object will be provided.
        /// </summary>
        [<Emit("$0.on('error', $1)")>]
        member inline _.onError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>net</c> module fails to issue a network request. Typically when the <c>request</c> object emits an <c>error</c> event,
        /// a <c>close</c> event will subsequently follow and no response object will be provided.
        /// </summary>
        [<Emit("$0.once('error', $1)")>]
        member inline _.onceError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>net</c> module fails to issue a network request. Typically when the <c>request</c> object emits an <c>error</c> event,
        /// a <c>close</c> event will subsequently follow and no response object will be provided.
        /// </summary>
        [<Emit("$0.off('error', $1)")>]
        member inline _.offError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted as the last event in the HTTP request-response transaction. The <c>close</c> event indicates that no more events will be
        /// emitted on either the <c>request</c> or <c>response</c> objects.
        /// </summary>
        [<Emit("$0.on('close', $1)")>]
        member inline _.onClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted as the last event in the HTTP request-response transaction. The <c>close</c> event indicates that no more events will be
        /// emitted on either the <c>request</c> or <c>response</c> objects.
        /// </summary>
        [<Emit("$0.once('close', $1)")>]
        member inline _.onceClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted as the last event in the HTTP request-response transaction. The <c>close</c> event indicates that no more events will be
        /// emitted on either the <c>request</c> or <c>response</c> objects.
        /// </summary>
        [<Emit("$0.off('close', $1)")>]
        member inline _.offClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.on('redirect', $1)")>]
        member inline _.onRedirect(handler: int -> string -> string -> Record<string, string[]> -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.on('redirect', $1)")>]
        member inline _.onRedirect(handler: Fable.Electron.EventInterfaces.Root.IOnRedirect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.once('redirect', $1)")>]
        member inline _.onceRedirect(handler: int -> string -> string -> Record<string, string[]> -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.once('redirect', $1)")>]
        member inline _.onceRedirect(handler: Fable.Electron.EventInterfaces.Root.IOnRedirect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.off('redirect', $1)")>]
        member inline _.offRedirect(handler: int -> string -> string -> Record<string, string[]> -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.off('redirect', $1)")>]
        member inline _.offRedirect(handler: Fable.Electron.EventInterfaces.Root.IOnRedirect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Adds an extra HTTP header. The header name will be issued as-is without lowercasing. It can be called only before
        /// first write. Calling this method after the first write will throw an error. If the passed value is not a
        /// <c>string</c>, its <c>toString()</c> method will be called to obtain the final value.<br/><br/>Certain headers are restricted from being set by apps.
        /// These headers are listed below. More information on restricted headers can be found in Chromium's header utils.<br/><br/>* <c>Content-Length</c><br/>* <c>Host</c><br/>* <c>Trailer</c>
        /// or <c>Te</c><br/>* <c>Upgrade</c><br/>* <c>Cookie2</c><br/>* <c>Keep-Alive</c><br/>* <c>Transfer-Encoding</c><br/><br/>Additionally, setting the <c>Connection</c> header to the value <c>upgrade</c> is also disallowed.
        /// </summary>
        /// <param name="name">An extra HTTP header name.</param>
        /// <param name="value">An extra HTTP header value.</param>
        [<Erase>]
        member inline _.setHeader(name: string, value: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The value of a previously set extra header name.
        /// </summary>
        /// <param name="name">Specify an extra header name.</param>
        [<Erase>]
        member inline _.getHeader(name: string) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Removes a previously set extra header name. This method can be called only before first write. Trying to call it
        /// after the first write will throw an error.
        /// </summary>
        /// <param name="name">Specify an extra header name.</param>
        [<Erase>]
        member inline _.removeHeader(name: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// <c>callback</c> is essentially a dummy function introduced in the purpose of keeping similarity with the Node.js API. It is called
        /// asynchronously in the next tick after <c>chunk</c> content have been delivered to the Chromium networking layer. Contrary to the Node.js
        /// implementation, it is not guaranteed that <c>chunk</c> content have been flushed on the wire before <c>callback</c> is called.<br/><br/>Adds a chunk
        /// of data to the request body. The first write operation may cause the request headers to be issued on the
        /// wire. After the first write operation, it is not allowed to add or remove a custom header.
        /// </summary>
        /// <param name="chunk">A chunk of the request body's data. If it is a string, it is converted into a Buffer using
        /// the specified encoding.</param>
        /// <param name="encoding">Used to convert string chunks into Buffer objects. Defaults to 'utf-8'.</param>
        /// <param name="callback">Called after the write operation ends.</param>
        [<Erase>]
        member inline _.write(chunk: U2<string, Buffer>, ?encoding: string, ?callback: unit -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Sends the last chunk of the request data. Subsequent write or end operations will not be allowed. The <c>finish</c> event
        /// is emitted just after the end operation.
        /// </summary>
        /// <param name="chunk"></param>
        /// <param name="encoding"></param>
        /// <param name="callback"></param>
        [<Erase; CompiledName("end")>]
        member inline _.``end``(?chunk: U2<string, Buffer>, ?encoding: string, ?callback: unit -> unit) : this =
            Unchecked.defaultof<_>

        /// <summary>
        /// Cancels an ongoing HTTP transaction. If the request has already emitted the <c>close</c> event, the abort operation will have no
        /// effect. Otherwise an ongoing event will emit <c>abort</c> and <c>close</c> events. Additionally, if there is an ongoing response object,it will
        /// emit the <c>aborted</c> event.
        /// </summary>
        [<Erase>]
        member inline _.abort() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Continues any pending redirection. Can only be called during a <c>'redirect'</c> event.
        /// </summary>
        [<Erase>]
        member inline _.followRedirect() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// * <c>active</c> boolean - Whether the request is currently active. If this is false no other properties will be set<br/>*
        /// <c>started</c> boolean - Whether the upload has started. If this is false both <c>current</c> and <c>total</c> will be set to
        /// 0.<br/>* <c>current</c> Integer - The number of bytes that have been uploaded so far<br/>* <c>total</c> Integer - The number of
        /// bytes that will be uploaded this request<br/><br/>You can use this method in conjunction with <c>POST</c> requests to get the progress
        /// of a file upload or other data transfer.
        /// </summary>
        [<Erase>]
        member inline _.getUploadProgress() : ClientRequest.GetUploadProgress = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>boolean</c> specifying whether the request will use HTTP chunked transfer encoding or not. Defaults to false. The property is
        /// readable and writable, however it can be set only before the first write operation as the HTTP headers are not
        /// yet put on the wire. Trying to set the <c>chunkedEncoding</c> property after the first write will throw an error.<br/><br/>Using chunked
        /// encoding is strongly recommended if you need to send a large request body as data will be streamed in small
        /// chunks instead of being internally buffered inside Electron process memory.
        /// </summary>
        [<Erase>]
        member val chunkedEncoding: bool = Unchecked.defaultof<_> with get, set

module Main =
    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("WebRequest", "electron")>]
    type WebRequest =
        /// <summary>
        /// The <c>listener</c> will be called with <c>listener(details, callback)</c> when a request is about to occur.<br/><br/>The <c>uploadData</c> is an array of
        /// <c>UploadData</c> objects.<br/><br/>The <c>callback</c> has to be called with an <c>response</c> object.<br/><br/>Some examples of valid <c>urls</c>:
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.onBeforeRequest
            (?filter: WebRequestFilter, listener: Option<WebRequest.OnBeforeRequest.Listener>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The <c>listener</c> will be called with <c>listener(details, callback)</c> before sending an HTTP request, once the request headers are available. This
        /// may occur after a TCP connection is made to the server, but before any http data is sent.<br/><br/>The <c>callback</c> has
        /// to be called with a <c>response</c> object.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.onBeforeSendHeaders
            (?filter: WebRequestFilter, listener: Option<WebRequest.OnBeforeSendHeaders.Listener>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The <c>listener</c> will be called with <c>listener(details)</c> just before a request is going to be sent to the server, modifications
        /// of previous <c>onBeforeSendHeaders</c> response are visible by the time this listener is fired.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.onSendHeaders
            (?filter: WebRequestFilter, listener: Option<WebRequest.OnSendHeaders.Listener.Details -> unit>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The <c>listener</c> will be called with <c>listener(details, callback)</c> when HTTP response headers of a request have been received.<br/><br/>The <c>callback</c> has
        /// to be called with a <c>response</c> object.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.onHeadersReceived
            (?filter: WebRequestFilter, listener: Option<WebRequest.OnHeadersReceived.Listener>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The <c>listener</c> will be called with <c>listener(details)</c> when first byte of the response body is received. For HTTP requests, this
        /// means that the status line and response headers are available.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.onResponseStarted
            (?filter: WebRequestFilter, listener: Option<WebRequest.OnResponseStarted.Listener.Details -> unit>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The <c>listener</c> will be called with <c>listener(details)</c> when a server initiated redirect is about to occur.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.onBeforeRedirect
            (?filter: WebRequestFilter, listener: Option<WebRequest.OnBeforeRedirect.Listener.Details -> unit>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The <c>listener</c> will be called with <c>listener(details)</c> when a request is completed.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.onCompleted
            (?filter: WebRequestFilter, listener: Option<WebRequest.OnCompleted.Listener.Details -> unit>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The <c>listener</c> will be called with <c>listener(details)</c> when an error occurs.
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.onErrorOccurred
            (?filter: WebRequestFilter, listener: Option<WebRequest.OnErrorOccurred.Listener.Details -> unit>)
            : unit =
            Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("WebFrameMain", "electron")>]
    type WebFrameMain =
        interface EventEmitter

        /// <summary>
        /// Emitted when the document is loaded.
        /// </summary>
        [<Emit("$0.on('dom-ready', $1)")>]
        member inline _.onDomReady(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the document is loaded.
        /// </summary>
        [<Emit("$0.once('dom-ready', $1)")>]
        member inline _.onceDomReady(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the document is loaded.
        /// </summary>
        [<Emit("$0.off('dom-ready', $1)")>]
        member inline _.offDomReady(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// A promise that resolves with the result of the executed code or is rejected if execution throws or results in
        /// a rejected promise.<br/><br/>Evaluates <c>code</c> in page.<br/><br/>In the browser window some HTML APIs like <c>requestFullScreen</c> can only be invoked by a
        /// gesture from the user. Setting <c>userGesture</c> to <c>true</c> will remove this limitation.
        /// </summary>
        /// <param name="code"></param>
        /// <param name="userGesture">Default is <c>false</c>.</param>
        [<Erase>]
        member inline _.executeJavaScript(code: string, ?userGesture: bool) : Promise<obj> = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the reload was initiated successfully. Only results in <c>false</c> when the frame has no history.
        /// </summary>
        [<Erase>]
        member inline _.reload() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the frame is destroyed.
        /// </summary>
        [<Erase>]
        member inline _.isDestroyed() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Send an asynchronous message to the renderer process via <c>channel</c>, along with arguments. Arguments will be serialized with the Structured
        /// Clone Algorithm, just like <c>postMessage</c>, so prototype chains will not be included. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will
        /// throw an exception.<br/><br/>The renderer process can handle the message by listening to <c>channel</c> with the <c>ipcRenderer</c> module.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="...args"></param>
        [<Erase>]
        member inline _.send(channel: string, [<System.ParamArray>] args: obj[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Send a message to the renderer process, optionally transferring ownership of zero or more <c>MessagePortMain</c> objects.<br/><br/>The transferred <c>MessagePortMain</c> objects will
        /// be available in the renderer process by accessing the <c>ports</c> property of the emitted event. When they arrive in the
        /// renderer, they will be native DOM <c>MessagePort</c> objects.<br/><br/>For example:
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="message"></param>
        /// <param name="transfer"></param>
        [<Erase>]
        member inline _.postMessage(channel: string, message: obj, ?transfer: MessagePortMain[]) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// A promise that resolves with the currently running JavaScript call stack. If no JavaScript runs in the frame, the promise
        /// will never resolve. In cases where the call stack is otherwise unable to be collected, it will return <c>undefined</c>.<br/><br/>This can
        /// be useful to determine why the frame is unresponsive in cases where there's long-running JavaScript. For more information, see the
        /// proposed Crash Reporting API.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron")>]
        member inline _.collectJavaScriptCallStack() : Promise<Option<string>> = Unchecked.defaultof<_>

        /// <summary>
        /// An <c>IpcMain</c> instance scoped to the frame.<br/><br/>IPC messages sent with <c>ipcRenderer.send</c>, <c>ipcRenderer.sendSync</c> or <c>ipcRenderer.postMessage</c> will be delivered in the following
        /// order:<br/><br/>* <c>contents.on('ipc-message')</c><br/>* <c>contents.mainFrame.on(channel)</c><br/>* <c>contents.ipc.on(channel)</c><br/>* <c>ipcMain.on(channel)</c><br/><br/>Handlers registered with <c>invoke</c> will be checked in the following order. The first one that is
        /// defined will be called, the rest will be ignored.<br/><br/>* <c>contents.mainFrame.handle(channel)</c><br/>* <c>contents.handle(channel)</c><br/>* <c>ipcMain.handle(channel)</c><br/><br/>In most cases, only the main frame of a
        /// WebContents can send or receive IPC messages. However, if the <c>nodeIntegrationInSubFrames</c> option is enabled, it is possible for child frames
        /// to send and receive IPC messages also. The <c>WebContents.ipc</c> interface may be more convenient when <c>nodeIntegrationInSubFrames</c> is not enabled.
        /// </summary>
        [<Erase>]
        member val ipc: IpcMain = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing the current URL of the frame.
        /// </summary>
        [<Erase>]
        member val url: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing the current origin of the frame, serialized according to RFC 6454. This may be different from the
        /// URL. For instance, if the frame is a child window opened to <c>about:blank</c>, then <c>frame.origin</c> will return the parent frame's
        /// origin, while <c>frame.url</c> will return the empty string. Pages without a scheme/host/port triple origin will have the serialized origin of
        /// <c>"null"</c> (that is, the string containing the letters n, u, l, l).
        /// </summary>
        [<Erase>]
        member val origin: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebFrameMain | null</c> representing top frame in the frame hierarchy to which <c>frame</c> belongs.
        /// </summary>
        [<Erase>]
        member val top: Option<WebFrameMain> = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebFrameMain | null</c> representing parent frame of <c>frame</c>, the property would be <c>null</c> if <c>frame</c> is the top frame
        /// in the frame hierarchy.
        /// </summary>
        [<Erase>]
        member val parent: Option<WebFrameMain> = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebFrameMain[]</c> collection containing the direct descendents of <c>frame</c>.
        /// </summary>
        [<Erase>]
        member val frames: WebFrameMain[] = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebFrameMain[]</c> collection containing every frame in the subtree of <c>frame</c>, including itself. This can be useful when traversing through
        /// all frames.
        /// </summary>
        [<Erase>]
        member val framesInSubtree: WebFrameMain[] = Unchecked.defaultof<_> with get

        /// <summary>
        /// An <c>Integer</c> representing the id of the frame's internal FrameTreeNode instance. This id is browser-global and uniquely identifies a frame
        /// that hosts content. The identifier is fixed at the creation of the frame and stays constant for the lifetime of
        /// the frame. When the frame is removed, the id is not used again.
        /// </summary>
        [<Erase>]
        member val frameTreeNodeId: int = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing the frame name.
        /// </summary>
        [<Erase>]
        member val name: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> which uniquely identifies the frame within its associated renderer process. This is equivalent to <c>webFrame.frameToken</c>.
        /// </summary>
        [<Erase>]
        member val frameToken: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// An <c>Integer</c> representing the operating system <c>pid</c> of the process which owns this frame.
        /// </summary>
        [<Erase>]
        member val osProcessId: int = Unchecked.defaultof<_> with get

        /// <summary>
        /// An <c>Integer</c> representing the Chromium internal <c>pid</c> of the process which owns this frame. This is not the same as
        /// the OS process ID; to read that use <c>frame.osProcessId</c>.
        /// </summary>
        [<Erase>]
        member val processId: int = Unchecked.defaultof<_> with get

        /// <summary>
        /// An <c>Integer</c> representing the unique frame id in the current renderer process. Distinct <c>WebFrameMain</c> instances that refer to the same
        /// underlying frame will have the same <c>routingId</c>.
        /// </summary>
        [<Erase>]
        member val routingId: int = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing the visibility state of the frame.<br/><br/>See also how the Page Visibility API is affected by other Electron
        /// APIs.
        /// </summary>
        [<Erase>]
        member val visibilityState: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>Boolean</c> representing whether the frame is detached from the frame tree. If a frame is accessed while the corresponding
        /// page is running any unload listeners, it may become detached as the newly navigated page replaced it in the frame
        /// tree.
        /// </summary>
        [<Erase>]
        member val detached: bool = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Control web pages and iframes.<br/><br/>Process: Main<br/><br/>The <c>webFrameMain</c> module can be used to lookup frames across existing <c>WebContents</c> instances. Navigation
    /// events are the common use case.<br/><br/><code><br/>const { BrowserWindow, webFrameMain } = require('electron')<br/><br/>const win = new BrowserWindow({ width: 800, height: 1500
    /// })<br/>win.loadURL('https://twitter.com')<br/><br/>win.webContents.on(<br/>  'did-frame-navigate',<br/>  (event, url, httpResponseCode, httpStatusText, isMainFrame, frameProcessId, frameRoutingId) =&gt; {<br/>    const frame = webFrameMain.fromId(frameProcessId,
    /// frameRoutingId)<br/>    if (frame) {<br/>      const code = 'document.body.innerHTML = document.body.innerHTML.replaceAll("heck", "h*ck")'<br/>
    ///     frame.executeJavaScript(code)<br/>    }<br/>  }<br/>)<br/></code><br/><br/>You can also access frames of existing pages by using
    /// the <c>mainFrame</c> property of <c>WebContents</c>.
    /// </summary>
    [<Import("webFrameMain", "electron")>]
    type WebFrameMain =
        /// <summary>
        /// A frame with the given process and routing IDs, or <c>undefined</c> if there is no WebFrameMain associated with the given
        /// IDs.
        /// </summary>
        /// <param name="processId">An <c>Integer</c> representing the internal ID of the process which owns the frame.</param>
        /// <param name="routingId">An <c>Integer</c> representing the unique frame ID in the current renderer process. Routing IDs can be retrieved from <c>WebFrameMain</c>
        /// instances (<c>frame.routingId</c>) and are also passed by frame specific <c>WebContents</c> navigation events (e.g. <c>did-frame-navigate</c>).</param>
        [<Erase>]
        static member mutable fromId(processId: int, routingId: int) : Option<WebFrameMain> = Unchecked.defaultof<_>

        /// <summary>
        /// A frame with the given process and frame token, or <c>null</c> if there is no WebFrameMain associated with the given
        /// IDs.
        /// </summary>
        /// <param name="processId">An <c>Integer</c> representing the internal ID of the process which owns the frame.</param>
        /// <param name="frameToken">A <c>string</c> token identifying the unique frame. Can also be retrieved in the renderer process via <c>webFrame.frameToken</c>.</param>
        [<Erase>]
        static member mutable fromFrameToken(processId: int, frameToken: string) : Option<WebFrameMain> =
            Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("WebContents", "electron")>]
    type WebContents =
        interface EventEmitter

        /// <summary>
        /// Emitted when the navigation is done, i.e. the spinner of the tab has stopped spinning, and the <c>onload</c> event was
        /// dispatched.
        /// </summary>
        [<Emit("$0.on('did-finish-load', $1)")>]
        member inline _.onDidFinishLoad(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the navigation is done, i.e. the spinner of the tab has stopped spinning, and the <c>onload</c> event was
        /// dispatched.
        /// </summary>
        [<Emit("$0.once('did-finish-load', $1)")>]
        member inline _.onceDidFinishLoad(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the navigation is done, i.e. the spinner of the tab has stopped spinning, and the <c>onload</c> event was
        /// dispatched.
        /// </summary>
        [<Emit("$0.off('did-finish-load', $1)")>]
        member inline _.offDidFinishLoad(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c> but emitted when the load failed. The full list of error codes and their meaning
        /// is available here.
        /// </summary>
        [<Emit("$0.on('did-fail-load', $1)")>]
        member inline _.onDidFailLoad(handler: Event -> int -> string -> string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c> but emitted when the load failed. The full list of error codes and their meaning
        /// is available here.
        /// </summary>
        [<Emit("$0.on('did-fail-load', $1)")>]
        member inline _.onDidFailLoad(handler: Fable.Electron.EventInterfaces.Root.IOnDidFailLoad -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c> but emitted when the load failed. The full list of error codes and their meaning
        /// is available here.
        /// </summary>
        [<Emit("$0.once('did-fail-load', $1)")>]
        member inline _.onceDidFailLoad
            (handler: Event -> int -> string -> string -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c> but emitted when the load failed. The full list of error codes and their meaning
        /// is available here.
        /// </summary>
        [<Emit("$0.once('did-fail-load', $1)")>]
        member inline _.onceDidFailLoad(handler: Fable.Electron.EventInterfaces.Root.IOnDidFailLoad -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c> but emitted when the load failed. The full list of error codes and their meaning
        /// is available here.
        /// </summary>
        [<Emit("$0.off('did-fail-load', $1)")>]
        member inline _.offDidFailLoad(handler: Event -> int -> string -> string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-finish-load</c> but emitted when the load failed. The full list of error codes and their meaning
        /// is available here.
        /// </summary>
        [<Emit("$0.off('did-fail-load', $1)")>]
        member inline _.offDidFailLoad(handler: Fable.Electron.EventInterfaces.Root.IOnDidFailLoad -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-fail-load</c> but emitted when the load was cancelled (e.g. <c>window.stop()</c> was invoked).
        /// </summary>
        [<Emit("$0.on('did-fail-provisional-load', $1)")>]
        member inline _.onDidFailProvisionalLoad
            (handler: Event -> int -> string -> string -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-fail-load</c> but emitted when the load was cancelled (e.g. <c>window.stop()</c> was invoked).
        /// </summary>
        [<Emit("$0.on('did-fail-provisional-load', $1)")>]
        member inline _.onDidFailProvisionalLoad
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFailProvisionalLoad -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-fail-load</c> but emitted when the load was cancelled (e.g. <c>window.stop()</c> was invoked).
        /// </summary>
        [<Emit("$0.once('did-fail-provisional-load', $1)")>]
        member inline _.onceDidFailProvisionalLoad
            (handler: Event -> int -> string -> string -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-fail-load</c> but emitted when the load was cancelled (e.g. <c>window.stop()</c> was invoked).
        /// </summary>
        [<Emit("$0.once('did-fail-provisional-load', $1)")>]
        member inline _.onceDidFailProvisionalLoad
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFailProvisionalLoad -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-fail-load</c> but emitted when the load was cancelled (e.g. <c>window.stop()</c> was invoked).
        /// </summary>
        [<Emit("$0.off('did-fail-provisional-load', $1)")>]
        member inline _.offDidFailProvisionalLoad
            (handler: Event -> int -> string -> string -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is like <c>did-fail-load</c> but emitted when the load was cancelled (e.g. <c>window.stop()</c> was invoked).
        /// </summary>
        [<Emit("$0.off('did-fail-provisional-load', $1)")>]
        member inline _.offDidFailProvisionalLoad
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFailProvisionalLoad -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a frame has done navigation.
        /// </summary>
        [<Emit("$0.on('did-frame-finish-load', $1)")>]
        member inline _.onDidFrameFinishLoad(handler: Event -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a frame has done navigation.
        /// </summary>
        [<Emit("$0.on('did-frame-finish-load', $1)")>]
        member inline _.onDidFrameFinishLoad
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFrameFinishLoad -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a frame has done navigation.
        /// </summary>
        [<Emit("$0.once('did-frame-finish-load', $1)")>]
        member inline _.onceDidFrameFinishLoad(handler: Event -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a frame has done navigation.
        /// </summary>
        [<Emit("$0.once('did-frame-finish-load', $1)")>]
        member inline _.onceDidFrameFinishLoad
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFrameFinishLoad -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a frame has done navigation.
        /// </summary>
        [<Emit("$0.off('did-frame-finish-load', $1)")>]
        member inline _.offDidFrameFinishLoad(handler: Event -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a frame has done navigation.
        /// </summary>
        [<Emit("$0.off('did-frame-finish-load', $1)")>]
        member inline _.offDidFrameFinishLoad
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFrameFinishLoad -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab started spinning.
        /// </summary>
        [<Emit("$0.on('did-start-loading', $1)")>]
        member inline _.onDidStartLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab started spinning.
        /// </summary>
        [<Emit("$0.once('did-start-loading', $1)")>]
        member inline _.onceDidStartLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab started spinning.
        /// </summary>
        [<Emit("$0.off('did-start-loading', $1)")>]
        member inline _.offDidStartLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab stopped spinning.
        /// </summary>
        [<Emit("$0.on('did-stop-loading', $1)")>]
        member inline _.onDidStopLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab stopped spinning.
        /// </summary>
        [<Emit("$0.once('did-stop-loading', $1)")>]
        member inline _.onceDidStopLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Corresponds to the points in time when the spinner of the tab stopped spinning.
        /// </summary>
        [<Emit("$0.off('did-stop-loading', $1)")>]
        member inline _.offDidStopLoading(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the document in the top-level frame is loaded.
        /// </summary>
        [<Emit("$0.on('dom-ready', $1)")>]
        member inline _.onDomReady(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the document in the top-level frame is loaded.
        /// </summary>
        [<Emit("$0.once('dom-ready', $1)")>]
        member inline _.onceDomReady(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the document in the top-level frame is loaded.
        /// </summary>
        [<Emit("$0.off('dom-ready', $1)")>]
        member inline _.offDomReady(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.on('page-title-updated', $1)")>]
        member inline _.onPageTitleUpdated(handler: Event -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.on('page-title-updated', $1)")>]
        member inline _.onPageTitleUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageTitleUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.once('page-title-updated', $1)")>]
        member inline _.oncePageTitleUpdated(handler: Event -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.once('page-title-updated', $1)")>]
        member inline _.oncePageTitleUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageTitleUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.off('page-title-updated', $1)")>]
        member inline _.offPageTitleUpdated(handler: Event -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
        /// </summary>
        [<Emit("$0.off('page-title-updated', $1)")>]
        member inline _.offPageTitleUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageTitleUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when page receives favicon urls.
        /// </summary>
        [<Emit("$0.on('page-favicon-updated', $1)")>]
        member inline _.onPageFaviconUpdated(handler: Event -> string[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when page receives favicon urls.
        /// </summary>
        [<Emit("$0.on('page-favicon-updated', $1)")>]
        member inline _.onPageFaviconUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageFaviconUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when page receives favicon urls.
        /// </summary>
        [<Emit("$0.once('page-favicon-updated', $1)")>]
        member inline _.oncePageFaviconUpdated(handler: Event -> string[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when page receives favicon urls.
        /// </summary>
        [<Emit("$0.once('page-favicon-updated', $1)")>]
        member inline _.oncePageFaviconUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageFaviconUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when page receives favicon urls.
        /// </summary>
        [<Emit("$0.off('page-favicon-updated', $1)")>]
        member inline _.offPageFaviconUpdated(handler: Event -> string[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when page receives favicon urls.
        /// </summary>
        [<Emit("$0.off('page-favicon-updated', $1)")>]
        member inline _.offPageFaviconUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageFaviconUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the page calls <c>window.moveTo</c>, <c>window.resizeTo</c> or related APIs.<br/><br/>By default, this will move the window. To prevent that behavior,
        /// call <c>event.preventDefault()</c>.
        /// </summary>
        [<Emit("$0.on('content-bounds-updated', $1)")>]
        member inline _.onContentBoundsUpdated(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the page calls <c>window.moveTo</c>, <c>window.resizeTo</c> or related APIs.<br/><br/>By default, this will move the window. To prevent that behavior,
        /// call <c>event.preventDefault()</c>.
        /// </summary>
        [<Emit("$0.on('content-bounds-updated', $1)")>]
        member inline _.onContentBoundsUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnContentBoundsUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the page calls <c>window.moveTo</c>, <c>window.resizeTo</c> or related APIs.<br/><br/>By default, this will move the window. To prevent that behavior,
        /// call <c>event.preventDefault()</c>.
        /// </summary>
        [<Emit("$0.once('content-bounds-updated', $1)")>]
        member inline _.onceContentBoundsUpdated(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the page calls <c>window.moveTo</c>, <c>window.resizeTo</c> or related APIs.<br/><br/>By default, this will move the window. To prevent that behavior,
        /// call <c>event.preventDefault()</c>.
        /// </summary>
        [<Emit("$0.once('content-bounds-updated', $1)")>]
        member inline _.onceContentBoundsUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnContentBoundsUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the page calls <c>window.moveTo</c>, <c>window.resizeTo</c> or related APIs.<br/><br/>By default, this will move the window. To prevent that behavior,
        /// call <c>event.preventDefault()</c>.
        /// </summary>
        [<Emit("$0.off('content-bounds-updated', $1)")>]
        member inline _.offContentBoundsUpdated(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the page calls <c>window.moveTo</c>, <c>window.resizeTo</c> or related APIs.<br/><br/>By default, this will move the window. To prevent that behavior,
        /// call <c>event.preventDefault()</c>.
        /// </summary>
        [<Emit("$0.off('content-bounds-updated', $1)")>]
        member inline _.offContentBoundsUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnContentBoundsUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted _after_ successful creation of a window via <c>window.open</c> in the renderer. Not emitted if the creation of the window
        /// is canceled from <c>webContents.setWindowOpenHandler</c>.<br/><br/>See <c>window.open()</c> for more details and how to use this in conjunction with <c>webContents.setWindowOpenHandler</c>.
        /// </summary>
        [<Emit("$0.on('did-create-window', $1)")>]
        member inline _.onDidCreateWindow
            (handler: BrowserWindow -> WebContents.DidCreateWindow.Details -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted _after_ successful creation of a window via <c>window.open</c> in the renderer. Not emitted if the creation of the window
        /// is canceled from <c>webContents.setWindowOpenHandler</c>.<br/><br/>See <c>window.open()</c> for more details and how to use this in conjunction with <c>webContents.setWindowOpenHandler</c>.
        /// </summary>
        [<Emit("$0.on('did-create-window', $1)")>]
        member inline _.onDidCreateWindow
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidCreateWindow -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted _after_ successful creation of a window via <c>window.open</c> in the renderer. Not emitted if the creation of the window
        /// is canceled from <c>webContents.setWindowOpenHandler</c>.<br/><br/>See <c>window.open()</c> for more details and how to use this in conjunction with <c>webContents.setWindowOpenHandler</c>.
        /// </summary>
        [<Emit("$0.once('did-create-window', $1)")>]
        member inline _.onceDidCreateWindow
            (handler: BrowserWindow -> WebContents.DidCreateWindow.Details -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted _after_ successful creation of a window via <c>window.open</c> in the renderer. Not emitted if the creation of the window
        /// is canceled from <c>webContents.setWindowOpenHandler</c>.<br/><br/>See <c>window.open()</c> for more details and how to use this in conjunction with <c>webContents.setWindowOpenHandler</c>.
        /// </summary>
        [<Emit("$0.once('did-create-window', $1)")>]
        member inline _.onceDidCreateWindow
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidCreateWindow -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted _after_ successful creation of a window via <c>window.open</c> in the renderer. Not emitted if the creation of the window
        /// is canceled from <c>webContents.setWindowOpenHandler</c>.<br/><br/>See <c>window.open()</c> for more details and how to use this in conjunction with <c>webContents.setWindowOpenHandler</c>.
        /// </summary>
        [<Emit("$0.off('did-create-window', $1)")>]
        member inline _.offDidCreateWindow
            (handler: BrowserWindow -> WebContents.DidCreateWindow.Details -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted _after_ successful creation of a window via <c>window.open</c> in the renderer. Not emitted if the creation of the window
        /// is canceled from <c>webContents.setWindowOpenHandler</c>.<br/><br/>See <c>window.open()</c> for more details and how to use this in conjunction with <c>webContents.setWindowOpenHandler</c>.
        /// </summary>
        [<Emit("$0.off('did-create-window', $1)")>]
        member inline _.offDidCreateWindow
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidCreateWindow -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation on the main frame. It can happen when the
        /// <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will not emit when the navigation
        /// is started programmatically with APIs like <c>webContents.loadURL</c> and <c>webContents.back</c>.<br/><br/>It is also not emitted for in-page navigations, such as clicking anchor
        /// links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation.
        /// </summary>
        [<Emit("$0.on('will-navigate', $1)")>]
        member inline _.onWillNavigate(handler: Details -> string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation on the main frame. It can happen when the
        /// <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will not emit when the navigation
        /// is started programmatically with APIs like <c>webContents.loadURL</c> and <c>webContents.back</c>.<br/><br/>It is also not emitted for in-page navigations, such as clicking anchor
        /// links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation.
        /// </summary>
        [<Emit("$0.on('will-navigate', $1)")>]
        member inline _.onWillNavigate(handler: Fable.Electron.EventInterfaces.Root.IOnWillNavigate -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation on the main frame. It can happen when the
        /// <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will not emit when the navigation
        /// is started programmatically with APIs like <c>webContents.loadURL</c> and <c>webContents.back</c>.<br/><br/>It is also not emitted for in-page navigations, such as clicking anchor
        /// links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation.
        /// </summary>
        [<Emit("$0.once('will-navigate', $1)")>]
        member inline _.onceWillNavigate(handler: Details -> string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation on the main frame. It can happen when the
        /// <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will not emit when the navigation
        /// is started programmatically with APIs like <c>webContents.loadURL</c> and <c>webContents.back</c>.<br/><br/>It is also not emitted for in-page navigations, such as clicking anchor
        /// links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation.
        /// </summary>
        [<Emit("$0.once('will-navigate', $1)")>]
        member inline _.onceWillNavigate(handler: Fable.Electron.EventInterfaces.Root.IOnWillNavigate -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation on the main frame. It can happen when the
        /// <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will not emit when the navigation
        /// is started programmatically with APIs like <c>webContents.loadURL</c> and <c>webContents.back</c>.<br/><br/>It is also not emitted for in-page navigations, such as clicking anchor
        /// links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation.
        /// </summary>
        [<Emit("$0.off('will-navigate', $1)")>]
        member inline _.offWillNavigate(handler: Details -> string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation on the main frame. It can happen when the
        /// <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will not emit when the navigation
        /// is started programmatically with APIs like <c>webContents.loadURL</c> and <c>webContents.back</c>.<br/><br/>It is also not emitted for in-page navigations, such as clicking anchor
        /// links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation.
        /// </summary>
        [<Emit("$0.off('will-navigate', $1)")>]
        member inline _.offWillNavigate(handler: Fable.Electron.EventInterfaces.Root.IOnWillNavigate -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation in any frame. It can happen when the <c>window.location</c>
        /// object is changed or a user clicks a link in the page.<br/><br/>Unlike <c>will-navigate</c>, <c>will-frame-navigate</c> is fired when the main frame
        /// or any of its subframes attempts to navigate. When the navigation event comes from the main frame, <c>isMainFrame</c> will be
        /// <c>true</c>.<br/><br/>This event will not emit when the navigation is started programmatically with APIs like <c>webContents.loadURL</c> and <c>webContents.back</c>.<br/><br/>It is also not
        /// emitted for in-page navigations, such as clicking anchor links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c>
        /// will prevent the navigation.
        /// </summary>
        [<Emit("$0.on('will-frame-navigate', $1)")>]
        member inline _.onWillFrameNavigate(handler: Details -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation in any frame. It can happen when the <c>window.location</c>
        /// object is changed or a user clicks a link in the page.<br/><br/>Unlike <c>will-navigate</c>, <c>will-frame-navigate</c> is fired when the main frame
        /// or any of its subframes attempts to navigate. When the navigation event comes from the main frame, <c>isMainFrame</c> will be
        /// <c>true</c>.<br/><br/>This event will not emit when the navigation is started programmatically with APIs like <c>webContents.loadURL</c> and <c>webContents.back</c>.<br/><br/>It is also not
        /// emitted for in-page navigations, such as clicking anchor links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c>
        /// will prevent the navigation.
        /// </summary>
        [<Emit("$0.once('will-frame-navigate', $1)")>]
        member inline _.onceWillFrameNavigate(handler: Details -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a user or the page wants to start navigation in any frame. It can happen when the <c>window.location</c>
        /// object is changed or a user clicks a link in the page.<br/><br/>Unlike <c>will-navigate</c>, <c>will-frame-navigate</c> is fired when the main frame
        /// or any of its subframes attempts to navigate. When the navigation event comes from the main frame, <c>isMainFrame</c> will be
        /// <c>true</c>.<br/><br/>This event will not emit when the navigation is started programmatically with APIs like <c>webContents.loadURL</c> and <c>webContents.back</c>.<br/><br/>It is also not
        /// emitted for in-page navigations, such as clicking anchor links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c>
        /// will prevent the navigation.
        /// </summary>
        [<Emit("$0.off('will-frame-navigate', $1)")>]
        member inline _.offWillFrameNavigate(handler: Details -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating.
        /// </summary>
        [<Emit("$0.on('did-start-navigation', $1)")>]
        member inline _.onDidStartNavigation(handler: Details -> string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating.
        /// </summary>
        [<Emit("$0.on('did-start-navigation', $1)")>]
        member inline _.onDidStartNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidStartNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating.
        /// </summary>
        [<Emit("$0.once('did-start-navigation', $1)")>]
        member inline _.onceDidStartNavigation
            (handler: Details -> string -> bool -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating.
        /// </summary>
        [<Emit("$0.once('did-start-navigation', $1)")>]
        member inline _.onceDidStartNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidStartNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating.
        /// </summary>
        [<Emit("$0.off('did-start-navigation', $1)")>]
        member inline _.offDidStartNavigation(handler: Details -> string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame (including main) starts navigating.
        /// </summary>
        [<Emit("$0.off('did-start-navigation', $1)")>]
        member inline _.offDidStartNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidStartNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event will be emitted after
        /// <c>did-start-navigation</c> and always before the <c>did-redirect-navigation</c> event for the same navigation.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation (not just the redirect).
        /// </summary>
        [<Emit("$0.on('will-redirect', $1)")>]
        member inline _.onWillRedirect(handler: Details -> string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event will be emitted after
        /// <c>did-start-navigation</c> and always before the <c>did-redirect-navigation</c> event for the same navigation.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation (not just the redirect).
        /// </summary>
        [<Emit("$0.on('will-redirect', $1)")>]
        member inline _.onWillRedirect(handler: Fable.Electron.EventInterfaces.Root.IOnWillRedirect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event will be emitted after
        /// <c>did-start-navigation</c> and always before the <c>did-redirect-navigation</c> event for the same navigation.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation (not just the redirect).
        /// </summary>
        [<Emit("$0.once('will-redirect', $1)")>]
        member inline _.onceWillRedirect(handler: Details -> string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event will be emitted after
        /// <c>did-start-navigation</c> and always before the <c>did-redirect-navigation</c> event for the same navigation.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation (not just the redirect).
        /// </summary>
        [<Emit("$0.once('will-redirect', $1)")>]
        member inline _.onceWillRedirect(handler: Fable.Electron.EventInterfaces.Root.IOnWillRedirect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event will be emitted after
        /// <c>did-start-navigation</c> and always before the <c>did-redirect-navigation</c> event for the same navigation.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation (not just the redirect).
        /// </summary>
        [<Emit("$0.off('will-redirect', $1)")>]
        member inline _.offWillRedirect(handler: Details -> string -> bool -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event will be emitted after
        /// <c>did-start-navigation</c> and always before the <c>did-redirect-navigation</c> event for the same navigation.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation (not just the redirect).
        /// </summary>
        [<Emit("$0.off('will-redirect', $1)")>]
        member inline _.offWillRedirect(handler: Fable.Electron.EventInterfaces.Root.IOnWillRedirect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event cannot be prevented, if
        /// you want to prevent redirects you should checkout out the <c>will-redirect</c> event above.
        /// </summary>
        [<Emit("$0.on('did-redirect-navigation', $1)")>]
        member inline _.onDidRedirectNavigation
            (handler: Details -> string -> bool -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event cannot be prevented, if
        /// you want to prevent redirects you should checkout out the <c>will-redirect</c> event above.
        /// </summary>
        [<Emit("$0.on('did-redirect-navigation', $1)")>]
        member inline _.onDidRedirectNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidRedirectNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event cannot be prevented, if
        /// you want to prevent redirects you should checkout out the <c>will-redirect</c> event above.
        /// </summary>
        [<Emit("$0.once('did-redirect-navigation', $1)")>]
        member inline _.onceDidRedirectNavigation
            (handler: Details -> string -> bool -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event cannot be prevented, if
        /// you want to prevent redirects you should checkout out the <c>will-redirect</c> event above.
        /// </summary>
        [<Emit("$0.once('did-redirect-navigation', $1)")>]
        member inline _.onceDidRedirectNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidRedirectNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event cannot be prevented, if
        /// you want to prevent redirects you should checkout out the <c>will-redirect</c> event above.
        /// </summary>
        [<Emit("$0.off('did-redirect-navigation', $1)")>]
        member inline _.offDidRedirectNavigation
            (handler: Details -> string -> bool -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event cannot be prevented, if
        /// you want to prevent redirects you should checkout out the <c>will-redirect</c> event above.
        /// </summary>
        [<Emit("$0.off('did-redirect-navigation', $1)")>]
        member inline _.offDidRedirectNavigation
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidRedirectNavigation -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a main frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links
        /// or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.on('did-navigate', $1)")>]
        member inline _.onDidNavigate(handler: Event -> string -> int -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a main frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links
        /// or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.on('did-navigate', $1)")>]
        member inline _.onDidNavigate(handler: Fable.Electron.EventInterfaces.Root.IOnDidNavigate -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a main frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links
        /// or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.once('did-navigate', $1)")>]
        member inline _.onceDidNavigate(handler: Event -> string -> int -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a main frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links
        /// or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.once('did-navigate', $1)")>]
        member inline _.onceDidNavigate(handler: Fable.Electron.EventInterfaces.Root.IOnDidNavigate -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a main frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links
        /// or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.off('did-navigate', $1)")>]
        member inline _.offDidNavigate(handler: Event -> string -> int -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a main frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links
        /// or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.off('did-navigate', $1)")>]
        member inline _.offDidNavigate(handler: Fable.Electron.EventInterfaces.Root.IOnDidNavigate -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.on('did-frame-navigate', $1)")>]
        member inline _.onDidFrameNavigate
            (handler: Event -> string -> int -> string -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.on('did-frame-navigate', $1)")>]
        member inline _.onDidFrameNavigate
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFrameNavigate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.once('did-frame-navigate', $1)")>]
        member inline _.onceDidFrameNavigate
            (handler: Event -> string -> int -> string -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.once('did-frame-navigate', $1)")>]
        member inline _.onceDidFrameNavigate
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFrameNavigate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.off('did-frame-navigate', $1)")>]
        member inline _.offDidFrameNavigate
            (handler: Event -> string -> int -> string -> bool -> int -> int -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
        /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
        /// </summary>
        [<Emit("$0.off('did-frame-navigate', $1)")>]
        member inline _.offDidFrameNavigate
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidFrameNavigate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened in any frame.<br/><br/>When in-page navigation happens, the page URL changes but does not cause
        /// navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c>
        /// event is triggered.
        /// </summary>
        [<Emit("$0.on('did-navigate-in-page', $1)")>]
        member inline _.onDidNavigateInPage(handler: Event -> string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened in any frame.<br/><br/>When in-page navigation happens, the page URL changes but does not cause
        /// navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c>
        /// event is triggered.
        /// </summary>
        [<Emit("$0.on('did-navigate-in-page', $1)")>]
        member inline _.onDidNavigateInPage
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidNavigateInPage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened in any frame.<br/><br/>When in-page navigation happens, the page URL changes but does not cause
        /// navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c>
        /// event is triggered.
        /// </summary>
        [<Emit("$0.once('did-navigate-in-page', $1)")>]
        member inline _.onceDidNavigateInPage(handler: Event -> string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened in any frame.<br/><br/>When in-page navigation happens, the page URL changes but does not cause
        /// navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c>
        /// event is triggered.
        /// </summary>
        [<Emit("$0.once('did-navigate-in-page', $1)")>]
        member inline _.onceDidNavigateInPage
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidNavigateInPage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened in any frame.<br/><br/>When in-page navigation happens, the page URL changes but does not cause
        /// navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c>
        /// event is triggered.
        /// </summary>
        [<Emit("$0.off('did-navigate-in-page', $1)")>]
        member inline _.offDidNavigateInPage(handler: Event -> string -> bool -> int -> int -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an in-page navigation happened in any frame.<br/><br/>When in-page navigation happens, the page URL changes but does not cause
        /// navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c>
        /// event is triggered.
        /// </summary>
        [<Emit("$0.off('did-navigate-in-page', $1)")>]
        member inline _.offDidNavigateInPage
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidNavigateInPage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>beforeunload</c> event handler is attempting to cancel a page unload.<br/><br/>Calling <c>event.preventDefault()</c> will ignore the <c>beforeunload</c> event handler
        /// and allow the page to be unloaded.<br/><br/>&gt; [!NOTE] This will be emitted for <c>BrowserViews</c> but will _not_ be respected -
        /// this is because we have chosen not to tie the <c>BrowserView</c> lifecycle to its owning BrowserWindow should one exist per
        /// the specification.
        /// </summary>
        [<Emit("$0.on('will-prevent-unload', $1)")>]
        member inline _.onWillPreventUnload(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>beforeunload</c> event handler is attempting to cancel a page unload.<br/><br/>Calling <c>event.preventDefault()</c> will ignore the <c>beforeunload</c> event handler
        /// and allow the page to be unloaded.<br/><br/>&gt; [!NOTE] This will be emitted for <c>BrowserViews</c> but will _not_ be respected -
        /// this is because we have chosen not to tie the <c>BrowserView</c> lifecycle to its owning BrowserWindow should one exist per
        /// the specification.
        /// </summary>
        [<Emit("$0.once('will-prevent-unload', $1)")>]
        member inline _.onceWillPreventUnload(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>beforeunload</c> event handler is attempting to cancel a page unload.<br/><br/>Calling <c>event.preventDefault()</c> will ignore the <c>beforeunload</c> event handler
        /// and allow the page to be unloaded.<br/><br/>&gt; [!NOTE] This will be emitted for <c>BrowserViews</c> but will _not_ be respected -
        /// this is because we have chosen not to tie the <c>BrowserView</c> lifecycle to its owning BrowserWindow should one exist per
        /// the specification.
        /// </summary>
        [<Emit("$0.off('will-prevent-unload', $1)")>]
        member inline _.offWillPreventUnload(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.on('render-process-gone', $1)")>]
        member inline _.onRenderProcessGone(handler: Event -> RenderProcessGoneDetails -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.on('render-process-gone', $1)")>]
        member inline _.onRenderProcessGone
            (handler: Fable.Electron.EventInterfaces.Root.IOnRenderProcessGone -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.once('render-process-gone', $1)")>]
        member inline _.onceRenderProcessGone(handler: Event -> RenderProcessGoneDetails -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.once('render-process-gone', $1)")>]
        member inline _.onceRenderProcessGone
            (handler: Fable.Electron.EventInterfaces.Root.IOnRenderProcessGone -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.off('render-process-gone', $1)")>]
        member inline _.offRenderProcessGone(handler: Event -> RenderProcessGoneDetails -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.off('render-process-gone', $1)")>]
        member inline _.offRenderProcessGone
            (handler: Fable.Electron.EventInterfaces.Root.IOnRenderProcessGone -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the web page becomes unresponsive.
        /// </summary>
        [<Emit("$0.on('unresponsive', $1)")>]
        member inline _.onUnresponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the web page becomes unresponsive.
        /// </summary>
        [<Emit("$0.once('unresponsive', $1)")>]
        member inline _.onceUnresponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the web page becomes unresponsive.
        /// </summary>
        [<Emit("$0.off('unresponsive', $1)")>]
        member inline _.offUnresponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the unresponsive web page becomes responsive again.
        /// </summary>
        [<Emit("$0.on('responsive', $1)")>]
        member inline _.onResponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the unresponsive web page becomes responsive again.
        /// </summary>
        [<Emit("$0.once('responsive', $1)")>]
        member inline _.onceResponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the unresponsive web page becomes responsive again.
        /// </summary>
        [<Emit("$0.off('responsive', $1)")>]
        member inline _.offResponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> is destroyed.
        /// </summary>
        [<Emit("$0.on('destroyed', $1)")>]
        member inline _.onDestroyed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> is destroyed.
        /// </summary>
        [<Emit("$0.once('destroyed', $1)")>]
        member inline _.onceDestroyed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> is destroyed.
        /// </summary>
        [<Emit("$0.off('destroyed', $1)")>]
        member inline _.offDestroyed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an input event is sent to the WebContents. See InputEvent for details.
        /// </summary>
        [<Emit("$0.on('input-event', $1)")>]
        member inline _.onInputEvent(handler: Event -> InputEvent -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an input event is sent to the WebContents. See InputEvent for details.
        /// </summary>
        [<Emit("$0.on('input-event', $1)")>]
        member inline _.onInputEvent(handler: Fable.Electron.EventInterfaces.Root.IOnInputEvent -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an input event is sent to the WebContents. See InputEvent for details.
        /// </summary>
        [<Emit("$0.once('input-event', $1)")>]
        member inline _.onceInputEvent(handler: Event -> InputEvent -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an input event is sent to the WebContents. See InputEvent for details.
        /// </summary>
        [<Emit("$0.once('input-event', $1)")>]
        member inline _.onceInputEvent(handler: Fable.Electron.EventInterfaces.Root.IOnInputEvent -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an input event is sent to the WebContents. See InputEvent for details.
        /// </summary>
        [<Emit("$0.off('input-event', $1)")>]
        member inline _.offInputEvent(handler: Event -> InputEvent -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an input event is sent to the WebContents. See InputEvent for details.
        /// </summary>
        [<Emit("$0.off('input-event', $1)")>]
        member inline _.offInputEvent(handler: Fable.Electron.EventInterfaces.Root.IOnInputEvent -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching the <c>keydown</c> and <c>keyup</c> events in the page. Calling <c>event.preventDefault</c> will prevent the page <c>keydown</c>/<c>keyup</c> events and
        /// the menu shortcuts.<br/><br/>To only prevent the menu shortcuts, use <c>setIgnoreMenuShortcuts</c>:
        /// </summary>
        [<Emit("$0.on('before-input-event', $1)")>]
        member inline _.onBeforeInputEvent(handler: Event -> WebContents.BeforeInputEvent.Input -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching the <c>keydown</c> and <c>keyup</c> events in the page. Calling <c>event.preventDefault</c> will prevent the page <c>keydown</c>/<c>keyup</c> events and
        /// the menu shortcuts.<br/><br/>To only prevent the menu shortcuts, use <c>setIgnoreMenuShortcuts</c>:
        /// </summary>
        [<Emit("$0.on('before-input-event', $1)")>]
        member inline _.onBeforeInputEvent
            (handler: Fable.Electron.EventInterfaces.Root.IOnBeforeInputEvent -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching the <c>keydown</c> and <c>keyup</c> events in the page. Calling <c>event.preventDefault</c> will prevent the page <c>keydown</c>/<c>keyup</c> events and
        /// the menu shortcuts.<br/><br/>To only prevent the menu shortcuts, use <c>setIgnoreMenuShortcuts</c>:
        /// </summary>
        [<Emit("$0.once('before-input-event', $1)")>]
        member inline _.onceBeforeInputEvent(handler: Event -> WebContents.BeforeInputEvent.Input -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching the <c>keydown</c> and <c>keyup</c> events in the page. Calling <c>event.preventDefault</c> will prevent the page <c>keydown</c>/<c>keyup</c> events and
        /// the menu shortcuts.<br/><br/>To only prevent the menu shortcuts, use <c>setIgnoreMenuShortcuts</c>:
        /// </summary>
        [<Emit("$0.once('before-input-event', $1)")>]
        member inline _.onceBeforeInputEvent
            (handler: Fable.Electron.EventInterfaces.Root.IOnBeforeInputEvent -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching the <c>keydown</c> and <c>keyup</c> events in the page. Calling <c>event.preventDefault</c> will prevent the page <c>keydown</c>/<c>keyup</c> events and
        /// the menu shortcuts.<br/><br/>To only prevent the menu shortcuts, use <c>setIgnoreMenuShortcuts</c>:
        /// </summary>
        [<Emit("$0.off('before-input-event', $1)")>]
        member inline _.offBeforeInputEvent(handler: Event -> WebContents.BeforeInputEvent.Input -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching the <c>keydown</c> and <c>keyup</c> events in the page. Calling <c>event.preventDefault</c> will prevent the page <c>keydown</c>/<c>keyup</c> events and
        /// the menu shortcuts.<br/><br/>To only prevent the menu shortcuts, use <c>setIgnoreMenuShortcuts</c>:
        /// </summary>
        [<Emit("$0.off('before-input-event', $1)")>]
        member inline _.offBeforeInputEvent
            (handler: Fable.Electron.EventInterfaces.Root.IOnBeforeInputEvent -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching mouse events in the page.<br/><br/>Calling <c>event.preventDefault</c> will prevent the page mouse events.
        /// </summary>
        [<Emit("$0.on('before-mouse-event', $1)")>]
        member inline _.onBeforeMouseEvent(handler: Event -> MouseInputEvent -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching mouse events in the page.<br/><br/>Calling <c>event.preventDefault</c> will prevent the page mouse events.
        /// </summary>
        [<Emit("$0.on('before-mouse-event', $1)")>]
        member inline _.onBeforeMouseEvent
            (handler: Fable.Electron.EventInterfaces.Root.IOnBeforeMouseEvent -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching mouse events in the page.<br/><br/>Calling <c>event.preventDefault</c> will prevent the page mouse events.
        /// </summary>
        [<Emit("$0.once('before-mouse-event', $1)")>]
        member inline _.onceBeforeMouseEvent(handler: Event -> MouseInputEvent -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching mouse events in the page.<br/><br/>Calling <c>event.preventDefault</c> will prevent the page mouse events.
        /// </summary>
        [<Emit("$0.once('before-mouse-event', $1)")>]
        member inline _.onceBeforeMouseEvent
            (handler: Fable.Electron.EventInterfaces.Root.IOnBeforeMouseEvent -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching mouse events in the page.<br/><br/>Calling <c>event.preventDefault</c> will prevent the page mouse events.
        /// </summary>
        [<Emit("$0.off('before-mouse-event', $1)")>]
        member inline _.offBeforeMouseEvent(handler: Event -> MouseInputEvent -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before dispatching mouse events in the page.<br/><br/>Calling <c>event.preventDefault</c> will prevent the page mouse events.
        /// </summary>
        [<Emit("$0.off('before-mouse-event', $1)")>]
        member inline _.offBeforeMouseEvent
            (handler: Fable.Electron.EventInterfaces.Root.IOnBeforeMouseEvent -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.on('enter-html-full-screen', $1)")>]
        member inline _.onEnterHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.once('enter-html-full-screen', $1)")>]
        member inline _.onceEnterHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.off('enter-html-full-screen', $1)")>]
        member inline _.offEnterHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.on('leave-html-full-screen', $1)")>]
        member inline _.onLeaveHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.once('leave-html-full-screen', $1)")>]
        member inline _.onceLeaveHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.off('leave-html-full-screen', $1)")>]
        member inline _.offLeaveHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the user is requesting to change the zoom level using the mouse wheel.
        /// </summary>
        [<Emit("$0.on('zoom-changed', $1)")>]
        member inline _.onZoomChanged(handler: Event -> Enums.WebContents.ZoomChanged.ZoomDirection -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the user is requesting to change the zoom level using the mouse wheel.
        /// </summary>
        [<Emit("$0.on('zoom-changed', $1)")>]
        member inline _.onZoomChanged(handler: Fable.Electron.EventInterfaces.Root.IOnZoomChanged -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the user is requesting to change the zoom level using the mouse wheel.
        /// </summary>
        [<Emit("$0.once('zoom-changed', $1)")>]
        member inline _.onceZoomChanged(handler: Event -> Enums.WebContents.ZoomChanged.ZoomDirection -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the user is requesting to change the zoom level using the mouse wheel.
        /// </summary>
        [<Emit("$0.once('zoom-changed', $1)")>]
        member inline _.onceZoomChanged(handler: Fable.Electron.EventInterfaces.Root.IOnZoomChanged -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the user is requesting to change the zoom level using the mouse wheel.
        /// </summary>
        [<Emit("$0.off('zoom-changed', $1)")>]
        member inline _.offZoomChanged(handler: Event -> Enums.WebContents.ZoomChanged.ZoomDirection -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the user is requesting to change the zoom level using the mouse wheel.
        /// </summary>
        [<Emit("$0.off('zoom-changed', $1)")>]
        member inline _.offZoomChanged(handler: Fable.Electron.EventInterfaces.Root.IOnZoomChanged -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> loses focus.
        /// </summary>
        [<Emit("$0.on('blur', $1)")>]
        member inline _.onBlur(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> loses focus.
        /// </summary>
        [<Emit("$0.once('blur', $1)")>]
        member inline _.onceBlur(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> loses focus.
        /// </summary>
        [<Emit("$0.off('blur', $1)")>]
        member inline _.offBlur(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> gains focus.<br/><br/>Note that on macOS, having focus means the <c>WebContents</c> is the first responder of window,
        /// so switching focus between windows would not trigger the <c>focus</c> and <c>blur</c> events of <c>WebContents</c>, as the first responder of
        /// each window is not changed.<br/><br/>The <c>focus</c> and <c>blur</c> events of <c>WebContents</c> should only be used to detect focus change between
        /// different <c>WebContents</c> and <c>BrowserView</c> in the same window.
        /// </summary>
        [<Emit("$0.on('focus', $1)")>]
        member inline _.onFocus(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> gains focus.<br/><br/>Note that on macOS, having focus means the <c>WebContents</c> is the first responder of window,
        /// so switching focus between windows would not trigger the <c>focus</c> and <c>blur</c> events of <c>WebContents</c>, as the first responder of
        /// each window is not changed.<br/><br/>The <c>focus</c> and <c>blur</c> events of <c>WebContents</c> should only be used to detect focus change between
        /// different <c>WebContents</c> and <c>BrowserView</c> in the same window.
        /// </summary>
        [<Emit("$0.once('focus', $1)")>]
        member inline _.onceFocus(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> gains focus.<br/><br/>Note that on macOS, having focus means the <c>WebContents</c> is the first responder of window,
        /// so switching focus between windows would not trigger the <c>focus</c> and <c>blur</c> events of <c>WebContents</c>, as the first responder of
        /// each window is not changed.<br/><br/>The <c>focus</c> and <c>blur</c> events of <c>WebContents</c> should only be used to detect focus change between
        /// different <c>WebContents</c> and <c>BrowserView</c> in the same window.
        /// </summary>
        [<Emit("$0.off('focus', $1)")>]
        member inline _.offFocus(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a link is clicked in DevTools or 'Open in new tab' is selected for a link in its
        /// context menu.
        /// </summary>
        [<Emit("$0.on('devtools-open-url', $1)")>]
        member inline _.onDevtoolsOpenUrl(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a link is clicked in DevTools or 'Open in new tab' is selected for a link in its
        /// context menu.
        /// </summary>
        [<Emit("$0.on('devtools-open-url', $1)")>]
        member inline _.onDevtoolsOpenUrl
            (handler: Fable.Electron.EventInterfaces.Root.IOnDevtoolsOpenUrl -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a link is clicked in DevTools or 'Open in new tab' is selected for a link in its
        /// context menu.
        /// </summary>
        [<Emit("$0.once('devtools-open-url', $1)")>]
        member inline _.onceDevtoolsOpenUrl(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a link is clicked in DevTools or 'Open in new tab' is selected for a link in its
        /// context menu.
        /// </summary>
        [<Emit("$0.once('devtools-open-url', $1)")>]
        member inline _.onceDevtoolsOpenUrl
            (handler: Fable.Electron.EventInterfaces.Root.IOnDevtoolsOpenUrl -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a link is clicked in DevTools or 'Open in new tab' is selected for a link in its
        /// context menu.
        /// </summary>
        [<Emit("$0.off('devtools-open-url', $1)")>]
        member inline _.offDevtoolsOpenUrl(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a link is clicked in DevTools or 'Open in new tab' is selected for a link in its
        /// context menu.
        /// </summary>
        [<Emit("$0.off('devtools-open-url', $1)")>]
        member inline _.offDevtoolsOpenUrl
            (handler: Fable.Electron.EventInterfaces.Root.IOnDevtoolsOpenUrl -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.on('devtools-search-query', $1)")>]
        member inline _.onDevtoolsSearchQuery(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.on('devtools-search-query', $1)")>]
        member inline _.onDevtoolsSearchQuery
            (handler: Fable.Electron.EventInterfaces.Root.IOnDevtoolsSearchQuery -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.once('devtools-search-query', $1)")>]
        member inline _.onceDevtoolsSearchQuery(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.once('devtools-search-query', $1)")>]
        member inline _.onceDevtoolsSearchQuery
            (handler: Fable.Electron.EventInterfaces.Root.IOnDevtoolsSearchQuery -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.off('devtools-search-query', $1)")>]
        member inline _.offDevtoolsSearchQuery(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when 'Search' is selected for text in its context menu.
        /// </summary>
        [<Emit("$0.off('devtools-search-query', $1)")>]
        member inline _.offDevtoolsSearchQuery
            (handler: Fable.Electron.EventInterfaces.Root.IOnDevtoolsSearchQuery -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is opened.
        /// </summary>
        [<Emit("$0.on('devtools-opened', $1)")>]
        member inline _.onDevtoolsOpened(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is opened.
        /// </summary>
        [<Emit("$0.once('devtools-opened', $1)")>]
        member inline _.onceDevtoolsOpened(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is opened.
        /// </summary>
        [<Emit("$0.off('devtools-opened', $1)")>]
        member inline _.offDevtoolsOpened(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is closed.
        /// </summary>
        [<Emit("$0.on('devtools-closed', $1)")>]
        member inline _.onDevtoolsClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is closed.
        /// </summary>
        [<Emit("$0.once('devtools-closed', $1)")>]
        member inline _.onceDevtoolsClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is closed.
        /// </summary>
        [<Emit("$0.off('devtools-closed', $1)")>]
        member inline _.offDevtoolsClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is focused / opened.
        /// </summary>
        [<Emit("$0.on('devtools-focused', $1)")>]
        member inline _.onDevtoolsFocused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is focused / opened.
        /// </summary>
        [<Emit("$0.once('devtools-focused', $1)")>]
        member inline _.onceDevtoolsFocused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when DevTools is focused / opened.
        /// </summary>
        [<Emit("$0.off('devtools-focused', $1)")>]
        member inline _.offDevtoolsFocused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>.<br/><br/>The usage is the same with the <c>certificate-error</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.on('certificate-error', $1)")>]
        member inline _.onCertificateError
            (handler: Event -> string -> string -> Certificate -> bool -> unit -> bool -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>.<br/><br/>The usage is the same with the <c>certificate-error</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.on('certificate-error', $1)")>]
        member inline _.onCertificateError
            (handler: Fable.Electron.EventInterfaces.Root.IOnCertificateError -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>.<br/><br/>The usage is the same with the <c>certificate-error</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.once('certificate-error', $1)")>]
        member inline _.onceCertificateError
            (handler: Event -> string -> string -> Certificate -> bool -> unit -> bool -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>.<br/><br/>The usage is the same with the <c>certificate-error</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.once('certificate-error', $1)")>]
        member inline _.onceCertificateError
            (handler: Fable.Electron.EventInterfaces.Root.IOnCertificateError -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>.<br/><br/>The usage is the same with the <c>certificate-error</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.off('certificate-error', $1)")>]
        member inline _.offCertificateError
            (handler: Event -> string -> string -> Certificate -> bool -> unit -> bool -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>.<br/><br/>The usage is the same with the <c>certificate-error</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.off('certificate-error', $1)")>]
        member inline _.offCertificateError
            (handler: Fable.Electron.EventInterfaces.Root.IOnCertificateError -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The usage is the same with the <c>select-client-certificate</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.on('select-client-certificate', $1)")>]
        member inline _.onSelectClientCertificate
            (handler: Event -> URL -> Certificate[] -> Certificate -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The usage is the same with the <c>select-client-certificate</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.on('select-client-certificate', $1)")>]
        member inline _.onSelectClientCertificate
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectClientCertificate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The usage is the same with the <c>select-client-certificate</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.once('select-client-certificate', $1)")>]
        member inline _.onceSelectClientCertificate
            (handler: Event -> URL -> Certificate[] -> Certificate -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The usage is the same with the <c>select-client-certificate</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.once('select-client-certificate', $1)")>]
        member inline _.onceSelectClientCertificate
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectClientCertificate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The usage is the same with the <c>select-client-certificate</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.off('select-client-certificate', $1)")>]
        member inline _.offSelectClientCertificate
            (handler: Event -> URL -> Certificate[] -> Certificate -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The usage is the same with the <c>select-client-certificate</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.off('select-client-certificate', $1)")>]
        member inline _.offSelectClientCertificate
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectClientCertificate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> wants to do basic auth.<br/><br/>The usage is the same with the <c>login</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.on('login', $1)")>]
        member inline _.onLogin
            (
                handler:
                    Event
                        -> WebContents.Login.AuthenticationResponseDetails
                        -> WebContents.Login.AuthInfo
                        -> WebContents.Login.Callback
                        -> unit
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> wants to do basic auth.<br/><br/>The usage is the same with the <c>login</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.on('login', $1)")>]
        member inline _.onLogin(handler: Fable.Electron.EventInterfaces.Root.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> wants to do basic auth.<br/><br/>The usage is the same with the <c>login</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.once('login', $1)")>]
        member inline _.onceLogin
            (
                handler:
                    Event
                        -> WebContents.Login.AuthenticationResponseDetails
                        -> WebContents.Login.AuthInfo
                        -> WebContents.Login.Callback
                        -> unit
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> wants to do basic auth.<br/><br/>The usage is the same with the <c>login</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.once('login', $1)")>]
        member inline _.onceLogin(handler: Fable.Electron.EventInterfaces.Root.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> wants to do basic auth.<br/><br/>The usage is the same with the <c>login</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.off('login', $1)")>]
        member inline _.offLogin
            (
                handler:
                    Event
                        -> WebContents.Login.AuthenticationResponseDetails
                        -> WebContents.Login.AuthInfo
                        -> WebContents.Login.Callback
                        -> unit
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> wants to do basic auth.<br/><br/>The usage is the same with the <c>login</c> event of <c>app</c>.
        /// </summary>
        [<Emit("$0.off('login', $1)")>]
        member inline _.offLogin(handler: Fable.Electron.EventInterfaces.Root.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a result is available for <c>webContents.findInPage</c> request.
        /// </summary>
        [<Emit("$0.on('found-in-page', $1)")>]
        member inline _.onFoundInPage(handler: Event -> WebContents.FoundInPage.Result -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a result is available for <c>webContents.findInPage</c> request.
        /// </summary>
        [<Emit("$0.on('found-in-page', $1)")>]
        member inline _.onFoundInPage(handler: Fable.Electron.EventInterfaces.Root.IOnFoundInPage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a result is available for <c>webContents.findInPage</c> request.
        /// </summary>
        [<Emit("$0.once('found-in-page', $1)")>]
        member inline _.onceFoundInPage(handler: Event -> WebContents.FoundInPage.Result -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a result is available for <c>webContents.findInPage</c> request.
        /// </summary>
        [<Emit("$0.once('found-in-page', $1)")>]
        member inline _.onceFoundInPage(handler: Fable.Electron.EventInterfaces.Root.IOnFoundInPage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a result is available for <c>webContents.findInPage</c> request.
        /// </summary>
        [<Emit("$0.off('found-in-page', $1)")>]
        member inline _.offFoundInPage(handler: Event -> WebContents.FoundInPage.Result -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a result is available for <c>webContents.findInPage</c> request.
        /// </summary>
        [<Emit("$0.off('found-in-page', $1)")>]
        member inline _.offFoundInPage(handler: Fable.Electron.EventInterfaces.Root.IOnFoundInPage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media starts playing.
        /// </summary>
        [<Emit("$0.on('media-started-playing', $1)")>]
        member inline _.onMediaStartedPlaying(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media starts playing.
        /// </summary>
        [<Emit("$0.once('media-started-playing', $1)")>]
        member inline _.onceMediaStartedPlaying(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media starts playing.
        /// </summary>
        [<Emit("$0.off('media-started-playing', $1)")>]
        member inline _.offMediaStartedPlaying(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media is paused or done playing.
        /// </summary>
        [<Emit("$0.on('media-paused', $1)")>]
        member inline _.onMediaPaused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media is paused or done playing.
        /// </summary>
        [<Emit("$0.once('media-paused', $1)")>]
        member inline _.onceMediaPaused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media is paused or done playing.
        /// </summary>
        [<Emit("$0.off('media-paused', $1)")>]
        member inline _.offMediaPaused(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media becomes audible or inaudible.
        /// </summary>
        [<Emit("$0.on('audio-state-changed', $1)")>]
        member inline _.onAudioStateChanged(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media becomes audible or inaudible.
        /// </summary>
        [<Emit("$0.once('audio-state-changed', $1)")>]
        member inline _.onceAudioStateChanged(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when media becomes audible or inaudible.
        /// </summary>
        [<Emit("$0.off('audio-state-changed', $1)")>]
        member inline _.offAudioStateChanged(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a page's theme color changes. This is usually due to encountering a meta tag:
        /// </summary>
        [<Emit("$0.on('did-change-theme-color', $1)")>]
        member inline _.onDidChangeThemeColor(handler: Event -> Option<string> -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a page's theme color changes. This is usually due to encountering a meta tag:
        /// </summary>
        [<Emit("$0.on('did-change-theme-color', $1)")>]
        member inline _.onDidChangeThemeColor
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidChangeThemeColor -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a page's theme color changes. This is usually due to encountering a meta tag:
        /// </summary>
        [<Emit("$0.once('did-change-theme-color', $1)")>]
        member inline _.onceDidChangeThemeColor(handler: Event -> Option<string> -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a page's theme color changes. This is usually due to encountering a meta tag:
        /// </summary>
        [<Emit("$0.once('did-change-theme-color', $1)")>]
        member inline _.onceDidChangeThemeColor
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidChangeThemeColor -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a page's theme color changes. This is usually due to encountering a meta tag:
        /// </summary>
        [<Emit("$0.off('did-change-theme-color', $1)")>]
        member inline _.offDidChangeThemeColor(handler: Event -> Option<string> -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a page's theme color changes. This is usually due to encountering a meta tag:
        /// </summary>
        [<Emit("$0.off('did-change-theme-color', $1)")>]
        member inline _.offDidChangeThemeColor
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidChangeThemeColor -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when mouse moves over a link or the keyboard moves the focus to a link.
        /// </summary>
        [<Emit("$0.on('update-target-url', $1)")>]
        member inline _.onUpdateTargetUrl(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when mouse moves over a link or the keyboard moves the focus to a link.
        /// </summary>
        [<Emit("$0.on('update-target-url', $1)")>]
        member inline _.onUpdateTargetUrl
            (handler: Fable.Electron.EventInterfaces.Root.IOnUpdateTargetUrl -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when mouse moves over a link or the keyboard moves the focus to a link.
        /// </summary>
        [<Emit("$0.once('update-target-url', $1)")>]
        member inline _.onceUpdateTargetUrl(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when mouse moves over a link or the keyboard moves the focus to a link.
        /// </summary>
        [<Emit("$0.once('update-target-url', $1)")>]
        member inline _.onceUpdateTargetUrl
            (handler: Fable.Electron.EventInterfaces.Root.IOnUpdateTargetUrl -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when mouse moves over a link or the keyboard moves the focus to a link.
        /// </summary>
        [<Emit("$0.off('update-target-url', $1)")>]
        member inline _.offUpdateTargetUrl(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when mouse moves over a link or the keyboard moves the focus to a link.
        /// </summary>
        [<Emit("$0.off('update-target-url', $1)")>]
        member inline _.offUpdateTargetUrl
            (handler: Fable.Electron.EventInterfaces.Root.IOnUpdateTargetUrl -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the cursor's type changes. The <c>type</c> parameter can be <c>pointer</c>, <c>crosshair</c>, <c>hand</c>, <c>text</c>, <c>wait</c>, <c>help</c>, <c>e-resize</c>, <c>n-resize</c>, <c>ne-resize</c>,
        /// <c>nw-resize</c>, <c>s-resize</c>, <c>se-resize</c>, <c>sw-resize</c>, <c>w-resize</c>, <c>ns-resize</c>, <c>ew-resize</c>, <c>nesw-resize</c>, <c>nwse-resize</c>, <c>col-resize</c>, <c>row-resize</c>, <c>m-panning</c>, <c>m-panning-vertical</c>, <c>m-panning-horizontal</c>, <c>e-panning</c>, <c>n-panning</c>, <c>ne-panning</c>, <c>nw-panning</c>, <c>s-panning</c>, <c>se-panning</c>,
        /// <c>sw-panning</c>, <c>w-panning</c>, <c>move</c>, <c>vertical-text</c>, <c>cell</c>, <c>context-menu</c>, <c>alias</c>, <c>progress</c>, <c>nodrop</c>, <c>copy</c>, <c>none</c>, <c>not-allowed</c>, <c>zoom-in</c>, <c>zoom-out</c>, <c>grab</c>, <c>grabbing</c>, <c>custom</c>, <c>null</c>, <c>drag-drop-none</c>, <c>drag-drop-move</c>,
        /// <c>drag-drop-copy</c>, <c>drag-drop-link</c>, <c>ns-no-resize</c>, <c>ew-no-resize</c>, <c>nesw-no-resize</c>, <c>nwse-no-resize</c>, or <c>default</c>.<br/><br/>If the <c>type</c> parameter is <c>custom</c>, the <c>image</c> parameter will hold the custom
        /// cursor image in a <c>NativeImage</c>, and <c>scale</c>, <c>size</c> and <c>hotspot</c> will hold additional information about the custom cursor.
        /// </summary>
        [<Emit("$0.on('cursor-changed', $1)")>]
        member inline _.onCursorChanged
            (handler: Event -> string -> NativeImage -> float -> Size -> Point -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the cursor's type changes. The <c>type</c> parameter can be <c>pointer</c>, <c>crosshair</c>, <c>hand</c>, <c>text</c>, <c>wait</c>, <c>help</c>, <c>e-resize</c>, <c>n-resize</c>, <c>ne-resize</c>,
        /// <c>nw-resize</c>, <c>s-resize</c>, <c>se-resize</c>, <c>sw-resize</c>, <c>w-resize</c>, <c>ns-resize</c>, <c>ew-resize</c>, <c>nesw-resize</c>, <c>nwse-resize</c>, <c>col-resize</c>, <c>row-resize</c>, <c>m-panning</c>, <c>m-panning-vertical</c>, <c>m-panning-horizontal</c>, <c>e-panning</c>, <c>n-panning</c>, <c>ne-panning</c>, <c>nw-panning</c>, <c>s-panning</c>, <c>se-panning</c>,
        /// <c>sw-panning</c>, <c>w-panning</c>, <c>move</c>, <c>vertical-text</c>, <c>cell</c>, <c>context-menu</c>, <c>alias</c>, <c>progress</c>, <c>nodrop</c>, <c>copy</c>, <c>none</c>, <c>not-allowed</c>, <c>zoom-in</c>, <c>zoom-out</c>, <c>grab</c>, <c>grabbing</c>, <c>custom</c>, <c>null</c>, <c>drag-drop-none</c>, <c>drag-drop-move</c>,
        /// <c>drag-drop-copy</c>, <c>drag-drop-link</c>, <c>ns-no-resize</c>, <c>ew-no-resize</c>, <c>nesw-no-resize</c>, <c>nwse-no-resize</c>, or <c>default</c>.<br/><br/>If the <c>type</c> parameter is <c>custom</c>, the <c>image</c> parameter will hold the custom
        /// cursor image in a <c>NativeImage</c>, and <c>scale</c>, <c>size</c> and <c>hotspot</c> will hold additional information about the custom cursor.
        /// </summary>
        [<Emit("$0.on('cursor-changed', $1)")>]
        member inline _.onCursorChanged(handler: Fable.Electron.EventInterfaces.Root.IOnCursorChanged -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the cursor's type changes. The <c>type</c> parameter can be <c>pointer</c>, <c>crosshair</c>, <c>hand</c>, <c>text</c>, <c>wait</c>, <c>help</c>, <c>e-resize</c>, <c>n-resize</c>, <c>ne-resize</c>,
        /// <c>nw-resize</c>, <c>s-resize</c>, <c>se-resize</c>, <c>sw-resize</c>, <c>w-resize</c>, <c>ns-resize</c>, <c>ew-resize</c>, <c>nesw-resize</c>, <c>nwse-resize</c>, <c>col-resize</c>, <c>row-resize</c>, <c>m-panning</c>, <c>m-panning-vertical</c>, <c>m-panning-horizontal</c>, <c>e-panning</c>, <c>n-panning</c>, <c>ne-panning</c>, <c>nw-panning</c>, <c>s-panning</c>, <c>se-panning</c>,
        /// <c>sw-panning</c>, <c>w-panning</c>, <c>move</c>, <c>vertical-text</c>, <c>cell</c>, <c>context-menu</c>, <c>alias</c>, <c>progress</c>, <c>nodrop</c>, <c>copy</c>, <c>none</c>, <c>not-allowed</c>, <c>zoom-in</c>, <c>zoom-out</c>, <c>grab</c>, <c>grabbing</c>, <c>custom</c>, <c>null</c>, <c>drag-drop-none</c>, <c>drag-drop-move</c>,
        /// <c>drag-drop-copy</c>, <c>drag-drop-link</c>, <c>ns-no-resize</c>, <c>ew-no-resize</c>, <c>nesw-no-resize</c>, <c>nwse-no-resize</c>, or <c>default</c>.<br/><br/>If the <c>type</c> parameter is <c>custom</c>, the <c>image</c> parameter will hold the custom
        /// cursor image in a <c>NativeImage</c>, and <c>scale</c>, <c>size</c> and <c>hotspot</c> will hold additional information about the custom cursor.
        /// </summary>
        [<Emit("$0.once('cursor-changed', $1)")>]
        member inline _.onceCursorChanged
            (handler: Event -> string -> NativeImage -> float -> Size -> Point -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the cursor's type changes. The <c>type</c> parameter can be <c>pointer</c>, <c>crosshair</c>, <c>hand</c>, <c>text</c>, <c>wait</c>, <c>help</c>, <c>e-resize</c>, <c>n-resize</c>, <c>ne-resize</c>,
        /// <c>nw-resize</c>, <c>s-resize</c>, <c>se-resize</c>, <c>sw-resize</c>, <c>w-resize</c>, <c>ns-resize</c>, <c>ew-resize</c>, <c>nesw-resize</c>, <c>nwse-resize</c>, <c>col-resize</c>, <c>row-resize</c>, <c>m-panning</c>, <c>m-panning-vertical</c>, <c>m-panning-horizontal</c>, <c>e-panning</c>, <c>n-panning</c>, <c>ne-panning</c>, <c>nw-panning</c>, <c>s-panning</c>, <c>se-panning</c>,
        /// <c>sw-panning</c>, <c>w-panning</c>, <c>move</c>, <c>vertical-text</c>, <c>cell</c>, <c>context-menu</c>, <c>alias</c>, <c>progress</c>, <c>nodrop</c>, <c>copy</c>, <c>none</c>, <c>not-allowed</c>, <c>zoom-in</c>, <c>zoom-out</c>, <c>grab</c>, <c>grabbing</c>, <c>custom</c>, <c>null</c>, <c>drag-drop-none</c>, <c>drag-drop-move</c>,
        /// <c>drag-drop-copy</c>, <c>drag-drop-link</c>, <c>ns-no-resize</c>, <c>ew-no-resize</c>, <c>nesw-no-resize</c>, <c>nwse-no-resize</c>, or <c>default</c>.<br/><br/>If the <c>type</c> parameter is <c>custom</c>, the <c>image</c> parameter will hold the custom
        /// cursor image in a <c>NativeImage</c>, and <c>scale</c>, <c>size</c> and <c>hotspot</c> will hold additional information about the custom cursor.
        /// </summary>
        [<Emit("$0.once('cursor-changed', $1)")>]
        member inline _.onceCursorChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnCursorChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the cursor's type changes. The <c>type</c> parameter can be <c>pointer</c>, <c>crosshair</c>, <c>hand</c>, <c>text</c>, <c>wait</c>, <c>help</c>, <c>e-resize</c>, <c>n-resize</c>, <c>ne-resize</c>,
        /// <c>nw-resize</c>, <c>s-resize</c>, <c>se-resize</c>, <c>sw-resize</c>, <c>w-resize</c>, <c>ns-resize</c>, <c>ew-resize</c>, <c>nesw-resize</c>, <c>nwse-resize</c>, <c>col-resize</c>, <c>row-resize</c>, <c>m-panning</c>, <c>m-panning-vertical</c>, <c>m-panning-horizontal</c>, <c>e-panning</c>, <c>n-panning</c>, <c>ne-panning</c>, <c>nw-panning</c>, <c>s-panning</c>, <c>se-panning</c>,
        /// <c>sw-panning</c>, <c>w-panning</c>, <c>move</c>, <c>vertical-text</c>, <c>cell</c>, <c>context-menu</c>, <c>alias</c>, <c>progress</c>, <c>nodrop</c>, <c>copy</c>, <c>none</c>, <c>not-allowed</c>, <c>zoom-in</c>, <c>zoom-out</c>, <c>grab</c>, <c>grabbing</c>, <c>custom</c>, <c>null</c>, <c>drag-drop-none</c>, <c>drag-drop-move</c>,
        /// <c>drag-drop-copy</c>, <c>drag-drop-link</c>, <c>ns-no-resize</c>, <c>ew-no-resize</c>, <c>nesw-no-resize</c>, <c>nwse-no-resize</c>, or <c>default</c>.<br/><br/>If the <c>type</c> parameter is <c>custom</c>, the <c>image</c> parameter will hold the custom
        /// cursor image in a <c>NativeImage</c>, and <c>scale</c>, <c>size</c> and <c>hotspot</c> will hold additional information about the custom cursor.
        /// </summary>
        [<Emit("$0.off('cursor-changed', $1)")>]
        member inline _.offCursorChanged
            (handler: Event -> string -> NativeImage -> float -> Size -> Point -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the cursor's type changes. The <c>type</c> parameter can be <c>pointer</c>, <c>crosshair</c>, <c>hand</c>, <c>text</c>, <c>wait</c>, <c>help</c>, <c>e-resize</c>, <c>n-resize</c>, <c>ne-resize</c>,
        /// <c>nw-resize</c>, <c>s-resize</c>, <c>se-resize</c>, <c>sw-resize</c>, <c>w-resize</c>, <c>ns-resize</c>, <c>ew-resize</c>, <c>nesw-resize</c>, <c>nwse-resize</c>, <c>col-resize</c>, <c>row-resize</c>, <c>m-panning</c>, <c>m-panning-vertical</c>, <c>m-panning-horizontal</c>, <c>e-panning</c>, <c>n-panning</c>, <c>ne-panning</c>, <c>nw-panning</c>, <c>s-panning</c>, <c>se-panning</c>,
        /// <c>sw-panning</c>, <c>w-panning</c>, <c>move</c>, <c>vertical-text</c>, <c>cell</c>, <c>context-menu</c>, <c>alias</c>, <c>progress</c>, <c>nodrop</c>, <c>copy</c>, <c>none</c>, <c>not-allowed</c>, <c>zoom-in</c>, <c>zoom-out</c>, <c>grab</c>, <c>grabbing</c>, <c>custom</c>, <c>null</c>, <c>drag-drop-none</c>, <c>drag-drop-move</c>,
        /// <c>drag-drop-copy</c>, <c>drag-drop-link</c>, <c>ns-no-resize</c>, <c>ew-no-resize</c>, <c>nesw-no-resize</c>, <c>nwse-no-resize</c>, or <c>default</c>.<br/><br/>If the <c>type</c> parameter is <c>custom</c>, the <c>image</c> parameter will hold the custom
        /// cursor image in a <c>NativeImage</c>, and <c>scale</c>, <c>size</c> and <c>hotspot</c> will hold additional information about the custom cursor.
        /// </summary>
        [<Emit("$0.off('cursor-changed', $1)")>]
        member inline _.offCursorChanged(handler: Fable.Electron.EventInterfaces.Root.IOnCursorChanged -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is a new context menu that needs to be handled.
        /// </summary>
        [<Emit("$0.on('context-menu', $1)")>]
        member inline _.onContextMenu(handler: Event -> WebContents.ContextMenu.Params -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is a new context menu that needs to be handled.
        /// </summary>
        [<Emit("$0.on('context-menu', $1)")>]
        member inline _.onContextMenu(handler: Fable.Electron.EventInterfaces.Root.IOnContextMenu -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is a new context menu that needs to be handled.
        /// </summary>
        [<Emit("$0.once('context-menu', $1)")>]
        member inline _.onceContextMenu(handler: Event -> WebContents.ContextMenu.Params -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is a new context menu that needs to be handled.
        /// </summary>
        [<Emit("$0.once('context-menu', $1)")>]
        member inline _.onceContextMenu(handler: Fable.Electron.EventInterfaces.Root.IOnContextMenu -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is a new context menu that needs to be handled.
        /// </summary>
        [<Emit("$0.off('context-menu', $1)")>]
        member inline _.offContextMenu(handler: Event -> WebContents.ContextMenu.Params -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is a new context menu that needs to be handled.
        /// </summary>
        [<Emit("$0.off('context-menu', $1)")>]
        member inline _.offContextMenu(handler: Fable.Electron.EventInterfaces.Root.IOnContextMenu -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a bluetooth device needs to be selected when a call to <c>navigator.bluetooth.requestDevice</c> is made. <c>callback</c> should be called
        /// with the <c>deviceId</c> of the device to be selected.  Passing an empty string to <c>callback</c> will cancel the request.<br/><br/>If
        /// no event listener is added for this event, all bluetooth requests will be cancelled.<br/><br/>If <c>event.preventDefault</c> is not called when handling
        /// this event, the first available device will be automatically selected.<br/><br/>Due to the nature of bluetooth, scanning for devices when <c>navigator.bluetooth.requestDevice</c>
        /// is called may take time and will cause <c>select-bluetooth-device</c> to fire multiple times until <c>callback</c> is called with either a
        /// device id or an empty string to cancel the request.
        /// </summary>
        [<Emit("$0.on('select-bluetooth-device', $1)")>]
        member inline _.onSelectBluetoothDevice(handler: Event -> BluetoothDevice[] -> string -> unit -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a bluetooth device needs to be selected when a call to <c>navigator.bluetooth.requestDevice</c> is made. <c>callback</c> should be called
        /// with the <c>deviceId</c> of the device to be selected.  Passing an empty string to <c>callback</c> will cancel the request.<br/><br/>If
        /// no event listener is added for this event, all bluetooth requests will be cancelled.<br/><br/>If <c>event.preventDefault</c> is not called when handling
        /// this event, the first available device will be automatically selected.<br/><br/>Due to the nature of bluetooth, scanning for devices when <c>navigator.bluetooth.requestDevice</c>
        /// is called may take time and will cause <c>select-bluetooth-device</c> to fire multiple times until <c>callback</c> is called with either a
        /// device id or an empty string to cancel the request.
        /// </summary>
        [<Emit("$0.on('select-bluetooth-device', $1)")>]
        member inline _.onSelectBluetoothDevice
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectBluetoothDevice -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a bluetooth device needs to be selected when a call to <c>navigator.bluetooth.requestDevice</c> is made. <c>callback</c> should be called
        /// with the <c>deviceId</c> of the device to be selected.  Passing an empty string to <c>callback</c> will cancel the request.<br/><br/>If
        /// no event listener is added for this event, all bluetooth requests will be cancelled.<br/><br/>If <c>event.preventDefault</c> is not called when handling
        /// this event, the first available device will be automatically selected.<br/><br/>Due to the nature of bluetooth, scanning for devices when <c>navigator.bluetooth.requestDevice</c>
        /// is called may take time and will cause <c>select-bluetooth-device</c> to fire multiple times until <c>callback</c> is called with either a
        /// device id or an empty string to cancel the request.
        /// </summary>
        [<Emit("$0.once('select-bluetooth-device', $1)")>]
        member inline _.onceSelectBluetoothDevice
            (handler: Event -> BluetoothDevice[] -> string -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a bluetooth device needs to be selected when a call to <c>navigator.bluetooth.requestDevice</c> is made. <c>callback</c> should be called
        /// with the <c>deviceId</c> of the device to be selected.  Passing an empty string to <c>callback</c> will cancel the request.<br/><br/>If
        /// no event listener is added for this event, all bluetooth requests will be cancelled.<br/><br/>If <c>event.preventDefault</c> is not called when handling
        /// this event, the first available device will be automatically selected.<br/><br/>Due to the nature of bluetooth, scanning for devices when <c>navigator.bluetooth.requestDevice</c>
        /// is called may take time and will cause <c>select-bluetooth-device</c> to fire multiple times until <c>callback</c> is called with either a
        /// device id or an empty string to cancel the request.
        /// </summary>
        [<Emit("$0.once('select-bluetooth-device', $1)")>]
        member inline _.onceSelectBluetoothDevice
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectBluetoothDevice -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a bluetooth device needs to be selected when a call to <c>navigator.bluetooth.requestDevice</c> is made. <c>callback</c> should be called
        /// with the <c>deviceId</c> of the device to be selected.  Passing an empty string to <c>callback</c> will cancel the request.<br/><br/>If
        /// no event listener is added for this event, all bluetooth requests will be cancelled.<br/><br/>If <c>event.preventDefault</c> is not called when handling
        /// this event, the first available device will be automatically selected.<br/><br/>Due to the nature of bluetooth, scanning for devices when <c>navigator.bluetooth.requestDevice</c>
        /// is called may take time and will cause <c>select-bluetooth-device</c> to fire multiple times until <c>callback</c> is called with either a
        /// device id or an empty string to cancel the request.
        /// </summary>
        [<Emit("$0.off('select-bluetooth-device', $1)")>]
        member inline _.offSelectBluetoothDevice(handler: Event -> BluetoothDevice[] -> string -> unit -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a bluetooth device needs to be selected when a call to <c>navigator.bluetooth.requestDevice</c> is made. <c>callback</c> should be called
        /// with the <c>deviceId</c> of the device to be selected.  Passing an empty string to <c>callback</c> will cancel the request.<br/><br/>If
        /// no event listener is added for this event, all bluetooth requests will be cancelled.<br/><br/>If <c>event.preventDefault</c> is not called when handling
        /// this event, the first available device will be automatically selected.<br/><br/>Due to the nature of bluetooth, scanning for devices when <c>navigator.bluetooth.requestDevice</c>
        /// is called may take time and will cause <c>select-bluetooth-device</c> to fire multiple times until <c>callback</c> is called with either a
        /// device id or an empty string to cancel the request.
        /// </summary>
        [<Emit("$0.off('select-bluetooth-device', $1)")>]
        member inline _.offSelectBluetoothDevice
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectBluetoothDevice -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new frame is generated. Only the dirty area is passed in the buffer.<br/><br/>When using shared texture (set
        /// <c>webPreferences.offscreen.useSharedTexture</c> to <c>true</c>) feature, you can pass the texture handle to external rendering pipeline without the overhead of copying data
        /// between CPU and GPU memory, with Chromium's hardware acceleration support. This feature is helpful for high-performance rendering scenarios.<br/><br/>Only a limited
        /// number of textures can exist at the same time, so it's important that you call <c>texture.release()</c> as soon as you're
        /// done with the texture. By managing the texture lifecycle by yourself, you can safely pass the <c>texture.textureInfo</c> to other processes
        /// through IPC.<br/><br/>More details can be found in the offscreen rendering tutorial. To learn about how to handle the texture in
        /// native code, refer to offscreen rendering's code documentation..
        /// </summary>
        [<Emit("$0.on('paint', $1)")>]
        member inline _.onPaint(handler: Details -> Rectangle -> NativeImage -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new frame is generated. Only the dirty area is passed in the buffer.<br/><br/>When using shared texture (set
        /// <c>webPreferences.offscreen.useSharedTexture</c> to <c>true</c>) feature, you can pass the texture handle to external rendering pipeline without the overhead of copying data
        /// between CPU and GPU memory, with Chromium's hardware acceleration support. This feature is helpful for high-performance rendering scenarios.<br/><br/>Only a limited
        /// number of textures can exist at the same time, so it's important that you call <c>texture.release()</c> as soon as you're
        /// done with the texture. By managing the texture lifecycle by yourself, you can safely pass the <c>texture.textureInfo</c> to other processes
        /// through IPC.<br/><br/>More details can be found in the offscreen rendering tutorial. To learn about how to handle the texture in
        /// native code, refer to offscreen rendering's code documentation..
        /// </summary>
        [<Emit("$0.on('paint', $1)")>]
        member inline _.onPaint(handler: Fable.Electron.EventInterfaces.Root.IOnPaint -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new frame is generated. Only the dirty area is passed in the buffer.<br/><br/>When using shared texture (set
        /// <c>webPreferences.offscreen.useSharedTexture</c> to <c>true</c>) feature, you can pass the texture handle to external rendering pipeline without the overhead of copying data
        /// between CPU and GPU memory, with Chromium's hardware acceleration support. This feature is helpful for high-performance rendering scenarios.<br/><br/>Only a limited
        /// number of textures can exist at the same time, so it's important that you call <c>texture.release()</c> as soon as you're
        /// done with the texture. By managing the texture lifecycle by yourself, you can safely pass the <c>texture.textureInfo</c> to other processes
        /// through IPC.<br/><br/>More details can be found in the offscreen rendering tutorial. To learn about how to handle the texture in
        /// native code, refer to offscreen rendering's code documentation..
        /// </summary>
        [<Emit("$0.once('paint', $1)")>]
        member inline _.oncePaint(handler: Details -> Rectangle -> NativeImage -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new frame is generated. Only the dirty area is passed in the buffer.<br/><br/>When using shared texture (set
        /// <c>webPreferences.offscreen.useSharedTexture</c> to <c>true</c>) feature, you can pass the texture handle to external rendering pipeline without the overhead of copying data
        /// between CPU and GPU memory, with Chromium's hardware acceleration support. This feature is helpful for high-performance rendering scenarios.<br/><br/>Only a limited
        /// number of textures can exist at the same time, so it's important that you call <c>texture.release()</c> as soon as you're
        /// done with the texture. By managing the texture lifecycle by yourself, you can safely pass the <c>texture.textureInfo</c> to other processes
        /// through IPC.<br/><br/>More details can be found in the offscreen rendering tutorial. To learn about how to handle the texture in
        /// native code, refer to offscreen rendering's code documentation..
        /// </summary>
        [<Emit("$0.once('paint', $1)")>]
        member inline _.oncePaint(handler: Fable.Electron.EventInterfaces.Root.IOnPaint -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new frame is generated. Only the dirty area is passed in the buffer.<br/><br/>When using shared texture (set
        /// <c>webPreferences.offscreen.useSharedTexture</c> to <c>true</c>) feature, you can pass the texture handle to external rendering pipeline without the overhead of copying data
        /// between CPU and GPU memory, with Chromium's hardware acceleration support. This feature is helpful for high-performance rendering scenarios.<br/><br/>Only a limited
        /// number of textures can exist at the same time, so it's important that you call <c>texture.release()</c> as soon as you're
        /// done with the texture. By managing the texture lifecycle by yourself, you can safely pass the <c>texture.textureInfo</c> to other processes
        /// through IPC.<br/><br/>More details can be found in the offscreen rendering tutorial. To learn about how to handle the texture in
        /// native code, refer to offscreen rendering's code documentation..
        /// </summary>
        [<Emit("$0.off('paint', $1)")>]
        member inline _.offPaint(handler: Details -> Rectangle -> NativeImage -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new frame is generated. Only the dirty area is passed in the buffer.<br/><br/>When using shared texture (set
        /// <c>webPreferences.offscreen.useSharedTexture</c> to <c>true</c>) feature, you can pass the texture handle to external rendering pipeline without the overhead of copying data
        /// between CPU and GPU memory, with Chromium's hardware acceleration support. This feature is helpful for high-performance rendering scenarios.<br/><br/>Only a limited
        /// number of textures can exist at the same time, so it's important that you call <c>texture.release()</c> as soon as you're
        /// done with the texture. By managing the texture lifecycle by yourself, you can safely pass the <c>texture.textureInfo</c> to other processes
        /// through IPC.<br/><br/>More details can be found in the offscreen rendering tutorial. To learn about how to handle the texture in
        /// native code, refer to offscreen rendering's code documentation..
        /// </summary>
        [<Emit("$0.off('paint', $1)")>]
        member inline _.offPaint(handler: Fable.Electron.EventInterfaces.Root.IOnPaint -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the devtools window instructs the webContents to reload
        /// </summary>
        [<Emit("$0.on('devtools-reload-page', $1)")>]
        member inline _.onDevtoolsReloadPage(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the devtools window instructs the webContents to reload
        /// </summary>
        [<Emit("$0.once('devtools-reload-page', $1)")>]
        member inline _.onceDevtoolsReloadPage(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the devtools window instructs the webContents to reload
        /// </summary>
        [<Emit("$0.off('devtools-reload-page', $1)")>]
        member inline _.offDevtoolsReloadPage(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c>'s web contents is being attached to this web contents. Calling <c>event.preventDefault()</c> will destroy the guest page.<br/><br/>This
        /// event can be used to configure <c>webPreferences</c> for the <c>webContents</c> of a <c>&lt;webview&gt;</c> before it's loaded, and provides the ability
        /// to set settings that can't be set via <c>&lt;webview&gt;</c> attributes.
        /// </summary>
        [<Emit("$0.on('will-attach-webview', $1)")>]
        member inline _.onWillAttachWebview(handler: Event -> WebPreferences -> Record<string, string> -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c>'s web contents is being attached to this web contents. Calling <c>event.preventDefault()</c> will destroy the guest page.<br/><br/>This
        /// event can be used to configure <c>webPreferences</c> for the <c>webContents</c> of a <c>&lt;webview&gt;</c> before it's loaded, and provides the ability
        /// to set settings that can't be set via <c>&lt;webview&gt;</c> attributes.
        /// </summary>
        [<Emit("$0.on('will-attach-webview', $1)")>]
        member inline _.onWillAttachWebview
            (handler: Fable.Electron.EventInterfaces.Root.IOnWillAttachWebview -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c>'s web contents is being attached to this web contents. Calling <c>event.preventDefault()</c> will destroy the guest page.<br/><br/>This
        /// event can be used to configure <c>webPreferences</c> for the <c>webContents</c> of a <c>&lt;webview&gt;</c> before it's loaded, and provides the ability
        /// to set settings that can't be set via <c>&lt;webview&gt;</c> attributes.
        /// </summary>
        [<Emit("$0.once('will-attach-webview', $1)")>]
        member inline _.onceWillAttachWebview
            (handler: Event -> WebPreferences -> Record<string, string> -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c>'s web contents is being attached to this web contents. Calling <c>event.preventDefault()</c> will destroy the guest page.<br/><br/>This
        /// event can be used to configure <c>webPreferences</c> for the <c>webContents</c> of a <c>&lt;webview&gt;</c> before it's loaded, and provides the ability
        /// to set settings that can't be set via <c>&lt;webview&gt;</c> attributes.
        /// </summary>
        [<Emit("$0.once('will-attach-webview', $1)")>]
        member inline _.onceWillAttachWebview
            (handler: Fable.Electron.EventInterfaces.Root.IOnWillAttachWebview -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c>'s web contents is being attached to this web contents. Calling <c>event.preventDefault()</c> will destroy the guest page.<br/><br/>This
        /// event can be used to configure <c>webPreferences</c> for the <c>webContents</c> of a <c>&lt;webview&gt;</c> before it's loaded, and provides the ability
        /// to set settings that can't be set via <c>&lt;webview&gt;</c> attributes.
        /// </summary>
        [<Emit("$0.off('will-attach-webview', $1)")>]
        member inline _.offWillAttachWebview
            (handler: Event -> WebPreferences -> Record<string, string> -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c>'s web contents is being attached to this web contents. Calling <c>event.preventDefault()</c> will destroy the guest page.<br/><br/>This
        /// event can be used to configure <c>webPreferences</c> for the <c>webContents</c> of a <c>&lt;webview&gt;</c> before it's loaded, and provides the ability
        /// to set settings that can't be set via <c>&lt;webview&gt;</c> attributes.
        /// </summary>
        [<Emit("$0.off('will-attach-webview', $1)")>]
        member inline _.offWillAttachWebview
            (handler: Fable.Electron.EventInterfaces.Root.IOnWillAttachWebview -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c> has been attached to this web contents.
        /// </summary>
        [<Emit("$0.on('did-attach-webview', $1)")>]
        member inline _.onDidAttachWebview(handler: Event -> WebContents -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c> has been attached to this web contents.
        /// </summary>
        [<Emit("$0.on('did-attach-webview', $1)")>]
        member inline _.onDidAttachWebview
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidAttachWebview -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c> has been attached to this web contents.
        /// </summary>
        [<Emit("$0.once('did-attach-webview', $1)")>]
        member inline _.onceDidAttachWebview(handler: Event -> WebContents -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c> has been attached to this web contents.
        /// </summary>
        [<Emit("$0.once('did-attach-webview', $1)")>]
        member inline _.onceDidAttachWebview
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidAttachWebview -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c> has been attached to this web contents.
        /// </summary>
        [<Emit("$0.off('did-attach-webview', $1)")>]
        member inline _.offDidAttachWebview(handler: Event -> WebContents -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a <c>&lt;webview&gt;</c> has been attached to this web contents.
        /// </summary>
        [<Emit("$0.off('did-attach-webview', $1)")>]
        member inline _.offDidAttachWebview
            (handler: Fable.Electron.EventInterfaces.Root.IOnDidAttachWebview -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the associated window logs a console message.
        /// </summary>
        [<Emit("$0.on('console-message', $1)")>]
        member inline _.onConsoleMessage(handler: Details -> int -> string -> int -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the associated window logs a console message.
        /// </summary>
        [<Emit("$0.on('console-message', $1)")>]
        member inline _.onConsoleMessage
            (handler: Fable.Electron.EventInterfaces.Root.IOnConsoleMessage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the associated window logs a console message.
        /// </summary>
        [<Emit("$0.once('console-message', $1)")>]
        member inline _.onceConsoleMessage(handler: Details -> int -> string -> int -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the associated window logs a console message.
        /// </summary>
        [<Emit("$0.once('console-message', $1)")>]
        member inline _.onceConsoleMessage
            (handler: Fable.Electron.EventInterfaces.Root.IOnConsoleMessage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the associated window logs a console message.
        /// </summary>
        [<Emit("$0.off('console-message', $1)")>]
        member inline _.offConsoleMessage(handler: Details -> int -> string -> int -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the associated window logs a console message.
        /// </summary>
        [<Emit("$0.off('console-message', $1)")>]
        member inline _.offConsoleMessage
            (handler: Fable.Electron.EventInterfaces.Root.IOnConsoleMessage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the preload script <c>preloadPath</c> throws an unhandled exception <c>error</c>.
        /// </summary>
        [<Emit("$0.on('preload-error', $1)")>]
        member inline _.onPreloadError(handler: Event -> string -> Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the preload script <c>preloadPath</c> throws an unhandled exception <c>error</c>.
        /// </summary>
        [<Emit("$0.on('preload-error', $1)")>]
        member inline _.onPreloadError(handler: Fable.Electron.EventInterfaces.Root.IOnPreloadError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the preload script <c>preloadPath</c> throws an unhandled exception <c>error</c>.
        /// </summary>
        [<Emit("$0.once('preload-error', $1)")>]
        member inline _.oncePreloadError(handler: Event -> string -> Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the preload script <c>preloadPath</c> throws an unhandled exception <c>error</c>.
        /// </summary>
        [<Emit("$0.once('preload-error', $1)")>]
        member inline _.oncePreloadError(handler: Fable.Electron.EventInterfaces.Root.IOnPreloadError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the preload script <c>preloadPath</c> throws an unhandled exception <c>error</c>.
        /// </summary>
        [<Emit("$0.off('preload-error', $1)")>]
        member inline _.offPreloadError(handler: Event -> string -> Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the preload script <c>preloadPath</c> throws an unhandled exception <c>error</c>.
        /// </summary>
        [<Emit("$0.off('preload-error', $1)")>]
        member inline _.offPreloadError(handler: Fable.Electron.EventInterfaces.Root.IOnPreloadError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends an asynchronous message via <c>ipcRenderer.send()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.on('ipc-message', $1)")>]
        member inline _.onIpcMessage(handler: IpcMainEvent -> string -> obj[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends an asynchronous message via <c>ipcRenderer.send()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.on('ipc-message', $1)")>]
        member inline _.onIpcMessage(handler: Fable.Electron.EventInterfaces.Root.IOnIpcMessage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends an asynchronous message via <c>ipcRenderer.send()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.once('ipc-message', $1)")>]
        member inline _.onceIpcMessage(handler: IpcMainEvent -> string -> obj[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends an asynchronous message via <c>ipcRenderer.send()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.once('ipc-message', $1)")>]
        member inline _.onceIpcMessage(handler: Fable.Electron.EventInterfaces.Root.IOnIpcMessage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends an asynchronous message via <c>ipcRenderer.send()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.off('ipc-message', $1)")>]
        member inline _.offIpcMessage(handler: IpcMainEvent -> string -> obj[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends an asynchronous message via <c>ipcRenderer.send()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.off('ipc-message', $1)")>]
        member inline _.offIpcMessage(handler: Fable.Electron.EventInterfaces.Root.IOnIpcMessage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends a synchronous message via <c>ipcRenderer.sendSync()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.on('ipc-message-sync', $1)")>]
        member inline _.onIpcMessageSync(handler: IpcMainEvent -> string -> obj[] -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends a synchronous message via <c>ipcRenderer.sendSync()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.on('ipc-message-sync', $1)")>]
        member inline _.onIpcMessageSync
            (handler: Fable.Electron.EventInterfaces.Root.IOnIpcMessageSync -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends a synchronous message via <c>ipcRenderer.sendSync()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.once('ipc-message-sync', $1)")>]
        member inline _.onceIpcMessageSync(handler: IpcMainEvent -> string -> obj[] -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends a synchronous message via <c>ipcRenderer.sendSync()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.once('ipc-message-sync', $1)")>]
        member inline _.onceIpcMessageSync
            (handler: Fable.Electron.EventInterfaces.Root.IOnIpcMessageSync -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends a synchronous message via <c>ipcRenderer.sendSync()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.off('ipc-message-sync', $1)")>]
        member inline _.offIpcMessageSync(handler: IpcMainEvent -> string -> obj[] -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process sends a synchronous message via <c>ipcRenderer.sendSync()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
        /// to IPC messages specifically from this WebContents.
        /// </summary>
        [<Emit("$0.off('ipc-message-sync', $1)")>]
        member inline _.offIpcMessageSync
            (handler: Fable.Electron.EventInterfaces.Root.IOnIpcMessageSync -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> preferred size has changed.<br/><br/>This event will only be emitted when <c>enablePreferredSizeMode</c> is set to <c>true</c> in
        /// <c>webPreferences</c>.
        /// </summary>
        [<Emit("$0.on('preferred-size-changed', $1)")>]
        member inline _.onPreferredSizeChanged(handler: Event -> Size -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> preferred size has changed.<br/><br/>This event will only be emitted when <c>enablePreferredSizeMode</c> is set to <c>true</c> in
        /// <c>webPreferences</c>.
        /// </summary>
        [<Emit("$0.on('preferred-size-changed', $1)")>]
        member inline _.onPreferredSizeChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnPreferredSizeChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> preferred size has changed.<br/><br/>This event will only be emitted when <c>enablePreferredSizeMode</c> is set to <c>true</c> in
        /// <c>webPreferences</c>.
        /// </summary>
        [<Emit("$0.once('preferred-size-changed', $1)")>]
        member inline _.oncePreferredSizeChanged(handler: Event -> Size -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> preferred size has changed.<br/><br/>This event will only be emitted when <c>enablePreferredSizeMode</c> is set to <c>true</c> in
        /// <c>webPreferences</c>.
        /// </summary>
        [<Emit("$0.once('preferred-size-changed', $1)")>]
        member inline _.oncePreferredSizeChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnPreferredSizeChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> preferred size has changed.<br/><br/>This event will only be emitted when <c>enablePreferredSizeMode</c> is set to <c>true</c> in
        /// <c>webPreferences</c>.
        /// </summary>
        [<Emit("$0.off('preferred-size-changed', $1)")>]
        member inline _.offPreferredSizeChanged(handler: Event -> Size -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>WebContents</c> preferred size has changed.<br/><br/>This event will only be emitted when <c>enablePreferredSizeMode</c> is set to <c>true</c> in
        /// <c>webPreferences</c>.
        /// </summary>
        [<Emit("$0.off('preferred-size-changed', $1)")>]
        member inline _.offPreferredSizeChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnPreferredSizeChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the mainFrame, an <c>&lt;iframe&gt;</c>, or a nested <c>&lt;iframe&gt;</c> is loaded within the page.
        /// </summary>
        [<Emit("$0.on('frame-created', $1)")>]
        member inline _.onFrameCreated(handler: Event -> WebContents.FrameCreated.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the mainFrame, an <c>&lt;iframe&gt;</c>, or a nested <c>&lt;iframe&gt;</c> is loaded within the page.
        /// </summary>
        [<Emit("$0.on('frame-created', $1)")>]
        member inline _.onFrameCreated(handler: Fable.Electron.EventInterfaces.Root.IOnFrameCreated -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the mainFrame, an <c>&lt;iframe&gt;</c>, or a nested <c>&lt;iframe&gt;</c> is loaded within the page.
        /// </summary>
        [<Emit("$0.once('frame-created', $1)")>]
        member inline _.onceFrameCreated(handler: Event -> WebContents.FrameCreated.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the mainFrame, an <c>&lt;iframe&gt;</c>, or a nested <c>&lt;iframe&gt;</c> is loaded within the page.
        /// </summary>
        [<Emit("$0.once('frame-created', $1)")>]
        member inline _.onceFrameCreated(handler: Fable.Electron.EventInterfaces.Root.IOnFrameCreated -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the mainFrame, an <c>&lt;iframe&gt;</c>, or a nested <c>&lt;iframe&gt;</c> is loaded within the page.
        /// </summary>
        [<Emit("$0.off('frame-created', $1)")>]
        member inline _.offFrameCreated(handler: Event -> WebContents.FrameCreated.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the mainFrame, an <c>&lt;iframe&gt;</c>, or a nested <c>&lt;iframe&gt;</c> is loaded within the page.
        /// </summary>
        [<Emit("$0.off('frame-created', $1)")>]
        member inline _.offFrameCreated(handler: Fable.Electron.EventInterfaces.Root.IOnFrameCreated -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// the promise will resolve when the page has finished loading (see <c>did-finish-load</c>), and rejects if the page fails to load
        /// (see <c>did-fail-load</c>). A noop rejection handler is already attached, which avoids unhandled rejection errors.<br/><br/>Loads the <c>url</c> in the window. The
        /// <c>url</c> must contain the protocol prefix, e.g. the <c>http://</c> or <c>file://</c>. If the load should bypass http cache then use
        /// the <c>pragma</c> header to achieve it.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="httpReferrer">An HTTP Referrer url.</param>
        /// <param name="userAgent">A user agent originating the request.</param>
        /// <param name="extraHeaders">Extra headers separated by "\n".</param>
        /// <param name="postData"></param>
        /// <param name="baseURLForDataURL">Base url (with trailing path separator) for files to be loaded by the data url. This is needed only
        /// if the specified <c>url</c> is a data url and needs to load other files.</param>
        [<Erase; ParamObject(1)>]
        member inline _.loadURL
            (
                url: string,
                ?httpReferrer: U2<string, Referrer>,
                ?userAgent: string,
                ?extraHeaders: string,
                ?postData: U2<UploadRawData, UploadFile>[],
                ?baseURLForDataURL: string
            ) : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// the promise will resolve when the page has finished loading (see <c>did-finish-load</c>), and rejects if the page fails to load
        /// (see <c>did-fail-load</c>).<br/><br/>Loads the given file in the window, <c>filePath</c> should be a path to an HTML file relative to the
        /// root of your application.  For instance an app structure like this:<br/><br/>Would require code like this
        /// </summary>
        /// <param name="filePath"></param>
        /// <param name="query">Passed to <c>url.format()</c>.</param>
        /// <param name="search">Passed to <c>url.format()</c>.</param>
        /// <param name="hash">Passed to <c>url.format()</c>.</param>
        [<Erase; ParamObject(1)>]
        member inline _.loadFile
            (filePath: string, ?query: Record<string, string>, ?search: string, ?hash: string)
            : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Initiates a download of the resource at <c>url</c> without navigating. The <c>will-download</c> event of <c>session</c> will be triggered.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="headers">HTTP request headers.</param>
        [<Erase; ParamObject(1)>]
        member inline _.downloadURL(url: string, ?headers: Record<string, string>) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The URL of the current web page.
        /// </summary>
        [<Erase>]
        member inline _.getURL() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The title of the current web page.
        /// </summary>
        [<Erase>]
        member inline _.getTitle() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the web page is destroyed.
        /// </summary>
        [<Erase>]
        member inline _.isDestroyed() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Closes the page, as if the web content had called <c>window.close()</c>.<br/><br/>If the page is successfully closed (i.e. the unload is
        /// not prevented by the page, or <c>waitForBeforeUnload</c> is false or unspecified), the WebContents will be destroyed and no longer usable.
        /// The <c>destroyed</c> event will be emitted.
        /// </summary>
        /// <param name="waitForBeforeUnload">if true, fire the <c>beforeunload</c> event before closing the page. If the page prevents the unload, the WebContents will
        /// not be closed. The <c>will-prevent-unload</c> will be fired if the page requests prevention of unload.</param>
        [<Erase; ParamObject(0)>]
        member inline _.close(waitForBeforeUnload: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Focuses the web page.
        /// </summary>
        [<Erase>]
        member inline _.focus() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the web page is focused.
        /// </summary>
        [<Erase>]
        member inline _.isFocused() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether web page is still loading resources.
        /// </summary>
        [<Erase>]
        member inline _.isLoading() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the main frame (and not just iframes or frames within it) is still loading.
        /// </summary>
        [<Erase>]
        member inline _.isLoadingMainFrame() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the web page is waiting for a first-response from the main resource of the page.
        /// </summary>
        [<Erase>]
        member inline _.isWaitingForResponse() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Stops any pending navigation.
        /// </summary>
        [<Erase>]
        member inline _.stop() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Reloads the current web page.
        /// </summary>
        [<Erase>]
        member inline _.reload() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Reloads current page and ignores cache.
        /// </summary>
        [<Erase>]
        member inline _.reloadIgnoringCache() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the browser can go back to previous web page.<br/><br/>**Deprecated:** Should use the new <c>contents.navigationHistory.canGoBack</c> API.
        /// </summary>
        [<Erase; System.Obsolete>]
        member inline _.canGoBack() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the browser can go forward to next web page.<br/><br/>**Deprecated:** Should use the new <c>contents.navigationHistory.canGoForward</c> API.
        /// </summary>
        [<Erase; System.Obsolete>]
        member inline _.canGoForward() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the web page can go to <c>offset</c>.<br/><br/>**Deprecated:** Should use the new <c>contents.navigationHistory.canGoToOffset</c> API.
        /// </summary>
        /// <param name="offset"></param>
        [<Erase; System.Obsolete>]
        member inline _.canGoToOffset(offset: int) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Clears the navigation history.<br/><br/>**Deprecated:** Should use the new <c>contents.navigationHistory.clear</c> API.
        /// </summary>
        [<Erase; System.Obsolete>]
        member inline _.clearHistory() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Makes the browser go back a web page.<br/><br/>**Deprecated:** Should use the new <c>contents.navigationHistory.goBack</c> API.
        /// </summary>
        [<Erase; System.Obsolete>]
        member inline _.goBack() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Makes the browser go forward a web page.<br/><br/>**Deprecated:** Should use the new <c>contents.navigationHistory.goForward</c> API.
        /// </summary>
        [<Erase; System.Obsolete>]
        member inline _.goForward() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Navigates browser to the specified absolute web page index.<br/><br/>**Deprecated:** Should use the new <c>contents.navigationHistory.goToIndex</c> API.
        /// </summary>
        /// <param name="index"></param>
        [<Erase; System.Obsolete>]
        member inline _.goToIndex(index: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Navigates to the specified offset from the "current entry".<br/><br/>**Deprecated:** Should use the new <c>contents.navigationHistory.goToOffset</c> API.
        /// </summary>
        /// <param name="offset"></param>
        [<Erase; System.Obsolete>]
        member inline _.goToOffset(offset: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the renderer process has crashed.
        /// </summary>
        [<Erase>]
        member inline _.isCrashed() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Forcefully terminates the renderer process that is currently hosting this <c>webContents</c>. This will cause the <c>render-process-gone</c> event to be emitted
        /// with the <c>reason=killed || reason=crashed</c>. Please note that some webContents share renderer processes and therefore calling this method may also
        /// crash the host process for other webContents as well.<br/><br/>Calling <c>reload()</c> immediately after calling this method will force the reload to
        /// occur in a new process. This should be used when this process is unstable or unusable, for instance in order
        /// to recover from the <c>unresponsive</c> event.
        /// </summary>
        [<Erase>]
        member inline _.forcefullyCrashRenderer() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Overrides the user agent for this web page.
        /// </summary>
        /// <param name="userAgent"></param>
        [<Erase>]
        member inline _.setUserAgent(userAgent: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The user agent for this web page.
        /// </summary>
        [<Erase>]
        member inline _.getUserAgent() : string = Unchecked.defaultof<_>

        /// <summary>
        /// A promise that resolves with a key for the inserted CSS that can later be used to remove the CSS
        /// via <c>contents.removeInsertedCSS(key)</c>.<br/><br/>Injects CSS into the current web page and returns a unique key for the inserted stylesheet.
        /// </summary>
        /// <param name="css"></param>
        /// <param name="cssOrigin">Can be 'user' or 'author'. Sets the cascade origin of the inserted stylesheet. Default is 'author'.</param>
        [<Erase; ParamObject(1)>]
        member inline _.insertCSS
            (css: string, ?cssOrigin: Enums.WebContents.InsertCSS.Options.CssOrigin)
            : Promise<string> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resolves if the removal was successful.<br/><br/>Removes the inserted CSS from the current web page. The stylesheet is identified by its
        /// key, which is returned from <c>contents.insertCSS(css)</c>.
        /// </summary>
        /// <param name="key"></param>
        [<Erase>]
        member inline _.removeInsertedCSS(key: string) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// A promise that resolves with the result of the executed code or is rejected if the result of the code
        /// is a rejected promise.<br/><br/>Evaluates <c>code</c> in page.<br/><br/>In the browser window some HTML APIs like <c>requestFullScreen</c> can only be invoked by
        /// a gesture from the user. Setting <c>userGesture</c> to <c>true</c> will remove this limitation.<br/><br/>Code execution will be suspended until web page
        /// stop loading.
        /// </summary>
        /// <param name="code"></param>
        /// <param name="userGesture">Default is <c>false</c>.</param>
        [<Erase>]
        member inline _.executeJavaScript(code: string, ?userGesture: bool) : Promise<obj> = Unchecked.defaultof<_>

        /// <summary>
        /// A promise that resolves with the result of the executed code or is rejected if the result of the code
        /// is a rejected promise.<br/><br/>Works like <c>executeJavaScript</c> but evaluates <c>scripts</c> in an isolated context.
        /// </summary>
        /// <param name="worldId">The ID of the world to run the javascript in, <c>0</c> is the default world, <c>999</c> is the world
        /// used by Electron's <c>contextIsolation</c> feature.  You can provide any integer here.</param>
        /// <param name="scripts"></param>
        /// <param name="userGesture">Default is <c>false</c>.</param>
        [<Erase>]
        member inline _.executeJavaScriptInIsolatedWorld
            (worldId: int, scripts: WebSource[], ?userGesture: bool)
            : Promise<obj> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Ignore application menu shortcuts while this web contents is focused.
        /// </summary>
        /// <param name="ignore"></param>
        [<Erase>]
        member inline _.setIgnoreMenuShortcuts(ignore: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Called before creating a window a new window is requested by the renderer, e.g. by <c>window.open()</c>, a link with <c>target="_blank"</c>,
        /// shift+clicking on a link, or submitting a form with <c>&lt;form target="_blank"&gt;</c>. See <c>window.open()</c> for more details and how to use
        /// this in conjunction with <c>did-create-window</c>.<br/><br/>An example showing how to customize the process of new <c>BrowserWindow</c> creation to be <c>BrowserView</c> attached
        /// to main window instead:
        /// </summary>
        /// <param name="handler"></param>
        [<Erase>]
        member inline _.setWindowOpenHandler
            (handler: WebContents.SetWindowOpenHandler.Handler.Details -> WindowOpenHandlerResponse)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Mute the audio on the current web page.
        /// </summary>
        /// <param name="muted"></param>
        [<Erase>]
        member inline _.setAudioMuted(muted: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether this page has been muted.
        /// </summary>
        [<Erase>]
        member inline _.isAudioMuted() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether audio is currently playing.
        /// </summary>
        [<Erase>]
        member inline _.isCurrentlyAudible() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Changes the zoom factor to the specified factor. Zoom factor is zoom percent divided by 100, so 300% = 3.0.<br/><br/>The
        /// factor must be greater than 0.0.
        /// </summary>
        /// <param name="factor">Zoom factor; default is 1.0.</param>
        [<Erase>]
        member inline _.setZoomFactor(factor: double) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// the current zoom factor.
        /// </summary>
        [<Erase>]
        member inline _.getZoomFactor() : float = Unchecked.defaultof<_>

        /// <summary>
        /// Changes the zoom level to the specified level. The original size is 0 and each increment above or below represents
        /// zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively. The formula for this
        /// is <c>scale := 1.2 ^ level</c>.<br/><br/>&gt; [!NOTE] The zoom policy at the Chromium level is same-origin, meaning that the zoom
        /// level for a specific domain propagates across all instances of windows with the same domain. Differentiating the window URLs will
        /// make zoom work per-window.
        /// </summary>
        /// <param name="level">Zoom level.</param>
        [<Erase>]
        member inline _.setZoomLevel(level: float) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// the current zoom level.
        /// </summary>
        [<Erase>]
        member inline _.getZoomLevel() : float = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the maximum and minimum pinch-to-zoom level.<br/><br/>&gt; [!NOTE] Visual zoom is disabled by default in Electron. To re-enable it, call:
        /// </summary>
        /// <param name="minimumLevel"></param>
        /// <param name="maximumLevel"></param>
        [<Erase>]
        member inline _.setVisualZoomLevelLimits(minimumLevel: float, maximumLevel: float) : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>undo</c> in web page.
        /// </summary>
        [<Erase>]
        member inline _.undo() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>redo</c> in web page.
        /// </summary>
        [<Erase>]
        member inline _.redo() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>cut</c> in web page.
        /// </summary>
        [<Erase>]
        member inline _.cut() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>copy</c> in web page.
        /// </summary>
        [<Erase>]
        member inline _.copy() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Centers the current text selection in web page.
        /// </summary>
        [<Erase>]
        member inline _.centerSelection() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Copy the image at the given position to the clipboard.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        [<Erase>]
        member inline _.copyImageAt(x: int, y: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>paste</c> in web page.
        /// </summary>
        [<Erase>]
        member inline _.paste() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>pasteAndMatchStyle</c> in web page.
        /// </summary>
        [<Erase>]
        member inline _.pasteAndMatchStyle() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>delete</c> in web page.
        /// </summary>
        [<Erase>]
        member inline _.delete() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>selectAll</c> in web page.
        /// </summary>
        [<Erase>]
        member inline _.selectAll() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>unselect</c> in web page.
        /// </summary>
        [<Erase>]
        member inline _.unselect() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Scrolls to the top of the current <c>webContents</c>.
        /// </summary>
        [<Erase>]
        member inline _.scrollToTop() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Scrolls to the bottom of the current <c>webContents</c>.
        /// </summary>
        [<Erase>]
        member inline _.scrollToBottom() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Adjusts the current text selection starting and ending points in the focused frame by the given amounts. A negative amount
        /// moves the selection towards the beginning of the document, and a positive amount moves the selection towards the end of
        /// the document.<br/><br/>Example:<br/><br/>For a call of <c>win.webContents.adjustSelection({ start: 1, end: 5 })</c><br/><br/>Before:<br/><br/>After:
        /// </summary>
        /// <param name="start">Amount to shift the start index of the current selection.</param>
        /// <param name="``end``">Amount to shift the end index of the current selection.</param>
        [<Erase; ParamObject(0)>]
        member inline _.adjustSelection(?start: float, ?``end``: float) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>replace</c> in web page.
        /// </summary>
        /// <param name="text"></param>
        [<Erase>]
        member inline _.replace(text: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Executes the editing command <c>replaceMisspelling</c> in web page.
        /// </summary>
        /// <param name="text"></param>
        [<Erase>]
        member inline _.replaceMisspelling(text: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Inserts <c>text</c> to the focused element.
        /// </summary>
        /// <param name="text"></param>
        [<Erase>]
        member inline _.insertText(text: string) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// The request id used for the request.<br/><br/>Starts a request to find all matches for the <c>text</c> in the web page.
        /// The result of the request can be obtained by subscribing to <c>found-in-page</c> event.
        /// </summary>
        /// <param name="text">Content to be searched, must not be empty.</param>
        /// <param name="forward">Whether to search forward or backward, defaults to <c>true</c>.</param>
        /// <param name="findNext">Whether to begin a new text finding session with this request. Should be <c>true</c> for initial requests, and <c>false</c>
        /// for follow-up requests. Defaults to <c>false</c>.</param>
        /// <param name="matchCase">Whether search should be case-sensitive, defaults to <c>false</c>.</param>
        [<Erase; ParamObject(1)>]
        member inline _.findInPage(text: string, ?forward: bool, ?findNext: bool, ?matchCase: bool) : int =
            Unchecked.defaultof<_>

        /// <summary>
        /// Stops any <c>findInPage</c> request for the <c>webContents</c> with the provided <c>action</c>.
        /// </summary>
        /// <param name="action">Specifies the action to take place when ending <c>webContents.findInPage</c> request.</param>
        [<Erase>]
        member inline _.stopFindInPage(action: Enums.WebContents.StopFindInPage.Action) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with a NativeImage<br/><br/>Captures a snapshot of the page within <c>rect</c>. Omitting <c>rect</c> will capture the whole visible page. The
        /// page is considered visible when its browser window is hidden and the capturer count is non-zero. If you would like
        /// the page to stay hidden, you should ensure that <c>stayHidden</c> is set to true.
        /// </summary>
        /// <param name="rect">The area of the page to be captured.</param>
        /// <param name="stayHidden"> Keep the page hidden instead of visible. Default is <c>false</c>.</param>
        /// <param name="stayAwake"> Keep the system awake instead of allowing it to sleep. Default is <c>false</c>.</param>
        [<Erase; ParamObject(1)>]
        member inline _.capturePage(?rect: Rectangle, ?stayHidden: bool, ?stayAwake: bool) : Promise<NativeImage> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether this page is being captured. It returns true when the capturer count is greater than 0.
        /// </summary>
        [<Erase>]
        member inline _.isBeingCaptured() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Get the system printer list.<br/><br/>Resolves with a <c>PrinterInfo[]</c>
        /// </summary>
        [<Erase>]
        member inline _.getPrintersAsync() : Promise<PrinterInfo[]> = Unchecked.defaultof<_>

        /// <summary>
        /// When a custom <c>pageSize</c> is passed, Chromium attempts to validate platform specific minimum values for <c>width_microns</c> and <c>height_microns</c>. Width and
        /// height must both be minimum 353 microns but may be higher on some operating systems.<br/><br/>Prints window's web page. When <c>silent</c>
        /// is set to <c>true</c>, Electron will pick the system's default printer if <c>deviceName</c> is empty and the default settings for
        /// printing.<br/><br/>Some possible <c>failureReason</c>s for print failure include:<br/><br/>* "Invalid printer settings"<br/>* "Print job canceled"<br/>* "Print job failed"<br/><br/>Use <c>page-break-before: always;</c> CSS style
        /// to force to print to a new page.<br/><br/>Example usage:
        /// </summary>
        /// <param name="options"></param>
        /// <param name="callback"></param>
        [<Erase>]
        member inline _.print(?options: WebContents.Print.Options, ?callback: WebContents.Print.Callback) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with the generated PDF data.<br/><br/>Prints the window's web page as PDF.<br/><br/>The <c>landscape</c> will be ignored if <c>@page</c> CSS at-rule
        /// is used in the web page.<br/><br/>An example of <c>webContents.printToPDF</c>:<br/><br/>See Page.printToPdf for more information.
        /// </summary>
        /// <param name="landscape">Paper orientation.<c>true</c> for landscape, <c>false</c> for portrait. Defaults to false.</param>
        /// <param name="displayHeaderFooter">Whether to display header and footer. Defaults to false.</param>
        /// <param name="printBackground">Whether to print background graphics. Defaults to false.</param>
        /// <param name="scale">Scale of the webpage rendering. Defaults to 1.</param>
        /// <param name="pageSize">Specify page size of the generated PDF. Can be <c>A0</c>, <c>A1</c>, <c>A2</c>, <c>A3</c>, <c>A4</c>, <c>A5</c>, <c>A6</c>, <c>Legal</c>, <c>Letter</c>, <c>Tabloid</c>,
        /// <c>Ledger</c>, or an Object containing <c>height</c> and <c>width</c> in inches. Defaults to <c>Letter</c>.</param>
        /// <param name="margins"></param>
        /// <param name="pageRanges">Page ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.</param>
        /// <param name="headerTemplate">HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values
        /// into them: <c>date</c> (formatted print date), <c>title</c> (document title), <c>url</c> (document location), <c>pageNumber</c> (current page number) and <c>totalPages</c> (total pages
        /// in the document). For example, <c>&lt;span class=title&gt;&lt;/span&gt;</c> would generate span containing the title.</param>
        /// <param name="footerTemplate">HTML template for the print footer. Should use the same format as the <c>headerTemplate</c>.</param>
        /// <param name="preferCSSPageSize">Whether or not to prefer page size as defined by css. Defaults to false, in which case the content
        /// will be scaled to fit the paper size.</param>
        /// <param name="generateTaggedPDF">Whether or not to generate a tagged (accessible) PDF. Defaults to false. As this property is experimental, the generated
        /// PDF may not adhere fully to PDF/UA and WCAG standards.</param>
        /// <param name="generateDocumentOutline">Whether or not to generate a PDF document outline from content headers. Defaults to false.</param>
        [<Erase; ParamObject(0)>]
        member inline _.printToPDF
            (
                ?landscape: bool,
                ?displayHeaderFooter: bool,
                ?printBackground: bool,
                ?scale: float,
                ?pageSize: U2<Enums.WebContents.PrintToPDF.Options.PageSize, Size>,
                ?margins: WebContents.PrintToPDF.Options.Margins,
                ?pageRanges: string,
                ?headerTemplate: string,
                ?footerTemplate: string,
                ?preferCSSPageSize: bool,
                ?generateTaggedPDF: bool,
                ?generateDocumentOutline: bool
            ) : Promise<Buffer> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Adds the specified path to DevTools workspace. Must be used after DevTools creation:
        /// </summary>
        /// <param name="path"></param>
        [<Erase>]
        member inline _.addWorkSpace(path: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Removes the specified path from DevTools workspace.
        /// </summary>
        /// <param name="path"></param>
        [<Erase>]
        member inline _.removeWorkSpace(path: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Uses the <c>devToolsWebContents</c> as the target <c>WebContents</c> to show devtools.<br/><br/>The <c>devToolsWebContents</c> must not have done any navigation, and it should
        /// not be used for other purposes after the call.<br/><br/>By default Electron manages the devtools by creating an internal <c>WebContents</c> with
        /// native view, which developers have very limited control of. With the <c>setDevToolsWebContents</c> method, developers can use any <c>WebContents</c> to show
        /// the devtools in it, including <c>BrowserWindow</c>, <c>BrowserView</c> and <c>&lt;webview&gt;</c> tag.<br/><br/>Note that closing the devtools does not destroy the <c>devToolsWebContents</c>, it
        /// is caller's responsibility to destroy <c>devToolsWebContents</c>.<br/><br/>An example of showing devtools in a <c>&lt;webview&gt;</c> tag:<br/><br/>An example of showing devtools in a
        /// <c>BrowserWindow</c>:
        /// </summary>
        /// <param name="devToolsWebContents"></param>
        [<Erase>]
        member inline _.setDevToolsWebContents(devToolsWebContents: WebContents) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Opens the devtools.<br/><br/>When <c>contents</c> is a <c>&lt;webview&gt;</c> tag, the <c>mode</c> would be <c>detach</c> by default, explicitly passing an empty <c>mode</c>
        /// can force using last used dock state.<br/><br/>On Windows, if Windows Control Overlay is enabled, Devtools will be opened with <c>mode:
        /// 'detach'</c>.
        /// </summary>
        /// <param name="mode">Opens the devtools with specified dock state, can be <c>left</c>, <c>right</c>, <c>bottom</c>, <c>undocked</c>, <c>detach</c>. Defaults to last used dock
        /// state. In <c>undocked</c> mode it's possible to dock back. In <c>detach</c> mode it's not.</param>
        /// <param name="activate">Whether to bring the opened devtools window to the foreground. The default is <c>true</c>.</param>
        /// <param name="title">A title for the DevTools window (only in <c>undocked</c> or <c>detach</c> mode).</param>
        [<Erase; ParamObject(0)>]
        member inline _.openDevTools
            (mode: Enums.WebContents.OpenDevTools.Options.Mode, ?activate: bool, ?title: string)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Closes the devtools.
        /// </summary>
        [<Erase>]
        member inline _.closeDevTools() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the devtools is opened.
        /// </summary>
        [<Erase>]
        member inline _.isDevToolsOpened() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the devtools view is focused .
        /// </summary>
        [<Erase>]
        member inline _.isDevToolsFocused() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// the current title of the DevTools window. This will only be visible if DevTools is opened in <c>undocked</c> or <c>detach</c>
        /// mode.
        /// </summary>
        [<Erase>]
        member inline _.getDevToolsTitle() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Changes the title of the DevTools window to <c>title</c>. This will only be visible if DevTools is opened in <c>undocked</c>
        /// or <c>detach</c> mode.
        /// </summary>
        /// <param name="title"></param>
        [<Erase>]
        member inline _.setDevToolsTitle(title: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Toggles the developer tools.
        /// </summary>
        [<Erase>]
        member inline _.toggleDevTools() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Starts inspecting element at position (<c>x</c>, <c>y</c>).
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        [<Erase>]
        member inline _.inspectElement(x: int, y: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Opens the developer tools for the shared worker context.
        /// </summary>
        [<Erase>]
        member inline _.inspectSharedWorker() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Inspects the shared worker based on its ID.
        /// </summary>
        /// <param name="workerId"></param>
        [<Erase>]
        member inline _.inspectSharedWorkerById(workerId: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Information about all Shared Workers.
        /// </summary>
        [<Erase>]
        member inline _.getAllSharedWorkers() : SharedWorkerInfo[] = Unchecked.defaultof<_>

        /// <summary>
        /// Opens the developer tools for the service worker context.
        /// </summary>
        [<Erase>]
        member inline _.inspectServiceWorker() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Send an asynchronous message to the renderer process via <c>channel</c>, along with arguments. Arguments will be serialized with the Structured
        /// Clone Algorithm, just like <c>postMessage</c>, so prototype chains will not be included. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will
        /// throw an exception.<br/><br/>:::warning<br/><br/>Sending non-standard JavaScript types such as DOM objects or special Electron objects will throw an exception.<br/><br/>:::<br/><br/>For additional reading,
        /// refer to Electron's IPC guide.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="...args"></param>
        [<Erase>]
        member inline _.send(channel: string, [<System.ParamArray>] args: obj[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Send an asynchronous message to a specific frame in a renderer process via <c>channel</c>, along with arguments. Arguments will be
        /// serialized with the Structured Clone Algorithm, just like <c>postMessage</c>, so prototype chains will not be included. Sending Functions, Promises, Symbols,
        /// WeakMaps, or WeakSets will throw an exception.<br/><br/>&gt; **NOTE:** Sending non-standard JavaScript types such as DOM objects or special Electron objects
        /// will throw an exception.<br/><br/>The renderer process can handle the message by listening to <c>channel</c> with the <c>ipcRenderer</c> module.<br/><br/>If you want
        /// to get the <c>frameId</c> of a given renderer context you should use the <c>webFrame.routingId</c> value.  E.g.<br/><br/>You can also read
        /// <c>frameId</c> from all incoming IPC messages in the main process.
        /// </summary>
        /// <param name="frameId">the ID of the frame to send to, or a pair of <c>[processId, frameId]</c> if the frame is in
        /// a different process to the main frame.</param>
        /// <param name="channel"></param>
        /// <param name="...args"></param>
        [<Erase>]
        member inline _.sendToFrame
            (frameId: U2<int, float * float>, channel: string, [<System.ParamArray>] args: obj[])
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Send a message to the renderer process, optionally transferring ownership of zero or more <c>MessagePortMain</c> objects.<br/><br/>The transferred <c>MessagePortMain</c> objects will
        /// be available in the renderer process by accessing the <c>ports</c> property of the emitted event. When they arrive in the
        /// renderer, they will be native DOM <c>MessagePort</c> objects.<br/><br/>For example:
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="message"></param>
        /// <param name="transfer"></param>
        [<Erase>]
        member inline _.postMessage(channel: string, message: obj, ?transfer: MessagePortMain[]) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Enable device emulation with the given parameters.
        /// </summary>
        /// <param name="screenPosition">Specify the screen type to emulate (default: <c>desktop</c>):</param>
        /// <param name="screenSize">Set the emulated screen size (screenPosition == mobile).</param>
        /// <param name="viewPosition">Position the view on the screen (screenPosition == mobile) (default: <c>{ x: 0, y: 0 }</c>).</param>
        /// <param name="deviceScaleFactor">Set the device scale factor (if zero defaults to original device scale factor) (default: <c>0</c>).</param>
        /// <param name="viewSize">Set the emulated view size (empty means no override)</param>
        /// <param name="scale">Scale of emulated view inside available space (not in fit to view mode) (default: <c>1</c>).</param>
        [<Erase; ParamObject(0)>]
        member inline _.enableDeviceEmulation
            (
                screenPosition: Enums.WebContents.EnableDeviceEmulation.Parameters.ScreenPosition,
                screenSize: Size,
                viewPosition: Point,
                deviceScaleFactor: int,
                viewSize: Size,
                scale: float
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Disable device emulation enabled by <c>webContents.enableDeviceEmulation</c>.
        /// </summary>
        [<Erase>]
        member inline _.disableDeviceEmulation() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Sends an input <c>event</c> to the page.<br/><br/>&gt; [!NOTE] The <c>BrowserWindow</c> containing the contents needs to be focused for <c>sendInputEvent()</c> to
        /// work.
        /// </summary>
        /// <param name="inputEvent"></param>
        [<Erase>]
        member inline _.sendInputEvent
            (inputEvent: U3<MouseInputEvent, MouseWheelInputEvent, KeyboardInputEvent>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Begin subscribing for presentation events and captured frames, the <c>callback</c> will be called with <c>callback(image, dirtyRect)</c> when there is a
        /// presentation event.<br/><br/>The <c>image</c> is an instance of NativeImage that stores the captured frame.<br/><br/>The <c>dirtyRect</c> is an object with <c>x, y,
        /// width, height</c> properties that describes which part of the page was repainted. If <c>onlyDirty</c> is set to <c>true</c>, <c>image</c> will
        /// only contain the repainted area. <c>onlyDirty</c> defaults to <c>false</c>.
        /// </summary>
        /// <param name="onlyDirty">Defaults to <c>false</c>.</param>
        /// <param name="callback"></param>
        [<Erase>]
        member inline _.beginFrameSubscription
            (?onlyDirty: bool, callback: WebContents.BeginFrameSubscription.Callback)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// End subscribing for frame presentation events.
        /// </summary>
        [<Erase>]
        member inline _.endFrameSubscription() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the <c>item</c> as dragging item for current drag-drop operation, <c>file</c> is the absolute path of the file to be
        /// dragged, and <c>icon</c> is the image showing under the cursor when dragging.
        /// </summary>
        /// <param name="file">The path to the file being dragged.</param>
        /// <param name="files">The paths to the files being dragged. (<c>files</c> will override <c>file</c> field)</param>
        /// <param name="icon">The image must be non-empty on macOS.</param>
        [<Erase; ParamObject(0)>]
        member inline _.startDrag(file: string, ?files: string[], icon: U2<NativeImage, string>) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// resolves if the page is saved.
        /// </summary>
        /// <param name="fullPath">The absolute file path.</param>
        /// <param name="saveType">Specify the save type.</param>
        [<Erase>]
        member inline _.savePage(fullPath: string, saveType: Enums.WebContents.SavePage.SaveType) : Promise<unit> =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Shows pop-up dictionary that searches the selected word on the page.
        /// </summary>
        [<Erase>]
        member inline _.showDefinitionForSelection() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Indicates whether _offscreen rendering_ is enabled.
        /// </summary>
        [<Erase>]
        member inline _.isOffscreen() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// If _offscreen rendering_ is enabled and not painting, start painting.
        /// </summary>
        [<Erase>]
        member inline _.startPainting() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// If _offscreen rendering_ is enabled and painting, stop painting.
        /// </summary>
        [<Erase>]
        member inline _.stopPainting() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// If _offscreen rendering_ is enabled returns whether it is currently painting.
        /// </summary>
        [<Erase>]
        member inline _.isPainting() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// If _offscreen rendering_ is enabled sets the frame rate to the specified number. Only values between 1 and 240 are
        /// accepted.
        /// </summary>
        /// <param name="fps"></param>
        [<Erase>]
        member inline _.setFrameRate(fps: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// If _offscreen rendering_ is enabled returns the current frame rate.
        /// </summary>
        [<Erase>]
        member inline _.getFrameRate() : int = Unchecked.defaultof<_>

        /// <summary>
        /// Schedules a full repaint of the window this web contents is in.<br/><br/>If _offscreen rendering_ is enabled invalidates the frame and
        /// generates a new one through the <c>'paint'</c> event.
        /// </summary>
        [<Erase>]
        member inline _.invalidate() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Returns the WebRTC IP Handling Policy.
        /// </summary>
        [<Erase>]
        member inline _.getWebRTCIPHandlingPolicy() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Setting the WebRTC IP handling policy allows you to control which IPs are exposed via WebRTC. See BrowserLeaks for more
        /// details.
        /// </summary>
        /// <param name="policy">Specify the WebRTC IP Handling Policy.</param>
        [<Erase>]
        member inline _.setWebRTCIPHandlingPolicy(policy: Enums.WebContents.SetWebRTCIPHandlingPolicy.Policy) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// * <c>min</c> Integer - The minimum UDP port number that WebRTC should use.<br/>* <c>max</c> Integer - The maximum UDP port
        /// number that WebRTC should use.<br/><br/>By default this value is <c>{ min: 0, max: 0 }</c> , which would apply no
        /// restriction on the udp port range.
        /// </summary>
        [<Erase>]
        member inline _.getWebRTCUDPPortRange() : WebContents.GetWebRTCUDPPortRange = Unchecked.defaultof<_>

        /// <summary>
        /// Setting the WebRTC UDP Port Range allows you to restrict the udp port range used by WebRTC. By default the
        /// port range is unrestricted.<br/><br/>&gt; [!NOTE] To reset to an unrestricted port range this value should be set to <c>{ min:
        /// 0, max: 0 }</c>.
        /// </summary>
        /// <param name="min">The minimum UDP port number that WebRTC should use.</param>
        /// <param name="max">The maximum UDP port number that WebRTC should use.</param>
        [<Erase; ParamObject(0)>]
        member inline _.setWebRTCUDPPortRange(min: int, max: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The identifier of a WebContents stream. This identifier can be used with <c>navigator.mediaDevices.getUserMedia</c> using a <c>chromeMediaSource</c> of <c>tab</c>. The identifier
        /// is restricted to the web contents that it is registered to and is only valid for 10 seconds.
        /// </summary>
        /// <param name="requestWebContents">Web contents that the id will be registered to.</param>
        [<Erase>]
        member inline _.getMediaSourceId(requestWebContents: WebContents) : string = Unchecked.defaultof<_>

        /// <summary>
        /// The operating system <c>pid</c> of the associated renderer process.
        /// </summary>
        [<Erase>]
        member inline _.getOSProcessId() : int = Unchecked.defaultof<_>

        /// <summary>
        /// The Chromium internal <c>pid</c> of the associated renderer. Can be compared to the <c>frameProcessId</c> passed by frame specific navigation events
        /// (e.g. <c>did-frame-navigate</c>)
        /// </summary>
        [<Erase>]
        member inline _.getProcessId() : int = Unchecked.defaultof<_>

        /// <summary>
        /// Indicates whether the snapshot has been created successfully.<br/><br/>Takes a V8 heap snapshot and saves it to <c>filePath</c>.
        /// </summary>
        /// <param name="filePath">Path to the output file.</param>
        [<Erase>]
        member inline _.takeHeapSnapshot(filePath: string) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// whether or not this WebContents will throttle animations and timers when the page becomes backgrounded. This also affects the Page
        /// Visibility API.
        /// </summary>
        [<Erase>]
        member inline _.getBackgroundThrottling() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Controls whether or not this WebContents will throttle animations and timers when the page becomes backgrounded. This also affects the
        /// Page Visibility API.
        /// </summary>
        /// <param name="allowed"></param>
        [<Erase>]
        member inline _.setBackgroundThrottling(allowed: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// the type of the webContent. Can be <c>backgroundPage</c>, <c>window</c>, <c>browserView</c>, <c>remote</c>, <c>webview</c> or <c>offscreen</c>.
        /// </summary>
        [<Erase>]
        member inline _.getType() : Enums.WebContents.GetType = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the image animation policy for this webContents.  The policy only affects _new_ images, existing images that are currently
        /// being animated are unaffected. This is a known limitation in Chromium, you can force image animation to be recalculated with
        /// <c>img.src = img.src</c> which will result in no network traffic but will update the animation policy.<br/><br/>This corresponds to the animationPolicy
        /// accessibility feature in Chromium.
        /// </summary>
        /// <param name="policy">Can be <c>animate</c>, <c>animateOnce</c> or <c>noAnimation</c>.</param>
        [<Erase>]
        member inline _.setImageAnimationPolicy(policy: Enums.WebContents.SetImageAnimationPolicy.Policy) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// An <c>IpcMain</c> scoped to just IPC messages sent from this WebContents.<br/><br/>IPC messages sent with <c>ipcRenderer.send</c>, <c>ipcRenderer.sendSync</c> or <c>ipcRenderer.postMessage</c> will be
        /// delivered in the following order:<br/><br/>* <c>contents.on('ipc-message')</c><br/>* <c>contents.mainFrame.on(channel)</c><br/>* <c>contents.ipc.on(channel)</c><br/>* <c>ipcMain.on(channel)</c><br/><br/>Handlers registered with <c>invoke</c> will be checked in the following order. The
        /// first one that is defined will be called, the rest will be ignored.<br/><br/>* <c>contents.mainFrame.handle(channel)</c><br/>* <c>contents.handle(channel)</c><br/>* <c>ipcMain.handle(channel)</c><br/><br/>A handler or event listener
        /// registered on the WebContents will receive IPC messages sent from any frame, including child frames. In most cases, only the
        /// main frame can send IPC messages. However, if the <c>nodeIntegrationInSubFrames</c> option is enabled, it is possible for child frames to
        /// send IPC messages also. In that case, handlers should check the <c>senderFrame</c> property of the IPC event to ensure that
        /// the message is coming from the expected frame. Alternatively, register handlers on the appropriate frame directly using the <c>WebFrameMain.ipc</c> interface.
        /// </summary>
        [<Erase>]
        member val ipc: IpcMain = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c> property that determines whether this page is muted.
        /// </summary>
        [<Erase>]
        member val audioMuted: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> property that determines the user agent for this web page.
        /// </summary>
        [<Erase>]
        member val userAgent: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>number</c> property that determines the zoom level for this web contents.<br/><br/>The original size is 0 and each increment above
        /// or below represents zooming 20% larger or smaller to default limits of 300% and 50% of original size, respectively. The
        /// formula for this is <c>scale := 1.2 ^ level</c>.
        /// </summary>
        [<Erase>]
        member val zoomLevel: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>number</c> property that determines the zoom factor for this web contents.<br/><br/>The zoom factor is the zoom percent divided by
        /// 100, so 300% = 3.0.
        /// </summary>
        [<Erase>]
        member val zoomFactor: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An <c>Integer</c> property that sets the frame rate of the web contents to the specified number. Only values between 1
        /// and 240 are accepted.<br/><br/>Only applicable if _offscreen rendering_ is enabled.
        /// </summary>
        [<Erase>]
        member val frameRate: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>Integer</c> representing the unique ID of this WebContents. Each ID is unique among all <c>WebContents</c> instances of the entire
        /// Electron application.
        /// </summary>
        [<Erase>]
        member val id: int = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>Session</c> used by this webContents.
        /// </summary>
        [<Erase>]
        member val session: Session = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>NavigationHistory</c> used by this webContents.
        /// </summary>
        [<Erase>]
        member val navigationHistory: NavigationHistory = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebContents</c> instance that might own this <c>WebContents</c>.
        /// </summary>
        [<Erase>]
        member val hostWebContents: WebContents = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebContents | null</c> property that represents the of DevTools <c>WebContents</c> associated with a given <c>WebContents</c>.<br/><br/>&gt; [!NOTE] Users should never
        /// store this object because it may become <c>null</c> when the DevTools has been closed.
        /// </summary>
        [<Erase>]
        member val devToolsWebContents: Option<WebContents> = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>Debugger</c> instance for this webContents.
        /// </summary>
        [<Erase>]
        member val debugger: Debugger = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c> property that determines whether or not this WebContents will throttle animations and timers when the page becomes backgrounded.
        /// This also affects the Page Visibility API.
        /// </summary>
        [<Erase>]
        member val backgroundThrottling: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>WebFrameMain</c> property that represents the top frame of the page's frame hierarchy.
        /// </summary>
        [<Erase>]
        member val mainFrame: WebFrameMain = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebFrameMain | null</c> property that represents the frame that opened this WebContents, either with open(), or by navigating a
        /// link with a target attribute.
        /// </summary>
        [<Erase>]
        member val opener: Option<WebFrameMain> = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebFrameMain | null</c> property that represents the currently focused frame in this WebContents. Can be the top frame, an
        /// inner <c>&lt;iframe&gt;</c>, or <c>null</c> if nothing is focused.
        /// </summary>
        [<Erase>]
        member val focusedFrame: Option<WebFrameMain> = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Render and control web pages.<br/><br/>Process: Main<br/><br/><c>webContents</c> is an EventEmitter. It is responsible for rendering and controlling a web page
    /// and is a property of the <c>BrowserWindow</c> object. An example of accessing the <c>webContents</c> object:<br/><br/>### Navigation Events<br/><br/>Several events can be
    /// used to monitor navigations as they occur within a <c>webContents</c>.<br/><br/>### Document Navigations<br/><br/>When a <c>webContents</c> navigates to another page (as opposed
    /// to an in-page navigation), the following events will be fired.<br/><br/>* <c>did-start-navigation</c><br/>* <c>will-frame-navigate</c><br/>* <c>will-navigate</c> (only fired when main frame navigates)<br/>* <c>will-redirect</c>
    /// (only fired when a redirect happens during navigation)<br/>* <c>did-redirect-navigation</c> (only fired when a redirect happens during navigation)<br/>* <c>did-frame-navigate</c><br/>* <c>did-navigate</c> (only
    /// fired when main frame navigates)<br/><br/>Subsequent events will not fire if <c>event.preventDefault()</c> is called on any of the cancellable events.<br/><br/>### In-page
    /// Navigation<br/><br/>In-page navigations don't cause the page to reload, but instead navigate to a location within the current page. These events
    /// are not cancellable. For an in-page navigations, the following events will fire in this order:<br/><br/>* <c>did-start-navigation</c><br/>* <c>did-navigate-in-page</c><br/><br/>### Frame Navigation<br/><br/>The <c>will-navigate</c>
    /// and <c>did-navigate</c> events only fire when the mainFrame navigates. If you want to also observe navigations in <c>&lt;iframe&gt;</c>s, use <c>will-frame-navigate</c>
    /// and <c>did-frame-navigate</c> events.
    /// </summary>
    [<Import("webContents", "electron")>]
    type WebContents =
        interface EventEmitter

        /// <summary>
        /// An array of all <c>WebContents</c> instances. This will contain web contents for all windows, webviews, opened devtools, and devtools extension
        /// background pages.
        /// </summary>
        [<Erase>]
        static member mutable getAllWebContents() : WebContents[] = Unchecked.defaultof<_>

        /// <summary>
        /// The web contents that is focused in this application, otherwise returns <c>null</c>.
        /// </summary>
        [<Erase>]
        static member mutable getFocusedWebContents() : Option<WebContents> = Unchecked.defaultof<_>

        /// <summary>
        /// A WebContents instance with the given ID, or <c>undefined</c> if there is no WebContents associated with the given ID.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable fromId(id: int) : Option<WebContents> = Unchecked.defaultof<_>

        /// <summary>
        /// A WebContents instance with the given WebFrameMain, or <c>undefined</c> if there is no WebContents associated with the given WebFrameMain.
        /// </summary>
        /// <param name="frame"></param>
        [<Erase>]
        static member mutable fromFrame(frame: WebFrameMain) : Option<WebContents> = Unchecked.defaultof<_>

        /// <summary>
        /// A WebContents instance with the given TargetID, or <c>undefined</c> if there is no WebContents associated with the given TargetID.<br/><br/>When communicating
        /// with the Chrome DevTools Protocol, it can be useful to lookup a WebContents instance based on its assigned TargetID.
        /// </summary>
        /// <param name="targetId">The Chrome DevTools Protocol TargetID associated with the WebContents instance.</param>
        [<Erase>]
        static member mutable fromDevToolsTargetId(targetId: string) : Option<WebContents> = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; A View that displays a WebContents.<br/><br/>Process: Main<br/><br/>This module cannot be used until the <c>ready</c> event of the <c>app</c> module
    /// is emitted.<br/><br/>### Class: WebContentsView extends <c>View</c><br/><br/>&gt; A View that displays a WebContents.<br/><br/>Process: Main<br/><br/><c>WebContentsView</c> inherits from <c>View</c>.<br/><br/><c>WebContentsView</c> is an EventEmitter.<br/><br/>&gt; [!WARNING]
    /// Electron's built-in classes cannot be subclassed in user code. For more information, see the FAQ.
    /// </summary>
    [<Import("WebContentsView", "electron")>]
    type WebContentsView
        /// <param name="webPreferences">Settings of web page's features.</param>
        /// <param name="webContents">If present, the given WebContents will be adopted by the WebContentsView. A WebContents may only be presented in one
        /// WebContentsView at a time.</param>
        [<ParamObject(0)>]
        (?webPreferences: WebPreferences, ?webContents: WebContents) =
        interface EventEmitter

        /// <summary>
        /// Emitted when the view's bounds have changed in response to being laid out. The new bounds can be retrieved with
        /// <c>view.getBounds()</c>.
        /// </summary>
        [<Emit("$0.on('bounds-changed', $1)")>]
        member inline _.onBoundsChanged(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the view's bounds have changed in response to being laid out. The new bounds can be retrieved with
        /// <c>view.getBounds()</c>.
        /// </summary>
        [<Emit("$0.once('bounds-changed', $1)")>]
        member inline _.onceBoundsChanged(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the view's bounds have changed in response to being laid out. The new bounds can be retrieved with
        /// <c>view.getBounds()</c>.
        /// </summary>
        [<Emit("$0.off('bounds-changed', $1)")>]
        member inline _.offBoundsChanged(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// If the same View is added to a parent which already contains it, it will be reordered such that it
        /// becomes the topmost view.
        /// </summary>
        /// <param name="view">Child view to add.</param>
        /// <param name="index">Index at which to insert the child view. Defaults to adding the child at the end of the child
        /// list.</param>
        [<Erase>]
        member inline _.addChildView(view: View, ?index: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// If the view passed as a parameter is not a child of this view, this method is a no-op.
        /// </summary>
        /// <param name="view">Child view to remove.</param>
        [<Erase>]
        member inline _.removeChildView(view: View) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        /// <param name="bounds">New bounds of the View.</param>
        [<Erase>]
        member inline _.setBounds(bounds: Rectangle) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The bounds of this View, relative to its parent.
        /// </summary>
        [<Erase>]
        member inline _.getBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Examples of valid <c>color</c> values:<br/><br/>* Hex<br/>  * <c>#fff</c> (RGB)<br/>  * <c>#ffff</c> (ARGB)<br/>  * <c>#ffffff</c> (RRGGBB)<br/>  *
        /// <c>#ffffffff</c> (AARRGGBB)<br/>* RGB<br/>  * <c>rgb\(([\d]+),\s*([\d]+),\s*([\d]+)\)</c><br/>    * e.g. <c>rgb(255, 255, 255)</c><br/>* RGBA<br/>  * <c>rgba\(([\d]+),\s*([\d]+),\s*([\d]+),\s*([\d.]+)\)</c><br/>
        ///  * e.g. <c>rgba(255, 255, 255, 1.0)</c><br/>* HSL<br/>  * <c>hsl\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%\)</c><br/>    * e.g. <c>hsl(200, 20%, 50%)</c><br/>* HSLA<br/>
        ///  * <c>hsla\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)</c><br/>    * e.g. <c>hsla(200, 20%, 50%, 0.5)</c><br/>* Color name<br/>  * Options are listed in
        /// SkParseColor.cpp<br/>  * Similar to CSS Color Module Level 3 keywords, but case-sensitive.<br/>    * e.g. <c>blueviolet</c> or
        /// <c>red</c><br/><br/>&gt; [!NOTE] Hex format with alpha takes <c>AARRGGBB</c> or <c>ARGB</c>, _not_ <c>RRGGBBAA</c> or <c>RGB</c>.
        /// </summary>
        /// <param name="color">Color in Hex, RGB, ARGB, HSL, HSLA or named CSS color format. The alpha channel is optional for the
        /// hex type.</param>
        [<Erase>]
        member inline _.setBackgroundColor(color: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// &gt; [!NOTE] The area cutout of the view's border still captures clicks.
        /// </summary>
        /// <param name="radius">Border radius size in pixels.</param>
        [<Erase>]
        member inline _.setBorderRadius(radius: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        /// <param name="visible">If false, the view will be hidden from display.</param>
        [<Erase>]
        member inline _.setVisible(visible: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the view should be drawn. Note that this is different from whether the view is visible on screen—it may
        /// still be obscured or out of view.
        /// </summary>
        [<Erase>]
        member inline _.getVisible() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>WebContents</c> property containing a reference to the displayed <c>WebContents</c>. Use this to interact with the <c>WebContents</c>, for instance to
        /// load a URL.
        /// </summary>
        [<Erase>]
        member val webContents: WebContents = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>View[]</c> property representing the child views of this view.
        /// </summary>
        [<Erase>]
        member val children: View[] = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Create and layout native views.<br/><br/>Process: Main<br/><br/>This module cannot be used until the <c>ready</c> event of the <c>app</c> module is
    /// emitted.<br/><br/>### Class: View<br/><br/>&gt; A basic native view.<br/><br/>Process: Main<br/><br/><c>View</c> is an EventEmitter.<br/><br/>&gt; [!WARNING] Electron's built-in classes cannot be subclassed in user
    /// code. For more information, see the FAQ.
    /// </summary>
    [<Import("View", "electron")>]
    type View() =
        interface EventEmitter

        /// <summary>
        /// Emitted when the view's bounds have changed in response to being laid out. The new bounds can be retrieved with
        /// <c>view.getBounds()</c>.
        /// </summary>
        [<Emit("$0.on('bounds-changed', $1)")>]
        member inline _.onBoundsChanged(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the view's bounds have changed in response to being laid out. The new bounds can be retrieved with
        /// <c>view.getBounds()</c>.
        /// </summary>
        [<Emit("$0.once('bounds-changed', $1)")>]
        member inline _.onceBoundsChanged(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the view's bounds have changed in response to being laid out. The new bounds can be retrieved with
        /// <c>view.getBounds()</c>.
        /// </summary>
        [<Emit("$0.off('bounds-changed', $1)")>]
        member inline _.offBoundsChanged(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// If the same View is added to a parent which already contains it, it will be reordered such that it
        /// becomes the topmost view.
        /// </summary>
        /// <param name="view">Child view to add.</param>
        /// <param name="index">Index at which to insert the child view. Defaults to adding the child at the end of the child
        /// list.</param>
        [<Erase>]
        member inline _.addChildView(view: View, ?index: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// If the view passed as a parameter is not a child of this view, this method is a no-op.
        /// </summary>
        /// <param name="view">Child view to remove.</param>
        [<Erase>]
        member inline _.removeChildView(view: View) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        /// <param name="bounds">New bounds of the View.</param>
        [<Erase>]
        member inline _.setBounds(bounds: Rectangle) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The bounds of this View, relative to its parent.
        /// </summary>
        [<Erase>]
        member inline _.getBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Examples of valid <c>color</c> values:<br/><br/>* Hex<br/>  * <c>#fff</c> (RGB)<br/>  * <c>#ffff</c> (ARGB)<br/>  * <c>#ffffff</c> (RRGGBB)<br/>  *
        /// <c>#ffffffff</c> (AARRGGBB)<br/>* RGB<br/>  * <c>rgb\(([\d]+),\s*([\d]+),\s*([\d]+)\)</c><br/>    * e.g. <c>rgb(255, 255, 255)</c><br/>* RGBA<br/>  * <c>rgba\(([\d]+),\s*([\d]+),\s*([\d]+),\s*([\d.]+)\)</c><br/>
        ///  * e.g. <c>rgba(255, 255, 255, 1.0)</c><br/>* HSL<br/>  * <c>hsl\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%\)</c><br/>    * e.g. <c>hsl(200, 20%, 50%)</c><br/>* HSLA<br/>
        ///  * <c>hsla\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)</c><br/>    * e.g. <c>hsla(200, 20%, 50%, 0.5)</c><br/>* Color name<br/>  * Options are listed in
        /// SkParseColor.cpp<br/>  * Similar to CSS Color Module Level 3 keywords, but case-sensitive.<br/>    * e.g. <c>blueviolet</c> or
        /// <c>red</c><br/><br/>&gt; [!NOTE] Hex format with alpha takes <c>AARRGGBB</c> or <c>ARGB</c>, _not_ <c>RRGGBBAA</c> or <c>RGB</c>.
        /// </summary>
        /// <param name="color">Color in Hex, RGB, ARGB, HSL, HSLA or named CSS color format. The alpha channel is optional for the
        /// hex type.</param>
        [<Erase>]
        member inline _.setBackgroundColor(color: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// &gt; [!NOTE] The area cutout of the view's border still captures clicks.
        /// </summary>
        /// <param name="radius">Border radius size in pixels.</param>
        [<Erase>]
        member inline _.setBorderRadius(radius: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        /// <param name="visible">If false, the view will be hidden from display.</param>
        [<Erase>]
        member inline _.setVisible(visible: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the view should be drawn. Note that this is different from whether the view is visible on screen—it may
        /// still be obscured or out of view.
        /// </summary>
        [<Erase>]
        member inline _.getVisible() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>View[]</c> property representing the child views of this view.
        /// </summary>
        [<Erase>]
        member val children: View[] = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ✔ | Exported ❌</para>
    /// </summary>
    [<Import("UtilityProcess", "electron")>]
    type UtilityProcess =
        interface EventEmitter

        /// <summary>
        /// Emitted once the child process has spawned successfully.
        /// </summary>
        [<Emit("$0.on('spawn', $1)")>]
        member inline _.onSpawn(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once the child process has spawned successfully.
        /// </summary>
        [<Emit("$0.once('spawn', $1)")>]
        member inline _.onceSpawn(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once the child process has spawned successfully.
        /// </summary>
        [<Emit("$0.off('spawn', $1)")>]
        member inline _.offSpawn(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.on('error', $1)")>]
        member inline _.onError(handler: Enums.UtilityProcess.Error.Type -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.on('error', $1)")>]
        member inline _.onError(handler: Fable.Electron.EventInterfaces.Root.IOnError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.once('error', $1)")>]
        member inline _.onceError(handler: Enums.UtilityProcess.Error.Type -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.once('error', $1)")>]
        member inline _.onceError(handler: Fable.Electron.EventInterfaces.Root.IOnError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.off('error', $1)")>]
        member inline _.offError(handler: Enums.UtilityProcess.Error.Type -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
        /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
        /// </summary>
        [<Emit("$0.off('error', $1)")>]
        member inline _.offError(handler: Fable.Electron.EventInterfaces.Root.IOnError -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the child process ends.
        /// </summary>
        [<Emit("$0.on('exit', $1)")>]
        member inline _.onExit(handler: float -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the child process ends.
        /// </summary>
        [<Emit("$0.once('exit', $1)")>]
        member inline _.onceExit(handler: float -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the child process ends.
        /// </summary>
        [<Emit("$0.off('exit', $1)")>]
        member inline _.offExit(handler: float -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process sends a message using <c>process.parentPort.postMessage()</c>.
        /// </summary>
        [<Emit("$0.on('message', $1)")>]
        member inline _.onMessage(handler: obj -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process sends a message using <c>process.parentPort.postMessage()</c>.
        /// </summary>
        [<Emit("$0.once('message', $1)")>]
        member inline _.onceMessage(handler: obj -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process sends a message using <c>process.parentPort.postMessage()</c>.
        /// </summary>
        [<Emit("$0.off('message', $1)")>]
        member inline _.offMessage(handler: obj -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Send a message to the child process, optionally transferring ownership of zero or more <c>MessagePortMain</c> objects.<br/><br/>For example:
        /// </summary>
        /// <param name="message"></param>
        /// <param name="transfer"></param>
        [<Erase>]
        member inline _.postMessage(message: obj, ?transfer: MessagePortMain[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Terminates the process gracefully. On POSIX, it uses SIGTERM but will ensure the process is reaped on exit. This function
        /// returns true if the kill is successful, and false otherwise.
        /// </summary>
        [<Erase>]
        member inline _.kill() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>Integer | undefined</c> representing the process identifier (PID) of the child process. Until the child process has spawned successfully,
        /// the value is <c>undefined</c>. When the child process exits, then the value is <c>undefined</c> after the <c>exit</c> event is emitted.<br/><br/>&gt;
        /// [!NOTE] You can use the <c>pid</c> to determine if the process is currently running.
        /// </summary>
        [<Erase>]
        member val pid: Option<int> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>NodeJS.ReadableStream | null</c> that represents the child process's stdout. If the child was spawned with options.stdio[1] set to anything
        /// other than 'pipe', then this will be <c>null</c>. When the child process exits, then the value is <c>null</c> after the
        /// <c>exit</c> event is emitted.
        /// </summary>
        [<Erase>]
        member val stdout: Option<NodeJS.ReadableStream> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>NodeJS.ReadableStream | null</c> that represents the child process's stderr. If the child was spawned with options.stdio[2] set to anything
        /// other than 'pipe', then this will be <c>null</c>. When the child process exits, then the value is <c>null</c> after the
        /// <c>exit</c> event is emitted.
        /// </summary>
        [<Erase>]
        member val stderr: Option<NodeJS.ReadableStream> = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// <c>utilityProcess</c> creates a child process with Node.js and Message ports enabled. It provides the equivalent of <c>child_process.fork</c> API from Node.js
    /// but instead uses Services API from Chromium to launch the child process.<br/><br/>Process: Main
    /// </summary>
    [<Import("utilityProcess", "electron")>]
    type UtilityProcess =
        /// <summary>
        /// &gt; [!NOTE] <c>utilityProcess.fork</c> can only be called after the <c>ready</c> event has been emitted on <c>App</c>.
        /// </summary>
        /// <param name="modulePath">Path to the script that should run as entrypoint in the child process.</param>
        /// <param name="args">List of string arguments that will be available as <c>process.argv</c> in the child process.</param>
        /// <param name="env">Environment key-value pairs. Default is <c>process.env</c>.</param>
        /// <param name="execArgv">List of string arguments passed to the executable.</param>
        /// <param name="cwd">Current working directory of the child process.</param>
        /// <param name="stdio">Allows configuring the mode for <c>stdout</c> and <c>stderr</c> of the child process. Default is <c>inherit</c>. String value can be
        /// one of <c>pipe</c>, <c>ignore</c>, <c>inherit</c>, for more details on these values you can refer to stdio documentation from Node.js. Currently
        /// this option only supports configuring <c>stdout</c> and <c>stderr</c> to either <c>pipe</c>, <c>inherit</c> or <c>ignore</c>. Configuring <c>stdin</c> to any property other
        /// than <c>ignore</c> is not supported and will result in an error. For example, the supported values will be processed as
        /// following:</param>
        /// <param name="serviceName">Name of the process that will appear in <c>name</c> property of <c>ProcessMetric</c> returned by <c>app.getAppMetrics</c> and <c>child-process-gone</c> event of
        /// <c>app</c>. Default is <c>Node Utility Process</c>.</param>
        /// <param name="allowLoadingUnsignedLibraries">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || With this flag, the
        /// utility process will be launched via the <c>Electron Helper (Plugin).app</c> helper executable on macOS, which can be codesigned with <c>com.apple.security.cs.disable-library-validation</c>
        /// and <c>com.apple.security.cs.allow-unsigned-executable-memory</c> entitlements. This will allow the utility process to load unsigned libraries. Unless you specifically need this capability, it
        /// is best to leave this disabled. Default is <c>false</c>.</param>
        /// <param name="respondToAuthRequestsFromMainProcess">With this flag, all HTTP 401 and 407 network requests created via the net module will allow responding to
        /// them via the <c>app#login</c> event in the main process instead of the default <c>login</c> event on the <c>ClientRequest</c> object. Default
        /// is <c>false</c>.</param>
        [<Erase; ParamObject(2)>]
        static member mutable fork
            (
                modulePath: string,
                ?args: string[],
                ?env: UtilityProcess.Fork.Options.Env,
                ?execArgv: string[],
                ?cwd: string,
                ?stdio: U2<Enums.UtilityProcess.Fork.Options.Stdio[], string>,
                ?serviceName: string,
                ?allowLoadingUnsignedLibraries: bool,
                ?respondToAuthRequestsFromMainProcess: bool
            ) : UtilityProcess =
            Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// <br/><br/>### Class: Tray<br/><br/>&gt; Add icons and context menus to the system's notification area.<br/><br/>Process: Main<br/><br/><c>Tray</c> is an EventEmitter.<br/><br/><code><br/>const { app, Menu,
    /// Tray } = require('electron')<br/><br/>let tray = null<br/>app.whenReady().then(() =&gt; {<br/>  tray = new Tray('/path/to/my/icon')<br/>  const contextMenu = Menu.buildFromTemplate([<br/>
    ///   { label: 'Item1', type: 'radio' },<br/>    { label: 'Item2', type: 'radio' },<br/>
    /// { label: 'Item3', type: 'radio', checked: true },<br/>    { label: 'Item4', type: 'radio' }<br/>  ])<br/>
    /// tray.setToolTip('This is my application.')<br/>  tray.setContextMenu(contextMenu)<br/>})<br/></code><br/><br/>&gt; [!TIP] See also: A detailed guide about how to implement Tray menus.<br/><br/>&gt; [!WARNING] Electron's
    /// built-in classes cannot be subclassed in user code. For more information, see the FAQ.<br/><br/>**Platform Considerations**<br/><br/>**Linux**<br/><br/>* Tray icon uses StatusNotifierItem by
    /// default, when it is not available in user's desktop environment the <c>GtkStatusIcon</c> will be used instead.<br/>* The <c>click</c> event is
    /// emitted when the tray icon receives activation from user, however the StatusNotifierItem spec does not specify which action would cause
    /// an activation, for some environments it is left mouse click, but for some it might be double left mouse click.<br/>*
    /// In order for changes made to individual <c>MenuItem</c>s to take effect, you have to call <c>setContextMenu</c> again. For example:<br/><br/><code><br/>const {
    /// app, Menu, Tray } = require('electron')<br/><br/>let appIcon = null<br/>app.whenReady().then(() =&gt; {<br/>  appIcon = new Tray('/path/to/my/icon')<br/>  const contextMenu =
    /// Menu.buildFromTemplate([<br/>    { label: 'Item1', type: 'radio' },<br/>    { label: 'Item2', type: 'radio' }<br/>
    /// ])<br/><br/>  // Make a change to the context menu<br/>  contextMenu.items[1].checked = false<br/><br/>  // Call this again for
    /// Linux because we modified the context menu<br/>  appIcon.setContextMenu(contextMenu)<br/>})<br/></code><br/><br/>**MacOS**<br/><br/>* Icons passed to the Tray constructor should be Template Images.<br/>* To
    /// make sure your icon isn't grainy on retina monitors, be sure your <c>@2x</c> image is 144dpi.<br/>* If you are bundling
    /// your application (e.g., with webpack for development), be sure that the file names are not being mangled or hashed. The
    /// filename needs to end in Template, and the <c>@2x</c> image needs to have the same filename as the standard image,
    /// or MacOS will not magically invert your image's colors or use the high density image.<br/>* 16x16 (72dpi) and 32x32@2x (144dpi)
    /// work well for most icons.<br/><br/>**Windows**<br/><br/>* It is recommended to use <c>ICO</c> icons to get best visual effects.
    /// </summary>
    [<Import("Tray", "electron")>]
    type Tray
        /// <param name="image"></param>
        /// <param name="guid">A unique string used to identify the tray icon. Must adhere to UUID format.</param>
        (image: U2<NativeImage, string>, ?guid: string) =
        interface EventEmitter

        /// <summary>
        /// Emitted when the tray icon is clicked.<br/><br/>Note that on Linux this event is emitted when the tray icon receives an
        /// activation, which might not necessarily be left mouse click.
        /// </summary>
        [<Emit("$0.on('click', $1)")>]
        member inline _.onClick(handler: KeyboardEvent -> Rectangle -> Point -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the tray icon is clicked.<br/><br/>Note that on Linux this event is emitted when the tray icon receives an
        /// activation, which might not necessarily be left mouse click.
        /// </summary>
        [<Emit("$0.on('click', $1)")>]
        member inline _.onClick(handler: Fable.Electron.EventInterfaces.Root.IOnClick -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the tray icon is clicked.<br/><br/>Note that on Linux this event is emitted when the tray icon receives an
        /// activation, which might not necessarily be left mouse click.
        /// </summary>
        [<Emit("$0.once('click', $1)")>]
        member inline _.onceClick(handler: KeyboardEvent -> Rectangle -> Point -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the tray icon is clicked.<br/><br/>Note that on Linux this event is emitted when the tray icon receives an
        /// activation, which might not necessarily be left mouse click.
        /// </summary>
        [<Emit("$0.once('click', $1)")>]
        member inline _.onceClick(handler: Fable.Electron.EventInterfaces.Root.IOnClick -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the tray icon is clicked.<br/><br/>Note that on Linux this event is emitted when the tray icon receives an
        /// activation, which might not necessarily be left mouse click.
        /// </summary>
        [<Emit("$0.off('click', $1)")>]
        member inline _.offClick(handler: KeyboardEvent -> Rectangle -> Point -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the tray icon is clicked.<br/><br/>Note that on Linux this event is emitted when the tray icon receives an
        /// activation, which might not necessarily be left mouse click.
        /// </summary>
        [<Emit("$0.off('click', $1)")>]
        member inline _.offClick(handler: Fable.Electron.EventInterfaces.Root.IOnClick -> unit) : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is right clicked.
        /// </summary>
        [<Emit("$0.on('right-click', $1)")>]
        member inline _.onRightClick(handler: KeyboardEvent -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is right clicked.
        /// </summary>
        [<Emit("$0.on('right-click', $1)")>]
        member inline _.onRightClick(handler: Fable.Electron.EventInterfaces.Root.IOnRightClick -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is right clicked.
        /// </summary>
        [<Emit("$0.once('right-click', $1)")>]
        member inline _.onceRightClick(handler: KeyboardEvent -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is right clicked.
        /// </summary>
        [<Emit("$0.once('right-click', $1)")>]
        member inline _.onceRightClick(handler: Fable.Electron.EventInterfaces.Root.IOnRightClick -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is right clicked.
        /// </summary>
        [<Emit("$0.off('right-click', $1)")>]
        member inline _.offRightClick(handler: KeyboardEvent -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is right clicked.
        /// </summary>
        [<Emit("$0.off('right-click', $1)")>]
        member inline _.offRightClick(handler: Fable.Electron.EventInterfaces.Root.IOnRightClick -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is double clicked.
        /// </summary>
        [<Emit("$0.on('double-click', $1)")>]
        member inline _.onDoubleClick(handler: KeyboardEvent -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is double clicked.
        /// </summary>
        [<Emit("$0.on('double-click', $1)")>]
        member inline _.onDoubleClick(handler: Fable.Electron.EventInterfaces.Root.IOnDoubleClick -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is double clicked.
        /// </summary>
        [<Emit("$0.once('double-click', $1)")>]
        member inline _.onceDoubleClick(handler: KeyboardEvent -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is double clicked.
        /// </summary>
        [<Emit("$0.once('double-click', $1)")>]
        member inline _.onceDoubleClick(handler: Fable.Electron.EventInterfaces.Root.IOnDoubleClick -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is double clicked.
        /// </summary>
        [<Emit("$0.off('double-click', $1)")>]
        member inline _.offDoubleClick(handler: KeyboardEvent -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is double clicked.
        /// </summary>
        [<Emit("$0.off('double-click', $1)")>]
        member inline _.offDoubleClick(handler: Fable.Electron.EventInterfaces.Root.IOnDoubleClick -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is middle clicked.
        /// </summary>
        [<Emit("$0.on('middle-click', $1)")>]
        member inline _.onMiddleClick(handler: KeyboardEvent -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is middle clicked.
        /// </summary>
        [<Emit("$0.on('middle-click', $1)")>]
        member inline _.onMiddleClick(handler: Fable.Electron.EventInterfaces.Root.IOnMiddleClick -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is middle clicked.
        /// </summary>
        [<Emit("$0.once('middle-click', $1)")>]
        member inline _.onceMiddleClick(handler: KeyboardEvent -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is middle clicked.
        /// </summary>
        [<Emit("$0.once('middle-click', $1)")>]
        member inline _.onceMiddleClick(handler: Fable.Electron.EventInterfaces.Root.IOnMiddleClick -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is middle clicked.
        /// </summary>
        [<Emit("$0.off('middle-click', $1)")>]
        member inline _.offMiddleClick(handler: KeyboardEvent -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray icon is middle clicked.
        /// </summary>
        [<Emit("$0.off('middle-click', $1)")>]
        member inline _.offMiddleClick(handler: Fable.Electron.EventInterfaces.Root.IOnMiddleClick -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray balloon shows.
        /// </summary>
        [<Emit("$0.on('balloon-show', $1)")>]
        member inline _.onBalloonShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray balloon shows.
        /// </summary>
        [<Emit("$0.once('balloon-show', $1)")>]
        member inline _.onceBalloonShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray balloon shows.
        /// </summary>
        [<Emit("$0.off('balloon-show', $1)")>]
        member inline _.offBalloonShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray balloon is clicked.
        /// </summary>
        [<Emit("$0.on('balloon-click', $1)")>]
        member inline _.onBalloonClick(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray balloon is clicked.
        /// </summary>
        [<Emit("$0.once('balloon-click', $1)")>]
        member inline _.onceBalloonClick(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray balloon is clicked.
        /// </summary>
        [<Emit("$0.off('balloon-click', $1)")>]
        member inline _.offBalloonClick(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray balloon is closed because of timeout or user manually closes it.
        /// </summary>
        [<Emit("$0.on('balloon-closed', $1)")>]
        member inline _.onBalloonClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray balloon is closed because of timeout or user manually closes it.
        /// </summary>
        [<Emit("$0.once('balloon-closed', $1)")>]
        member inline _.onceBalloonClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the tray balloon is closed because of timeout or user manually closes it.
        /// </summary>
        [<Emit("$0.off('balloon-closed', $1)")>]
        member inline _.offBalloonClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when any dragged items are dropped on the tray icon.
        /// </summary>
        [<Emit("$0.on('drop', $1)")>]
        member inline _.onDrop(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when any dragged items are dropped on the tray icon.
        /// </summary>
        [<Emit("$0.once('drop', $1)")>]
        member inline _.onceDrop(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when any dragged items are dropped on the tray icon.
        /// </summary>
        [<Emit("$0.off('drop', $1)")>]
        member inline _.offDrop(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged files are dropped in the tray icon.
        /// </summary>
        [<Emit("$0.on('drop-files', $1)")>]
        member inline _.onDropFiles(handler: Event -> string[] -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged files are dropped in the tray icon.
        /// </summary>
        [<Emit("$0.on('drop-files', $1)")>]
        member inline _.onDropFiles(handler: Fable.Electron.EventInterfaces.Root.IOnDropFiles -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged files are dropped in the tray icon.
        /// </summary>
        [<Emit("$0.once('drop-files', $1)")>]
        member inline _.onceDropFiles(handler: Event -> string[] -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged files are dropped in the tray icon.
        /// </summary>
        [<Emit("$0.once('drop-files', $1)")>]
        member inline _.onceDropFiles(handler: Fable.Electron.EventInterfaces.Root.IOnDropFiles -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged files are dropped in the tray icon.
        /// </summary>
        [<Emit("$0.off('drop-files', $1)")>]
        member inline _.offDropFiles(handler: Event -> string[] -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged files are dropped in the tray icon.
        /// </summary>
        [<Emit("$0.off('drop-files', $1)")>]
        member inline _.offDropFiles(handler: Fable.Electron.EventInterfaces.Root.IOnDropFiles -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged text is dropped in the tray icon.
        /// </summary>
        [<Emit("$0.on('drop-text', $1)")>]
        member inline _.onDropText(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged text is dropped in the tray icon.
        /// </summary>
        [<Emit("$0.on('drop-text', $1)")>]
        member inline _.onDropText(handler: Fable.Electron.EventInterfaces.Root.IOnDropText -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged text is dropped in the tray icon.
        /// </summary>
        [<Emit("$0.once('drop-text', $1)")>]
        member inline _.onceDropText(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged text is dropped in the tray icon.
        /// </summary>
        [<Emit("$0.once('drop-text', $1)")>]
        member inline _.onceDropText(handler: Fable.Electron.EventInterfaces.Root.IOnDropText -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged text is dropped in the tray icon.
        /// </summary>
        [<Emit("$0.off('drop-text', $1)")>]
        member inline _.offDropText(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when dragged text is dropped in the tray icon.
        /// </summary>
        [<Emit("$0.off('drop-text', $1)")>]
        member inline _.offDropText(handler: Fable.Electron.EventInterfaces.Root.IOnDropText -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a drag operation enters the tray icon.
        /// </summary>
        [<Emit("$0.on('drag-enter', $1)")>]
        member inline _.onDragEnter(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a drag operation enters the tray icon.
        /// </summary>
        [<Emit("$0.once('drag-enter', $1)")>]
        member inline _.onceDragEnter(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a drag operation enters the tray icon.
        /// </summary>
        [<Emit("$0.off('drag-enter', $1)")>]
        member inline _.offDragEnter(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a drag operation exits the tray icon.
        /// </summary>
        [<Emit("$0.on('drag-leave', $1)")>]
        member inline _.onDragLeave(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a drag operation exits the tray icon.
        /// </summary>
        [<Emit("$0.once('drag-leave', $1)")>]
        member inline _.onceDragLeave(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a drag operation exits the tray icon.
        /// </summary>
        [<Emit("$0.off('drag-leave', $1)")>]
        member inline _.offDragLeave(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a drag operation ends on the tray or ends at another location.
        /// </summary>
        [<Emit("$0.on('drag-end', $1)")>]
        member inline _.onDragEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a drag operation ends on the tray or ends at another location.
        /// </summary>
        [<Emit("$0.once('drag-end', $1)")>]
        member inline _.onceDragEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a drag operation ends on the tray or ends at another location.
        /// </summary>
        [<Emit("$0.off('drag-end', $1)")>]
        member inline _.offDragEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse is released from clicking the tray icon.<br/><br/>&gt; [!NOTE] This will not be emitted if you have
        /// set a context menu for your Tray using <c>tray.setContextMenu</c>, as a result of macOS-level constraints.
        /// </summary>
        [<Emit("$0.on('mouse-up', $1)")>]
        member inline _.onMouseUp(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse is released from clicking the tray icon.<br/><br/>&gt; [!NOTE] This will not be emitted if you have
        /// set a context menu for your Tray using <c>tray.setContextMenu</c>, as a result of macOS-level constraints.
        /// </summary>
        [<Emit("$0.on('mouse-up', $1)")>]
        member inline _.onMouseUp(handler: Fable.Electron.EventInterfaces.Root.IOnMouseUp -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse is released from clicking the tray icon.<br/><br/>&gt; [!NOTE] This will not be emitted if you have
        /// set a context menu for your Tray using <c>tray.setContextMenu</c>, as a result of macOS-level constraints.
        /// </summary>
        [<Emit("$0.once('mouse-up', $1)")>]
        member inline _.onceMouseUp(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse is released from clicking the tray icon.<br/><br/>&gt; [!NOTE] This will not be emitted if you have
        /// set a context menu for your Tray using <c>tray.setContextMenu</c>, as a result of macOS-level constraints.
        /// </summary>
        [<Emit("$0.once('mouse-up', $1)")>]
        member inline _.onceMouseUp(handler: Fable.Electron.EventInterfaces.Root.IOnMouseUp -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse is released from clicking the tray icon.<br/><br/>&gt; [!NOTE] This will not be emitted if you have
        /// set a context menu for your Tray using <c>tray.setContextMenu</c>, as a result of macOS-level constraints.
        /// </summary>
        [<Emit("$0.off('mouse-up', $1)")>]
        member inline _.offMouseUp(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse is released from clicking the tray icon.<br/><br/>&gt; [!NOTE] This will not be emitted if you have
        /// set a context menu for your Tray using <c>tray.setContextMenu</c>, as a result of macOS-level constraints.
        /// </summary>
        [<Emit("$0.off('mouse-up', $1)")>]
        member inline _.offMouseUp(handler: Fable.Electron.EventInterfaces.Root.IOnMouseUp -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse clicks the tray icon.
        /// </summary>
        [<Emit("$0.on('mouse-down', $1)")>]
        member inline _.onMouseDown(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse clicks the tray icon.
        /// </summary>
        [<Emit("$0.on('mouse-down', $1)")>]
        member inline _.onMouseDown(handler: Fable.Electron.EventInterfaces.Root.IOnMouseDown -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse clicks the tray icon.
        /// </summary>
        [<Emit("$0.once('mouse-down', $1)")>]
        member inline _.onceMouseDown(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse clicks the tray icon.
        /// </summary>
        [<Emit("$0.once('mouse-down', $1)")>]
        member inline _.onceMouseDown(handler: Fable.Electron.EventInterfaces.Root.IOnMouseDown -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse clicks the tray icon.
        /// </summary>
        [<Emit("$0.off('mouse-down', $1)")>]
        member inline _.offMouseDown(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse clicks the tray icon.
        /// </summary>
        [<Emit("$0.off('mouse-down', $1)")>]
        member inline _.offMouseDown(handler: Fable.Electron.EventInterfaces.Root.IOnMouseDown -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse enters the tray icon.
        /// </summary>
        [<Emit("$0.on('mouse-enter', $1)")>]
        member inline _.onMouseEnter(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse enters the tray icon.
        /// </summary>
        [<Emit("$0.on('mouse-enter', $1)")>]
        member inline _.onMouseEnter(handler: Fable.Electron.EventInterfaces.Root.IOnMouseEnter -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse enters the tray icon.
        /// </summary>
        [<Emit("$0.once('mouse-enter', $1)")>]
        member inline _.onceMouseEnter(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse enters the tray icon.
        /// </summary>
        [<Emit("$0.once('mouse-enter', $1)")>]
        member inline _.onceMouseEnter(handler: Fable.Electron.EventInterfaces.Root.IOnMouseEnter -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse enters the tray icon.
        /// </summary>
        [<Emit("$0.off('mouse-enter', $1)")>]
        member inline _.offMouseEnter(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse enters the tray icon.
        /// </summary>
        [<Emit("$0.off('mouse-enter', $1)")>]
        member inline _.offMouseEnter(handler: Fable.Electron.EventInterfaces.Root.IOnMouseEnter -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse exits the tray icon.
        /// </summary>
        [<Emit("$0.on('mouse-leave', $1)")>]
        member inline _.onMouseLeave(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse exits the tray icon.
        /// </summary>
        [<Emit("$0.on('mouse-leave', $1)")>]
        member inline _.onMouseLeave(handler: Fable.Electron.EventInterfaces.Root.IOnMouseLeave -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse exits the tray icon.
        /// </summary>
        [<Emit("$0.once('mouse-leave', $1)")>]
        member inline _.onceMouseLeave(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse exits the tray icon.
        /// </summary>
        [<Emit("$0.once('mouse-leave', $1)")>]
        member inline _.onceMouseLeave(handler: Fable.Electron.EventInterfaces.Root.IOnMouseLeave -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse exits the tray icon.
        /// </summary>
        [<Emit("$0.off('mouse-leave', $1)")>]
        member inline _.offMouseLeave(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse exits the tray icon.
        /// </summary>
        [<Emit("$0.off('mouse-leave', $1)")>]
        member inline _.offMouseLeave(handler: Fable.Electron.EventInterfaces.Root.IOnMouseLeave -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse moves in the tray icon.
        /// </summary>
        [<Emit("$0.on('mouse-move', $1)")>]
        member inline _.onMouseMove(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse moves in the tray icon.
        /// </summary>
        [<Emit("$0.on('mouse-move', $1)")>]
        member inline _.onMouseMove(handler: Fable.Electron.EventInterfaces.Root.IOnMouseMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse moves in the tray icon.
        /// </summary>
        [<Emit("$0.once('mouse-move', $1)")>]
        member inline _.onceMouseMove(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse moves in the tray icon.
        /// </summary>
        [<Emit("$0.once('mouse-move', $1)")>]
        member inline _.onceMouseMove(handler: Fable.Electron.EventInterfaces.Root.IOnMouseMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse moves in the tray icon.
        /// </summary>
        [<Emit("$0.off('mouse-move', $1)")>]
        member inline _.offMouseMove(handler: KeyboardEvent -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the mouse moves in the tray icon.
        /// </summary>
        [<Emit("$0.off('mouse-move', $1)")>]
        member inline _.offMouseMove(handler: Fable.Electron.EventInterfaces.Root.IOnMouseMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Destroys the tray icon immediately.
        /// </summary>
        [<Erase>]
        member inline _.destroy() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the <c>image</c> associated with this tray icon.
        /// </summary>
        /// <param name="image"></param>
        [<Erase>]
        member inline _.setImage(image: U2<NativeImage, string>) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the <c>image</c> associated with this tray icon when pressed on macOS.
        /// </summary>
        /// <param name="image"></param>
        [<Erase>]
        member inline _.setPressedImage(image: U2<NativeImage, string>) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets the hover text for this tray icon. Setting the text to an empty string will remove the tooltip.
        /// </summary>
        /// <param name="toolTip"></param>
        [<Erase>]
        member inline _.setToolTip(toolTip: string) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the title displayed next to the tray icon in the status bar (Support ANSI colors).
        /// </summary>
        /// <param name="title"></param>
        /// <param name="fontType">The font family variant to display, can be <c>monospaced</c> or <c>monospacedDigit</c>. <c>monospaced</c> is available in macOS 10.15+ When left
        /// blank, the title uses the default system font.</param>
        [<Erase; ParamObject(1)>]
        member inline _.setTitle(title: string, ?fontType: Enums.Tray.SetTitle.Options.FontType) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// the title displayed next to the tray icon in the status bar
        /// </summary>
        [<Erase>]
        member inline _.getTitle() : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the option to ignore double click events. Ignoring these events allows you to detect every individual click of the
        /// tray icon.<br/><br/>This value is set to false by default.
        /// </summary>
        /// <param name="ignore"></param>
        [<Erase>]
        member inline _.setIgnoreDoubleClickEvents(ignore: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether double click events will be ignored.
        /// </summary>
        [<Erase>]
        member inline _.getIgnoreDoubleClickEvents() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Displays a tray balloon.
        /// </summary>
        /// <param name="icon">Icon to use when <c>iconType</c> is <c>custom</c>.</param>
        /// <param name="iconType">Can be <c>none</c>, <c>info</c>, <c>warning</c>, <c>error</c> or <c>custom</c>. Default is <c>custom</c>.</param>
        /// <param name="title"></param>
        /// <param name="content"></param>
        /// <param name="largeIcon">The large version of the icon should be used. Default is <c>true</c>. Maps to <c>NIIF_LARGE_ICON</c>.</param>
        /// <param name="noSound">Do not play the associated sound. Default is <c>false</c>. Maps to <c>NIIF_NOSOUND</c>.</param>
        /// <param name="respectQuietTime">Do not display the balloon notification if the current user is in "quiet time". Default is <c>false</c>. Maps to
        /// <c>NIIF_RESPECT_QUIET_TIME</c>.</param>
        [<Erase; ParamObject(0)>]
        member inline _.displayBalloon
            (
                ?icon: U2<NativeImage, string>,
                ?iconType: Enums.Tray.DisplayBalloon.Options.IconType,
                title: string,
                content: string,
                ?largeIcon: bool,
                ?noSound: bool,
                ?respectQuietTime: bool
            ) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Removes a tray balloon.
        /// </summary>
        [<Erase>]
        member inline _.removeBalloon() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Returns focus to the taskbar notification area. Notification area icons should use this message when they have completed their UI
        /// operation. For example, if the icon displays a shortcut menu, but the user presses ESC to cancel it, use <c>tray.focus()</c>
        /// to return focus to the notification area.
        /// </summary>
        [<Erase>]
        member inline _.focus() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Pops up the context menu of the tray icon. When <c>menu</c> is passed, the <c>menu</c> will be shown instead of
        /// the tray icon's context menu.<br/><br/>The <c>position</c> is only available on Windows, and it is (0, 0) by default.
        /// </summary>
        /// <param name="menu"></param>
        /// <param name="position">The pop up position.</param>
        [<Erase>]
        member inline _.popUpContextMenu(?menu: Menu, ?position: Point) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Closes an open context menu, as set by <c>tray.setContextMenu()</c>.
        /// </summary>
        [<Erase>]
        member inline _.closeContextMenu() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets the context menu for this icon.
        /// </summary>
        /// <param name="menu"></param>
        [<Erase>]
        member inline _.setContextMenu(menu: Option<Menu>) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The <c>bounds</c> of this tray icon as <c>Object</c>.
        /// </summary>
        [<Erase>]
        member inline _.getBounds() : Rectangle = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The GUID used to uniquely identify the tray icon and allow it to retain its position between relaunches, or null
        /// if none is set.
        /// </summary>
        [<Erase>]
        member inline _.getGUID() : Option<string> = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Whether the tray icon is destroyed.
        /// </summary>
        [<Erase>]
        member inline _.isDestroyed() : bool = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; [!WARNING] Electron's built-in classes cannot be subclassed in user code. For more information, see the FAQ.<br/><br/>### Class: TouchBar<br/><br/>&gt; Create
    /// TouchBar layouts for native macOS applications<br/><br/>Process: Main
    /// </summary>
    [<Import("TouchBar", "electron")>]
    type TouchBar
        /// <param name="items"></param>
        /// <param name="escapeItem"></param>
        [<ParamObject(0)>]
        (?items: TouchBarItems[], ?escapeItem: Option<TouchBarItems>) =
        /// <summary>
        /// A <c>TouchBarItem</c> that will replace the "esc" button on the touch bar when set. Setting to <c>null</c> restores the default
        /// "esc" button. Changing this value immediately updates the escape item in the touch bar.
        /// </summary>
        [<Erase>]
        member val escapeItem: TouchBarItem = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// &gt; Create a spacer between two items in the touch bar for native macOS applications<br/><br/>Process: Main<br/> _This class is not
    /// exported from the <c>'electron'</c> module. It is only available as a return value of other methods in the Electron API._
    /// </summary>
    [<Import("TouchBar.TouchBarSpacer", "electron")>]
    type TouchBarSpacer
        /// <param name="size">Size of spacer, possible values are:</param>
        [<ParamObject(0)>]
        (?size: Enums.TouchBarSpacer.Options.Size) =
        /// <summary>
        /// A <c>string</c> representing the size of the spacer.  Can be <c>small</c>, <c>large</c> or <c>flexible</c>.
        /// </summary>
        [<Erase>]
        member val size: Enums.TouchBarSpacer.Size = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// &gt; Create a slider in the touch bar for native macOS applications<br/><br/>Process: Main<br/> _This class is not exported from the
    /// <c>'electron'</c> module. It is only available as a return value of other methods in the Electron API._
    /// </summary>
    [<Import("TouchBar.TouchBarSlider", "electron")>]
    type TouchBarSlider
        /// <param name="label">Label text.</param>
        /// <param name="value">Selected value.</param>
        /// <param name="minValue">Minimum value.</param>
        /// <param name="maxValue">Maximum value.</param>
        /// <param name="change">Function to call when the slider is changed.</param>
        [<ParamObject(0)>]
        (?label: string, ?value: int, ?minValue: int, ?maxValue: int, ?change: float -> unit) =
        /// <summary>
        /// A <c>string</c> representing the slider's current text. Changing this value immediately updates the slider in the touch bar.
        /// </summary>
        [<Erase>]
        member val label: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>number</c> representing the slider's current value. Changing this value immediately updates the slider in the touch bar.
        /// </summary>
        [<Erase>]
        member val value: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>number</c> representing the slider's current minimum value. Changing this value immediately updates the slider in the touch bar.
        /// </summary>
        [<Erase>]
        member val minValue: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>number</c> representing the slider's current maximum value. Changing this value immediately updates the slider in the touch bar.
        /// </summary>
        [<Erase>]
        member val maxValue: float = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// &gt; Create a segmented control (a button group) where one button has a selected state<br/><br/>Process: Main<br/> _This class is not
    /// exported from the <c>'electron'</c> module. It is only available as a return value of other methods in the Electron API._
    /// </summary>
    [<Import("TouchBar.TouchBarSegmentedControl", "electron")>]
    type TouchBarSegmentedControl
        /// <param name="segments">An array of segments to place in this control.</param>
        /// <param name="segmentStyle">Style of the segments:</param>
        /// <param name="mode">The selection mode of the control:</param>
        /// <param name="selectedIndex">The index of the currently selected segment, will update automatically with user interaction. When the mode is <c>multiple</c> it
        /// will be the last selected item.</param>
        /// <param name="change">Called when the user selects a new segment.</param>
        [<ParamObject(0)>]
        (
            segments: SegmentedControlSegment[],
            ?segmentStyle: Enums.TouchBarSegmentedControl.Options.SegmentStyle,
            ?mode: Enums.TouchBarSegmentedControl.Options.Mode,
            ?selectedIndex: int,
            ?change: TouchBarSegmentedControl.Options.Change
        ) =
        /// <summary>
        /// A <c>string</c> representing the controls current segment style. Updating this value immediately updates the control in the touch bar.
        /// </summary>
        [<Erase>]
        member val segmentStyle: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>SegmentedControlSegment[]</c> array representing the segments in this control. Updating this value immediately updates the control in the touch bar.
        /// Updating deep properties inside this array **does not update the touch bar**.
        /// </summary>
        [<Erase>]
        member val segments: SegmentedControlSegment[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An <c>Integer</c> representing the currently selected segment. Changing this value immediately updates the control in the touch bar. User interaction
        /// with the touch bar will update this value automatically.
        /// </summary>
        [<Erase>]
        member val selectedIndex: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the current selection mode of the control.  Can be <c>single</c>, <c>multiple</c> or <c>buttons</c>.
        /// </summary>
        [<Erase>]
        member val mode: Enums.TouchBarSegmentedControl.Mode = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// &gt; Create a scrubber (a scrollable selector)<br/><br/>Process: Main<br/> _This class is not exported from the <c>'electron'</c> module. It is only
    /// available as a return value of other methods in the Electron API._
    /// </summary>
    [<Import("TouchBar.TouchBarScrubber", "electron")>]
    type TouchBarScrubber
        /// <param name="items">An array of items to place in this scrubber.</param>
        /// <param name="``select``">Called when the user taps an item that was not the last tapped item.</param>
        /// <param name="highlight">Called when the user taps any item.</param>
        /// <param name="selectedStyle">Selected item style. Can be <c>background</c>, <c>outline</c> or <c>none</c>. Defaults to <c>none</c>.</param>
        /// <param name="overlayStyle">Selected overlay item style. Can be <c>background</c>, <c>outline</c> or <c>none</c>. Defaults to <c>none</c>.</param>
        /// <param name="showArrowButtons">Whether to show arrow buttons. Defaults to <c>false</c> and is only shown if <c>items</c> is non-empty.</param>
        /// <param name="mode">Can be <c>fixed</c> or <c>free</c>. The default is <c>free</c>.</param>
        /// <param name="continuous">Defaults to <c>true</c>.</param>
        [<ParamObject(0)>]
        (
            items: ScrubberItem[],
            ?``select``: int -> unit,
            ?highlight: int -> unit,
            ?selectedStyle: Enums.TouchBarScrubber.Options.SelectedStyle,
            ?overlayStyle: Enums.TouchBarScrubber.Options.OverlayStyle,
            ?showArrowButtons: bool,
            ?mode: Enums.TouchBarScrubber.Options.Mode,
            ?continuous: bool
        ) =
        /// <summary>
        /// A <c>ScrubberItem[]</c> array representing the items in this scrubber. Updating this value immediately updates the control in the touch bar.
        /// Updating deep properties inside this array **does not update the touch bar**.
        /// </summary>
        [<Erase>]
        member val items: ScrubberItem[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the style that selected items in the scrubber should have. Updating this value immediately updates the control
        /// in the touch bar. Possible values:<br/><br/>* <c>background</c> - Maps to <c>[NSScrubberSelectionStyle roundedBackgroundStyle]</c>.<br/>* <c>outline</c> - Maps to <c>[NSScrubberSelectionStyle outlineOverlayStyle]</c>.<br/>* <c>none</c> -
        /// Removes all styles.
        /// </summary>
        [<Erase>]
        member val selectedStyle: Enums.TouchBarScrubber.SelectedStyle = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the style that selected items in the scrubber should have. This style is overlaid on top of
        /// the scrubber item instead of being placed behind it. Updating this value immediately updates the control in the touch bar.
        /// Possible values:<br/><br/>* <c>background</c> - Maps to <c>[NSScrubberSelectionStyle roundedBackgroundStyle]</c>.<br/>* <c>outline</c> - Maps to <c>[NSScrubberSelectionStyle outlineOverlayStyle]</c>.<br/>* <c>none</c> - Removes all styles.
        /// </summary>
        [<Erase>]
        member val overlayStyle: Enums.TouchBarScrubber.OverlayStyle = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> representing whether to show the left / right selection arrows in this scrubber. Updating this value immediately updates
        /// the control in the touch bar.
        /// </summary>
        [<Erase>]
        member val showArrowButtons: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the mode of this scrubber. Updating this value immediately updates the control in the touch bar. Possible
        /// values:<br/><br/>* <c>fixed</c> - Maps to <c>NSScrubberModeFixed</c>.<br/>* <c>free</c> - Maps to <c>NSScrubberModeFree</c>.
        /// </summary>
        [<Erase>]
        member val mode: Enums.TouchBarScrubber.Mode = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> representing whether this scrubber is continuous or not. Updating this value immediately updates the control in the touch
        /// bar.
        /// </summary>
        [<Erase>]
        member val continuous: bool = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// &gt; Create a popover in the touch bar for native macOS applications<br/><br/>Process: Main<br/> _This class is not exported from the
    /// <c>'electron'</c> module. It is only available as a return value of other methods in the Electron API._
    /// </summary>
    [<Import("TouchBar.TouchBarPopover", "electron")>]
    type TouchBarPopover
        /// <param name="items">Items to display in the popover.</param>
        /// <param name="label">Popover button text.</param>
        /// <param name="icon">Popover button icon.</param>
        /// <param name="showCloseButton"><c>true</c> to display a close button on the left of the popover, <c>false</c> to not show it. Default is
        /// <c>true</c>.</param>
        [<ParamObject(0)>]
        (items: TouchBar, ?label: string, ?icon: NativeImage, ?showCloseButton: bool) =
        /// <summary>
        /// A <c>string</c> representing the popover's current button text. Changing this value immediately updates the popover in the touch bar.
        /// </summary>
        [<Erase>]
        member val label: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>NativeImage</c> representing the popover's current button icon. Changing this value immediately updates the popover in the touch bar.
        /// </summary>
        [<Erase>]
        member val icon: NativeImage = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// &gt; Instantiates a special "other items proxy", which nests TouchBar elements inherited from Chromium at the space indicated by the
    /// proxy. By default, this proxy is added to each TouchBar at the end of the input. For more information, see
    /// the AppKit docs on NSTouchBarItemIdentifierOtherItemsProxy<br/><br/>&gt; [!NOTE] Only one instance of this class can be added per TouchBar.<br/><br/>Process: Main<br/> _This class
    /// is not exported from the <c>'electron'</c> module. It is only available as a return value of other methods in the
    /// Electron API._
    /// </summary>
    [<Import("TouchBarOtherItemsProxy", "electron")>]
    type TouchBarOtherItemsProxy() =


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// &gt; Create a label in the touch bar for native macOS applications<br/><br/>Process: Main<br/> _This class is not exported from the
    /// <c>'electron'</c> module. It is only available as a return value of other methods in the Electron API._
    /// </summary>
    [<Import("TouchBar.TouchBarLabel", "electron")>]
    type TouchBarLabel
        /// <param name="label">Text to display.</param>
        /// <param name="accessibilityLabel">A short description of the button for use by screenreaders like VoiceOver.</param>
        /// <param name="textColor">Hex color of text, i.e <c>#ABCDEF</c>.</param>
        [<ParamObject(0)>]
        (?label: string, ?accessibilityLabel: string, ?textColor: string) =
        /// <summary>
        /// A <c>string</c> representing the label's current text. Changing this value immediately updates the label in the touch bar.
        /// </summary>
        [<Erase>]
        member val label: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the description of the label to be read by a screen reader.
        /// </summary>
        [<Erase>]
        member val accessibilityLabel: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> hex code representing the label's current text color. Changing this value immediately updates the label in the touch
        /// bar.
        /// </summary>
        [<Erase>]
        member val textColor: string = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// &gt; Create a group in the touch bar for native macOS applications<br/><br/>Process: Main<br/> _This class is not exported from the
    /// <c>'electron'</c> module. It is only available as a return value of other methods in the Electron API._
    /// </summary>
    [<Import("TouchBar.TouchBarGroup", "electron")>]
    type TouchBarGroup
        /// <param name="items">Items to display as a group.</param>
        [<ParamObject(0)>]
        (items: TouchBar) =


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// &gt; Create a color picker in the touch bar for native macOS applications<br/><br/>Process: Main<br/> _This class is not exported from
    /// the <c>'electron'</c> module. It is only available as a return value of other methods in the Electron API._
    /// </summary>
    [<Import("TouchBar.TouchBarColorPicker", "electron")>]
    type TouchBarColorPicker
        /// <param name="availableColors">Array of hex color strings to appear as possible colors to select.</param>
        /// <param name="selectedColor">The selected hex color in the picker, i.e <c>#ABCDEF</c>.</param>
        /// <param name="change">Function to call when a color is selected.</param>
        [<ParamObject(0)>]
        (?availableColors: string[], ?selectedColor: string, ?change: string -> unit) =
        /// <summary>
        /// A <c>string[]</c> array representing the color picker's available colors to select. Changing this value immediately updates the color picker in
        /// the touch bar.
        /// </summary>
        [<Erase>]
        member val availableColors: string[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> hex code representing the color picker's currently selected color. Changing this value immediately updates the color picker in
        /// the touch bar.
        /// </summary>
        [<Erase>]
        member val selectedColor: string = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// &gt; Create a button in the touch bar for native macOS applications<br/><br/>Process: Main<br/> _This class is not exported from the
    /// <c>'electron'</c> module. It is only available as a return value of other methods in the Electron API._
    /// </summary>
    [<Import("TouchBar.TouchBarButton", "electron")>]
    type TouchBarButton
        /// <param name="label">Button text.</param>
        /// <param name="accessibilityLabel">A short description of the button for use by screenreaders like VoiceOver.</param>
        /// <param name="backgroundColor">Button background color in hex format, i.e <c>#ABCDEF</c>.</param>
        /// <param name="icon">Button icon.</param>
        /// <param name="iconPosition">Can be <c>left</c>, <c>right</c> or <c>overlay</c>. Defaults to <c>overlay</c>.</param>
        /// <param name="click">Function to call when the button is clicked.</param>
        /// <param name="enabled">Whether the button is in an enabled state.  Default is <c>true</c>.</param>
        [<ParamObject(0)>]
        (
            ?label: string,
            ?accessibilityLabel: string,
            ?backgroundColor: string,
            ?icon: U2<NativeImage, string>,
            ?iconPosition: Enums.TouchBarButton.Options.IconPosition,
            ?click: unit -> unit,
            ?enabled: bool
        ) =
        /// <summary>
        /// A <c>string</c> representing the description of the button to be read by a screen reader. Will only be read by
        /// screen readers if no label is set.
        /// </summary>
        [<Erase>]
        member val accessibilityLabel: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the button's current text. Changing this value immediately updates the button in the touch bar.
        /// </summary>
        [<Erase>]
        member val label: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> hex code representing the button's current background color. Changing this value immediately updates the button in the touch
        /// bar.
        /// </summary>
        [<Erase>]
        member val backgroundColor: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>NativeImage</c> representing the button's current icon. Changing this value immediately updates the button in the touch bar.
        /// </summary>
        [<Erase>]
        member val icon: NativeImage = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> - Can be <c>left</c>, <c>right</c> or <c>overlay</c>.  Defaults to <c>overlay</c>.
        /// </summary>
        [<Erase>]
        member val iconPosition: Enums.TouchBarButton.IconPosition = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> representing whether the button is in an enabled state.
        /// </summary>
        [<Erase>]
        member val enabled: bool = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ✔ | Exported ✔</para>
    /// &gt; Get system preferences.<br/><br/>Process: Main, Utility
    /// </summary>
    [<Import("systemPreferences", "electron")>]
    type SystemPreferences =
        interface EventEmitter
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.on('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onAccentColorChanged(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.on('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onAccentColorChanged
            (handler: Fable.Electron.EventInterfaces.SystemPreferences.IOnAccentColorChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.once('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onceAccentColorChanged(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.once('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onceAccentColorChanged
            (handler: Fable.Electron.EventInterfaces.SystemPreferences.IOnAccentColorChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.off('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable offAccentColorChanged(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.off('accent-color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable offAccentColorChanged
            (handler: Fable.Electron.EventInterfaces.SystemPreferences.IOnAccentColorChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.on('color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onColorChanged(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.once('color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable onceColorChanged(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.off('color-changed', $1)"); Import("systemPreferences", "electron")>]
        static member mutable offColorChanged(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the Swipe between pages setting is on.
        /// </summary>
        [<Erase>]
        static member mutable isSwipeTrackingFromScrollEventsEnabled() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Posts <c>event</c> as native notifications of macOS. The <c>userInfo</c> is an Object that contains the user information dictionary sent along
        /// with the notification.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="userInfo"></param>
        /// <param name="deliverImmediately"><c>true</c> to post notifications immediately even when the subscribing app is inactive.</param>
        [<Erase>]
        static member mutable postNotification
            (event: string, userInfo: Record<string, obj>, ?deliverImmediately: bool)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Posts <c>event</c> as native notifications of macOS. The <c>userInfo</c> is an Object that contains the user information dictionary sent along
        /// with the notification.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="userInfo"></param>
        [<Erase>]
        static member mutable postLocalNotification(event: string, userInfo: Record<string, obj>) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Posts <c>event</c> as native notifications of macOS. The <c>userInfo</c> is an Object that contains the user information dictionary sent along
        /// with the notification.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="userInfo"></param>
        [<Erase>]
        static member mutable postWorkspaceNotification(event: string, userInfo: Record<string, obj>) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The ID of this subscription<br/><br/>Subscribes to native notifications of macOS, <c>callback</c> will be called with <c>callback(event, userInfo)</c> when the corresponding
        /// <c>event</c> happens. The <c>userInfo</c> is an Object that contains the user information dictionary sent along with the notification. The <c>object</c>
        /// is the sender of the notification, and only supports <c>NSString</c> values for now.<br/><br/>The <c>id</c> of the subscriber is returned, which
        /// can be used to unsubscribe the <c>event</c>.<br/><br/>Under the hood this API subscribes to <c>NSDistributedNotificationCenter</c>, example values of <c>event</c> are:<br/><br/>* <c>AppleInterfaceThemeChangedNotification</c><br/>*
        /// <c>AppleAquaColorVariantChanged</c><br/>* <c>AppleColorPreferencesChangedNotification</c><br/>* <c>AppleShowScrollBarsSettingChanged</c><br/><br/>If <c>event</c> is null, the <c>NSDistributedNotificationCenter</c> doesn’t use it as criteria for delivery to the observer. See docs
        ///  for more information.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="callback"></param>
        [<Erase>]
        static member mutable subscribeNotification
            (event: Option<string>, callback: SystemPreferences.SubscribeNotification.Callback)
            : float =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The ID of this subscription<br/><br/>Same as <c>subscribeNotification</c>, but uses <c>NSNotificationCenter</c> for local defaults. This is necessary for events such as
        /// <c>NSUserDefaultsDidChangeNotification</c>.<br/><br/>If <c>event</c> is null, the <c>NSNotificationCenter</c> doesn’t use it as criteria for delivery to the observer. See docs for more
        /// information.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="callback"></param>
        [<Erase>]
        static member mutable subscribeLocalNotification
            (event: Option<string>, callback: SystemPreferences.SubscribeLocalNotification.Callback)
            : float =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The ID of this subscription<br/><br/>Same as <c>subscribeNotification</c>, but uses <c>NSWorkspace.sharedWorkspace.notificationCenter</c>. This is necessary for events such as <c>NSWorkspaceDidActivateApplicationNotification</c>.<br/><br/>If <c>event</c> is
        /// null, the <c>NSWorkspaceNotificationCenter</c> doesn’t use it as criteria for delivery to the observer. See docs for more information.
        /// </summary>
        /// <param name="event"></param>
        /// <param name="callback"></param>
        [<Erase>]
        static member mutable subscribeWorkspaceNotification
            (event: Option<string>, callback: SystemPreferences.SubscribeWorkspaceNotification.Callback)
            : float =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Removes the subscriber with <c>id</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable unsubscribeNotification(id: int) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Same as <c>unsubscribeNotification</c>, but removes the subscriber from <c>NSNotificationCenter</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable unsubscribeLocalNotification(id: int) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Same as <c>unsubscribeNotification</c>, but removes the subscriber from <c>NSWorkspace.sharedWorkspace.notificationCenter</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable unsubscribeWorkspaceNotification(id: int) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Add the specified defaults to your application's <c>NSUserDefaults</c>.
        /// </summary>
        /// <param name="defaults">a dictionary of (<c>key: value</c>) user defaults</param>
        [<Erase>]
        static member mutable registerDefaults(defaults: Record<string, U3<string, bool, float>>) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The value of <c>key</c> in <c>NSUserDefaults</c>.<br/><br/>Some popular <c>key</c> and <c>type</c>s are:<br/><br/>* <c>AppleInterfaceStyle</c>: <c>string</c><br/>* <c>AppleAquaColorVariant</c>: <c>integer</c><br/>* <c>AppleHighlightColor</c>: <c>string</c><br/>* <c>AppleShowScrollBars</c>: <c>string</c><br/>* <c>NSNavRecentPlaces</c>:
        /// <c>array</c><br/>* <c>NSPreferredWebServices</c>: <c>dictionary</c><br/>* <c>NSUserDictionaryReplacementItems</c>: <c>array</c>
        /// </summary>
        /// <param name="key"></param>
        /// <param name="``type``">Can be <c>string</c>, <c>boolean</c>, <c>integer</c>, <c>float</c>, <c>double</c>, <c>url</c>, <c>array</c> or <c>dictionary</c>.</param>
        [<Erase>]
        static member mutable getUserDefault(key: string, ``type``: Type) : UserDefaultTypes[Type] =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Set the value of <c>key</c> in <c>NSUserDefaults</c>.<br/><br/>Note that <c>type</c> should match actual type of <c>value</c>. An exception is thrown if
        /// they don't.<br/><br/>Some popular <c>key</c> and <c>type</c>s are:<br/><br/>* <c>ApplePressAndHoldEnabled</c>: <c>boolean</c>
        /// </summary>
        /// <param name="key"></param>
        /// <param name="``type``">Can be <c>string</c>, <c>boolean</c>, <c>integer</c>, <c>float</c>, <c>double</c>, <c>url</c>, <c>array</c> or <c>dictionary</c>.</param>
        /// <param name="value"></param>
        [<Erase>]
        static member mutable setUserDefault(key: string, ``type``: Type, value: UserDefaultTypes[Type]) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Removes the <c>key</c> in <c>NSUserDefaults</c>. This can be used to restore the default or global value of a <c>key</c> previously
        /// set with <c>setUserDefault</c>.
        /// </summary>
        /// <param name="key"></param>
        [<Erase>]
        static member mutable removeUserDefault(key: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The users current system wide accent color preference in RGBA hexadecimal form.<br/><br/>This API is only available on macOS 10.14 Mojave
        /// or newer.
        /// </summary>
        [<Erase>]
        static member mutable getAccentColor() : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The system color setting in RGBA hexadecimal form (<c>#RRGGBBAA</c>). See the Windows docs and the macOS docs for more details.<br/><br/>The
        /// following colors are only available on macOS 10.14: <c>find-highlight</c>, <c>selected-content-background</c>, <c>separator</c>, <c>unemphasized-selected-content-background</c>, <c>unemphasized-selected-text-background</c>, and <c>unemphasized-selected-text</c>.
        /// </summary>
        /// <param name="color">One of the following values:</param>
        [<Erase>]
        static member mutable getColor(color: Enums.SystemPreferences.GetColor.Color) : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The standard system color formatted as <c>#RRGGBBAA</c>.<br/><br/>Returns one of several standard system colors that automatically adapt to vibrancy and changes
        /// in accessibility settings like 'Increase contrast' and 'Reduce transparency'. See Apple Documentation for  more details.
        /// </summary>
        /// <param name="color">One of the following values:</param>
        [<Erase>]
        static member mutable getSystemColor(color: Enums.SystemPreferences.GetSystemColor.Color) : string =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Can be <c>dark</c>, <c>light</c> or <c>unknown</c>.<br/><br/>Gets the macOS appearance setting that is currently applied to your application, maps to NSApplication.effectiveAppearance
        /// </summary>
        [<Erase>]
        static member mutable getEffectiveAppearance() : Enums.SystemPreferences.GetEffectiveAppearance =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// whether or not this device has the ability to use Touch ID.
        /// </summary>
        [<Erase>]
        static member mutable canPromptTouchID() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// resolves if the user has successfully authenticated with Touch ID.<br/><br/>This API itself will not protect your user data; rather, it
        /// is a mechanism to allow you to do so. Native apps will need to set Access Control Constants like <c>kSecAccessControlUserPresence</c>
        /// on their keychain entry so that reading it would auto-prompt for Touch ID biometric consent. This could be done with
        /// <c>node-keytar</c>, such that one would store an encryption key with <c>node-keytar</c> and only fetch it if <c>promptTouchID()</c> resolves.
        /// </summary>
        /// <param name="reason">The reason you are asking for Touch ID authentication</param>
        [<Erase>]
        static member mutable promptTouchID(reason: string) : Promise<unit> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// <c>true</c> if the current process is a trusted accessibility client and <c>false</c> if it is not.
        /// </summary>
        /// <param name="prompt">whether or not the user will be informed via prompt if the current process is untrusted.</param>
        [<Erase>]
        static member mutable isTrustedAccessibilityClient(prompt: bool) : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Can be <c>not-determined</c>, <c>granted</c>, <c>denied</c>, <c>restricted</c> or <c>unknown</c>.<br/><br/>This user consent was not required on macOS 10.13 High Sierra so this
        /// method will always return <c>granted</c>. macOS 10.14 Mojave or higher requires consent for <c>microphone</c> and <c>camera</c> access. macOS 10.15 Catalina
        /// or higher requires consent for <c>screen</c> access.<br/><br/>Windows 10 has a global setting controlling <c>microphone</c> and <c>camera</c> access for all win32
        /// applications. It will always return <c>granted</c> for <c>screen</c> and for all media types on older versions of Windows.
        /// </summary>
        /// <param name="mediaType">Can be <c>microphone</c>, <c>camera</c> or <c>screen</c>.</param>
        [<Erase>]
        static member mutable getMediaAccessStatus
            (mediaType: Enums.SystemPreferences.GetMediaAccessStatus.MediaType)
            : Enums.SystemPreferences.GetMediaAccessStatus =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// A promise that resolves with <c>true</c> if consent was granted and <c>false</c> if it was denied. If an invalid <c>mediaType</c>
        /// is passed, the promise will be rejected. If an access request was denied and later is changed through the System
        /// Preferences pane, a restart of the app will be required for the new permissions to take effect. If access has
        /// already been requested and denied, it _must_ be changed through the preference pane; an alert will not pop up and
        /// the promise will resolve with the existing access status.<br/><br/>**Important:** In order to properly leverage this API, you must set the
        /// <c>NSMicrophoneUsageDescription</c> and <c>NSCameraUsageDescription</c> strings in your app's <c>Info.plist</c> file. The values for these keys will be used to populate the
        /// permission dialogs so that the user will be properly informed as to the purpose of the permission request. See Electron
        /// Application Distribution for more information about how to set these in the context of Electron.<br/><br/>This user consent was not required
        /// until macOS 10.14 Mojave, so this method will always return <c>true</c> if your system is running 10.13 High Sierra.
        /// </summary>
        /// <param name="mediaType">the type of media being requested; can be <c>microphone</c>, <c>camera</c>.</param>
        [<Erase>]
        static member mutable askForMediaAccess
            (mediaType: Enums.SystemPreferences.AskForMediaAccess.MediaType)
            : Promise<bool> =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// * <c>shouldRenderRichAnimation</c> boolean - Returns true if rich animations should be rendered. Looks at session type (e.g. remote desktop) and
        /// accessibility settings to give guidance for heavy animations.<br/>* <c>scrollAnimationsEnabledBySystem</c> boolean - Determines on a per-platform basis whether scroll animations (e.g.
        /// produced by home/end key) should be enabled.<br/>* <c>prefersReducedMotion</c> boolean - Determines whether the user desires reduced motion based on platform
        /// APIs.<br/><br/>Returns an object with system animation settings.
        /// </summary>
        [<Erase>]
        static member mutable getAnimationSettings() : SystemPreferences.GetAnimationSettings = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property which determines whether the app avoids using semitransparent backgrounds. This maps to NSWorkspace.accessibilityDisplayShouldReduceTransparency<br/><br/>**Deprecated:** Use the new <c>nativeTheme.prefersReducedTransparency</c>
        /// API.
        /// </summary>
        [<Erase; System.Obsolete>]
        static member val accessibilityDisplayShouldReduceTransparency: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>string</c> property that can be <c>dark</c>, <c>light</c> or <c>unknown</c>.<br/><br/>Returns the macOS appearance setting that is currently applied to your
        /// application, maps to NSApplication.effectiveAppearance
        /// </summary>
        [<Erase>]
        static member val effectiveAppearance: Enums.SystemPreferences.EffectiveAppearance =
            Unchecked.defaultof<_> with get
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Manage files and URLs using their default applications.<br/><br/>Process: Main, Renderer (non-sandboxed only)<br/><br/>The <c>shell</c> module provides functions related to desktop
    /// integration.<br/><br/>An example of opening a URL in the user's default browser:<br/><br/><code><br/>const { shell } = require('electron')<br/><br/>shell.openExternal('https://github.com')<br/></code><br/><br/>&gt; [!WARNING] While the <c>shell</c>
    /// module can be used in the renderer process, it will not function in a sandboxed renderer.
    /// </summary>
    [<Import("shell", "electron")>]
    type Shell =
        /// <summary>
        /// Show the given file in a file manager. If possible, select the file.
        /// </summary>
        /// <param name="fullPath"></param>
        [<Erase>]
        static member mutable showItemInFolder(fullPath: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with a string containing the error message corresponding to the failure if a failure occurred, otherwise "".<br/><br/>Open the given
        /// file in the desktop's default manner.
        /// </summary>
        /// <param name="path"></param>
        [<Erase>]
        static member mutable openPath(path: string) : Promise<string> = Unchecked.defaultof<_>

        /// <summary>
        /// Open the given external protocol URL in the desktop's default manner. (For example, mailto: URLs in the user's default mail
        /// agent).
        /// </summary>
        /// <param name="url">Max 2081 characters on Windows.</param>
        /// <param name="activate">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || <c>true</c> to bring the
        /// opened application to the foreground. The default is <c>true</c>.</param>
        /// <param name="workingDirectory">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || The working directory.</param>
        /// <param name="logUsage">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || Indicates a user initiated
        /// launch that enables tracking of frequently used programs and other behaviors. The default is <c>false</c>.</param>
        [<Erase; ParamObject(1)>]
        static member mutable openExternal
            (url: string, ?activate: bool, ?workingDirectory: string, ?logUsage: bool)
            : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resolves when the operation has been completed. Rejects if there was an error while deleting the requested item.<br/><br/>This moves a
        /// path to the OS-specific trash location (Trash on macOS, Recycle Bin on Windows, and a desktop-environment-specific location on Linux).
        /// </summary>
        /// <param name="path">path to the item to be moved to the trash.</param>
        [<Erase>]
        static member mutable trashItem(path: string) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// Play the beep sound.
        /// </summary>
        [<Erase>]
        static member mutable beep() : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the shortcut was created successfully.<br/><br/>Creates or updates a shortcut link at <c>shortcutPath</c>.
        /// </summary>
        /// <param name="shortcutPath"></param>
        /// <param name="operation">Default is <c>create</c>, can be one of following:</param>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable writeShortcutLink
            (shortcutPath: string, ?operation: Enums.Shell.WriteShortcutLink.Operation, options: ShortcutDetails)
            : bool =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Resolves the shortcut link at <c>shortcutPath</c>.<br/><br/>An exception will be thrown when any error happens.
        /// </summary>
        /// <param name="shortcutPath"></param>
        [<Erase>]
        static member mutable readShortcutLink(shortcutPath: string) : ShortcutDetails = Unchecked.defaultof<_>
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// The <c>ShareMenu</c> class creates Share Menu on macOS, which can be used to share information from the current context to
    /// apps, social media accounts, and other services.<br/><br/>For including the share menu as a submenu of other menus, please use the
    /// <c>shareMenu</c> role of <c>MenuItem</c>.<br/><br/>### Class: ShareMenu<br/><br/>&gt; Create share menu on macOS.<br/><br/>Process: Main<br/><br/>&gt; [!WARNING] Electron's built-in classes cannot be subclassed in
    /// user code. For more information, see the FAQ.
    /// </summary>
    [<Import("ShareMenu", "electron")>]
    type ShareMenu
        /// <param name="sharingItem">The item to share.</param>
        (sharingItem: SharingItem) =
        /// <summary>
        /// Pops up this menu as a context menu in the <c>BrowserWindow</c>.
        /// </summary>
        /// <param name="options"></param>
        [<Erase>]
        member inline _.popup(?options: PopupOptions) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Closes the context menu in the <c>browserWindow</c>.
        /// </summary>
        /// <param name="browserWindow">Default is the focused window.</param>
        [<Erase>]
        member inline _.closePopup(?browserWindow: BrowserWindow) : unit = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("Session", "electron")>]
    type Session =
        interface EventEmitter

        /// <summary>
        /// Emitted when Electron is about to download <c>item</c> in <c>webContents</c>.<br/><br/>Calling <c>event.preventDefault()</c> will cancel the download and <c>item</c> will not be
        /// available from next tick of the process.
        /// </summary>
        [<Emit("$0.on('will-download', $1)")>]
        member inline _.onWillDownload(handler: Event -> DownloadItem -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron is about to download <c>item</c> in <c>webContents</c>.<br/><br/>Calling <c>event.preventDefault()</c> will cancel the download and <c>item</c> will not be
        /// available from next tick of the process.
        /// </summary>
        [<Emit("$0.on('will-download', $1)")>]
        member inline _.onWillDownload(handler: Fable.Electron.EventInterfaces.Root.IOnWillDownload -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron is about to download <c>item</c> in <c>webContents</c>.<br/><br/>Calling <c>event.preventDefault()</c> will cancel the download and <c>item</c> will not be
        /// available from next tick of the process.
        /// </summary>
        [<Emit("$0.once('will-download', $1)")>]
        member inline _.onceWillDownload(handler: Event -> DownloadItem -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron is about to download <c>item</c> in <c>webContents</c>.<br/><br/>Calling <c>event.preventDefault()</c> will cancel the download and <c>item</c> will not be
        /// available from next tick of the process.
        /// </summary>
        [<Emit("$0.once('will-download', $1)")>]
        member inline _.onceWillDownload(handler: Fable.Electron.EventInterfaces.Root.IOnWillDownload -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron is about to download <c>item</c> in <c>webContents</c>.<br/><br/>Calling <c>event.preventDefault()</c> will cancel the download and <c>item</c> will not be
        /// available from next tick of the process.
        /// </summary>
        [<Emit("$0.off('will-download', $1)")>]
        member inline _.offWillDownload(handler: Event -> DownloadItem -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron is about to download <c>item</c> in <c>webContents</c>.<br/><br/>Calling <c>event.preventDefault()</c> will cancel the download and <c>item</c> will not be
        /// available from next tick of the process.
        /// </summary>
        [<Emit("$0.off('will-download', $1)")>]
        member inline _.offWillDownload(handler: Fable.Electron.EventInterfaces.Root.IOnWillDownload -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Session.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.on('extension-loaded', $1)")>]
        member inline _.onExtensionLoaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Session.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.on('extension-loaded', $1)")>]
        member inline _.onExtensionLoaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionLoaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Session.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.once('extension-loaded', $1)")>]
        member inline _.onceExtensionLoaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Session.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.once('extension-loaded', $1)")>]
        member inline _.onceExtensionLoaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionLoaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Session.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.off('extension-loaded', $1)")>]
        member inline _.offExtensionLoaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Session.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.off('extension-loaded', $1)")>]
        member inline _.offExtensionLoaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionLoaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.on('extension-unloaded', $1)")>]
        member inline _.onExtensionUnloaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.on('extension-unloaded', $1)")>]
        member inline _.onExtensionUnloaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionUnloaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.once('extension-unloaded', $1)")>]
        member inline _.onceExtensionUnloaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.once('extension-unloaded', $1)")>]
        member inline _.onceExtensionUnloaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionUnloaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.off('extension-unloaded', $1)")>]
        member inline _.offExtensionUnloaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.off('extension-unloaded', $1)")>]
        member inline _.offExtensionUnloaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionUnloaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.on('extension-ready', $1)")>]
        member inline _.onExtensionReady(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.on('extension-ready', $1)")>]
        member inline _.onExtensionReady
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionReady -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.once('extension-ready', $1)")>]
        member inline _.onceExtensionReady(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.once('extension-ready', $1)")>]
        member inline _.onceExtensionReady
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionReady -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.off('extension-ready', $1)")>]
        member inline _.offExtensionReady(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.off('extension-ready', $1)")>]
        member inline _.offExtensionReady
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionReady -> unit)
            : unit =
            Unchecked.defaultof<_>

        [<Emit("$0.on('file-system-access-restricted', $1)")>]
        member inline _.onFileSystemAccessRestricted
            (
                handler:
                    Event
                        -> Session.FileSystemAccessRestricted.Details
                        -> Enums.Session.FileSystemAccessRestricted.Callback.Action -> unit
                        -> unit
            ) : unit =
            Unchecked.defaultof<_>

        [<Emit("$0.on('file-system-access-restricted', $1)")>]
        member inline _.onFileSystemAccessRestricted
            (handler: Fable.Electron.EventInterfaces.Root.IOnFileSystemAccessRestricted -> unit)
            : unit =
            Unchecked.defaultof<_>

        [<Emit("$0.once('file-system-access-restricted', $1)")>]
        member inline _.onceFileSystemAccessRestricted
            (
                handler:
                    Event
                        -> Session.FileSystemAccessRestricted.Details
                        -> Enums.Session.FileSystemAccessRestricted.Callback.Action -> unit
                        -> unit
            ) : unit =
            Unchecked.defaultof<_>

        [<Emit("$0.once('file-system-access-restricted', $1)")>]
        member inline _.onceFileSystemAccessRestricted
            (handler: Fable.Electron.EventInterfaces.Root.IOnFileSystemAccessRestricted -> unit)
            : unit =
            Unchecked.defaultof<_>

        [<Emit("$0.off('file-system-access-restricted', $1)")>]
        member inline _.offFileSystemAccessRestricted
            (
                handler:
                    Event
                        -> Session.FileSystemAccessRestricted.Details
                        -> Enums.Session.FileSystemAccessRestricted.Callback.Action -> unit
                        -> unit
            ) : unit =
            Unchecked.defaultof<_>

        [<Emit("$0.off('file-system-access-restricted', $1)")>]
        member inline _.offFileSystemAccessRestricted
            (handler: Fable.Electron.EventInterfaces.Root.IOnFileSystemAccessRestricted -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a render process requests preconnection to a URL, generally due to a resource hint.
        /// </summary>
        [<Emit("$0.on('preconnect', $1)")>]
        member inline _.onPreconnect(handler: Event -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a render process requests preconnection to a URL, generally due to a resource hint.
        /// </summary>
        [<Emit("$0.on('preconnect', $1)")>]
        member inline _.onPreconnect(handler: Fable.Electron.EventInterfaces.Root.IOnPreconnect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a render process requests preconnection to a URL, generally due to a resource hint.
        /// </summary>
        [<Emit("$0.once('preconnect', $1)")>]
        member inline _.oncePreconnect(handler: Event -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a render process requests preconnection to a URL, generally due to a resource hint.
        /// </summary>
        [<Emit("$0.once('preconnect', $1)")>]
        member inline _.oncePreconnect(handler: Fable.Electron.EventInterfaces.Root.IOnPreconnect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a render process requests preconnection to a URL, generally due to a resource hint.
        /// </summary>
        [<Emit("$0.off('preconnect', $1)")>]
        member inline _.offPreconnect(handler: Event -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a render process requests preconnection to a URL, generally due to a resource hint.
        /// </summary>
        [<Emit("$0.off('preconnect', $1)")>]
        member inline _.offPreconnect(handler: Fable.Electron.EventInterfaces.Root.IOnPreconnect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully initialized. This occurs after the file has been downloaded.
        /// </summary>
        [<Emit("$0.on('spellcheck-dictionary-initialized', $1)")>]
        member inline _.onSpellcheckDictionaryInitialized(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully initialized. This occurs after the file has been downloaded.
        /// </summary>
        [<Emit("$0.on('spellcheck-dictionary-initialized', $1)")>]
        member inline _.onSpellcheckDictionaryInitialized
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryInitialized -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully initialized. This occurs after the file has been downloaded.
        /// </summary>
        [<Emit("$0.once('spellcheck-dictionary-initialized', $1)")>]
        member inline _.onceSpellcheckDictionaryInitialized(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully initialized. This occurs after the file has been downloaded.
        /// </summary>
        [<Emit("$0.once('spellcheck-dictionary-initialized', $1)")>]
        member inline _.onceSpellcheckDictionaryInitialized
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryInitialized -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully initialized. This occurs after the file has been downloaded.
        /// </summary>
        [<Emit("$0.off('spellcheck-dictionary-initialized', $1)")>]
        member inline _.offSpellcheckDictionaryInitialized(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully initialized. This occurs after the file has been downloaded.
        /// </summary>
        [<Emit("$0.off('spellcheck-dictionary-initialized', $1)")>]
        member inline _.offSpellcheckDictionaryInitialized
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryInitialized -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file starts downloading
        /// </summary>
        [<Emit("$0.on('spellcheck-dictionary-download-begin', $1)")>]
        member inline _.onSpellcheckDictionaryDownloadBegin(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file starts downloading
        /// </summary>
        [<Emit("$0.on('spellcheck-dictionary-download-begin', $1)")>]
        member inline _.onSpellcheckDictionaryDownloadBegin
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryDownloadBegin -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file starts downloading
        /// </summary>
        [<Emit("$0.once('spellcheck-dictionary-download-begin', $1)")>]
        member inline _.onceSpellcheckDictionaryDownloadBegin(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file starts downloading
        /// </summary>
        [<Emit("$0.once('spellcheck-dictionary-download-begin', $1)")>]
        member inline _.onceSpellcheckDictionaryDownloadBegin
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryDownloadBegin -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file starts downloading
        /// </summary>
        [<Emit("$0.off('spellcheck-dictionary-download-begin', $1)")>]
        member inline _.offSpellcheckDictionaryDownloadBegin(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file starts downloading
        /// </summary>
        [<Emit("$0.off('spellcheck-dictionary-download-begin', $1)")>]
        member inline _.offSpellcheckDictionaryDownloadBegin
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryDownloadBegin -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully downloaded
        /// </summary>
        [<Emit("$0.on('spellcheck-dictionary-download-success', $1)")>]
        member inline _.onSpellcheckDictionaryDownloadSuccess(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully downloaded
        /// </summary>
        [<Emit("$0.on('spellcheck-dictionary-download-success', $1)")>]
        member inline _.onSpellcheckDictionaryDownloadSuccess
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryDownloadSuccess -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully downloaded
        /// </summary>
        [<Emit("$0.once('spellcheck-dictionary-download-success', $1)")>]
        member inline _.onceSpellcheckDictionaryDownloadSuccess(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully downloaded
        /// </summary>
        [<Emit("$0.once('spellcheck-dictionary-download-success', $1)")>]
        member inline _.onceSpellcheckDictionaryDownloadSuccess
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryDownloadSuccess -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully downloaded
        /// </summary>
        [<Emit("$0.off('spellcheck-dictionary-download-success', $1)")>]
        member inline _.offSpellcheckDictionaryDownloadSuccess(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file has been successfully downloaded
        /// </summary>
        [<Emit("$0.off('spellcheck-dictionary-download-success', $1)")>]
        member inline _.offSpellcheckDictionaryDownloadSuccess
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryDownloadSuccess -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file download fails.  For details on the failure you should collect a netlog and
        /// inspect the download request.
        /// </summary>
        [<Emit("$0.on('spellcheck-dictionary-download-failure', $1)")>]
        member inline _.onSpellcheckDictionaryDownloadFailure(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file download fails.  For details on the failure you should collect a netlog and
        /// inspect the download request.
        /// </summary>
        [<Emit("$0.on('spellcheck-dictionary-download-failure', $1)")>]
        member inline _.onSpellcheckDictionaryDownloadFailure
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryDownloadFailure -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file download fails.  For details on the failure you should collect a netlog and
        /// inspect the download request.
        /// </summary>
        [<Emit("$0.once('spellcheck-dictionary-download-failure', $1)")>]
        member inline _.onceSpellcheckDictionaryDownloadFailure(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file download fails.  For details on the failure you should collect a netlog and
        /// inspect the download request.
        /// </summary>
        [<Emit("$0.once('spellcheck-dictionary-download-failure', $1)")>]
        member inline _.onceSpellcheckDictionaryDownloadFailure
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryDownloadFailure -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file download fails.  For details on the failure you should collect a netlog and
        /// inspect the download request.
        /// </summary>
        [<Emit("$0.off('spellcheck-dictionary-download-failure', $1)")>]
        member inline _.offSpellcheckDictionaryDownloadFailure(handler: Event -> string -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a hunspell dictionary file download fails.  For details on the failure you should collect a netlog and
        /// inspect the download request.
        /// </summary>
        [<Emit("$0.off('spellcheck-dictionary-download-failure', $1)")>]
        member inline _.offSpellcheckDictionaryDownloadFailure
            (handler: Fable.Electron.EventInterfaces.Root.IOnSpellcheckDictionaryDownloadFailure -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a HID device needs to be selected when a call to <c>navigator.hid.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.hid</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.on('select-hid-device', $1)")>]
        member inline _.onSelectHidDevice
            (handler: Event -> Session.SelectHidDevice.Details -> Option<Option<string>> -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a HID device needs to be selected when a call to <c>navigator.hid.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.hid</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.on('select-hid-device', $1)")>]
        member inline _.onSelectHidDevice
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectHidDevice -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a HID device needs to be selected when a call to <c>navigator.hid.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.hid</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.once('select-hid-device', $1)")>]
        member inline _.onceSelectHidDevice
            (handler: Event -> Session.SelectHidDevice.Details -> Option<Option<string>> -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a HID device needs to be selected when a call to <c>navigator.hid.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.hid</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.once('select-hid-device', $1)")>]
        member inline _.onceSelectHidDevice
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectHidDevice -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a HID device needs to be selected when a call to <c>navigator.hid.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.hid</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.off('select-hid-device', $1)")>]
        member inline _.offSelectHidDevice
            (handler: Event -> Session.SelectHidDevice.Details -> Option<Option<string>> -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a HID device needs to be selected when a call to <c>navigator.hid.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.hid</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.off('select-hid-device', $1)")>]
        member inline _.offSelectHidDevice
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectHidDevice -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.on('hid-device-added', $1)")>]
        member inline _.onHidDeviceAdded(handler: Event -> Session.HidDeviceAdded.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.on('hid-device-added', $1)")>]
        member inline _.onHidDeviceAdded
            (handler: Fable.Electron.EventInterfaces.Root.IOnHidDeviceAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.once('hid-device-added', $1)")>]
        member inline _.onceHidDeviceAdded(handler: Event -> Session.HidDeviceAdded.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.once('hid-device-added', $1)")>]
        member inline _.onceHidDeviceAdded
            (handler: Fable.Electron.EventInterfaces.Root.IOnHidDeviceAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.off('hid-device-added', $1)")>]
        member inline _.offHidDeviceAdded(handler: Event -> Session.HidDeviceAdded.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.off('hid-device-added', $1)")>]
        member inline _.offHidDeviceAdded
            (handler: Fable.Electron.EventInterfaces.Root.IOnHidDeviceAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a device has been removed before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.on('hid-device-removed', $1)")>]
        member inline _.onHidDeviceRemoved(handler: Event -> Session.HidDeviceRemoved.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a device has been removed before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.on('hid-device-removed', $1)")>]
        member inline _.onHidDeviceRemoved
            (handler: Fable.Electron.EventInterfaces.Root.IOnHidDeviceRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a device has been removed before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.once('hid-device-removed', $1)")>]
        member inline _.onceHidDeviceRemoved(handler: Event -> Session.HidDeviceRemoved.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a device has been removed before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.once('hid-device-removed', $1)")>]
        member inline _.onceHidDeviceRemoved
            (handler: Fable.Electron.EventInterfaces.Root.IOnHidDeviceRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a device has been removed before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.off('hid-device-removed', $1)")>]
        member inline _.offHidDeviceRemoved(handler: Event -> Session.HidDeviceRemoved.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a device has been removed before the callback from
        /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.off('hid-device-removed', $1)")>]
        member inline _.offHidDeviceRemoved
            (handler: Fable.Electron.EventInterfaces.Root.IOnHidDeviceRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>HIDDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.on('hid-device-revoked', $1)")>]
        member inline _.onHidDeviceRevoked(handler: Event -> Session.HidDeviceRevoked.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>HIDDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.on('hid-device-revoked', $1)")>]
        member inline _.onHidDeviceRevoked
            (handler: Fable.Electron.EventInterfaces.Root.IOnHidDeviceRevoked -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>HIDDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.once('hid-device-revoked', $1)")>]
        member inline _.onceHidDeviceRevoked(handler: Event -> Session.HidDeviceRevoked.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>HIDDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.once('hid-device-revoked', $1)")>]
        member inline _.onceHidDeviceRevoked
            (handler: Fable.Electron.EventInterfaces.Root.IOnHidDeviceRevoked -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>HIDDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.off('hid-device-revoked', $1)")>]
        member inline _.offHidDeviceRevoked(handler: Event -> Session.HidDeviceRevoked.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>HIDDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.off('hid-device-revoked', $1)")>]
        member inline _.offHidDeviceRevoked
            (handler: Fable.Electron.EventInterfaces.Root.IOnHidDeviceRevoked -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a serial port needs to be selected when a call to <c>navigator.serial.requestPort</c> is made. <c>callback</c> should be called
        /// with <c>portId</c> to be selected, passing an empty string to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.serial</c>
        /// can be managed by using ses.setPermissionCheckHandler(handler) with the <c>serial</c> permission.
        /// </summary>
        [<Emit("$0.on('select-serial-port', $1)")>]
        member inline _.onSelectSerialPort
            (handler: Event -> SerialPort[] -> WebContents -> string -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a serial port needs to be selected when a call to <c>navigator.serial.requestPort</c> is made. <c>callback</c> should be called
        /// with <c>portId</c> to be selected, passing an empty string to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.serial</c>
        /// can be managed by using ses.setPermissionCheckHandler(handler) with the <c>serial</c> permission.
        /// </summary>
        [<Emit("$0.on('select-serial-port', $1)")>]
        member inline _.onSelectSerialPort
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectSerialPort -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a serial port needs to be selected when a call to <c>navigator.serial.requestPort</c> is made. <c>callback</c> should be called
        /// with <c>portId</c> to be selected, passing an empty string to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.serial</c>
        /// can be managed by using ses.setPermissionCheckHandler(handler) with the <c>serial</c> permission.
        /// </summary>
        [<Emit("$0.once('select-serial-port', $1)")>]
        member inline _.onceSelectSerialPort
            (handler: Event -> SerialPort[] -> WebContents -> string -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a serial port needs to be selected when a call to <c>navigator.serial.requestPort</c> is made. <c>callback</c> should be called
        /// with <c>portId</c> to be selected, passing an empty string to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.serial</c>
        /// can be managed by using ses.setPermissionCheckHandler(handler) with the <c>serial</c> permission.
        /// </summary>
        [<Emit("$0.once('select-serial-port', $1)")>]
        member inline _.onceSelectSerialPort
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectSerialPort -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a serial port needs to be selected when a call to <c>navigator.serial.requestPort</c> is made. <c>callback</c> should be called
        /// with <c>portId</c> to be selected, passing an empty string to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.serial</c>
        /// can be managed by using ses.setPermissionCheckHandler(handler) with the <c>serial</c> permission.
        /// </summary>
        [<Emit("$0.off('select-serial-port', $1)")>]
        member inline _.offSelectSerialPort
            (handler: Event -> SerialPort[] -> WebContents -> string -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a serial port needs to be selected when a call to <c>navigator.serial.requestPort</c> is made. <c>callback</c> should be called
        /// with <c>portId</c> to be selected, passing an empty string to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.serial</c>
        /// can be managed by using ses.setPermissionCheckHandler(handler) with the <c>serial</c> permission.
        /// </summary>
        [<Emit("$0.off('select-serial-port', $1)")>]
        member inline _.offSelectSerialPort
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectSerialPort -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a new serial port becomes available before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated with the newly added port.
        /// </summary>
        [<Emit("$0.on('serial-port-added', $1)")>]
        member inline _.onSerialPortAdded(handler: Event -> SerialPort -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a new serial port becomes available before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated with the newly added port.
        /// </summary>
        [<Emit("$0.on('serial-port-added', $1)")>]
        member inline _.onSerialPortAdded
            (handler: Fable.Electron.EventInterfaces.Root.IOnSerialPortAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a new serial port becomes available before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated with the newly added port.
        /// </summary>
        [<Emit("$0.once('serial-port-added', $1)")>]
        member inline _.onceSerialPortAdded(handler: Event -> SerialPort -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a new serial port becomes available before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated with the newly added port.
        /// </summary>
        [<Emit("$0.once('serial-port-added', $1)")>]
        member inline _.onceSerialPortAdded
            (handler: Fable.Electron.EventInterfaces.Root.IOnSerialPortAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a new serial port becomes available before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated with the newly added port.
        /// </summary>
        [<Emit("$0.off('serial-port-added', $1)")>]
        member inline _.offSerialPortAdded(handler: Event -> SerialPort -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a new serial port becomes available before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated with the newly added port.
        /// </summary>
        [<Emit("$0.off('serial-port-added', $1)")>]
        member inline _.offSerialPortAdded
            (handler: Fable.Electron.EventInterfaces.Root.IOnSerialPortAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a serial port has been removed before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated to remove the specified port.
        /// </summary>
        [<Emit("$0.on('serial-port-removed', $1)")>]
        member inline _.onSerialPortRemoved(handler: Event -> SerialPort -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a serial port has been removed before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated to remove the specified port.
        /// </summary>
        [<Emit("$0.on('serial-port-removed', $1)")>]
        member inline _.onSerialPortRemoved
            (handler: Fable.Electron.EventInterfaces.Root.IOnSerialPortRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a serial port has been removed before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated to remove the specified port.
        /// </summary>
        [<Emit("$0.once('serial-port-removed', $1)")>]
        member inline _.onceSerialPortRemoved(handler: Event -> SerialPort -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a serial port has been removed before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated to remove the specified port.
        /// </summary>
        [<Emit("$0.once('serial-port-removed', $1)")>]
        member inline _.onceSerialPortRemoved
            (handler: Fable.Electron.EventInterfaces.Root.IOnSerialPortRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a serial port has been removed before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated to remove the specified port.
        /// </summary>
        [<Emit("$0.off('serial-port-removed', $1)")>]
        member inline _.offSerialPortRemoved(handler: Event -> SerialPort -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a serial port has been removed before the callback
        /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
        /// a port so that the UI can be updated to remove the specified port.
        /// </summary>
        [<Emit("$0.off('serial-port-removed', $1)")>]
        member inline _.offSerialPortRemoved
            (handler: Fable.Electron.EventInterfaces.Root.IOnSerialPortRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>SerialPort.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.on('serial-port-revoked', $1)")>]
        member inline _.onSerialPortRevoked(handler: Event -> Session.SerialPortRevoked.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>SerialPort.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.on('serial-port-revoked', $1)")>]
        member inline _.onSerialPortRevoked
            (handler: Fable.Electron.EventInterfaces.Root.IOnSerialPortRevoked -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>SerialPort.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.once('serial-port-revoked', $1)")>]
        member inline _.onceSerialPortRevoked(handler: Event -> Session.SerialPortRevoked.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>SerialPort.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.once('serial-port-revoked', $1)")>]
        member inline _.onceSerialPortRevoked
            (handler: Fable.Electron.EventInterfaces.Root.IOnSerialPortRevoked -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>SerialPort.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.off('serial-port-revoked', $1)")>]
        member inline _.offSerialPortRevoked(handler: Event -> Session.SerialPortRevoked.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>SerialPort.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.off('serial-port-revoked', $1)")>]
        member inline _.offSerialPortRevoked
            (handler: Fable.Electron.EventInterfaces.Root.IOnSerialPortRevoked -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a USB device needs to be selected when a call to <c>navigator.usb.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.usb</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.on('select-usb-device', $1)")>]
        member inline _.onSelectUsbDevice
            (handler: Event -> Session.SelectUsbDevice.Details -> Option<string> -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a USB device needs to be selected when a call to <c>navigator.usb.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.usb</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.on('select-usb-device', $1)")>]
        member inline _.onSelectUsbDevice
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectUsbDevice -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a USB device needs to be selected when a call to <c>navigator.usb.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.usb</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.once('select-usb-device', $1)")>]
        member inline _.onceSelectUsbDevice
            (handler: Event -> Session.SelectUsbDevice.Details -> Option<string> -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a USB device needs to be selected when a call to <c>navigator.usb.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.usb</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.once('select-usb-device', $1)")>]
        member inline _.onceSelectUsbDevice
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectUsbDevice -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a USB device needs to be selected when a call to <c>navigator.usb.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.usb</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.off('select-usb-device', $1)")>]
        member inline _.offSelectUsbDevice
            (handler: Event -> Session.SelectUsbDevice.Details -> Option<string> -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a USB device needs to be selected when a call to <c>navigator.usb.requestDevice</c> is made. <c>callback</c> should be called
        /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.usb</c> can
        /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
        /// </summary>
        [<Emit("$0.off('select-usb-device', $1)")>]
        member inline _.offSelectUsbDevice
            (handler: Fable.Electron.EventInterfaces.Root.IOnSelectUsbDevice -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.on('usb-device-added', $1)")>]
        member inline _.onUsbDeviceAdded(handler: Event -> USBDevice -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.on('usb-device-added', $1)")>]
        member inline _.onUsbDeviceAdded
            (handler: Fable.Electron.EventInterfaces.Root.IOnUsbDeviceAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.once('usb-device-added', $1)")>]
        member inline _.onceUsbDeviceAdded(handler: Event -> USBDevice -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.once('usb-device-added', $1)")>]
        member inline _.onceUsbDeviceAdded
            (handler: Fable.Electron.EventInterfaces.Root.IOnUsbDeviceAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.off('usb-device-added', $1)")>]
        member inline _.offUsbDeviceAdded(handler: Event -> USBDevice -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a new device becomes available before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated with the newly added device.
        /// </summary>
        [<Emit("$0.off('usb-device-added', $1)")>]
        member inline _.offUsbDeviceAdded
            (handler: Fable.Electron.EventInterfaces.Root.IOnUsbDeviceAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a device has been removed before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.on('usb-device-removed', $1)")>]
        member inline _.onUsbDeviceRemoved(handler: Event -> USBDevice -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a device has been removed before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.on('usb-device-removed', $1)")>]
        member inline _.onUsbDeviceRemoved
            (handler: Fable.Electron.EventInterfaces.Root.IOnUsbDeviceRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a device has been removed before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.once('usb-device-removed', $1)")>]
        member inline _.onceUsbDeviceRemoved(handler: Event -> USBDevice -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a device has been removed before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.once('usb-device-removed', $1)")>]
        member inline _.onceUsbDeviceRemoved
            (handler: Fable.Electron.EventInterfaces.Root.IOnUsbDeviceRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a device has been removed before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.off('usb-device-removed', $1)")>]
        member inline _.offUsbDeviceRemoved(handler: Event -> USBDevice -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a device has been removed before the callback from
        /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
        /// device so that the UI can be updated to remove the specified device.
        /// </summary>
        [<Emit("$0.off('usb-device-removed', $1)")>]
        member inline _.offUsbDeviceRemoved
            (handler: Fable.Electron.EventInterfaces.Root.IOnUsbDeviceRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>USBDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.on('usb-device-revoked', $1)")>]
        member inline _.onUsbDeviceRevoked(handler: Event -> Session.UsbDeviceRevoked.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>USBDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.on('usb-device-revoked', $1)")>]
        member inline _.onUsbDeviceRevoked
            (handler: Fable.Electron.EventInterfaces.Root.IOnUsbDeviceRevoked -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>USBDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.once('usb-device-revoked', $1)")>]
        member inline _.onceUsbDeviceRevoked(handler: Event -> Session.UsbDeviceRevoked.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>USBDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.once('usb-device-revoked', $1)")>]
        member inline _.onceUsbDeviceRevoked
            (handler: Fable.Electron.EventInterfaces.Root.IOnUsbDeviceRevoked -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>USBDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.off('usb-device-revoked', $1)")>]
        member inline _.offUsbDeviceRevoked(handler: Event -> Session.UsbDeviceRevoked.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after <c>USBDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
        /// <c>setDevicePermissionHandler</c> is used.
        /// </summary>
        [<Emit("$0.off('usb-device-revoked', $1)")>]
        member inline _.offUsbDeviceRevoked
            (handler: Fable.Electron.EventInterfaces.Root.IOnUsbDeviceRevoked -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// the session's current cache size, in bytes.
        /// </summary>
        [<Erase>]
        member inline _.getCacheSize() : Promise<int> = Unchecked.defaultof<_>

        /// <summary>
        /// resolves when the cache clear operation is complete.<br/><br/>Clears the session’s HTTP cache.
        /// </summary>
        [<Erase>]
        member inline _.clearCache() : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// resolves when the storage data has been cleared.
        /// </summary>
        /// <param name="origin">Should follow <c>window.location.origin</c>’s representation <c>scheme://host:port</c>.</param>
        /// <param name="storages">The types of storages to clear, can be <c>cookies</c>, <c>filesystem</c>, <c>indexdb</c>, <c>localstorage</c>, <c>shadercache</c>, <c>websql</c>, <c>serviceworkers</c>, <c>cachestorage</c>. If not specified,
        /// clear all storage types.</param>
        /// <param name="quotas">The types of quotas to clear, can be <c>temporary</c>. If not specified, clear all quotas.</param>
        [<Erase; ParamObject(0)>]
        member inline _.clearStorageData
            (
                ?origin: string,
                ?storages: Enums.Session.ClearStorageData.Options.Storages[],
                ?quotas: Enums.Session.ClearStorageData.Options.Quotas[]
            ) : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Writes any unwritten DOMStorage data to disk.
        /// </summary>
        [<Erase>]
        member inline _.flushStorageData() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves when the proxy setting process is complete.<br/><br/>Sets the proxy settings.<br/><br/>You may need <c>ses.closeAllConnections</c> to close currently in flight connections
        /// to prevent pooled sockets using previous proxy from being reused by future requests.
        /// </summary>
        /// <param name="config"></param>
        [<Erase>]
        member inline _.setProxy(config: ProxyConfig) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with the resolved IP addresses for the <c>host</c>.
        /// </summary>
        /// <param name="host">Hostname to resolve.</param>
        /// <param name="queryType">Requested DNS query type. If unspecified, resolver will pick A or AAAA (or both) based on IPv4/IPv6 settings:</param>
        /// <param name="source">The source to use for resolved addresses. Default allows the resolver to pick an appropriate source. Only affects use
        /// of big external sources (e.g. calling the system for resolution or using DNS). Even if a source is specified, results
        /// can still come from cache, resolving "localhost" or IP literals, etc. One of the following values:</param>
        /// <param name="cacheUsage">Indicates what DNS cache entries, if any, can be used to provide a response. One of the following values:</param>
        /// <param name="secureDnsPolicy">Controls the resolver's Secure DNS behavior for this request. One of the following values:</param>
        [<Erase; ParamObject(1)>]
        member inline _.resolveHost
            (
                host: string,
                ?queryType: Enums.Session.ResolveHost.Options.QueryType,
                ?source: Enums.Session.ResolveHost.Options.Source,
                ?cacheUsage: Enums.Session.ResolveHost.Options.CacheUsage,
                ?secureDnsPolicy: Enums.Session.ResolveHost.Options.SecureDnsPolicy
            ) : Promise<ResolvedHost> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with the proxy information for <c>url</c>.
        /// </summary>
        /// <param name="url"></param>
        [<Erase>]
        member inline _.resolveProxy(url: URL) : Promise<string> = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves when the all internal states of proxy service is reset and the latest proxy configuration is reapplied if it's
        /// already available. The pac script will be fetched from <c>pacScript</c> again if the proxy mode is <c>pac_script</c>.
        /// </summary>
        [<Erase>]
        member inline _.forceReloadProxyConfig() : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// Sets download saving directory. By default, the download directory will be the <c>Downloads</c> under the respective app folder.
        /// </summary>
        /// <param name="path">The download location.</param>
        [<Erase>]
        member inline _.setDownloadPath(path: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emulates network with the given configuration for the <c>session</c>.
        /// </summary>
        /// <param name="offline">Whether to emulate network outage. Defaults to false.</param>
        /// <param name="latency">RTT in ms. Defaults to 0 which will disable latency throttling.</param>
        /// <param name="downloadThroughput">Download rate in Bps. Defaults to 0 which will disable download throttling.</param>
        /// <param name="uploadThroughput">Upload rate in Bps. Defaults to 0 which will disable upload throttling.</param>
        [<Erase; ParamObject(0)>]
        member inline _.enableNetworkEmulation
            (?offline: bool, ?latency: double, ?downloadThroughput: double, ?uploadThroughput: double)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Preconnects the given number of sockets to an origin.
        /// </summary>
        /// <param name="url">URL for preconnect. Only the origin is relevant for opening the socket.</param>
        /// <param name="numSockets">number of sockets to preconnect. Must be between 1 and 6. Defaults to 1.</param>
        [<Erase; ParamObject(0)>]
        member inline _.preconnect(url: string, ?numSockets: float) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves when all connections are closed.<br/><br/>&gt; [!NOTE] It will terminate / fail all requests currently in flight.
        /// </summary>
        [<Erase>]
        member inline _.closeAllConnections() : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// see Response.<br/><br/>Sends a request, similarly to how <c>fetch()</c> works in the renderer, using Chrome's network stack. This differs from Node's
        /// <c>fetch()</c>, which uses Node.js's HTTP stack.<br/><br/>Example:<br/><br/>See also <c>net.fetch()</c>, a convenience method which issues requests from the default session.<br/><br/>See the MDN
        /// documentation for <c>fetch()</c> for more details.<br/><br/>Limitations:<br/><br/>* <c>net.fetch()</c> does not support the <c>data:</c> or <c>blob:</c> schemes.<br/>* The value of the <c>integrity</c>
        /// option is ignored.<br/>* The <c>.type</c> and <c>.url</c> values of the returned <c>Response</c> object are incorrect.<br/><br/>By default, requests made with <c>net.fetch</c>
        /// can be made to custom protocols as well as <c>file:</c>, and will trigger webRequest handlers if present. When the non-standard
        /// <c>bypassCustomProtocolHandlers</c> option is set in RequestInit, custom protocol handlers will not be called for this request. This allows forwarding an
        /// intercepted request to the built-in handler. webRequest handlers will still be triggered when bypassing custom protocols.
        /// </summary>
        /// <param name="input"></param>
        /// <param name="init"></param>
        [<Erase>]
        member inline _.fetch(input: U2<string, GlobalRequest>, ?init: RequestInit) : Promise<GlobalResponse> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Disables any network emulation already active for the <c>session</c>. Resets to the original network configuration.
        /// </summary>
        [<Erase>]
        member inline _.disableNetworkEmulation() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the certificate verify proc for <c>session</c>, the <c>proc</c> will be called with <c>proc(request, callback)</c> whenever a server certificate verification
        /// is requested. Calling <c>callback(0)</c> accepts the certificate, calling <c>callback(-2)</c> rejects it.<br/><br/>Calling <c>setCertificateVerifyProc(null)</c> will revert back to default certificate verify proc.<br/><br/>&gt;
        /// **NOTE:** The result of this procedure is cached by the network service.
        /// </summary>
        /// <param name="proc"></param>
        [<Erase>]
        member inline _.setCertificateVerifyProc(proc: Option<Session.SetCertificateVerifyProc.Proc>) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Sets the handler which can be used to respond to permission requests for the <c>session</c>. Calling <c>callback(true)</c> will allow the
        /// permission and <c>callback(false)</c> will reject it. To clear the handler, call <c>setPermissionRequestHandler(null)</c>.  Please note that you must also implement
        /// <c>setPermissionCheckHandler</c> to get complete permission handling. Most web APIs do a permission check and then make a permission request if
        /// the check is denied.
        /// </summary>
        /// <param name="handler"></param>
        [<Erase>]
        member inline _.setPermissionRequestHandler
            (handler: Option<Session.SetPermissionRequestHandler.Handler>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Sets the handler which can be used to respond to permission checks for the <c>session</c>. Returning <c>true</c> will allow the
        /// permission and <c>false</c> will reject it.  Please note that you must also implement <c>setPermissionRequestHandler</c> to get complete permission handling.
        /// Most web APIs do a permission check and then make a permission request if the check is denied. To clear
        /// the handler, call <c>setPermissionCheckHandler(null)</c>.<br/><br/>&gt; [!NOTE] <c>isMainFrame</c> will always be <c>false</c> for a <c>fileSystem</c> request as a result of Chromium limitations.
        /// </summary>
        /// <param name="handler"></param>
        [<Erase>]
        member inline _.setPermissionCheckHandler(handler: Option<Session.SetPermissionCheckHandler.Handler>) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This handler will be called when web content requests access to display media via the <c>navigator.mediaDevices.getDisplayMedia</c> API. Use the desktopCapturer
        /// API to choose which stream(s) to grant access to.<br/><br/><c>useSystemPicker</c> allows an application to use the system picker instead of providing
        /// a specific video source from <c>getSources</c>. This option is experimental, and currently available for MacOS 15+ only. If the system
        /// picker is available and <c>useSystemPicker</c> is set to <c>true</c>, the handler will not be invoked.<br/><br/>Passing a WebFrameMain object as a
        /// video or audio stream will capture the video or audio stream from that frame.<br/><br/>Passing <c>null</c> instead of a function resets
        /// the handler to its default state.
        /// </summary>
        /// <param name="handler"></param>
        /// <param name="opts"></param>
        [<Erase>]
        member inline _.setDisplayMediaRequestHandler
            (
                handler: Option<Session.SetDisplayMediaRequestHandler.Handler>,
                ?opts: Session.SetDisplayMediaRequestHandler.Opts
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Sets the handler which can be used to respond to device permission checks for the <c>session</c>. Returning <c>true</c> will allow
        /// the device to be permitted and <c>false</c> will reject it. To clear the handler, call <c>setDevicePermissionHandler(null)</c>. This handler can be
        /// used to provide default permissioning to devices without first calling for permission to devices (eg via <c>navigator.hid.requestDevice</c>).  If this
        /// handler is not defined, the default device permissions as granted through device selection (eg via <c>navigator.hid.requestDevice</c>) will be used. Additionally,
        /// the default behavior of Electron is to store granted device permission in memory. If longer term storage is needed, a
        /// developer can store granted device permissions (eg when handling the <c>select-hid-device</c> event) and then read from that storage with <c>setDevicePermissionHandler</c>.
        /// </summary>
        /// <param name="handler"></param>
        [<Erase>]
        member inline _.setDevicePermissionHandler
            (handler: Option<Session.SetDevicePermissionHandler.Handler.Details -> bool>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Sets the handler which can be used to override which USB classes are protected. The return value for the handler
        /// is a string array of USB classes which should be considered protected (eg not available in the renderer).  Valid
        /// values for the array are:<br/><br/>* <c>audio</c><br/>* <c>audio-video</c><br/>* <c>hid</c><br/>* <c>mass-storage</c><br/>* <c>smart-card</c><br/>* <c>video</c><br/>* <c>wireless</c><br/><br/>Returning an empty string array from the handler will
        /// allow all USB classes; returning the passed in array will maintain the default list of protected USB classes (this is
        /// also the default behavior if a handler is not defined). To clear the handler, call <c>setUSBProtectedClassesHandler(null)</c>.
        /// </summary>
        /// <param name="handler"></param>
        [<Erase>]
        member inline _.setUSBProtectedClassesHandler
            (handler: Option<Session.SetUSBProtectedClassesHandler.Handler.Details -> string[]>)
            : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets a handler to respond to Bluetooth pairing requests. This handler allows developers to handle devices that require additional validation
        /// before pairing.  When a handler is not defined, any pairing on Linux or Windows that requires additional validation will
        /// be automatically cancelled. macOS does not require a handler because macOS handles the pairing automatically.  To clear the handler,
        /// call <c>setBluetoothPairingHandler(null)</c>.
        /// </summary>
        /// <param name="handler"></param>
        [<Erase>]
        member inline _.setBluetoothPairingHandler(handler: Option<Session.SetBluetoothPairingHandler.Handler>) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Resolves when the operation is complete.<br/><br/>Clears the host resolver cache.
        /// </summary>
        [<Erase>]
        member inline _.clearHostResolverCache() : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// Dynamically sets whether to always send credentials for HTTP NTLM or Negotiate authentication.
        /// </summary>
        /// <param name="domains">A comma-separated list of servers for which integrated authentication is enabled.</param>
        [<Erase>]
        member inline _.allowNTLMCredentialsForDomains(domains: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Overrides the <c>userAgent</c> and <c>acceptLanguages</c> for this session.<br/><br/>The <c>acceptLanguages</c> must a comma separated ordered list of language codes, for example
        /// <c>"en-US,fr,de,ko,zh-CN,ja"</c>.<br/><br/>This doesn't affect existing <c>WebContents</c>, and each <c>WebContents</c> can use <c>webContents.setUserAgent</c> to override the session-wide user agent.
        /// </summary>
        /// <param name="userAgent"></param>
        /// <param name="acceptLanguages"></param>
        [<Erase>]
        member inline _.setUserAgent(userAgent: string, ?acceptLanguages: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether or not this session is a persistent one. The default <c>webContents</c> session of a <c>BrowserWindow</c> is persistent. When creating
        /// a session from a partition, session prefixed with <c>persist:</c> will be persistent, while others will be temporary.
        /// </summary>
        [<Erase>]
        member inline _.isPersistent() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// The user agent for this session.
        /// </summary>
        [<Erase>]
        member inline _.getUserAgent() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the SSL configuration for the session. All subsequent network requests will use the new configuration. Existing network connections (such
        /// as WebSocket connections) will not be terminated, but old sockets in the pool will not be reused for new connections.
        /// </summary>
        /// <param name="minVersion">Can be <c>tls1</c>, <c>tls1.1</c>, <c>tls1.2</c> or <c>tls1.3</c>. The minimum SSL version to allow when connecting to remote servers. Defaults
        /// to <c>tls1</c>.</param>
        /// <param name="maxVersion">Can be <c>tls1.2</c> or <c>tls1.3</c>. The maximum SSL version to allow when connecting to remote servers. Defaults to <c>tls1.3</c>.</param>
        /// <param name="disabledCipherSuites">List of cipher suites which should be explicitly prevented from being used in addition to those disabled by the
        /// net built-in policy. Supported literal forms: 0xAABB, where AA is <c>cipher_suite[0]</c> and BB is <c>cipher_suite[1]</c>, as defined in RFC 2246,
        /// Section 7.4.1.2. Unrecognized but parsable cipher suites in this form will not return an error. Ex: To disable TLS_RSA_WITH_RC4_128_MD5, specify
        /// 0x0004, while to disable TLS_ECDH_ECDSA_WITH_RC4_128_SHA, specify 0xC002. Note that TLSv1.3 ciphers cannot be disabled using this mechanism.</param>
        [<Erase; ParamObject(0)>]
        member inline _.setSSLConfig
            (
                ?minVersion: Enums.Session.SetSSLConfig.Config.MinVersion,
                ?maxVersion: Enums.Session.SetSSLConfig.Config.MaxVersion,
                ?disabledCipherSuites: int[]
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// resolves with blob data.
        /// </summary>
        /// <param name="identifier">Valid UUID.</param>
        [<Erase>]
        member inline _.getBlobData(identifier: string) : Promise<Buffer> = Unchecked.defaultof<_>

        /// <summary>
        /// Initiates a download of the resource at <c>url</c>. The API will generate a DownloadItem that can be accessed with the
        /// will-download event.<br/><br/>&gt; [!NOTE] This does not perform any security checks that relate to a page's origin, unlike <c>webContents.downloadURL</c>.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="headers">HTTP request headers.</param>
        [<Erase; ParamObject(1)>]
        member inline _.downloadURL(url: string, ?headers: Record<string, string>) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Allows resuming <c>cancelled</c> or <c>interrupted</c> downloads from previous <c>Session</c>. The API will generate a DownloadItem that can be accessed with
        /// the will-download event. The DownloadItem will not have any <c>WebContents</c> associated with it and the initial state will be <c>interrupted</c>.
        /// The download will start only when the <c>resume</c> API is called on the DownloadItem.
        /// </summary>
        /// <param name="path">Absolute path of the download.</param>
        /// <param name="urlChain">Complete URL chain for the download.</param>
        /// <param name="mimeType"></param>
        /// <param name="offset">Start range for the download.</param>
        /// <param name="length">Total length of the download.</param>
        /// <param name="lastModified">Last-Modified header value.</param>
        /// <param name="eTag">ETag header value.</param>
        /// <param name="startTime">Time when download was started in number of seconds since UNIX epoch.</param>
        [<Erase; ParamObject(0)>]
        member inline _.createInterruptedDownload
            (
                path: string,
                urlChain: string[],
                ?mimeType: string,
                offset: int,
                length: int,
                ?lastModified: string,
                ?eTag: string,
                ?startTime: double
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// resolves when the session’s HTTP authentication cache has been cleared.
        /// </summary>
        [<Erase>]
        member inline _.clearAuthCache() : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// Adds scripts that will be executed on ALL web contents that are associated with this session just before normal <c>preload</c>
        /// scripts run.<br/><br/>**Deprecated:** Use the new <c>ses.registerPreloadScript</c> API.
        /// </summary>
        /// <param name="preloads">An array of absolute path to preload scripts</param>
        [<Erase; System.Obsolete>]
        member inline _.setPreloads(preloads: string[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// an array of paths to preload scripts that have been registered.<br/><br/>**Deprecated:** Use the new <c>ses.getPreloadScripts</c> API. This will only return
        /// preload script paths for <c>frame</c> context types.
        /// </summary>
        [<Erase; System.Obsolete>]
        member inline _.getPreloads() : string[] = Unchecked.defaultof<_>

        /// <summary>
        /// Registers preload script that will be executed in its associated context type in this session. For <c>frame</c> contexts, this will
        /// run prior to any preload defined in the web preferences of a WebContents.<br/><br/>The ID of the registered preload script.
        /// </summary>
        /// <param name="script">Preload script</param>
        [<Erase>]
        member inline _.registerPreloadScript(script: PreloadScriptRegistration) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Unregisters script.
        /// </summary>
        /// <param name="id">Preload script ID</param>
        [<Erase>]
        member inline _.unregisterPreloadScript(id: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// An array of paths to preload scripts that have been registered.
        /// </summary>
        [<Erase>]
        member inline _.getPreloadScripts() : PreloadScript[] = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the directory to store the generated JS code cache for this session. The directory is not required to be
        /// created by the user before this call, the runtime will create if it does not exist otherwise will use the
        /// existing directory. If directory cannot be created, then code cache will not be used and all operations related to code
        /// cache will fail silently inside the runtime. By default, the directory will be <c>Code Cache</c> under the respective user data
        /// folder.<br/><br/>Note that by default code cache is only enabled for http(s) URLs, to enable code cache for custom protocols, <c>codeCache:
        /// true</c> and <c>standard: true</c> must be specified when registering the protocol.
        /// </summary>
        /// <param name="path">Absolute path to store the v8 generated JS code cache from the renderer.</param>
        [<Erase>]
        member inline _.setCodeCachePath(path: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// resolves when the code cache clear operation is complete.
        /// </summary>
        /// <param name="urls">An array of url corresponding to the resource whose generated code cache needs to be removed. If the list
        /// is empty then all entries in the cache directory will be removed.</param>
        [<Erase; ParamObject(0)>]
        member inline _.clearCodeCaches(?urls: string[]) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// an array of shared dictionary information entries in Chromium's networking service's storage.<br/><br/>Shared dictionaries are used to power advanced compression of
        /// data sent over the wire, specifically with Brotli and ZStandard. You don't need to call any of the shared dictionary
        /// APIs in Electron to make use of this advanced web feature, but if you do, they allow deeper control and
        /// inspection of the shared dictionaries used during decompression.<br/><br/>To get detailed information about a specific shared dictionary entry, call <c>getSharedDictionaryInfo(options)</c>.
        /// </summary>
        [<Erase>]
        member inline _.getSharedDictionaryUsageInfo() : Promise<SharedDictionaryUsageInfo[]> = Unchecked.defaultof<_>

        /// <summary>
        /// an array of shared dictionary information entries in Chromium's networking service's storage.<br/><br/>To get information about all present shared dictionaries, call
        /// <c>getSharedDictionaryUsageInfo()</c>.
        /// </summary>
        /// <param name="frameOrigin">The origin of the frame where the request originates. It’s specific to the individual frame making the request and
        /// is defined by its scheme, host, and port. In practice, will look like a URL.</param>
        /// <param name="topFrameSite">The site of the top-level browsing context (the main frame or tab that contains the request). It’s less granular
        /// than <c>frameOrigin</c> and focuses on the broader "site" scope. In practice, will look like a URL.</param>
        [<Erase; ParamObject(0)>]
        member inline _.getSharedDictionaryInfo
            (frameOrigin: string, topFrameSite: string)
            : Promise<SharedDictionaryInfo[]> =
            Unchecked.defaultof<_>

        /// <summary>
        /// resolves when the dictionary cache has been cleared, both in memory and on disk.
        /// </summary>
        [<Erase>]
        member inline _.clearSharedDictionaryCache() : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// resolves when the dictionary cache has been cleared for the specified isolation key, both in memory and on disk.
        /// </summary>
        /// <param name="frameOrigin">The origin of the frame where the request originates. It’s specific to the individual frame making the request and
        /// is defined by its scheme, host, and port. In practice, will look like a URL.</param>
        /// <param name="topFrameSite">The site of the top-level browsing context (the main frame or tab that contains the request). It’s less granular
        /// than <c>frameOrigin</c> and focuses on the broader "site" scope. In practice, will look like a URL.</param>
        [<Erase; ParamObject(0)>]
        member inline _.clearSharedDictionaryCacheForIsolationKey
            (frameOrigin: string, topFrameSite: string)
            : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Sets whether to enable the builtin spell checker.
        /// </summary>
        /// <param name="enable"></param>
        [<Erase>]
        member inline _.setSpellCheckerEnabled(enable: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the builtin spell checker is enabled.
        /// </summary>
        [<Erase>]
        member inline _.isSpellCheckerEnabled() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// The built in spellchecker does not automatically detect what language a user is typing in.  In order for the
        /// spell checker to correctly check their words you must call this API with an array of language codes.  You
        /// can get the list of supported language codes with the <c>ses.availableSpellCheckerLanguages</c> property.<br/><br/>&gt; [!NOTE] On macOS, the OS spellchecker is used
        /// and will detect your language automatically. This API is a no-op on macOS.
        /// </summary>
        /// <param name="languages">An array of language codes to enable the spellchecker for.</param>
        [<Erase>]
        member inline _.setSpellCheckerLanguages(languages: string[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// An array of language codes the spellchecker is enabled for.  If this list is empty the spellchecker will fallback
        /// to using <c>en-US</c>.  By default on launch if this setting is an empty list Electron will try to populate
        /// this setting with the current OS locale.  This setting is persisted across restarts.<br/><br/>&gt; [!NOTE] On macOS, the OS spellchecker
        /// is used and has its own list of languages. On macOS, this API will return whichever languages have been configured
        /// by the OS.
        /// </summary>
        [<Erase>]
        member inline _.getSpellCheckerLanguages() : string[] = Unchecked.defaultof<_>

        /// <summary>
        /// By default Electron will download hunspell dictionaries from the Chromium CDN.  If you want to override this behavior you
        /// can use this API to point the dictionary downloader at your own hosted version of the hunspell dictionaries.  We
        /// publish a <c>hunspell_dictionaries.zip</c> file with each release which contains the files you need to host here.<br/><br/>The file server must be
        /// **case insensitive**. If you cannot do this, you must upload each file twice: once with the case it has in
        /// the ZIP file and once with the filename as all lowercase.<br/><br/>If the files present in <c>hunspell_dictionaries.zip</c> are available at <c>https://example.com/dictionaries/language-code.bdic</c>
        /// then you should call this api with <c>ses.setSpellCheckerDictionaryDownloadURL('https://example.com/dictionaries/')</c>.  Please note the trailing slash.  The URL to the dictionaries
        /// is formed as <c>${url}${filename}</c>.<br/><br/>&gt; [!NOTE] On macOS, the OS spellchecker is used and therefore we do not download any dictionary
        /// files. This API is a no-op on macOS.
        /// </summary>
        /// <param name="url">A base URL for Electron to download hunspell dictionaries from.</param>
        [<Erase>]
        member inline _.setSpellCheckerDictionaryDownloadURL(url: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// An array of all words in app's custom dictionary. Resolves when the full dictionary is loaded from disk.
        /// </summary>
        [<Erase>]
        member inline _.listWordsInSpellCheckerDictionary() : Promise<string[]> = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the word was successfully written to the custom dictionary. This API will not work on non-persistent (in-memory) sessions.<br/><br/>&gt; [!NOTE]
        /// On macOS and Windows, this word will be written to the OS custom dictionary as well.
        /// </summary>
        /// <param name="word">The word you want to add to the dictionary</param>
        [<Erase>]
        member inline _.addWordToSpellCheckerDictionary(word: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the word was successfully removed from the custom dictionary. This API will not work on non-persistent (in-memory) sessions.<br/><br/>&gt; [!NOTE]
        /// On macOS and Windows, this word will be removed from the OS custom dictionary as well.
        /// </summary>
        /// <param name="word">The word you want to remove from the dictionary</param>
        [<Erase>]
        member inline _.removeWordFromSpellCheckerDictionary(word: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// resolves when the extension is loaded.<br/><br/>This method will raise an exception if the extension could not be loaded. If there
        /// are warnings when installing the extension (e.g. if the extension requests an API that Electron does not support) then they
        /// will be logged to the console.<br/><br/>Note that Electron does not support the full range of Chrome extensions APIs. See Supported
        /// Extensions APIs for more details on what is supported.<br/><br/>Note that in previous versions of Electron, extensions that were loaded would
        /// be remembered for future runs of the application. This is no longer the case: <c>loadExtension</c> must be called on every
        /// boot of your app if you want the extension to be loaded.<br/><br/>This API does not support loading packed (.crx) extensions.<br/><br/>&gt;
        /// [!NOTE] This API cannot be called before the <c>ready</c> event of the <c>app</c> module is emitted.<br/><br/>&gt; [!NOTE] Loading extensions into
        /// in-memory (non-persistent) sessions is not supported and will throw an error.<br/><br/>**Deprecated:** Use the new <c>ses.extensions.loadExtension</c> API.
        /// </summary>
        /// <param name="path">Path to a directory containing an unpacked Chrome extension</param>
        /// <param name="options"></param>
        [<Erase; System.Obsolete>]
        member inline _.loadExtension(path: string, ?options: Session.LoadExtension.Options) : Promise<Extension> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Unloads an extension.<br/><br/>&gt; [!NOTE] This API cannot be called before the <c>ready</c> event of the <c>app</c> module is emitted.<br/><br/>**Deprecated:** Use
        /// the new <c>ses.extensions.removeExtension</c> API.
        /// </summary>
        /// <param name="extensionId">ID of extension to remove</param>
        [<Erase; System.Obsolete>]
        member inline _.removeExtension(extensionId: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The loaded extension with the given ID.<br/><br/>&gt; [!NOTE] This API cannot be called before the <c>ready</c> event of the <c>app</c>
        /// module is emitted.<br/><br/>**Deprecated:** Use the new <c>ses.extensions.getExtension</c> API.
        /// </summary>
        /// <param name="extensionId">ID of extension to query</param>
        [<Erase; System.Obsolete>]
        member inline _.getExtension(extensionId: string) : Option<Extension> = Unchecked.defaultof<_>

        /// <summary>
        /// A list of all loaded extensions.<br/><br/>&gt; [!NOTE] This API cannot be called before the <c>ready</c> event of the <c>app</c> module
        /// is emitted.<br/><br/>**Deprecated:** Use the new <c>ses.extensions.getAllExtensions</c> API.
        /// </summary>
        [<Erase; System.Obsolete>]
        member inline _.getAllExtensions() : Extension[] = Unchecked.defaultof<_>

        /// <summary>
        /// The absolute file system path where data for this session is persisted on disk.  For in memory sessions this
        /// returns <c>null</c>.
        /// </summary>
        [<Erase>]
        member inline _.getStoragePath() : Option<string> = Unchecked.defaultof<_>

        /// <summary>
        /// resolves when all data has been cleared.<br/><br/>Clears various different types of data.<br/><br/>This method clears more types of data and is
        /// more thorough than the <c>clearStorageData</c> method.<br/><br/>&gt; [!NOTE] Cookies are stored at a broader scope than origins. When removing cookies and
        /// filtering by <c>origins</c> (or <c>excludeOrigins</c>), the cookies will be removed at the registrable domain level. For example, clearing cookies for
        /// the origin <c>https://really.specific.origin.example.com/</c> will end up clearing all cookies for <c>example.com</c>. Clearing cookies for the origin <c>https://my.website.example.co.uk/</c> will end up
        /// clearing all cookies for <c>example.co.uk</c>.<br/><br/>&gt; [!NOTE] Clearing cache data will also clear the shared dictionary cache. This means that any
        /// dictionaries used for compression may be reloaded after clearing the cache. If you wish to clear the shared dictionary cache
        /// but leave other cached data intact, you may want to use the <c>clearSharedDictionaryCache</c> method.<br/><br/>For more information, refer to Chromium's <c>BrowsingDataRemover</c>
        /// interface.
        /// </summary>
        /// <param name="dataTypes">The types of data to clear. By default, this will clear all types of data. This can potentially include
        /// data types not explicitly listed here. (See Chromium's <c>BrowsingDataRemover</c> for the full list.)</param>
        /// <param name="origins">Clear data for only these origins. Cannot be used with <c>excludeOrigins</c>.</param>
        /// <param name="excludeOrigins">Clear data for all origins except these ones. Cannot be used with <c>origins</c>.</param>
        /// <param name="avoidClosingConnections">Skips deleting cookies that would close current network connections. (Default: <c>false</c>)</param>
        /// <param name="originMatchingMode">The behavior for matching data to origins.</param>
        [<Erase; ParamObject(0)>]
        member inline _.clearData
            (
                ?dataTypes: Enums.Session.ClearData.Options.DataTypes[],
                ?origins: string[],
                ?excludeOrigins: string[],
                ?avoidClosingConnections: bool,
                ?originMatchingMode: Enums.Session.ClearData.Options.OriginMatchingMode
            ) : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// A <c>string[]</c> array which consists of all the known available spell checker languages.  Providing a language code to the
        /// <c>setSpellCheckerLanguages</c> API that isn't in this array will result in an error.
        /// </summary>
        [<Erase>]
        member val availableSpellCheckerLanguages: string[] = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c> indicating whether builtin spell checker is enabled.
        /// </summary>
        [<Erase>]
        member val spellCheckerEnabled: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string | null</c> indicating the absolute file system path where data for this session is persisted on disk.
        /// For in memory sessions this returns <c>null</c>.
        /// </summary>
        [<Erase>]
        member val storagePath: Option<string> = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>Cookies</c> object for this session.
        /// </summary>
        [<Erase>]
        member val cookies: Cookies = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>Extensions</c> object for this session.
        /// </summary>
        [<Erase>]
        member val extensions: Extensions = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>ServiceWorkers</c> object for this session.
        /// </summary>
        [<Erase>]
        member val serviceWorkers: ServiceWorkers = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>WebRequest</c> object for this session.
        /// </summary>
        [<Erase>]
        member val webRequest: WebRequest = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>Protocol</c> object for this session.
        /// </summary>
        [<Erase>]
        member val protocol: Protocol = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>NetLog</c> object for this session.
        /// </summary>
        [<Erase>]
        member val netLog: NetLog = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Manage browser sessions, cookies, cache, proxy settings, etc.<br/><br/>Process: Main<br/><br/>The <c>session</c> module can be used to create new <c>Session</c> objects.<br/><br/>You
    /// can also access the <c>session</c> of existing pages by using the <c>session</c> property of <c>WebContents</c>, or from the <c>session</c> module.
    /// </summary>
    [<Import("session", "electron")>]
    type Session =
        /// <summary>
        /// A session instance from <c>partition</c> string. When there is an existing <c>Session</c> with the same <c>partition</c>, it will be returned;
        /// otherwise a new <c>Session</c> instance will be created with <c>options</c>.<br/><br/>If <c>partition</c> starts with <c>persist:</c>, the page will use a persistent
        /// session available to all pages in the app with the same <c>partition</c>. if there is no <c>persist:</c> prefix, the page
        /// will use an in-memory session. If the <c>partition</c> is empty then default session of the app will be returned.<br/><br/>To create
        /// a <c>Session</c> with <c>options</c>, you have to ensure the <c>Session</c> with the <c>partition</c> has never been used before. There is
        /// no way to change the <c>options</c> of an existing <c>Session</c> object.
        /// </summary>
        /// <param name="partition"></param>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable fromPartition(partition: string, ?options: Session.FromPartition.Options) : Session =
            Unchecked.defaultof<_>

        /// <summary>
        /// A session instance from the absolute path as specified by the <c>path</c> string. When there is an existing <c>Session</c> with
        /// the same absolute path, it will be returned; otherwise a new <c>Session</c> instance will be created with <c>options</c>. The call
        /// will throw an error if the path is not an absolute path. Additionally, an error will be thrown if an
        /// empty string is provided.<br/><br/>To create a <c>Session</c> with <c>options</c>, you have to ensure the <c>Session</c> with the <c>path</c> has never
        /// been used before. There is no way to change the <c>options</c> of an existing <c>Session</c> object.
        /// </summary>
        /// <param name="path"></param>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable fromPath(path: string, ?options: Session.FromPath.Options) : Session =
            Unchecked.defaultof<_>

        /// <summary>
        /// A <c>Session</c> object, the default session object of the app.
        /// </summary>
        [<Erase>]
        static member val defaultSession: Session = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("ServiceWorkers", "electron")>]
    type ServiceWorkers =
        interface EventEmitter

        /// <summary>
        /// Emitted when a service worker logs something to the console.
        /// </summary>
        [<Emit("$0.on('console-message', $1)")>]
        member inline _.onConsoleMessage
            (handler: Event -> ServiceWorkers.ConsoleMessage.MessageDetails -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker logs something to the console.
        /// </summary>
        [<Emit("$0.on('console-message', $1)")>]
        member inline _.onConsoleMessage
            (handler: Fable.Electron.EventInterfaces.Root.IOnConsoleMessage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker logs something to the console.
        /// </summary>
        [<Emit("$0.once('console-message', $1)")>]
        member inline _.onceConsoleMessage
            (handler: Event -> ServiceWorkers.ConsoleMessage.MessageDetails -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker logs something to the console.
        /// </summary>
        [<Emit("$0.once('console-message', $1)")>]
        member inline _.onceConsoleMessage
            (handler: Fable.Electron.EventInterfaces.Root.IOnConsoleMessage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker logs something to the console.
        /// </summary>
        [<Emit("$0.off('console-message', $1)")>]
        member inline _.offConsoleMessage
            (handler: Event -> ServiceWorkers.ConsoleMessage.MessageDetails -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker logs something to the console.
        /// </summary>
        [<Emit("$0.off('console-message', $1)")>]
        member inline _.offConsoleMessage
            (handler: Fable.Electron.EventInterfaces.Root.IOnConsoleMessage -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker has been registered. Can occur after a call to <c>navigator.serviceWorker.register('/sw.js')</c> successfully resolves or when a
        /// Chrome extension is loaded.
        /// </summary>
        [<Emit("$0.on('registration-completed', $1)")>]
        member inline _.onRegistrationCompleted
            (handler: Event -> ServiceWorkers.RegistrationCompleted.Details -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker has been registered. Can occur after a call to <c>navigator.serviceWorker.register('/sw.js')</c> successfully resolves or when a
        /// Chrome extension is loaded.
        /// </summary>
        [<Emit("$0.on('registration-completed', $1)")>]
        member inline _.onRegistrationCompleted
            (handler: Fable.Electron.EventInterfaces.Root.IOnRegistrationCompleted -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker has been registered. Can occur after a call to <c>navigator.serviceWorker.register('/sw.js')</c> successfully resolves or when a
        /// Chrome extension is loaded.
        /// </summary>
        [<Emit("$0.once('registration-completed', $1)")>]
        member inline _.onceRegistrationCompleted
            (handler: Event -> ServiceWorkers.RegistrationCompleted.Details -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker has been registered. Can occur after a call to <c>navigator.serviceWorker.register('/sw.js')</c> successfully resolves or when a
        /// Chrome extension is loaded.
        /// </summary>
        [<Emit("$0.once('registration-completed', $1)")>]
        member inline _.onceRegistrationCompleted
            (handler: Fable.Electron.EventInterfaces.Root.IOnRegistrationCompleted -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker has been registered. Can occur after a call to <c>navigator.serviceWorker.register('/sw.js')</c> successfully resolves or when a
        /// Chrome extension is loaded.
        /// </summary>
        [<Emit("$0.off('registration-completed', $1)")>]
        member inline _.offRegistrationCompleted
            (handler: Event -> ServiceWorkers.RegistrationCompleted.Details -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker has been registered. Can occur after a call to <c>navigator.serviceWorker.register('/sw.js')</c> successfully resolves or when a
        /// Chrome extension is loaded.
        /// </summary>
        [<Emit("$0.off('registration-completed', $1)")>]
        member inline _.offRegistrationCompleted
            (handler: Fable.Electron.EventInterfaces.Root.IOnRegistrationCompleted -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker's running status has changed.
        /// </summary>
        [<Emit("$0.on('running-status-changed', $1)")>]
        member inline _.onRunningStatusChanged(handler: Details -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker's running status has changed.
        /// </summary>
        [<Emit("$0.once('running-status-changed', $1)")>]
        member inline _.onceRunningStatusChanged(handler: Details -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a service worker's running status has changed.
        /// </summary>
        [<Emit("$0.off('running-status-changed', $1)")>]
        member inline _.offRunningStatusChanged(handler: Details -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// A ServiceWorkerInfo object where the keys are the service worker version ID and the values are the information about that
        /// service worker.
        /// </summary>
        [<Erase>]
        member inline _.getAllRunning() : Record<float, ServiceWorkerInfo> = Unchecked.defaultof<_>

        /// <summary>
        /// Information about this service worker<br/><br/>If the service worker does not exist or is not running this method will throw an
        /// exception.
        /// </summary>
        /// <param name="versionId">ID of the service worker version</param>
        [<Erase>]
        member inline _.getInfoFromVersionID(versionId: float) : ServiceWorkerInfo = Unchecked.defaultof<_>

        /// <summary>
        /// Information about this service worker<br/><br/>If the service worker does not exist or is not running this method will throw an
        /// exception.<br/><br/>**Deprecated:** Use the new <c>serviceWorkers.getInfoFromVersionID</c> API.
        /// </summary>
        /// <param name="versionId">ID of the service worker version</param>
        [<Erase; System.Obsolete>]
        member inline _.getFromVersionID(versionId: float) : ServiceWorkerInfo = Unchecked.defaultof<_>

        /// <summary>
        /// Instance of the service worker associated with the given version ID. If there's no associated version, or its running status
        /// has changed to 'stopped', this will return <c>undefined</c>.
        /// </summary>
        /// <param name="versionId">ID of the service worker version</param>
        [<Erase; Experimental("Experimental according to Electron")>]
        member inline _.getWorkerFromVersionID(versionId: float) : Option<ServiceWorkerMain> = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with the service worker when it's started.<br/><br/>Starts the service worker or does nothing if already running.
        /// </summary>
        /// <param name="scope">The scope of the service worker to start.</param>
        [<Erase; Experimental("Experimental according to Electron")>]
        member inline _.startWorkerForScope(scope: string) : Promise<ServiceWorkerMain> = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("ServiceWorkerMain", "electron")>]
    type ServiceWorkerMain =
        /// <summary>
        /// Whether the service worker has been destroyed.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron")>]
        member inline _.isDestroyed() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Send an asynchronous message to the service worker process via <c>channel</c>, along with arguments. Arguments will be serialized with the
        /// Structured Clone Algorithm, just like <c>postMessage</c>, so prototype chains will not be included. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets
        /// will throw an exception.<br/><br/>The service worker process can handle the message by listening to <c>channel</c> with the <c>ipcRenderer</c> module.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="...args"></param>
        [<Erase; Experimental("Experimental according to Electron")>]
        member inline _.send(channel: string, [<System.ParamArray>] args: obj[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// * <c>end</c> Function - Method to call when the task has ended. If never called, the service won't terminate while
        /// otherwise idle.<br/><br/>Initiate a task to keep the service worker alive until ended.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron")>]
        member inline _.startTask() : ServiceWorkerMain.StartTask = Unchecked.defaultof<_>

        /// <summary>
        /// An <c>IpcMainServiceWorker</c> instance scoped to the service worker.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron")>]
        member val ipc: IpcMainServiceWorker = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing the scope URL of the service worker.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron")>]
        member val scope: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing the script URL of the service worker.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron")>]
        member val scriptURL: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>number</c> representing the ID of the specific version of the service worker script in its scope.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron")>]
        member val versionId: float = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Retrieve information about screen size, displays, cursor position, etc.<br/><br/>Process: Main<br/><br/>This module cannot be used until the <c>ready</c> event of
    /// the <c>app</c> module is emitted.<br/><br/><c>screen</c> is an EventEmitter.<br/><br/>&gt; [!NOTE] In the renderer / DevTools, <c>window.screen</c> is a reserved DOM property,
    /// so writing <c>let { screen } = require('electron')</c> will not work.<br/><br/>An example of creating a window that fills the whole
    /// screen:<br/><br/><code><br/>// Retrieve information about screen size, displays, cursor position, etc.<br/>//<br/>// For more info, see:<br/>// https://www.electronjs.org/docs/latest/api/screen<br/><br/>const { app, BrowserWindow, screen }
    /// = require('electron/main')<br/><br/>let mainWindow = null<br/><br/>app.whenReady().then(() =&gt; {<br/>  // Create a window that fills the screen's available work area.<br/>
    /// const primaryDisplay = screen.getPrimaryDisplay()<br/>  const { width, height } = primaryDisplay.workAreaSize<br/><br/>  mainWindow = new BrowserWindow({ width, height })<br/>
    ///  mainWindow.loadURL('https://electronjs.org')<br/>})<br/></code><br/><br/>Another example of creating a window in the external display:<br/><br/><code><br/>const { app, BrowserWindow, screen } = require('electron')<br/><br/>let win<br/><br/>app.whenReady().then(() =&gt;
    /// {<br/>  const displays = screen.getAllDisplays()<br/>  const externalDisplay = displays.find((display) =&gt; {<br/>    return display.bounds.x !== 0
    /// || display.bounds.y !== 0<br/>  })<br/><br/>  if (externalDisplay) {<br/>    win = new BrowserWindow({<br/>
    ///   x: externalDisplay.bounds.x + 50,<br/>      y: externalDisplay.bounds.y + 50<br/>    })<br/>
    ///   win.loadURL('https://github.com')<br/>  }<br/>})<br/></code><br/><br/>&gt; [!NOTE] Screen coordinates used by this module are <c>Point</c> structures. There are two kinds of
    /// coordinates available to the process:<br/><br/>* **Physical screen points** are raw hardware pixels on a display.<br/>* **Device-independent pixel (DIP) points** are
    /// virtualized screen points scaled based on the DPI (dots per inch) of the display.
    /// </summary>
    [<Import("screen", "electron")>]
    type Screen =
        interface EventEmitter

        /// <summary>
        /// Emitted when <c>newDisplay</c> has been added.
        /// </summary>
        [<Emit("$0.on('display-added', $1)"); Import("screen", "electron")>]
        static member mutable onDisplayAdded(handler: Event -> Display -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>newDisplay</c> has been added.
        /// </summary>
        [<Emit("$0.on('display-added', $1)"); Import("screen", "electron")>]
        static member mutable onDisplayAdded
            (handler: Fable.Electron.EventInterfaces.Screen.IOnDisplayAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>newDisplay</c> has been added.
        /// </summary>
        [<Emit("$0.once('display-added', $1)"); Import("screen", "electron")>]
        static member mutable onceDisplayAdded(handler: Event -> Display -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>newDisplay</c> has been added.
        /// </summary>
        [<Emit("$0.once('display-added', $1)"); Import("screen", "electron")>]
        static member mutable onceDisplayAdded
            (handler: Fable.Electron.EventInterfaces.Screen.IOnDisplayAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>newDisplay</c> has been added.
        /// </summary>
        [<Emit("$0.off('display-added', $1)"); Import("screen", "electron")>]
        static member mutable offDisplayAdded(handler: Event -> Display -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>newDisplay</c> has been added.
        /// </summary>
        [<Emit("$0.off('display-added', $1)"); Import("screen", "electron")>]
        static member mutable offDisplayAdded
            (handler: Fable.Electron.EventInterfaces.Screen.IOnDisplayAdded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>oldDisplay</c> has been removed.
        /// </summary>
        [<Emit("$0.on('display-removed', $1)"); Import("screen", "electron")>]
        static member mutable onDisplayRemoved(handler: Event -> Display -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>oldDisplay</c> has been removed.
        /// </summary>
        [<Emit("$0.on('display-removed', $1)"); Import("screen", "electron")>]
        static member mutable onDisplayRemoved
            (handler: Fable.Electron.EventInterfaces.Screen.IOnDisplayRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>oldDisplay</c> has been removed.
        /// </summary>
        [<Emit("$0.once('display-removed', $1)"); Import("screen", "electron")>]
        static member mutable onceDisplayRemoved(handler: Event -> Display -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>oldDisplay</c> has been removed.
        /// </summary>
        [<Emit("$0.once('display-removed', $1)"); Import("screen", "electron")>]
        static member mutable onceDisplayRemoved
            (handler: Fable.Electron.EventInterfaces.Screen.IOnDisplayRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>oldDisplay</c> has been removed.
        /// </summary>
        [<Emit("$0.off('display-removed', $1)"); Import("screen", "electron")>]
        static member mutable offDisplayRemoved(handler: Event -> Display -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>oldDisplay</c> has been removed.
        /// </summary>
        [<Emit("$0.off('display-removed', $1)"); Import("screen", "electron")>]
        static member mutable offDisplayRemoved
            (handler: Fable.Electron.EventInterfaces.Screen.IOnDisplayRemoved -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more metrics change in a <c>display</c>. The <c>changedMetrics</c> is an array of strings that describe the
        /// changes. Possible changes are <c>bounds</c>, <c>workArea</c>, <c>scaleFactor</c> and <c>rotation</c>.
        /// </summary>
        [<Emit("$0.on('display-metrics-changed', $1)"); Import("screen", "electron")>]
        static member mutable onDisplayMetricsChanged(handler: Event -> Display -> string[] -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more metrics change in a <c>display</c>. The <c>changedMetrics</c> is an array of strings that describe the
        /// changes. Possible changes are <c>bounds</c>, <c>workArea</c>, <c>scaleFactor</c> and <c>rotation</c>.
        /// </summary>
        [<Emit("$0.on('display-metrics-changed', $1)"); Import("screen", "electron")>]
        static member mutable onDisplayMetricsChanged
            (handler: Fable.Electron.EventInterfaces.Screen.IOnDisplayMetricsChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more metrics change in a <c>display</c>. The <c>changedMetrics</c> is an array of strings that describe the
        /// changes. Possible changes are <c>bounds</c>, <c>workArea</c>, <c>scaleFactor</c> and <c>rotation</c>.
        /// </summary>
        [<Emit("$0.once('display-metrics-changed', $1)"); Import("screen", "electron")>]
        static member mutable onceDisplayMetricsChanged(handler: Event -> Display -> string[] -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more metrics change in a <c>display</c>. The <c>changedMetrics</c> is an array of strings that describe the
        /// changes. Possible changes are <c>bounds</c>, <c>workArea</c>, <c>scaleFactor</c> and <c>rotation</c>.
        /// </summary>
        [<Emit("$0.once('display-metrics-changed', $1)"); Import("screen", "electron")>]
        static member mutable onceDisplayMetricsChanged
            (handler: Fable.Electron.EventInterfaces.Screen.IOnDisplayMetricsChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more metrics change in a <c>display</c>. The <c>changedMetrics</c> is an array of strings that describe the
        /// changes. Possible changes are <c>bounds</c>, <c>workArea</c>, <c>scaleFactor</c> and <c>rotation</c>.
        /// </summary>
        [<Emit("$0.off('display-metrics-changed', $1)"); Import("screen", "electron")>]
        static member mutable offDisplayMetricsChanged(handler: Event -> Display -> string[] -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more metrics change in a <c>display</c>. The <c>changedMetrics</c> is an array of strings that describe the
        /// changes. Possible changes are <c>bounds</c>, <c>workArea</c>, <c>scaleFactor</c> and <c>rotation</c>.
        /// </summary>
        [<Emit("$0.off('display-metrics-changed', $1)"); Import("screen", "electron")>]
        static member mutable offDisplayMetricsChanged
            (handler: Fable.Electron.EventInterfaces.Screen.IOnDisplayMetricsChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The current absolute position of the mouse pointer.<br/><br/>&gt; [!NOTE] The return value is a DIP point, not a screen physical
        /// point.
        /// </summary>
        [<Erase>]
        static member mutable getCursorScreenPoint() : Point = Unchecked.defaultof<_>

        /// <summary>
        /// The primary display.
        /// </summary>
        [<Erase>]
        static member mutable getPrimaryDisplay() : Display = Unchecked.defaultof<_>

        /// <summary>
        /// An array of displays that are currently available.
        /// </summary>
        [<Erase>]
        static member mutable getAllDisplays() : Display[] = Unchecked.defaultof<_>

        /// <summary>
        /// The display nearest the specified point.
        /// </summary>
        /// <param name="point"></param>
        [<Erase>]
        static member mutable getDisplayNearestPoint(point: Point) : Display = Unchecked.defaultof<_>

        /// <summary>
        /// The display that most closely intersects the provided bounds.
        /// </summary>
        /// <param name="rect"></param>
        [<Erase>]
        static member mutable getDisplayMatching(rect: Rectangle) : Display = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Converts a screen physical point to a screen DIP point. The DPI scale is performed relative to the display containing
        /// the physical point.<br/><br/>Not currently supported on Wayland - if used there it will return the point passed in with no
        /// changes.
        /// </summary>
        /// <param name="point"></param>
        [<Erase>]
        static member mutable screenToDipPoint(point: Point) : Point = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Converts a screen DIP point to a screen physical point. The DPI scale is performed relative to the display containing
        /// the DIP point.<br/><br/>Not currently supported on Wayland.
        /// </summary>
        /// <param name="point"></param>
        [<Erase>]
        static member mutable dipToScreenPoint(point: Point) : Point = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Converts a screen physical rect to a screen DIP rect. The DPI scale is performed relative to the display nearest
        /// to <c>window</c>. If <c>window</c> is null, scaling will be performed to the display nearest to <c>rect</c>.
        /// </summary>
        /// <param name="window"></param>
        /// <param name="rect"></param>
        [<Erase>]
        static member mutable screenToDipRect(window: Option<BrowserWindow>, rect: Rectangle) : Rectangle =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Converts a screen DIP rect to a screen physical rect. The DPI scale is performed relative to the display nearest
        /// to <c>window</c>. If <c>window</c> is null, scaling will be performed to the display nearest to <c>rect</c>.
        /// </summary>
        /// <param name="window"></param>
        /// <param name="rect"></param>
        [<Erase>]
        static member mutable dipToScreenRect(window: Option<BrowserWindow>, rect: Rectangle) : Rectangle =
            Unchecked.defaultof<_>
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Allows access to simple encryption and decryption of strings for storage on the local machine.<br/><br/>Process: Main<br/><br/>This module adds extra
    /// protection to data being stored on disk by using OS-provided cryptography systems. Current security semantics for each platform are outlined
    /// below.<br/><br/>* **macOS**: Encryption keys are stored for your app in Keychain Access in a way that prevents other applications from
    /// loading them without user override. Therefore, content is protected from other users and other apps running in the same userspace.<br/>*
    /// **Windows**: Encryption keys are generated via DPAPI. As per the Windows documentation: "Typically, only a user with the same logon
    /// credential as the user who encrypted the data can typically decrypt the data". Therefore, content is protected from other users
    /// on the same machine, but not from other apps running in the same userspace.<br/>* **Linux**: Encryption keys are generated and
    /// stored in a secret store that varies depending on your window manager and system setup. Options currently supported are <c>kwallet</c>,
    /// <c>kwallet5</c>, <c>kwallet6</c> and <c>gnome-libsecret</c>, but more may be available in future versions of Electron. As such, the security semantics of
    /// content protected via the <c>safeStorage</c> API vary between window managers and secret stores.<br/>  * Note that not all Linux
    /// setups have an available secret store. If no secret store is available, items stored in using the <c>safeStorage</c> API will
    /// be unprotected as they are encrypted via hardcoded plaintext password. You can detect when this happens when <c>safeStorage.getSelectedStorageBackend()</c> returns <c>basic_text</c>.<br/><br/>Note
    /// that on Mac, access to the system Keychain is required and these calls can block the current thread to collect
    /// user input. The same is true for Linux, if a password management tool is available.
    /// </summary>
    [<Import("safeStorage", "electron")>]
    type SafeStorage =
        /// <summary>
        /// Whether encryption is available.<br/><br/>On Linux, returns true if the app has emitted the <c>ready</c> event and the secret key is
        /// available. On MacOS, returns true if Keychain is available. On Windows, returns true once the app has emitted the <c>ready</c>
        /// event.
        /// </summary>
        [<Erase>]
        static member mutable isEncryptionAvailable() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// An array of bytes representing the encrypted string.<br/><br/>This function will throw an error if encryption fails.
        /// </summary>
        /// <param name="plainText"></param>
        [<Erase>]
        static member mutable encryptString(plainText: string) : Buffer = Unchecked.defaultof<_>

        /// <summary>
        /// the decrypted string. Decrypts the encrypted buffer obtained  with <c>safeStorage.encryptString</c> back into a string.<br/><br/>This function will throw an error
        /// if decryption fails.
        /// </summary>
        /// <param name="encrypted"></param>
        [<Erase>]
        static member mutable decryptString(encrypted: Buffer) : string = Unchecked.defaultof<_>

        /// <summary>
        /// This function on Linux will force the module to use an in memory password for creating symmetric key that is
        /// used for encrypt/decrypt functions when a valid OS password manager cannot be determined for the current active desktop environment. This
        /// function is a no-op on Windows and MacOS.
        /// </summary>
        /// <param name="usePlainText"></param>
        [<Erase>]
        static member mutable setUsePlainTextEncryption(usePlainText: bool) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// User friendly name of the password manager selected on Linux.<br/><br/>This function will return one of the following values:<br/><br/>* <c>basic_text</c> -
        /// When the desktop environment is not recognised or if the following command line flag is provided <c>--password-store="basic"</c>.<br/>* <c>gnome_libsecret</c> - When
        /// the desktop environment is <c>X-Cinnamon</c>, <c>Deepin</c>, <c>GNOME</c>, <c>Pantheon</c>, <c>XFCE</c>, <c>UKUI</c>, <c>unity</c> or if the following command line flag is provided
        /// <c>--password-store="gnome-libsecret"</c>.<br/>* <c>kwallet</c> - When the desktop session is <c>kde4</c> or if the following command line flag is provided <c>--password-store="kwallet"</c>.<br/>* <c>kwallet5</c>
        /// - When the desktop session is <c>kde5</c> or if the following command line flag is provided <c>--password-store="kwallet5"</c>.<br/>* <c>kwallet6</c> - When
        /// the desktop session is <c>kde6</c> or if the following command line flag is provided <c>--password-store="kwallet6"</c>.<br/>* <c>unknown</c> - When the function
        /// is called before app has emitted the <c>ready</c> event.
        /// </summary>
        [<Erase>]
        static member mutable getSelectedStorageBackend() : Enums.SafeStorage.GetSelectedStorageBackend =
            Unchecked.defaultof<_>
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// Process: Main<br/><br/>&gt; Register for and receive notifications from remote push notification services<br/><br/>For example, when registering for push notifications via Apple
    /// push notification services (APNS):
    /// </summary>
    [<Import("pushNotifications", "electron")>]
    type PushNotifications =
        interface EventEmitter
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the app receives a remote notification while running. See: https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428430-application?language=objc
        /// </summary>
        [<Emit("$0.on('received-apns-notification', $1)"); Import("pushNotifications", "electron")>]
        static member mutable onReceivedApnsNotification(handler: Event -> Record<string, obj> -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the app receives a remote notification while running. See: https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428430-application?language=objc
        /// </summary>
        [<Emit("$0.on('received-apns-notification', $1)"); Import("pushNotifications", "electron")>]
        static member mutable onReceivedApnsNotification
            (handler: Fable.Electron.EventInterfaces.PushNotifications.IOnReceivedApnsNotification -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the app receives a remote notification while running. See: https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428430-application?language=objc
        /// </summary>
        [<Emit("$0.once('received-apns-notification', $1)"); Import("pushNotifications", "electron")>]
        static member mutable onceReceivedApnsNotification(handler: Event -> Record<string, obj> -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the app receives a remote notification while running. See: https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428430-application?language=objc
        /// </summary>
        [<Emit("$0.once('received-apns-notification', $1)"); Import("pushNotifications", "electron")>]
        static member mutable onceReceivedApnsNotification
            (handler: Fable.Electron.EventInterfaces.PushNotifications.IOnReceivedApnsNotification -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the app receives a remote notification while running. See: https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428430-application?language=objc
        /// </summary>
        [<Emit("$0.off('received-apns-notification', $1)"); Import("pushNotifications", "electron")>]
        static member mutable offReceivedApnsNotification(handler: Event -> Record<string, obj> -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the app receives a remote notification while running. See: https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428430-application?language=objc
        /// </summary>
        [<Emit("$0.off('received-apns-notification', $1)"); Import("pushNotifications", "electron")>]
        static member mutable offReceivedApnsNotification
            (handler: Fable.Electron.EventInterfaces.PushNotifications.IOnReceivedApnsNotification -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Registers the app with Apple Push Notification service (APNS) to receive Badge, Sound, and Alert notifications. If registration is successful,
        /// the promise will be resolved with the APNS device token. Otherwise, the promise will be rejected with an error message.
        /// See: https://developer.apple.com/documentation/appkit/nsapplication/1428476-registerforremotenotificationtyp?language=objc
        /// </summary>
        [<Erase>]
        static member mutable registerForAPNSNotifications() : Promise<string> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Unregisters the app from notifications received from APNS.<br/><br/>Apps unregistered through this method can always reregister.<br/><br/>See: https://developer.apple.com/documentation/appkit/nsapplication/1428747-unregisterforremotenotifications?language=objc
        /// </summary>
        [<Erase>]
        static member mutable unregisterForAPNSNotifications() : unit = Unchecked.defaultof<_>
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Register a custom protocol and intercept existing protocol requests.<br/><br/>Process: Main<br/><br/>An example of implementing a protocol that has the same
    /// effect as the <c>file://</c> protocol:<br/><br/><code><br/>const { app, protocol, net } = require('electron')<br/><br/>const path = require('node:path')<br/>const url = require('node:url')<br/><br/>app.whenReady().then(() =&gt; {<br/>
    ///  protocol.handle('atom', (request) =&gt; {<br/>    const filePath = request.url.slice('atom://'.length)<br/>    return net.fetch(url.pathToFileURL(path.join(__dirname, filePath)).toString())<br/>  })<br/>})<br/></code><br/><br/>&gt;
    /// [!NOTE] All methods unless specified can only be used after the <c>ready</c> event of the <c>app</c> module gets emitted.<br/><br/>### Using
    /// <c>protocol</c> with a custom <c>partition</c> or <c>session</c><br/><br/>A protocol is registered to a specific Electron <c>session</c> object. If you don't specify
    /// a session, then your <c>protocol</c> will be applied to the default session that Electron uses. However, if you define a
    /// <c>partition</c> or <c>session</c> on your <c>browserWindow</c>'s <c>webPreferences</c>, then that window will use a different session and your custom protocol will
    /// not work if you just use <c>electron.protocol.XXX</c>.<br/><br/>To have your custom protocol work in combination with a custom session, you need
    /// to register it to that session explicitly.<br/><br/><code><br/>const { app, BrowserWindow, net, protocol, session } = require('electron')<br/><br/>const path = require('node:path')<br/>const url
    /// = require('node:url')<br/><br/>app.whenReady().then(() =&gt; {<br/>  const partition = 'persist:example'<br/>  const ses = session.fromPartition(partition)<br/><br/>  ses.protocol.handle('atom', (request) =&gt; {<br/>
    ///   const filePath = request.url.slice('atom://'.length)<br/>    return net.fetch(url.pathToFileURL(path.resolve(__dirname, filePath)).toString())<br/>  })<br/><br/>  const mainWindow = new BrowserWindow({
    /// webPreferences: { partition } })<br/>})<br/></code>
    /// </summary>
    [<Import("protocol", "electron")>]
    type Protocol =
        /// <summary>
        /// &gt; [!NOTE] This method can only be used before the <c>ready</c> event of the <c>app</c> module gets emitted and can
        /// be called only once.<br/><br/>Registers the <c>scheme</c> as standard, secure, bypasses content security policy for resources, allows registering ServiceWorker, supports fetch
        /// API, streaming video/audio, and V8 code cache. Specify a privilege with the value of <c>true</c> to enable the capability.<br/><br/>An example
        /// of registering a privileged scheme, that bypasses Content Security Policy:<br/><br/>A standard scheme adheres to what RFC 3986 calls generic URI
        /// syntax. For example <c>http</c> and <c>https</c> are standard schemes, while <c>file</c> is not.<br/><br/>Registering a scheme as standard allows relative and
        /// absolute resources to be resolved correctly when served. Otherwise the scheme will behave like the <c>file</c> protocol, but without the
        /// ability to resolve relative URLs.<br/><br/>For example when you load following page with custom protocol without registering it as standard scheme,
        /// the image will not be loaded because non-standard schemes can not recognize relative URLs:<br/><br/>Registering a scheme as standard will allow
        /// access to files through the FileSystem API. Otherwise the renderer will throw a security error for the scheme.<br/><br/>By default web
        /// storage apis (localStorage, sessionStorage, webSQL, indexedDB, cookies) are disabled for non standard schemes. So in general if you want to
        /// register a custom protocol to replace the <c>http</c> protocol, you have to register it as a standard scheme.<br/><br/>Protocols that use
        /// streams (http and stream protocols) should set <c>stream: true</c>. The <c>&lt;video&gt;</c> and <c>&lt;audio&gt;</c> HTML elements expect protocols to buffer their
        /// responses by default. The <c>stream</c> flag configures those elements to correctly expect streaming responses.
        /// </summary>
        /// <param name="customSchemes"></param>
        [<Erase>]
        static member mutable registerSchemesAsPrivileged(customSchemes: CustomScheme[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Register a protocol handler for <c>scheme</c>. Requests made to URLs with this scheme will delegate to this handler to determine
        /// what response should be sent.<br/><br/>Either a <c>Response</c> or a <c>Promise&lt;Response&gt;</c> can be returned.<br/><br/>Example:<br/><br/>See the MDN docs for <c>Request</c> and <c>Response</c>
        /// for more details.
        /// </summary>
        /// <param name="scheme">scheme to handle, for example <c>https</c> or <c>my-app</c>. This is the bit before the <c>:</c> in a URL.</param>
        /// <param name="handler"></param>
        [<Erase>]
        static member mutable handle
            (scheme: string, handler: GlobalRequest -> U2<GlobalResponse, Promise<GlobalResponse>>)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Removes a protocol handler registered with <c>protocol.handle</c>.
        /// </summary>
        /// <param name="scheme">scheme for which to remove the handler.</param>
        [<Erase>]
        static member mutable unhandle(scheme: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether <c>scheme</c> is already handled.
        /// </summary>
        /// <param name="scheme"></param>
        [<Erase>]
        static member mutable isProtocolHandled(scheme: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully registered<br/><br/>Registers a protocol of <c>scheme</c> that will send a file as the response. The <c>handler</c>
        /// will be called with <c>request</c> and <c>callback</c> where <c>request</c> is an incoming request for the <c>scheme</c>.<br/><br/>To handle the <c>request</c>, the
        /// <c>callback</c> should be called with either the file's path or an object that has a <c>path</c> property, e.g. <c>callback(filePath)</c> or
        /// <c>callback({ path: filePath })</c>. The <c>filePath</c> must be an absolute path.<br/><br/>By default the <c>scheme</c> is treated like <c>http:</c>, which is
        /// parsed differently from protocols that follow the "generic URI syntax" like <c>file:</c>.
        /// </summary>
        /// <param name="scheme"></param>
        /// <param name="handler"></param>
        [<Erase; System.Obsolete>]
        static member mutable registerFileProtocol
            (scheme: string, handler: Protocol.RegisterFileProtocol.Handler)
            : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully registered<br/><br/>Registers a protocol of <c>scheme</c> that will send a <c>Buffer</c> as a response.<br/><br/>The usage is
        /// the same with <c>registerFileProtocol</c>, except that the <c>callback</c> should be called with either a <c>Buffer</c> object or an object that
        /// has the <c>data</c> property.<br/><br/>Example:
        /// </summary>
        /// <param name="scheme"></param>
        /// <param name="handler"></param>
        [<Erase; System.Obsolete>]
        static member mutable registerBufferProtocol
            (scheme: string, handler: Protocol.RegisterBufferProtocol.Handler)
            : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully registered<br/><br/>Registers a protocol of <c>scheme</c> that will send a <c>string</c> as a response.<br/><br/>The usage is
        /// the same with <c>registerFileProtocol</c>, except that the <c>callback</c> should be called with either a <c>string</c> or an object that has
        /// the <c>data</c> property.
        /// </summary>
        /// <param name="scheme"></param>
        /// <param name="handler"></param>
        [<Erase; System.Obsolete>]
        static member mutable registerStringProtocol
            (scheme: string, handler: Protocol.RegisterStringProtocol.Handler)
            : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully registered<br/><br/>Registers a protocol of <c>scheme</c> that will send an HTTP request as a response.<br/><br/>The usage
        /// is the same with <c>registerFileProtocol</c>, except that the <c>callback</c> should be called with an object that has the <c>url</c> property.
        /// </summary>
        /// <param name="scheme"></param>
        /// <param name="handler"></param>
        [<Erase; System.Obsolete>]
        static member mutable registerHttpProtocol
            (scheme: string, handler: Protocol.RegisterHttpProtocol.Handler)
            : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully registered<br/><br/>Registers a protocol of <c>scheme</c> that will send a stream as a response.<br/><br/>The usage is
        /// the same with <c>registerFileProtocol</c>, except that the <c>callback</c> should be called with either a <c>ReadableStream</c> object or an object that
        /// has the <c>data</c> property.<br/><br/>Example:<br/><br/>It is possible to pass any object that implements the readable stream API (emits <c>data</c>/<c>end</c>/<c>error</c> events). For
        /// example, here's how a file could be returned:
        /// </summary>
        /// <param name="scheme"></param>
        /// <param name="handler"></param>
        [<Erase; System.Obsolete>]
        static member mutable registerStreamProtocol
            (scheme: string, handler: Protocol.RegisterStreamProtocol.Handler)
            : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully unregistered<br/><br/>Unregisters the custom protocol of <c>scheme</c>.
        /// </summary>
        /// <param name="scheme"></param>
        [<Erase; System.Obsolete>]
        static member mutable unregisterProtocol(scheme: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether <c>scheme</c> is already registered.
        /// </summary>
        /// <param name="scheme"></param>
        [<Erase; System.Obsolete>]
        static member mutable isProtocolRegistered(scheme: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully intercepted<br/><br/>Intercepts <c>scheme</c> protocol and uses <c>handler</c> as the protocol's new handler which sends a file
        /// as a response.
        /// </summary>
        /// <param name="scheme"></param>
        /// <param name="handler"></param>
        [<Erase; System.Obsolete>]
        static member mutable interceptFileProtocol
            (scheme: string, handler: Protocol.InterceptFileProtocol.Handler)
            : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully intercepted<br/><br/>Intercepts <c>scheme</c> protocol and uses <c>handler</c> as the protocol's new handler which sends a <c>string</c>
        /// as a response.
        /// </summary>
        /// <param name="scheme"></param>
        /// <param name="handler"></param>
        [<Erase; System.Obsolete>]
        static member mutable interceptStringProtocol
            (scheme: string, handler: Protocol.InterceptStringProtocol.Handler)
            : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully intercepted<br/><br/>Intercepts <c>scheme</c> protocol and uses <c>handler</c> as the protocol's new handler which sends a <c>Buffer</c>
        /// as a response.
        /// </summary>
        /// <param name="scheme"></param>
        /// <param name="handler"></param>
        [<Erase; System.Obsolete>]
        static member mutable interceptBufferProtocol
            (scheme: string, handler: Protocol.InterceptBufferProtocol.Handler)
            : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully intercepted<br/><br/>Intercepts <c>scheme</c> protocol and uses <c>handler</c> as the protocol's new handler which sends a new
        /// HTTP request as a response.
        /// </summary>
        /// <param name="scheme"></param>
        /// <param name="handler"></param>
        [<Erase; System.Obsolete>]
        static member mutable interceptHttpProtocol
            (scheme: string, handler: Protocol.InterceptHttpProtocol.Handler)
            : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully intercepted<br/><br/>Same as <c>protocol.registerStreamProtocol</c>, except that it replaces an existing protocol handler.
        /// </summary>
        /// <param name="scheme"></param>
        /// <param name="handler"></param>
        [<Erase; System.Obsolete>]
        static member mutable interceptStreamProtocol
            (scheme: string, handler: Protocol.InterceptStreamProtocol.Handler)
            : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the protocol was successfully unintercepted<br/><br/>Remove the interceptor installed for <c>scheme</c> and restore its original handler.
        /// </summary>
        /// <param name="scheme"></param>
        [<Erase; System.Obsolete>]
        static member mutable uninterceptProtocol(scheme: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether <c>scheme</c> is already intercepted.
        /// </summary>
        /// <param name="scheme"></param>
        [<Erase; System.Obsolete>]
        static member mutable isProtocolIntercepted(scheme: string) : bool = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Extensions to process object.<br/><br/>Process: Main, Renderer<br/><br/>Electron's <c>process</c> object is extended from the Node.js <c>process</c> object. It adds the following
    /// events, properties, and methods:<br/><br/>### Sandbox<br/><br/>In sandboxed renderers the <c>process</c> object contains only a subset of the APIs:<br/><br/>* <c>crash()</c><br/>* <c>hang()</c><br/>* <c>getCreationTime()</c><br/>*
    /// <c>getHeapStatistics()</c><br/>* <c>getBlinkMemoryInfo()</c><br/>* <c>getProcessMemoryInfo()</c><br/>* <c>getSystemMemoryInfo()</c><br/>* <c>getSystemVersion()</c><br/>* <c>getCPUUsage()</c><br/>* <c>uptime()</c><br/>* <c>argv</c><br/>* <c>execPath</c><br/>* <c>env</c><br/>* <c>pid</c><br/>* <c>arch</c><br/>* <c>platform</c><br/>* <c>sandboxed</c><br/>* <c>contextIsolated</c><br/>* <c>type</c><br/>* <c>version</c><br/>* <c>versions</c><br/>* <c>mas</c><br/>* <c>windowsStore</c><br/>*
    /// <c>contextId</c>
    /// </summary>
    [<Import("process", "electron")>]
    type Process =
        interface EventEmitter

        /// <summary>
        /// Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main
        /// script.
        /// </summary>
        [<Emit("$0.on('loaded', $1)"); Import("process", "electron")>]
        static member mutable onLoaded(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main
        /// script.
        /// </summary>
        [<Emit("$0.once('loaded', $1)"); Import("process", "electron")>]
        static member mutable onceLoaded(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron has loaded its internal initialization script and is beginning to load the web page or the main
        /// script.
        /// </summary>
        [<Emit("$0.off('loaded', $1)"); Import("process", "electron")>]
        static member mutable offLoaded(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Causes the main thread of the current process crash.
        /// </summary>
        [<Erase>]
        static member mutable crash() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The number of milliseconds since epoch, or <c>null</c> if the information is unavailable<br/><br/>Indicates the creation time of the application. The
        /// time is represented as number of milliseconds since epoch. It returns null if it is unable to get the process
        /// creation time.
        /// </summary>
        [<Erase>]
        static member mutable getCreationTime() : Option<float> = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        [<Erase>]
        static member mutable getCPUUsage() : CPUUsage = Unchecked.defaultof<_>

        /// <summary>
        /// * <c>totalHeapSize</c> Integer<br/>* <c>totalHeapSizeExecutable</c> Integer<br/>* <c>totalPhysicalSize</c> Integer<br/>* <c>totalAvailableSize</c> Integer<br/>* <c>usedHeapSize</c> Integer<br/>* <c>heapSizeLimit</c> Integer<br/>* <c>mallocedMemory</c> Integer<br/>* <c>peakMallocedMemory</c> Integer<br/>* <c>doesZapGarbage</c> boolean<br/><br/>Returns an
        /// object with V8 heap statistics. Note that all statistics are reported in Kilobytes.
        /// </summary>
        [<Erase>]
        static member mutable getHeapStatistics() : Process.GetHeapStatistics = Unchecked.defaultof<_>

        /// <summary>
        /// * <c>allocated</c> Integer - Size of all allocated objects in Kilobytes.<br/>* <c>total</c> Integer - Total allocated space in Kilobytes.<br/><br/>Returns an
        /// object with Blink memory information. It can be useful for debugging rendering / DOM related memory issues. Note that all
        /// values are reported in Kilobytes.
        /// </summary>
        [<Erase>]
        static member mutable getBlinkMemoryInfo() : Process.GetBlinkMemoryInfo = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with a ProcessMemoryInfo<br/><br/>Returns an object giving memory usage statistics about the current process. Note that all statistics are reported
        /// in Kilobytes. This api should be called after app ready.<br/><br/>Chromium does not provide <c>residentSet</c> value for macOS. This is because
        /// macOS performs in-memory compression of pages that haven't been recently used. As a result the resident set size value is
        /// not what one would expect. <c>private</c> memory is more representative of the actual pre-compression memory usage of the process on
        /// macOS.
        /// </summary>
        [<Erase>]
        static member mutable getProcessMemoryInfo() : Promise<ProcessMemoryInfo> = Unchecked.defaultof<_>

        /// <summary>
        /// * <c>total</c> Integer - The total amount of physical memory in Kilobytes available to the system.<br/>* <c>free</c> Integer - The
        /// total amount of memory not being used by applications or disk cache.<br/>* <c>fileBacked</c> Integer _macOS_ - The amount of memory
        /// that currently has been paged out to storage. Includes memory for file caches, network buffers, and other system services.<br/>* <c>purgeable</c>
        /// Integer _macOS_ - The amount of memory that is marked as "purgeable". The system can reclaim it if memory pressure
        /// increases.<br/>* <c>swapTotal</c> Integer _Windows_ _Linux_ - The total amount of swap memory in Kilobytes available to the system.<br/>* <c>swapFree</c> Integer
        /// _Windows_ _Linux_ - The free amount of swap memory in Kilobytes available to the system.<br/><br/>Returns an object giving memory usage
        /// statistics about the entire system. Note that all statistics are reported in Kilobytes.
        /// </summary>
        [<Erase>]
        static member mutable getSystemMemoryInfo() : Process.GetSystemMemoryInfo = Unchecked.defaultof<_>

        /// <summary>
        /// The version of the host operating system.<br/><br/>Example:<br/><br/>&gt; [!NOTE] It returns the actual operating system version instead of kernel version on
        /// macOS unlike <c>os.release()</c>.
        /// </summary>
        [<Erase>]
        static member mutable getSystemVersion() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Indicates whether the snapshot has been created successfully.<br/><br/>Takes a V8 heap snapshot and saves it to <c>filePath</c>.
        /// </summary>
        /// <param name="filePath">Path to the output file.</param>
        [<Erase>]
        static member mutable takeHeapSnapshot(filePath: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Causes the main thread of the current process hang.
        /// </summary>
        [<Erase>]
        static member mutable hang() : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets the file descriptor soft limit to <c>maxDescriptors</c> or the OS hard limit, whichever is lower for the current process.
        /// </summary>
        /// <param name="maxDescriptors"></param>
        [<Erase>]
        static member mutable setFdLimit(maxDescriptors: int) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// A <c>boolean</c>. When the app is started by being passed as parameter to the default Electron executable, this property is
        /// <c>true</c> in the main process, otherwise it is <c>undefined</c>. For example when running the app with <c>electron .</c>, it is
        /// <c>true</c>, even if the app is packaged (<c>isPackaged</c>) is <c>true</c>. This can be useful to determine how many arguments will
        /// need to be sliced off from <c>process.argv</c>.
        /// </summary>
        [<Erase>]
        static member val defaultApp: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c>, <c>true</c> when the current renderer context is the "main" renderer frame. If you want the ID of the
        /// current frame you should use <c>webFrame.routingId</c>.
        /// </summary>
        [<Erase>]
        static member val isMainFrame: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c>. For Mac App Store build, this property is <c>true</c>, for other builds it is <c>undefined</c>.
        /// </summary>
        [<Erase>]
        static member val mas: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c> that controls ASAR support inside your application. Setting this to <c>true</c> will disable the support for <c>asar</c> archives
        /// in Node's built-in modules.
        /// </summary>
        [<Erase>]
        static member val noAsar: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> that controls whether or not deprecation warnings are printed to <c>stderr</c>. Setting this to <c>true</c> will silence deprecation
        /// warnings. This property is used instead of the <c>--no-deprecation</c> command line flag.
        /// </summary>
        [<Erase>]
        static member val noDeprecation: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the path to the resources directory.
        /// </summary>
        [<Erase>]
        static member val resourcesPath: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c>. When the renderer process is sandboxed, this property is <c>true</c>, otherwise it is <c>undefined</c>.
        /// </summary>
        [<Erase>]
        static member val sandboxed: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c> that indicates whether the current renderer context has <c>contextIsolation</c> enabled. It is <c>undefined</c> in the main process.
        /// </summary>
        [<Erase>]
        static member val contextIsolated: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c> that controls whether or not deprecation warnings will be thrown as exceptions. Setting this to <c>true</c> will throw
        /// errors for deprecations. This property is used instead of the <c>--throw-deprecation</c> command line flag.
        /// </summary>
        [<Erase>]
        static member val throwDeprecation: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> that controls whether or not deprecations printed to <c>stderr</c> include their stack trace. Setting this to <c>true</c> will
        /// print stack traces for deprecations. This property is instead of the <c>--trace-deprecation</c> command line flag.
        /// </summary>
        [<Erase>]
        static member val traceDeprecation: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> that controls whether or not process warnings printed to <c>stderr</c> include their stack trace. Setting this to <c>true</c>
        /// will print stack traces for process warnings (including deprecations). This property is instead of the <c>--trace-warnings</c> command line flag.
        /// </summary>
        [<Erase>]
        static member val traceProcessWarnings: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the current process's type, can be:<br/><br/>* <c>browser</c> - The main process<br/>* <c>renderer</c> - A renderer process<br/>* <c>service-worker</c>
        /// - In a service worker<br/>* <c>worker</c> - In a web worker<br/>* <c>utility</c> - In a node process launched as a
        /// service
        /// </summary>
        [<Erase>]
        static member val ``type``: Enums.Process.Type = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing Chrome's version string.
        /// </summary>
        [<Erase>]
        static member val chrome: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> representing Electron's version string.
        /// </summary>
        [<Erase>]
        static member val electron: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>boolean</c>. If the app is running as a Windows Store app (appx), this property is <c>true</c>, for otherwise it
        /// is <c>undefined</c>.
        /// </summary>
        [<Erase>]
        static member val windowsStore: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> (optional) representing a globally unique ID of the current JavaScript context. Each frame has its own JavaScript context.
        /// When contextIsolation is enabled, the isolated world also has a separate JavaScript context. This property is only available in the
        /// renderer process.
        /// </summary>
        [<Erase>]
        static member val contextId: string = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>Electron.ParentPort</c> property if this is a <c>UtilityProcess</c> (or <c>null</c> otherwise) allowing communication with the parent process.
        /// </summary>
        [<Erase>]
        static member val parentPort: Electron.ParentPort = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Block the system from entering low-power (sleep) mode.<br/><br/>Process: Main<br/><br/>For example:
    /// </summary>
    [<Import("powerSaveBlocker", "electron")>]
    type PowerSaveBlocker =
        /// <summary>
        /// The blocker ID that is assigned to this power blocker.<br/><br/>Starts preventing the system from entering lower-power mode. Returns an integer
        /// identifying the power save blocker.<br/><br/>&gt; [!NOTE] <c>prevent-display-sleep</c> has higher precedence over <c>prevent-app-suspension</c>. Only the highest precedence type takes effect. In
        /// other words, <c>prevent-display-sleep</c> always takes precedence over <c>prevent-app-suspension</c>.<br/><br/>For example, an API calling A requests for <c>prevent-app-suspension</c>, and another calling B
        /// requests for <c>prevent-display-sleep</c>. <c>prevent-display-sleep</c> will be used until B stops its request. After that, <c>prevent-app-suspension</c> is used.
        /// </summary>
        /// <param name="``type``">Power save blocker type.</param>
        [<Erase>]
        static member mutable start(``type``: Enums.PowerSaveBlocker.Start.Type) : int = Unchecked.defaultof<_>

        /// <summary>
        /// Stops the specified power save blocker.<br/><br/>Whether the specified <c>powerSaveBlocker</c> has been stopped.
        /// </summary>
        /// <param name="id">The power save blocker id returned by <c>powerSaveBlocker.start</c>.</param>
        [<Erase>]
        static member mutable stop(id: int) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the corresponding <c>powerSaveBlocker</c> has started.
        /// </summary>
        /// <param name="id">The power save blocker id returned by <c>powerSaveBlocker.start</c>.</param>
        [<Erase>]
        static member mutable isStarted(id: int) : bool = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Monitor power state changes.<br/><br/>Process: Main
    /// </summary>
    [<Import("powerMonitor", "electron")>]
    type PowerMonitor =
        interface EventEmitter

        /// <summary>
        /// Emitted when the system is suspending.
        /// </summary>
        [<Emit("$0.on('suspend', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onSuspend(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the system is suspending.
        /// </summary>
        [<Emit("$0.once('suspend', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceSuspend(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the system is suspending.
        /// </summary>
        [<Emit("$0.off('suspend', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offSuspend(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when system is resuming.
        /// </summary>
        [<Emit("$0.on('resume', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onResume(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when system is resuming.
        /// </summary>
        [<Emit("$0.once('resume', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceResume(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when system is resuming.
        /// </summary>
        [<Emit("$0.off('resume', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offResume(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the system changes to AC power.
        /// </summary>
        [<Emit("$0.on('on-ac', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onOnAc(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the system changes to AC power.
        /// </summary>
        [<Emit("$0.once('on-ac', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceOnAc(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the system changes to AC power.
        /// </summary>
        [<Emit("$0.off('on-ac', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offOnAc(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when system changes to battery power.
        /// </summary>
        [<Emit("$0.on('on-battery', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onOnBattery(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when system changes to battery power.
        /// </summary>
        [<Emit("$0.once('on-battery', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceOnBattery(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when system changes to battery power.
        /// </summary>
        [<Emit("$0.off('on-battery', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offOnBattery(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the thermal state of the system changes. Notification of a change in the thermal status of the system,
        /// such as entering a critical temperature range. Depending on the severity, the system might take steps to reduce said temperature,
        /// for example, throttling the CPU or switching on the fans if available.<br/><br/>Apps may react to the new state by reducing
        /// expensive computing tasks (e.g. video encoding), or notifying the user. The same state might be received repeatedly.<br/><br/>See https://developer.apple.com/library/archive/documentation/Performance/Conceptual/power_efficiency_guidelines_osx/RespondToThermalStateChanges.html
        /// </summary>
        [<Emit("$0.on('thermal-state-change', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onThermalStateChange(handler: PowerMonitor.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the thermal state of the system changes. Notification of a change in the thermal status of the system,
        /// such as entering a critical temperature range. Depending on the severity, the system might take steps to reduce said temperature,
        /// for example, throttling the CPU or switching on the fans if available.<br/><br/>Apps may react to the new state by reducing
        /// expensive computing tasks (e.g. video encoding), or notifying the user. The same state might be received repeatedly.<br/><br/>See https://developer.apple.com/library/archive/documentation/Performance/Conceptual/power_efficiency_guidelines_osx/RespondToThermalStateChanges.html
        /// </summary>
        [<Emit("$0.once('thermal-state-change', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceThermalStateChange(handler: PowerMonitor.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the thermal state of the system changes. Notification of a change in the thermal status of the system,
        /// such as entering a critical temperature range. Depending on the severity, the system might take steps to reduce said temperature,
        /// for example, throttling the CPU or switching on the fans if available.<br/><br/>Apps may react to the new state by reducing
        /// expensive computing tasks (e.g. video encoding), or notifying the user. The same state might be received repeatedly.<br/><br/>See https://developer.apple.com/library/archive/documentation/Performance/Conceptual/power_efficiency_guidelines_osx/RespondToThermalStateChanges.html
        /// </summary>
        [<Emit("$0.off('thermal-state-change', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offThermalStateChange(handler: PowerMonitor.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Notification of a change in the operating system's advertised speed limit for CPUs, in percent. Values below 100 indicate that
        /// the system is impairing processing power due to thermal management.
        /// </summary>
        [<Emit("$0.on('speed-limit-change', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onSpeedLimitChange(handler: PowerMonitor.Details -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Notification of a change in the operating system's advertised speed limit for CPUs, in percent. Values below 100 indicate that
        /// the system is impairing processing power due to thermal management.
        /// </summary>
        [<Emit("$0.once('speed-limit-change', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceSpeedLimitChange(handler: PowerMonitor.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Notification of a change in the operating system's advertised speed limit for CPUs, in percent. Values below 100 indicate that
        /// the system is impairing processing power due to thermal management.
        /// </summary>
        [<Emit("$0.off('speed-limit-change', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offSpeedLimitChange(handler: PowerMonitor.Details -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system is about to reboot or shut down. If the event handler invokes <c>e.preventDefault()</c>, Electron will attempt
        /// to delay system shutdown in order for the app to exit cleanly. If <c>e.preventDefault()</c> is called, the app should exit
        /// as soon as possible by calling something like <c>app.quit()</c>.
        /// </summary>
        [<Emit("$0.on('shutdown', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onShutdown(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system is about to reboot or shut down. If the event handler invokes <c>e.preventDefault()</c>, Electron will attempt
        /// to delay system shutdown in order for the app to exit cleanly. If <c>e.preventDefault()</c> is called, the app should exit
        /// as soon as possible by calling something like <c>app.quit()</c>.
        /// </summary>
        [<Emit("$0.once('shutdown', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceShutdown(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system is about to reboot or shut down. If the event handler invokes <c>e.preventDefault()</c>, Electron will attempt
        /// to delay system shutdown in order for the app to exit cleanly. If <c>e.preventDefault()</c> is called, the app should exit
        /// as soon as possible by calling something like <c>app.quit()</c>.
        /// </summary>
        [<Emit("$0.off('shutdown', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offShutdown(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the system is about to lock the screen.
        /// </summary>
        [<Emit("$0.on('lock-screen', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onLockScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the system is about to lock the screen.
        /// </summary>
        [<Emit("$0.once('lock-screen', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceLockScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the system is about to lock the screen.
        /// </summary>
        [<Emit("$0.off('lock-screen', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offLockScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted as soon as the systems screen is unlocked.
        /// </summary>
        [<Emit("$0.on('unlock-screen', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onUnlockScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted as soon as the systems screen is unlocked.
        /// </summary>
        [<Emit("$0.once('unlock-screen', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceUnlockScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted as soon as the systems screen is unlocked.
        /// </summary>
        [<Emit("$0.off('unlock-screen', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offUnlockScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a login session is activated. See documentation for more information.
        /// </summary>
        [<Emit("$0.on('user-did-become-active', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onUserDidBecomeActive(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a login session is activated. See documentation for more information.
        /// </summary>
        [<Emit("$0.once('user-did-become-active', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceUserDidBecomeActive(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a login session is activated. See documentation for more information.
        /// </summary>
        [<Emit("$0.off('user-did-become-active', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offUserDidBecomeActive(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a login session is deactivated. See documentation for more information.
        /// </summary>
        [<Emit("$0.on('user-did-resign-active', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onUserDidResignActive(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a login session is deactivated. See documentation for more information.
        /// </summary>
        [<Emit("$0.once('user-did-resign-active', $1)"); Import("powerMonitor", "electron")>]
        static member mutable onceUserDidResignActive(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a login session is deactivated. See documentation for more information.
        /// </summary>
        [<Emit("$0.off('user-did-resign-active', $1)"); Import("powerMonitor", "electron")>]
        static member mutable offUserDidResignActive(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// The system's current idle state. Can be <c>active</c>, <c>idle</c>, <c>locked</c> or <c>unknown</c>.<br/><br/>Calculate the system idle state. <c>idleThreshold</c> is the amount
        /// of time (in seconds) before considered idle.  <c>locked</c> is available on supported systems only.
        /// </summary>
        /// <param name="idleThreshold"></param>
        [<Erase>]
        static member mutable getSystemIdleState(idleThreshold: int) : Enums.PowerMonitor.GetSystemIdleState =
            Unchecked.defaultof<_>

        /// <summary>
        /// Idle time in seconds<br/><br/>Calculate system idle time in seconds.
        /// </summary>
        [<Erase>]
        static member mutable getSystemIdleTime() : int = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The system's current thermal state. Can be <c>unknown</c>, <c>nominal</c>, <c>fair</c>, <c>serious</c>, or <c>critical</c>.
        /// </summary>
        [<Erase>]
        static member mutable getCurrentThermalState() : Enums.PowerMonitor.GetCurrentThermalState =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Whether the system is on battery power.<br/><br/>To monitor for changes in this property, use the <c>on-battery</c> and <c>on-ac</c> events.
        /// </summary>
        [<Erase>]
        static member mutable isOnBatteryPower() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>boolean</c> property. True if the system is on battery power.<br/><br/>See <c>powerMonitor.isOnBatteryPower()</c>.
        /// </summary>
        [<Erase>]
        static member val onBatteryPower: bool = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Create OS desktop notifications<br/><br/>Process: Main<br/><br/>&gt; [!NOTE] If you want to show notifications from a renderer process you should use
    /// the web Notifications API<br/><br/>### Class: Notification<br/><br/>&gt; Create OS desktop notifications<br/><br/>Process: Main<br/><br/><c>Notification</c> is an EventEmitter.<br/><br/>It creates a new <c>Notification</c> with native
    /// properties as set by the <c>options</c>.<br/><br/>&gt; [!WARNING] Electron's built-in classes cannot be subclassed in user code. For more information, see
    /// the FAQ.<br/><br/>### Static Methods<br/><br/>The <c>Notification</c> class has the following static methods:<br/><br/>### <c>Notification.isSupported()</c><br/><br/>Returns <c>boolean</c> - Whether or not desktop notifications are
    /// supported on the current system
    /// </summary>
    [<Import("Notification", "electron")>]
    type Notification
        /// <param name="title">A title for the notification, which will be displayed at the top of the notification window when it is
        /// shown.</param>
        /// <param name="subtitle">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || A subtitle for the
        /// notification, which will be displayed below the title.</param>
        /// <param name="body">The body text of the notification, which will be displayed below the title or subtitle.</param>
        /// <param name="silent">Whether or not to suppress the OS notification noise when showing the notification.</param>
        /// <param name="icon">An icon to use in the notification. If a string is passed, it must be a valid path to
        /// a local icon file.</param>
        /// <param name="hasReply">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Whether or not to
        /// add an inline reply option to the notification.</param>
        /// <param name="timeoutType">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || The timeout duration of
        /// the notification. Can be 'default' or 'never'.</param>
        /// <param name="replyPlaceholder">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || The placeholder to write
        /// in the inline reply input field.</param>
        /// <param name="sound">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || The name of the
        /// sound file to play when the notification is shown.</param>
        /// <param name="urgency">⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌ || The urgency level of
        /// the notification. Can be 'normal', 'critical', or 'low'.</param>
        /// <param name="actions">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Actions to add to
        /// the notification. Please read the available actions and limitations in the <c>NotificationAction</c> documentation.</param>
        /// <param name="closeButtonText">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || A custom title for
        /// the close button of an alert. An empty string will cause the default localized text to be used.</param>
        /// <param name="toastXml">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || A custom description of
        /// the Notification on Windows superseding all properties above. Provides full customization of design and behavior of the notification.</param>
        [<ParamObject(0)>]
        (
            ?title: string,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?subtitle: string,
            #endif

            ?body: string,
            ?silent: bool,
            ?icon: U2<string, NativeImage>,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?hasReply: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
            ?timeoutType: Enums.Notification.Options.TimeoutType,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?replyPlaceholder: string,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?sound: string,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN
            ?urgency: Enums.Notification.Options.Urgency,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?actions: NotificationAction[],
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?closeButtonText: string,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
            ?toastXml: string
            #endif

        ) =
        interface EventEmitter

        /// <summary>
        /// Emitted when the notification is shown to the user. Note that this event can be fired multiple times as a
        /// notification can be shown multiple times through the <c>show()</c> method.
        /// </summary>
        [<Emit("$0.on('show', $1)")>]
        member inline _.onShow(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the notification is shown to the user. Note that this event can be fired multiple times as a
        /// notification can be shown multiple times through the <c>show()</c> method.
        /// </summary>
        [<Emit("$0.once('show', $1)")>]
        member inline _.onceShow(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the notification is shown to the user. Note that this event can be fired multiple times as a
        /// notification can be shown multiple times through the <c>show()</c> method.
        /// </summary>
        [<Emit("$0.off('show', $1)")>]
        member inline _.offShow(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the notification is clicked by the user.
        /// </summary>
        [<Emit("$0.on('click', $1)")>]
        member inline _.onClick(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the notification is clicked by the user.
        /// </summary>
        [<Emit("$0.once('click', $1)")>]
        member inline _.onceClick(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the notification is clicked by the user.
        /// </summary>
        [<Emit("$0.off('click', $1)")>]
        member inline _.offClick(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the notification is closed by manual intervention from the user.<br/><br/>This event is not guaranteed to be emitted in
        /// all cases where the notification is closed.<br/><br/>On Windows, the <c>close</c> event can be emitted in one of three ways: programmatic
        /// dismissal with <c>notification.close()</c>, by the user closing the notification, or via system timeout. If a notification is in the Action
        /// Center after the initial <c>close</c> event is emitted, a call to <c>notification.close()</c> will remove the notification from the action center
        /// but the <c>close</c> event will not be emitted again.
        /// </summary>
        [<Emit("$0.on('close', $1)")>]
        member inline _.onClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the notification is closed by manual intervention from the user.<br/><br/>This event is not guaranteed to be emitted in
        /// all cases where the notification is closed.<br/><br/>On Windows, the <c>close</c> event can be emitted in one of three ways: programmatic
        /// dismissal with <c>notification.close()</c>, by the user closing the notification, or via system timeout. If a notification is in the Action
        /// Center after the initial <c>close</c> event is emitted, a call to <c>notification.close()</c> will remove the notification from the action center
        /// but the <c>close</c> event will not be emitted again.
        /// </summary>
        [<Emit("$0.once('close', $1)")>]
        member inline _.onceClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the notification is closed by manual intervention from the user.<br/><br/>This event is not guaranteed to be emitted in
        /// all cases where the notification is closed.<br/><br/>On Windows, the <c>close</c> event can be emitted in one of three ways: programmatic
        /// dismissal with <c>notification.close()</c>, by the user closing the notification, or via system timeout. If a notification is in the Action
        /// Center after the initial <c>close</c> event is emitted, a call to <c>notification.close()</c> will remove the notification from the action center
        /// but the <c>close</c> event will not be emitted again.
        /// </summary>
        [<Emit("$0.off('close', $1)")>]
        member inline _.offClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user clicks the "Reply" button on a notification with <c>hasReply: true</c>.
        /// </summary>
        [<Emit("$0.on('reply', $1)")>]
        member inline _.onReply(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user clicks the "Reply" button on a notification with <c>hasReply: true</c>.
        /// </summary>
        [<Emit("$0.on('reply', $1)")>]
        member inline _.onReply(handler: Fable.Electron.EventInterfaces.Root.IOnReply -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user clicks the "Reply" button on a notification with <c>hasReply: true</c>.
        /// </summary>
        [<Emit("$0.once('reply', $1)")>]
        member inline _.onceReply(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user clicks the "Reply" button on a notification with <c>hasReply: true</c>.
        /// </summary>
        [<Emit("$0.once('reply', $1)")>]
        member inline _.onceReply(handler: Fable.Electron.EventInterfaces.Root.IOnReply -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user clicks the "Reply" button on a notification with <c>hasReply: true</c>.
        /// </summary>
        [<Emit("$0.off('reply', $1)")>]
        member inline _.offReply(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user clicks the "Reply" button on a notification with <c>hasReply: true</c>.
        /// </summary>
        [<Emit("$0.off('reply', $1)")>]
        member inline _.offReply(handler: Fable.Electron.EventInterfaces.Root.IOnReply -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.on('action', $1)")>]
        member inline _.onAction(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.on('action', $1)")>]
        member inline _.onAction(handler: Fable.Electron.EventInterfaces.Root.IOnAction -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.once('action', $1)")>]
        member inline _.onceAction(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.once('action', $1)")>]
        member inline _.onceAction(handler: Fable.Electron.EventInterfaces.Root.IOnAction -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.off('action', $1)")>]
        member inline _.offAction(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// </summary>
        [<Emit("$0.off('action', $1)")>]
        member inline _.offAction(handler: Fable.Electron.EventInterfaces.Root.IOnAction -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when an error is encountered while creating and showing the native notification.
        /// </summary>
        [<Emit("$0.on('failed', $1)")>]
        member inline _.onFailed(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when an error is encountered while creating and showing the native notification.
        /// </summary>
        [<Emit("$0.on('failed', $1)")>]
        member inline _.onFailed(handler: Fable.Electron.EventInterfaces.Root.IOnFailed -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when an error is encountered while creating and showing the native notification.
        /// </summary>
        [<Emit("$0.once('failed', $1)")>]
        member inline _.onceFailed(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when an error is encountered while creating and showing the native notification.
        /// </summary>
        [<Emit("$0.once('failed', $1)")>]
        member inline _.onceFailed(handler: Fable.Electron.EventInterfaces.Root.IOnFailed -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when an error is encountered while creating and showing the native notification.
        /// </summary>
        [<Emit("$0.off('failed', $1)")>]
        member inline _.offFailed(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when an error is encountered while creating and showing the native notification.
        /// </summary>
        [<Emit("$0.off('failed', $1)")>]
        member inline _.offFailed(handler: Fable.Electron.EventInterfaces.Root.IOnFailed -> unit) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Immediately shows the notification to the user. Unlike the web notification API, instantiating a <c>new Notification()</c> does not immediately show
        /// it to the user. Instead, you need to call this method before the OS will display it.<br/><br/>If the notification has
        /// been shown before, this method will dismiss the previously shown notification and create a new one with identical properties.
        /// </summary>
        [<Erase>]
        member inline _.show() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Dismisses the notification.<br/><br/>On Windows, calling <c>notification.close()</c> while the notification is visible on screen will dismiss the notification and remove it
        /// from the Action Center. If <c>notification.close()</c> is called after the notification is no longer visible on screen, calling <c>notification.close()</c> will
        /// try remove it from the Action Center.
        /// </summary>
        [<Erase>]
        member inline _.close() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>string</c> property representing the title of the notification.
        /// </summary>
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> property representing the subtitle of the notification.
        /// </summary>
        [<Erase>]
        member val subtitle: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> property representing the body of the notification.
        /// </summary>
        [<Erase>]
        member val body: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> property representing the reply placeholder of the notification.
        /// </summary>
        [<Erase>]
        member val replyPlaceholder: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> property representing the sound of the notification.
        /// </summary>
        [<Erase>]
        member val sound: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> property representing the close button text of the notification.
        /// </summary>
        [<Erase>]
        member val closeButtonText: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> property representing whether the notification is silent.
        /// </summary>
        [<Erase>]
        member val silent: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> property representing whether the notification has a reply action.
        /// </summary>
        [<Erase>]
        member val hasReply: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// A <c>string</c> property representing the urgency level of the notification. Can be 'normal', 'critical', or 'low'.<br/><br/>Default is 'low' - see
        /// NotifyUrgency for more information.
        /// </summary>
        [<Erase>]
        member val urgency: Enums.Notification.Urgency = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// A <c>string</c> property representing the type of timeout duration for the notification. Can be 'default' or 'never'.<br/><br/>If <c>timeoutType</c> is set
        /// to 'never', the notification never expires. It stays open until closed by the calling API or the user.
        /// </summary>
        [<Erase>]
        member val timeoutType: Enums.Notification.TimeoutType = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>NotificationAction[]</c> property representing the actions of the notification.
        /// </summary>
        [<Erase>]
        member val actions: NotificationAction[] = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// A <c>string</c> property representing the custom Toast XML of the notification.
        /// </summary>
        [<Erase>]
        member val toastXml: string = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// Whether or not desktop notifications are supported on the current system
        /// </summary>
        [<Erase>]
        static member mutable isSupported() : bool = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ✔ | Exported ✔</para>
    /// &gt; Issue HTTP/HTTPS requests using Chromium's native networking library<br/><br/>Process: Main, Utility<br/><br/>The <c>net</c> module is a client-side API for issuing HTTP(S)
    /// requests. It is similar to the HTTP and HTTPS modules of Node.js but uses Chromium's native networking library instead of
    /// the Node.js implementation, offering better support for web proxies. It also supports checking network status.<br/><br/>The following is a non-exhaustive list
    /// of why you may consider using the <c>net</c> module instead of the native Node.js modules:<br/><br/>* Automatic management of system proxy
    /// configuration, support of the wpad protocol and proxy pac configuration files.<br/>* Automatic tunneling of HTTPS requests.<br/>* Support for authenticating proxies
    /// using basic, digest, NTLM, Kerberos or negotiate authentication schemes.<br/>* Support for traffic monitoring proxies: Fiddler-like proxies used for access control
    /// and monitoring.<br/><br/>The API components (including classes, methods, properties and event names) are similar to those used in Node.js.<br/><br/>Example usage:<br/><br/><code><br/>const {
    /// app } = require('electron')<br/><br/>app.whenReady().then(() =&gt; {<br/>  const { net } = require('electron')<br/>  const request = net.request('https://github.com')<br/>  request.on('response',
    /// (response) =&gt; {<br/>    console.log(<c>STATUS: ${response.statusCode}</c>)<br/>    console.log(<c>HEADERS: ${JSON.stringify(response.headers)}</c>)<br/>    response.on('data', (chunk) =&gt; {<br/>
    ///      console.log(<c>BODY: ${chunk}</c>)<br/>    })<br/>    response.on('end', () =&gt; {<br/>
    ///    console.log('No more data in response.')<br/>    })<br/>  })<br/>  request.end()<br/>})<br/></code><br/><br/>The <c>net</c> API can be
    /// used only after the application emits the <c>ready</c> event. Trying to use the module before the <c>ready</c> event will throw
    /// an error.
    /// </summary>
    [<Import("net", "electron")>]
    type Net =
        /// <summary>
        /// Creates a <c>ClientRequest</c> instance using the provided <c>options</c> which are directly forwarded to the <c>ClientRequest</c> constructor. The <c>net.request</c> method would
        /// be used to issue both secure and insecure HTTP requests according to the specified protocol scheme in the <c>options</c> object.
        /// </summary>
        /// <param name="options">The <c>ClientRequest</c> constructor options.</param>
        [<Erase>]
        static member mutable request(options: U2<ClientRequestConstructorOptions, string>) : ClientRequest =
            Unchecked.defaultof<_>

        /// <summary>
        /// see Response.<br/><br/>Sends a request, similarly to how <c>fetch()</c> works in the renderer, using Chrome's network stack. This differs from Node's
        /// <c>fetch()</c>, which uses Node.js's HTTP stack.<br/><br/>Example:<br/><br/>This method will issue requests from the default session. To send a <c>fetch</c> request from
        /// another session, use ses.fetch().<br/><br/>See the MDN documentation for <c>fetch()</c> for more details.<br/><br/>Limitations:<br/><br/>* <c>net.fetch()</c> does not support the <c>data:</c> or <c>blob:</c>
        /// schemes.<br/>* The value of the <c>integrity</c> option is ignored.<br/>* The <c>.type</c> and <c>.url</c> values of the returned <c>Response</c> object are
        /// incorrect.<br/><br/>By default, requests made with <c>net.fetch</c> can be made to custom protocols as well as <c>file:</c>, and will trigger webRequest
        /// handlers if present. When the non-standard <c>bypassCustomProtocolHandlers</c> option is set in RequestInit, custom protocol handlers will not be called for
        /// this request. This allows forwarding an intercepted request to the built-in handler. webRequest handlers will still be triggered when bypassing
        /// custom protocols.<br/><br/>&gt; [!NOTE] In the utility process, custom protocols are not supported.
        /// </summary>
        /// <param name="input"></param>
        /// <param name="init"></param>
        [<Erase>]
        static member mutable fetch(input: U2<string, GlobalRequest>, ?init: RequestInit) : Promise<GlobalResponse> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether there is currently internet connection.<br/><br/>A return value of <c>false</c> is a pretty strong indicator that the user won't be
        /// able to connect to remote sites. However, a return value of <c>true</c> is inconclusive; even if some link is up,
        /// it is uncertain whether a particular connection attempt to a particular remote site will be successful.
        /// </summary>
        [<Erase>]
        static member mutable isOnline() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with the resolved IP addresses for the <c>host</c>.<br/><br/>This method will resolve hosts from the default session. To resolve a
        /// host from another session, use ses.resolveHost().
        /// </summary>
        /// <param name="host">Hostname to resolve.</param>
        /// <param name="queryType">Requested DNS query type. If unspecified, resolver will pick A or AAAA (or both) based on IPv4/IPv6 settings:</param>
        /// <param name="source">The source to use for resolved addresses. Default allows the resolver to pick an appropriate source. Only affects use
        /// of big external sources (e.g. calling the system for resolution or using DNS). Even if a source is specified, results
        /// can still come from cache, resolving "localhost" or IP literals, etc. One of the following values:</param>
        /// <param name="cacheUsage">Indicates what DNS cache entries, if any, can be used to provide a response. One of the following values:</param>
        /// <param name="secureDnsPolicy">Controls the resolver's Secure DNS behavior for this request. One of the following values:</param>
        [<Erase; ParamObject(1)>]
        static member mutable resolveHost
            (
                host: string,
                ?queryType: Enums.Net.ResolveHost.Options.QueryType,
                ?source: Enums.Net.ResolveHost.Options.Source,
                ?cacheUsage: Enums.Net.ResolveHost.Options.CacheUsage,
                ?secureDnsPolicy: Enums.Net.ResolveHost.Options.SecureDnsPolicy
            ) : Promise<ResolvedHost> =
            Unchecked.defaultof<_>

        /// <summary>
        /// A <c>boolean</c> property. Whether there is currently internet connection.<br/><br/>A return value of <c>false</c> is a pretty strong indicator that the
        /// user won't be able to connect to remote sites. However, a return value of <c>true</c> is inconclusive; even if some
        /// link is up, it is uncertain whether a particular connection attempt to a particular remote site will be successful.
        /// </summary>
        [<Erase>]
        static member val online: bool = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Logging network events for a session.<br/><br/>Process: Main<br/><br/><code><br/>const { app, netLog } = require('electron')<br/><br/>app.whenReady().then(async () =&gt; {<br/>  await netLog.startLogging('/path/to/net-log')<br/>
    ///  // After some network events<br/>  const path = await netLog.stopLogging()<br/>  console.log('Net-logs written to', path)<br/>})<br/></code><br/><br/>See <c>--log-net-log</c> to log
    /// network events throughout the app's lifecycle.<br/><br/>&gt; [!NOTE] All methods unless specified can only be used after the <c>ready</c> event of
    /// the <c>app</c> module gets emitted.
    /// </summary>
    [<Import("netLog", "electron")>]
    type NetLog =
        /// <summary>
        /// resolves when the net log has begun recording.<br/><br/>Starts recording network events to <c>path</c>.
        /// </summary>
        /// <param name="path">File path to record network logs.</param>
        /// <param name="captureMode">What kinds of data should be captured. By default, only metadata about requests will be captured. Setting this to
        /// <c>includeSensitive</c> will include cookies and authentication data. Setting it to <c>everything</c> will include all bytes transferred on sockets. Can be
        /// <c>default</c>, <c>includeSensitive</c> or <c>everything</c>.</param>
        /// <param name="maxFileSize">When the log grows beyond this size, logging will automatically stop. Defaults to unlimited.</param>
        [<Erase; ParamObject(1)>]
        static member mutable startLogging
            (path: string, ?captureMode: Enums.NetLog.StartLogging.Options.CaptureMode, ?maxFileSize: float)
            : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// resolves when the net log has been flushed to disk.<br/><br/>Stops recording network events. If not called, net logging will automatically
        /// end when app quits.
        /// </summary>
        [<Erase>]
        static member mutable stopLogging() : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>boolean</c> property that indicates whether network logs are currently being recorded.
        /// </summary>
        [<Erase>]
        static member val currentlyLogging: bool = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("NavigationHistory", "electron")>]
    type NavigationHistory =
        /// <summary>
        /// Whether the browser can go back to previous web page.
        /// </summary>
        [<Erase>]
        member inline _.canGoBack() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the browser can go forward to next web page.
        /// </summary>
        [<Erase>]
        member inline _.canGoForward() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the web page can go to the specified relative <c>offset</c> from the current entry.
        /// </summary>
        /// <param name="offset"></param>
        [<Erase>]
        member inline _.canGoToOffset(offset: int) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Clears the navigation history.
        /// </summary>
        [<Erase>]
        member inline _.clear() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The index of the current page, from which we would go back/forward or reload.
        /// </summary>
        [<Erase>]
        member inline _.getActiveIndex() : int = Unchecked.defaultof<_>

        /// <summary>
        /// Navigation entry at the given index.<br/><br/>If index is out of bounds (greater than history length or less than 0), null
        /// will be returned.
        /// </summary>
        /// <param name="index"></param>
        [<Erase>]
        member inline _.getEntryAtIndex(index: int) : NavigationEntry = Unchecked.defaultof<_>

        /// <summary>
        /// Makes the browser go back a web page.
        /// </summary>
        [<Erase>]
        member inline _.goBack() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Makes the browser go forward a web page.
        /// </summary>
        [<Erase>]
        member inline _.goForward() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Navigates browser to the specified absolute web page index.
        /// </summary>
        /// <param name="index"></param>
        [<Erase>]
        member inline _.goToIndex(index: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Navigates to the specified relative offset from the current entry.
        /// </summary>
        /// <param name="offset"></param>
        [<Erase>]
        member inline _.goToOffset(offset: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// History length.
        /// </summary>
        [<Erase>]
        member inline _.length() : int = Unchecked.defaultof<_>

        /// <summary>
        /// Removes the navigation entry at the given index. Can't remove entry at the "current active index".<br/><br/>Whether the navigation entry was
        /// removed from the webContents history.
        /// </summary>
        /// <param name="index"></param>
        [<Erase>]
        member inline _.removeEntryAtIndex(index: int) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// WebContents complete history.
        /// </summary>
        [<Erase>]
        member inline _.getAllEntries() : NavigationEntry[] = Unchecked.defaultof<_>

        /// <summary>
        /// the promise will resolve when the page has finished loading the selected navigation entry (see <c>did-finish-load</c>), and rejects if the
        /// page fails to load (see <c>did-fail-load</c>). A noop rejection handler is already attached, which avoids unhandled rejection errors.
        /// </summary>
        /// <param name="entries">Result of a prior <c>getAllEntries()</c> call</param>
        /// <param name="index">Index of the stack that should be loaded. If you set it to <c>0</c>, the webContents will load the
        /// first (oldest) entry. If you leave it undefined, Electron will automatically load the last (newest) entry.</param>
        [<Erase; ParamObject(0)>]
        member inline _.restore(entries: NavigationEntry[], ?index: int) : Promise<unit> = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Read and respond to changes in Chromium's native color theme.<br/><br/>Process: Main
    /// </summary>
    [<Import("nativeTheme", "electron")>]
    type NativeTheme =
        interface EventEmitter

        /// <summary>
        /// Emitted when something in the underlying NativeTheme has changed. This normally means that either the value of <c>shouldUseDarkColors</c>, <c>shouldUseHighContrastColors</c> or
        /// <c>shouldUseInvertedColorScheme</c> has changed. You will have to check them to determine which one has changed.
        /// </summary>
        [<Emit("$0.on('updated', $1)"); Import("nativeTheme", "electron")>]
        static member mutable onUpdated(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when something in the underlying NativeTheme has changed. This normally means that either the value of <c>shouldUseDarkColors</c>, <c>shouldUseHighContrastColors</c> or
        /// <c>shouldUseInvertedColorScheme</c> has changed. You will have to check them to determine which one has changed.
        /// </summary>
        [<Emit("$0.once('updated', $1)"); Import("nativeTheme", "electron")>]
        static member mutable onceUpdated(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when something in the underlying NativeTheme has changed. This normally means that either the value of <c>shouldUseDarkColors</c>, <c>shouldUseHighContrastColors</c> or
        /// <c>shouldUseInvertedColorScheme</c> has changed. You will have to check them to determine which one has changed.
        /// </summary>
        [<Emit("$0.off('updated', $1)"); Import("nativeTheme", "electron")>]
        static member mutable offUpdated(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>boolean</c> for if the OS / Chromium currently has a dark mode enabled or is being instructed to show
        /// a dark-style UI.  If you want to modify this value you should use <c>themeSource</c> below.
        /// </summary>
        [<Erase>]
        static member val shouldUseDarkColors: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> property that can be <c>system</c>, <c>light</c> or <c>dark</c>.  It is used to override and supersede the value
        /// that Chromium has chosen to use internally.<br/><br/>Setting this property to <c>system</c> will remove the override and everything will be reset
        /// to the OS default.  By default <c>themeSource</c> is <c>system</c>.<br/><br/>Settings this property to <c>dark</c> will have the following effects:<br/><br/>* <c>nativeTheme.shouldUseDarkColors</c>
        /// will be <c>true</c> when accessed<br/>* Any UI Electron renders on Linux and Windows including context menus, devtools, etc. will use
        /// the dark UI.<br/>* Any UI the OS renders on macOS including menus, window frames, etc. will use the dark UI.<br/>*
        /// The <c>prefers-color-scheme</c> CSS query will match <c>dark</c> mode.<br/>* The <c>updated</c> event will be emitted<br/><br/>Settings this property to <c>light</c> will have
        /// the following effects:<br/><br/>* <c>nativeTheme.shouldUseDarkColors</c> will be <c>false</c> when accessed<br/>* Any UI Electron renders on Linux and Windows including context menus,
        /// devtools, etc. will use the light UI.<br/>* Any UI the OS renders on macOS including menus, window frames, etc. will
        /// use the light UI.<br/>* The <c>prefers-color-scheme</c> CSS query will match <c>light</c> mode.<br/>* The <c>updated</c> event will be emitted<br/><br/>The usage of
        /// this property should align with a classic "dark mode" state machine in your application where the user has three options.<br/><br/>*
        /// <c>Follow OS</c> --&gt; <c>themeSource = 'system'</c><br/>* <c>Dark Mode</c> --&gt; <c>themeSource = 'dark'</c><br/>* <c>Light Mode</c> --&gt; <c>themeSource = 'light'</c><br/><br/>Your application should
        /// then always use <c>shouldUseDarkColors</c> to determine what CSS to apply.
        /// </summary>
        [<Erase>]
        static member val themeSource: Enums.NativeTheme.ThemeSource = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> for if the OS / Chromium currently has high-contrast mode enabled or is being instructed to show a
        /// high-contrast UI.
        /// </summary>
        [<Erase>]
        static member val shouldUseHighContrastColors: bool = Unchecked.defaultof<_> with get
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property indicating whether or not the system theme has been set to dark or light.<br/><br/>On Windows this property
        /// distinguishes between system and app light/dark theme, returning <c>true</c> if the system theme is set to dark theme and <c>false</c>
        /// otherwise. On macOS the return value will be the same as <c>nativeTheme.shouldUseDarkColors</c>.
        /// </summary>
        [<Erase>]
        static member val shouldUseDarkColorsForSystemIntegratedUI: bool = Unchecked.defaultof<_> with get
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> for if the OS / Chromium currently has an inverted color scheme or is being instructed to use
        /// an inverted color scheme.
        /// </summary>
        [<Erase>]
        static member val shouldUseInvertedColorScheme: bool = Unchecked.defaultof<_> with get
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> indicating whether Chromium is in forced colors mode, controlled by system accessibility settings. Currently, Windows high contrast is
        /// the only system setting that triggers forced colors mode.
        /// </summary>
        [<Erase>]
        static member val inForcedColorsMode: bool = Unchecked.defaultof<_> with get
        #endif


        /// <summary>
        /// A <c>boolean</c> that indicates the whether the user has chosen via system accessibility settings to reduce transparency at the OS
        /// level.
        /// </summary>
        [<Erase>]
        static member val prefersReducedTransparency: bool = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("NativeImage", "electron")>]
    type NativeImage =
        /// <summary>
        /// A Buffer that contains the image's <c>PNG</c> encoded data.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase; ParamObject(0)>]
        member inline _.toPNG(?scaleFactor: float) : Buffer = Unchecked.defaultof<_>

        /// <summary>
        /// A Buffer that contains the image's <c>JPEG</c> encoded data.
        /// </summary>
        /// <param name="quality">Between 0 - 100.</param>
        [<Erase>]
        member inline _.toJPEG(quality: int) : Buffer = Unchecked.defaultof<_>

        /// <summary>
        /// A Buffer that contains a copy of the image's raw bitmap pixel data.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase; ParamObject(0)>]
        member inline _.toBitmap(?scaleFactor: float) : Buffer = Unchecked.defaultof<_>

        /// <summary>
        /// The Data URL of the image.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase; ParamObject(0)>]
        member inline _.toDataURL(?scaleFactor: float) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Legacy alias for <c>image.toBitmap()</c>.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase; ParamObject(0); System.Obsolete>]
        member inline _.getBitmap(?scaleFactor: float) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// A Buffer that stores C pointer to underlying native handle of the image. On macOS, a pointer to <c>NSImage</c> instance
        /// is returned.<br/><br/>Notice that the returned pointer is a weak pointer to the underlying native image instead of a copy, so
        /// you _must_ ensure that the associated <c>nativeImage</c> instance is kept around.
        /// </summary>
        [<Erase>]
        member inline _.getNativeHandle() : Buffer = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Whether the image is empty.
        /// </summary>
        [<Erase>]
        member inline _.isEmpty() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// If <c>scaleFactor</c> is passed, this will return the size corresponding to the image representation most closely matching the passed value.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase>]
        member inline _.getSize(?scaleFactor: float) : Size = Unchecked.defaultof<_>

        /// <summary>
        /// Marks the image as a macOS template image.
        /// </summary>
        /// <param name="option"></param>
        [<Erase>]
        member inline _.setTemplateImage(option: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the image is a macOS template image.
        /// </summary>
        [<Erase>]
        member inline _.isTemplateImage() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// The cropped image.
        /// </summary>
        /// <param name="rect">The area of the image to crop.</param>
        [<Erase>]
        member inline _.crop(rect: Rectangle) : NativeImage = Unchecked.defaultof<_>

        /// <summary>
        /// The resized image.<br/><br/>If only the <c>height</c> or the <c>width</c> are specified then the current aspect ratio will be preserved in
        /// the resized image.
        /// </summary>
        /// <param name="width">Defaults to the image's width.</param>
        /// <param name="height">Defaults to the image's height.</param>
        /// <param name="quality">The desired quality of the resize image. Possible values include <c>good</c>, <c>better</c>, or <c>best</c>. The default is <c>best</c>. These
        /// values express a desired quality/speed tradeoff. They are translated into an algorithm-specific method that depends on the capabilities (CPU, GPU)
        /// of the underlying platform. It is possible for all three methods to be mapped to the same algorithm on a
        /// given platform.</param>
        [<Erase; ParamObject(0)>]
        member inline _.resize
            (?width: int, ?height: int, ?quality: Enums.NativeImage.Resize.Options.Quality)
            : NativeImage =
            Unchecked.defaultof<_>

        /// <summary>
        /// The image's aspect ratio (width divided by height).<br/><br/>If <c>scaleFactor</c> is passed, this will return the aspect ratio corresponding to the
        /// image representation most closely matching the passed value.
        /// </summary>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase>]
        member inline _.getAspectRatio(?scaleFactor: float) : float = Unchecked.defaultof<_>

        /// <summary>
        /// An array of all scale factors corresponding to representations for a given <c>NativeImage</c>.
        /// </summary>
        [<Erase>]
        member inline _.getScaleFactors() : float[] = Unchecked.defaultof<_>

        /// <summary>
        /// Add an image representation for a specific scale factor. This can be used to programmatically add different scale factor representations
        /// to an image. This can be called on empty images.
        /// </summary>
        /// <param name="scaleFactor">The scale factor to add the image representation for.</param>
        /// <param name="width">Defaults to 0. Required if a bitmap buffer is specified as <c>buffer</c>.</param>
        /// <param name="height">Defaults to 0. Required if a bitmap buffer is specified as <c>buffer</c>.</param>
        /// <param name="buffer">The buffer containing the raw image data.</param>
        /// <param name="dataURL">The data URL containing either a base 64 encoded PNG or JPEG image.</param>
        [<Erase; ParamObject(0)>]
        member inline _.addRepresentation
            (?scaleFactor: float, ?width: int, ?height: int, ?buffer: Buffer, ?dataURL: string)
            : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the image is considered a template image.<br/><br/>Please note that this property only has an
        /// effect on macOS.
        /// </summary>
        [<Erase>]
        member val isMacTemplateImage: bool = Unchecked.defaultof<_> with get, set
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Create tray, dock, and application icons using PNG or JPG files.<br/><br/>Process: Main, Renderer<br/><br/>&gt; [!IMPORTANT] If you want to call
    /// this API from a renderer process with context isolation enabled, place the API call in your preload script and expose
    /// it using the <c>contextBridge</c> API.<br/><br/>The <c>nativeImage</c> module provides a unified interface for manipulating system images. These can be handy if
    /// you want to provide multiple scaled versions of the same icon or take advantage of macOS template images.<br/><br/>Electron APIs that
    /// take image files accept either file paths or <c>NativeImage</c> instances. An empty and transparent image will be used when <c>null</c>
    /// is passed.<br/><br/>For example, when creating a Tray or setting a BrowserWindow's icon, you can either pass an image file path
    /// as a string:<br/><br/><code><br/>const { BrowserWindow, Tray } = require('electron')<br/><br/>const tray = new Tray('/Users/somebody/images/icon.png')<br/>const win = new BrowserWindow({ icon: '/Users/somebody/images/window.png' })<br/></code><br/><br/>or
    /// generate a <c>NativeImage</c> instance from the same file:<br/><br/>### Supported Formats<br/><br/>Currently, <c>PNG</c> and <c>JPEG</c> image formats are supported across all platforms.
    /// <c>PNG</c> is recommended because of its support for transparency and lossless compression.<br/><br/>On Windows, you can also load <c>ICO</c> icons from
    /// file paths. For best visual quality, we recommend including at least the following sizes:<br/><br/>* Small icon<br/>  * 16x16 (100%
    /// DPI scale)<br/>  * 20x20 (125% DPI scale)<br/>  * 24x24 (150% DPI scale)<br/>  * 32x32 (200% DPI scale)<br/>*
    /// Large icon<br/>  * 32x32 (100% DPI scale)<br/>  * 40x40 (125% DPI scale)<br/>  * 48x48 (150% DPI scale)<br/>
    ///  * 64x64 (200% DPI scale)<br/>  * 256x256<br/><br/>Check the _Icon Scaling_ section in the Windows App Icon Construction reference.<br/><br/>:::note<br/><br/>EXIF
    /// metadata is currently not supported and will not be taken into account during image encoding and decoding.<br/><br/>:::<br/><br/>### High Resolution Image<br/><br/>On
    /// platforms that support high pixel density displays (such as Apple Retina), you can append <c>@2x</c> after image's base filename to
    /// mark it as a 2x scale high resolution image.<br/><br/>For example, if <c>icon.png</c> is a normal image that has standard resolution,
    /// then <c>icon@2x.png</c> will be treated as a high resolution image that has double Dots per Inch (DPI) density.<br/><br/>If you want
    /// to support displays with different DPI densities at the same time, you can put images with different sizes in the
    /// same folder and use the filename without DPI suffixes within Electron. For example:<br/><br/><code><br/>images/<br/>├── icon.png<br/>├── icon@2x.png<br/>└── icon@3x.png<br/></code><br/><br/><code><br/>const { Tray } =
    /// require('electron')<br/><br/>const appTray = new Tray('/Users/somebody/images/icon.png')<br/></code><br/><br/>The following suffixes for DPI are also supported:<br/><br/>* <c>@1x</c><br/>* <c>@1.25x</c><br/>* <c>@1.33x</c><br/>* <c>@1.4x</c><br/>* <c>@1.5x</c><br/>* <c>@1.8x</c><br/>* <c>@2x</c><br/>* <c>@2.5x</c><br/>*
    /// <c>@3x</c><br/>* <c>@4x</c><br/>* <c>@5x</c><br/><br/>### Template Image _macOS_<br/><br/>On macOS, template images consist of black and an alpha channel. Template images are not
    /// intended to be used as standalone images and are usually mixed with other content to create the desired final appearance.<br/><br/>The
    /// most common case is to use template images for a menu bar (Tray) icon, so it can adapt to both
    /// light and dark menu bars.<br/><br/>To mark an image as a template image, its base filename should end with the word
    /// <c>Template</c> (e.g. <c>xxxTemplate.png</c>). You can also specify template images at different DPI densities (e.g. <c>xxxTemplate@2x.png</c>).
    /// </summary>
    [<Import("nativeImage", "electron")>]
    type NativeImage =
        /// <summary>
        /// Creates an empty <c>NativeImage</c> instance.
        /// </summary>
        [<Erase>]
        static member mutable createEmpty() : NativeImage = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// fulfilled with the file's thumbnail preview image, which is a NativeImage.<br/><br/>&gt; [!NOTE] Windows implementation will ignore <c>size.height</c> and scale the
        /// height according to <c>size.width</c>.
        /// </summary>
        /// <param name="path">path to a file that we intend to construct a thumbnail out of.</param>
        /// <param name="size">the desired width and height (positive numbers) of the thumbnail.</param>
        [<Erase>]
        static member mutable createThumbnailFromPath(path: string, size: Size) : Promise<NativeImage> =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Creates a new <c>NativeImage</c> instance from an image file (e.g., PNG or JPEG) located at <c>path</c>. This method returns an
        /// empty image if the <c>path</c> does not exist, cannot be read, or is not a valid image.
        /// </summary>
        /// <param name="path">path to a file that we intend to construct an image out of.</param>
        [<Erase>]
        static member mutable createFromPath(path: string) : NativeImage = Unchecked.defaultof<_>

        /// <summary>
        /// Creates a new <c>NativeImage</c> instance from <c>buffer</c> that contains the raw bitmap pixel data returned by <c>toBitmap()</c>. The specific format
        /// is platform-dependent.
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable createFromBitmap
            (buffer: Buffer, options: NativeImage.CreateFromBitmap.Options)
            : NativeImage =
            Unchecked.defaultof<_>

        /// <summary>
        /// Creates a new <c>NativeImage</c> instance from <c>buffer</c>. Tries to decode as PNG or JPEG first.
        /// </summary>
        /// <param name="buffer"></param>
        /// <param name="width">Required for bitmap buffers.</param>
        /// <param name="height">Required for bitmap buffers.</param>
        /// <param name="scaleFactor">Defaults to 1.0.</param>
        [<Erase; ParamObject(1)>]
        static member mutable createFromBuffer
            (buffer: Buffer, ?width: int, ?height: int, ?scaleFactor: float)
            : NativeImage =
            Unchecked.defaultof<_>

        /// <summary>
        /// Creates a new <c>NativeImage</c> instance from <c>dataUrl</c>, a base 64 encoded Data URL string.
        /// </summary>
        /// <param name="dataURL"></param>
        [<Erase>]
        static member mutable createFromDataURL(dataURL: string) : NativeImage = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Creates a new <c>NativeImage</c> instance from the <c>NSImage</c> that maps to the given image name. See Apple's <c>NSImageName</c> documentation for
        /// a list of possible values.<br/><br/>The <c>hslShift</c> is applied to the image with the following rules:<br/><br/>* <c>hsl_shift[0]</c> (hue): The absolute hue
        /// value for the image - 0 and 1 map to 0 and 360 on the hue color wheel (red).<br/>* <c>hsl_shift[1]</c>
        /// (saturation): A saturation shift for the image, with the following key values: 0 = remove all color. 0.5 = leave
        /// unchanged. 1 = fully saturate the image.<br/>* <c>hsl_shift[2]</c> (lightness): A lightness shift for the image, with the following key values:
        /// 0 = remove all lightness (make all pixels black). 0.5 = leave unchanged. 1 = full lightness (make all pixels
        /// white).<br/><br/>This means that <c>[-1, 0, 1]</c> will make the image completely white and <c>[-1, 1, 0]</c> will make the image
        /// completely black.<br/><br/>In some cases, the <c>NSImageName</c> doesn't match its string representation; one example of this is <c>NSFolderImageName</c>, whose string representation
        /// would actually be <c>NSFolder</c>. Therefore, you'll need to determine the correct string representation for your image before passing it in.
        /// This can be done with the following:<br/><br/>where <c>SYSTEM_IMAGE_NAME</c> should be replaced with any value from this list.
        /// </summary>
        /// <param name="imageName"></param>
        /// <param name="hslShift"></param>
        [<Erase>]
        static member mutable createFromNamedImage(imageName: string, ?hslShift: float[]) : NativeImage =
            Unchecked.defaultof<_>
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("MessagePortMain", "electron")>]
    type MessagePortMain =
        interface EventEmitter

        /// <summary>
        /// Emitted when a MessagePortMain object receives a message.
        /// </summary>
        [<Emit("$0.on('message', $1)")>]
        member inline _.onMessage(handler: MessagePortMain.Message.MessageEvent -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a MessagePortMain object receives a message.
        /// </summary>
        [<Emit("$0.once('message', $1)")>]
        member inline _.onceMessage(handler: MessagePortMain.Message.MessageEvent -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a MessagePortMain object receives a message.
        /// </summary>
        [<Emit("$0.off('message', $1)")>]
        member inline _.offMessage(handler: MessagePortMain.Message.MessageEvent -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the remote end of a MessagePortMain object becomes disconnected.
        /// </summary>
        [<Emit("$0.on('close', $1)")>]
        member inline _.onClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the remote end of a MessagePortMain object becomes disconnected.
        /// </summary>
        [<Emit("$0.once('close', $1)")>]
        member inline _.onceClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the remote end of a MessagePortMain object becomes disconnected.
        /// </summary>
        [<Emit("$0.off('close', $1)")>]
        member inline _.offClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.
        /// </summary>
        /// <param name="message"></param>
        /// <param name="transfer"></param>
        [<Erase>]
        member inline _.postMessage(message: obj, ?transfer: MessagePortMain[]) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Starts the sending of messages queued on the port. Messages will be queued until this method is called.
        /// </summary>
        [<Erase>]
        member inline _.start() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Disconnects the port, so it is no longer active.
        /// </summary>
        [<Erase>]
        member inline _.close() : unit = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// </summary>
    [<Import("MessageChannelMain", "electron")>]
    type MessageChannelMain =
        /// <summary>
        /// A <c>MessagePortMain</c> property.
        /// </summary>
        [<Erase>]
        member val port1: MessagePortMain = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>MessagePortMain</c> property.
        /// </summary>
        [<Erase>]
        member val port2: MessagePortMain = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// <br/><br/>### Class: Menu<br/><br/>&gt; Create native application menus and context menus.<br/><br/>Process: Main<br/><br/>&gt; [!TIP] See also: A detailed guide about how to
    /// implement menus in your application.<br/><br/>&gt; [!WARNING] Electron's built-in classes cannot be subclassed in user code. For more information, see the
    /// FAQ.
    /// </summary>
    [<Import("Menu", "electron")>]
    type Menu() =
        interface EventEmitter

        /// <summary>
        /// Emitted when <c>menu.popup()</c> is called.
        /// </summary>
        [<Emit("$0.on('menu-will-show', $1)")>]
        member inline _.onMenuWillShow(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>menu.popup()</c> is called.
        /// </summary>
        [<Emit("$0.once('menu-will-show', $1)")>]
        member inline _.onceMenuWillShow(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>menu.popup()</c> is called.
        /// </summary>
        [<Emit("$0.off('menu-will-show', $1)")>]
        member inline _.offMenuWillShow(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a popup is closed either manually or with <c>menu.closePopup()</c>.
        /// </summary>
        [<Emit("$0.on('menu-will-close', $1)")>]
        member inline _.onMenuWillClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a popup is closed either manually or with <c>menu.closePopup()</c>.
        /// </summary>
        [<Emit("$0.once('menu-will-close', $1)")>]
        member inline _.onceMenuWillClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a popup is closed either manually or with <c>menu.closePopup()</c>.
        /// </summary>
        [<Emit("$0.off('menu-will-close', $1)")>]
        member inline _.offMenuWillClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Pops up this menu as a context menu in the <c>BaseWindow</c>.<br/><br/>&gt; [!TIP] For more details, see the Context Menu guide.
        /// </summary>
        /// <param name="window">Default is the focused window.</param>
        /// <param name="frame">Provide the relevant frame if you want certain OS-level features such as Writing Tools on macOS to function correctly.
        /// Typically, this should be <c>params.frame</c> from the <c>context-menu</c> event on a WebContents, or the <c>focusedFrame</c> property of a WebContents.</param>
        /// <param name="x">Default is the current mouse cursor position. Must be declared if <c>y</c> is declared.</param>
        /// <param name="y">Default is the current mouse cursor position. Must be declared if <c>x</c> is declared.</param>
        /// <param name="positioningItem">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || The index of the
        /// menu item to be positioned under the mouse cursor at the specified coordinates. Default is -1.</param>
        /// <param name="sourceType">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || This should map to
        /// the <c>menuSourceType</c> provided by the <c>context-menu</c> event. It is not recommended to set this value manually, only provide values you
        /// receive from other APIs or leave it <c>undefined</c>. Can be <c>none</c>, <c>mouse</c>, <c>keyboard</c>, <c>touch</c>, <c>touchMenu</c>, <c>longPress</c>, <c>longTap</c>, <c>touchHandle</c>, <c>stylus</c>, <c>adjustSelection</c>,
        /// or <c>adjustSelectionReset</c>.</param>
        /// <param name="callback">Called when menu is closed.</param>
        [<Erase; ParamObject(0)>]
        member inline _.popup
            (
                ?window: BaseWindow,
                ?frame: WebFrameMain,
                ?x: float,
                ?y: float,
                ?positioningItem: float,
                ?sourceType: Enums.Menu.Popup.Options.SourceType,
                ?callback: unit -> unit
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Closes the context menu in the <c>window</c>.
        /// </summary>
        /// <param name="window">Default is the focused window.</param>
        [<Erase>]
        member inline _.closePopup(?window: BaseWindow) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Appends the <c>menuItem</c> to the menu.
        /// </summary>
        /// <param name="menuItem"></param>
        [<Erase>]
        member inline _.append(menuItem: MenuItem) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// the item with the specified <c>id</c>
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        member inline _.getMenuItemById(id: string) : Option<MenuItem> = Unchecked.defaultof<_>

        /// <summary>
        /// Inserts the <c>menuItem</c> to the <c>pos</c> position of the menu.
        /// </summary>
        /// <param name="pos"></param>
        /// <param name="menuItem"></param>
        [<Erase>]
        member inline _.insert(pos: int, menuItem: MenuItem) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>MenuItem[]</c> array containing the menu's items.<br/><br/>Each <c>Menu</c> consists of multiple <c>MenuItem</c> instances and each <c>MenuItem</c> can nest a <c>Menu</c>
        /// into its <c>submenu</c> property.
        /// </summary>
        [<Erase>]
        member val items: MenuItem[] = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// Sets <c>menu</c> as the application menu on macOS. On Windows and Linux, the <c>menu</c> will be set as each window's
        /// top menu.<br/><br/>Also on Windows and Linux, you can use a <c>&amp;</c> in the top-level item name to indicate which letter
        /// should get a generated accelerator. For example, using <c>&amp;File</c> for the file menu would result in a generated <c>Alt-F</c> accelerator
        /// that opens the associated menu. The indicated character in the button label then gets an underline, and the <c>&amp;</c> character
        /// is not displayed on the button label.<br/><br/>In order to escape the <c>&amp;</c> character in an item name, add a proceeding
        /// <c>&amp;</c>. For example, <c>&amp;&amp;File</c> would result in <c>&amp;File</c> displayed on the button label.<br/><br/>Passing <c>null</c> will suppress the default menu. On
        /// Windows and Linux, this has the additional effect of removing the menu bar from the window.<br/><br/>&gt; [!NOTE] The default menu
        /// will be created automatically if the app does not set one. It contains standard items such as <c>File</c>, <c>Edit</c>, <c>View</c>,
        /// <c>Window</c> and <c>Help</c>.
        /// </summary>
        /// <param name="menu"></param>
        [<Erase>]
        static member mutable setApplicationMenu(menu: Option<Menu>) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The application menu, if set, or <c>null</c>, if not set.<br/><br/>&gt; [!NOTE] The returned <c>Menu</c> instance doesn't support dynamic addition or
        /// removal of menu items. Instance properties can still be dynamically modified.
        /// </summary>
        [<Erase>]
        static member mutable getApplicationMenu() : Option<Menu> = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sends the <c>action</c> to the first responder of application. This is used for emulating default macOS menu behaviors. Usually you
        /// would use the <c>role</c> property of a <c>MenuItem</c>.<br/><br/>See the macOS Cocoa Event Handling Guide for more information on macOS' native
        /// actions.
        /// </summary>
        /// <param name="action"></param>
        [<Erase>]
        static member mutable sendActionToFirstResponder(action: string) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Generally, the <c>template</c> is an array of <c>options</c> for constructing a MenuItem. The usage can be referenced above.<br/><br/>You can also
        /// attach other fields to the element of the <c>template</c> and they will become properties of the constructed menu items.
        /// </summary>
        /// <param name="template"></param>
        [<Erase>]
        static member mutable buildFromTemplate(template: U2<MenuItemConstructorOptions, MenuItem>[]) : Menu =
            Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// <br/><br/>### Class: MenuItem<br/><br/>&gt; Add items to native application menus and context menus.<br/><br/>Process: Main<br/><br/>See <c>Menu</c> for examples.<br/><br/>&gt; [!WARNING] Electron's built-in classes
    /// cannot be subclassed in user code. For more information, see the FAQ.
    /// </summary>
    [<Import("MenuItem", "electron")>]
    type MenuItem
        /// <param name="click">Will be called with <c>click(menuItem, window, event)</c> when the menu item is clicked.</param>
        /// <param name="role">Can be <c>undo</c>, <c>redo</c>, <c>cut</c>, <c>copy</c>, <c>paste</c>, <c>pasteAndMatchStyle</c>, <c>delete</c>, <c>selectAll</c>, <c>reload</c>, <c>forceReload</c>, <c>toggleDevTools</c>, <c>resetZoom</c>, <c>zoomIn</c>, <c>zoomOut</c>, <c>toggleSpellChecker</c>, <c>togglefullscreen</c>, <c>window</c>,
        /// <c>minimize</c>, <c>close</c>, <c>help</c>, <c>about</c>, <c>services</c>, <c>hide</c>, <c>hideOthers</c>, <c>unhide</c>, <c>quit</c>, <c>showSubstitutions</c>, <c>toggleSmartQuotes</c>, <c>toggleSmartDashes</c>, <c>toggleTextReplacement</c>, <c>startSpeaking</c>, <c>stopSpeaking</c>, <c>zoom</c>, <c>front</c>, <c>appMenu</c>, <c>fileMenu</c>, <c>editMenu</c>,
        /// <c>viewMenu</c>, <c>shareMenu</c>, <c>recentDocuments</c>, <c>toggleTabBar</c>, <c>selectNextTab</c>, <c>selectPreviousTab</c>, <c>showAllTabs</c>, <c>mergeAllWindows</c>, <c>clearRecentDocuments</c>, <c>moveTabToNewWindow</c> or <c>windowMenu</c> - Define the action of the menu item,
        /// when specified the <c>click</c> property will be ignored. See roles.</param>
        /// <param name="``type``"></param>
        /// <param name="label"></param>
        /// <param name="sublabel">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Available in macOS &gt;=
        /// 14.4</param>
        /// <param name="toolTip">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Hover text for this
        /// menu item.</param>
        /// <param name="accelerator">An Accelerator string.</param>
        /// <param name="icon"></param>
        /// <param name="enabled">If false, the menu item will be greyed out and unclickable.</param>
        /// <param name="acceleratorWorksWhenHidden">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || default is <c>true</c>, and
        /// when <c>false</c> will prevent the accelerator from triggering the item if the item is not visible.</param>
        /// <param name="visible">If false, the menu item will be entirely hidden.</param>
        /// <param name="``checked``">Should only be specified for <c>checkbox</c> or <c>radio</c> type menu items.</param>
        /// <param name="registerAccelerator">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || If false, the accelerator
        /// won't be registered with the system, but it will still be displayed. Defaults to true.</param>
        /// <param name="sharingItem">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || The item to share
        /// when the <c>role</c> is <c>shareMenu</c>.</param>
        /// <param name="submenu">Should be specified for <c>submenu</c> type menu items. If <c>submenu</c> is specified, the <c>type: 'submenu'</c> can be omitted. If
        /// the value is not a <c>Menu</c> then it will be automatically converted to one using <c>Menu.buildFromTemplate</c>.</param>
        /// <param name="id">Unique within a single menu. If defined then it can be used as a reference to this item by
        /// the position attribute.</param>
        /// <param name="before">Inserts this item before the item with the specified id. If the referenced item doesn't exist the item will
        /// be inserted at the end of  the menu. Also implies that the menu item in question should be placed
        /// in the same “group” as the item.</param>
        /// <param name="after">Inserts this item after the item with the specified id. If the referenced item doesn't exist the item will
        /// be inserted at the end of the menu.</param>
        /// <param name="beforeGroupContaining">Provides a means for a single context menu to declare the placement of their containing group before the containing
        /// group of the item with the specified id.</param>
        /// <param name="afterGroupContaining">Provides a means for a single context menu to declare the placement of their containing group after the containing
        /// group of the item with the specified id.</param>
        [<ParamObject(0)>]
        (
            ?click: MenuItem.Options.Click,
            ?role: Enums.MenuItem.Options.Role,
            ?``type``: Enums.MenuItem.Options.Type,
            ?label: string,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?sublabel: string,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?toolTip: string,
            #endif

            ?accelerator: string,
            ?icon: U2<NativeImage, string>,
            ?enabled: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?acceleratorWorksWhenHidden: bool,
            #endif

            ?visible: bool,
            ?``checked``: bool,
            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
            ?registerAccelerator: bool,
            #endif

            #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
            ?sharingItem: SharingItem,
            #endif

            ?submenu: U2<MenuItemConstructorOptions[], Menu>,
            ?id: string,
            ?before: string[],
            ?after: string[],
            ?beforeGroupContaining: string[],
            ?afterGroupContaining: string[]
        ) =
        /// <summary>
        /// A <c>string</c> indicating the item's unique id. This property can be dynamically changed.
        /// </summary>
        [<Erase>]
        member val id: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> indicating the item's visible label.
        /// </summary>
        [<Erase>]
        member val label: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>Function</c> that is fired when the MenuItem receives a click event. It can be called with <c>menuItem.click(event, focusedWindow, focusedWebContents)</c>.<br/><br/>*
        /// <c>event</c> KeyboardEvent<br/>* <c>focusedWindow</c> BaseWindow<br/>* <c>focusedWebContents</c> WebContents
        /// </summary>
        [<Erase>]
        member val click: MenuItem.Click = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>Menu</c> (optional) containing the menu item's submenu, if present.
        /// </summary>
        [<Erase>]
        member val submenu: Menu = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> indicating the type of the item. Can be <c>normal</c>, <c>separator</c>, <c>submenu</c>, <c>checkbox</c>, <c>radio</c>, <c>header</c> or <c>palette</c>.<br/><br/>&gt; [!NOTE] <c>header</c>
        /// and <c>palette</c> are only available on macOS 14 and up.
        /// </summary>
        [<Erase>]
        member val ``type``: Enums.MenuItem.Type = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> (optional) indicating the item's role, if set. Can be <c>undo</c>, <c>redo</c>, <c>cut</c>, <c>copy</c>, <c>paste</c>, <c>pasteAndMatchStyle</c>, <c>delete</c>, <c>selectAll</c>, <c>reload</c>,
        /// <c>forceReload</c>, <c>toggleDevTools</c>, <c>resetZoom</c>, <c>zoomIn</c>, <c>zoomOut</c>, <c>toggleSpellChecker</c>, <c>togglefullscreen</c>, <c>window</c>, <c>minimize</c>, <c>close</c>, <c>help</c>, <c>about</c>, <c>services</c>, <c>hide</c>, <c>hideOthers</c>, <c>unhide</c>, <c>quit</c>, <c>startSpeaking</c>, <c>stopSpeaking</c>, <c>zoom</c>,
        /// <c>front</c>, <c>appMenu</c>, <c>fileMenu</c>, <c>editMenu</c>, <c>viewMenu</c>, <c>shareMenu</c>, <c>recentDocuments</c>, <c>toggleTabBar</c>, <c>selectNextTab</c>, <c>selectPreviousTab</c>, <c>showAllTabs</c>, <c>mergeAllWindows</c>, <c>clearRecentDocuments</c>, <c>moveTabToNewWindow</c> or <c>windowMenu</c>
        /// </summary>
        [<Erase>]
        member val role: Enums.MenuItem.Role = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An <c>Accelerator</c> (optional) indicating the item's accelerator, if set.
        /// </summary>
        [<Erase>]
        member val accelerator: Accelerator = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// An <c>Accelerator | null</c> indicating the item's user-assigned accelerator for the menu item.<br/><br/>&gt; [!NOTE] This property is only initialized after
        /// the <c>MenuItem</c> has been added to a <c>Menu</c>. Either via <c>Menu.buildFromTemplate</c> or via <c>Menu.append()/insert()</c>.  Accessing before initialization will just
        /// return <c>null</c>.
        /// </summary>
        [<Erase>]
        member val userAccelerator: Option<Accelerator> = Unchecked.defaultof<_> with get
        #endif


        /// <summary>
        /// A <c>NativeImage | string</c> (optional) indicating the item's icon, if set.
        /// </summary>
        [<Erase>]
        member val icon: U2<NativeImage, string> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> indicating the item's sublabel.
        /// </summary>
        [<Erase>]
        member val sublabel: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>string</c> indicating the item's hover text.
        /// </summary>
        [<Erase>]
        member val toolTip: string = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> indicating whether the item is enabled. This property can be dynamically changed.
        /// </summary>
        [<Erase>]
        member val enabled: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> indicating whether the item is visible. This property can be dynamically changed.
        /// </summary>
        [<Erase>]
        member val visible: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> indicating whether the item is checked. This property can be dynamically changed.<br/><br/>A <c>checkbox</c> menu item will toggle the
        /// <c>checked</c> property on and off when selected.<br/><br/>A <c>radio</c> menu item will turn on its <c>checked</c> property when clicked, and will
        /// turn off that property for all adjacent items in the same menu.<br/><br/>You can add a <c>click</c> function for additional behavior.
        /// </summary>
        [<Erase>]
        member val ``checked``: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> indicating if the accelerator should be registered with the system or just displayed.<br/><br/>This property can be dynamically changed.
        /// </summary>
        [<Erase>]
        member val registerAccelerator: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>SharingItem</c> indicating the item to share when the <c>role</c> is <c>shareMenu</c>.<br/><br/>This property can be dynamically changed.
        /// </summary>
        [<Erase>]
        member val sharingItem: SharingItem = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>number</c> indicating an item's sequential unique id.
        /// </summary>
        [<Erase>]
        member val commandId: float = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>Menu</c> that the item is a part of.
        /// </summary>
        [<Erase>]
        member val menu: Menu = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// <br/><br/>### ipcMain<br/><br/>&gt; Communicate asynchronously from the main process to renderer processes.<br/><br/>Process: Main<br/><br/>The <c>ipcMain</c> module is an Event Emitter. When used
    /// in the main process, it handles asynchronous and synchronous messages sent from a renderer process (web page). Messages sent from
    /// a renderer will be emitted to this module.<br/><br/>For usage examples, check out the IPC tutorial.<br/><br/>### Sending messages<br/><br/>It is also possible
    /// to send messages from the main process to the renderer process, see webContents.send for more information.<br/><br/>* When sending a message,
    /// the event name is the <c>channel</c>.<br/>* To reply to a synchronous message, you need to set <c>event.returnValue</c>.<br/>* To send an
    /// asynchronous message back to the sender, you can use <c>event.reply(...)</c>.  This helper method will automatically handle messages coming from
    /// frames that aren't the main frame (e.g. iframes) whereas <c>event.sender.send(...)</c> will always send to the main frame.
    /// </summary>
    [<Import("ipcMain", "electron")>]
    type IpcMain =
        /// <summary>
        /// Listens to <c>channel</c>, when a new message arrives <c>listener</c> would be called with <c>listener(event, args...)</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable on(channel: string, listener: IpcMain.On.Listener) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Removes the specified <c>listener</c> from the listener array for the specified <c>channel</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable off(channel: string, listener: IpcMain.Off.Listener) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Adds a one time <c>listener</c> function for the event. This <c>listener</c> is invoked only the next time a message is
        /// sent to <c>channel</c>, after which it is removed.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable once(channel: string, listener: IpcMain.Once.Listener) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Alias for <c>ipcMain.on</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable addListener(channel: string, listener: IpcMain.AddListener.Listener) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Alias for <c>ipcMain.off</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable removeListener(channel: string, listener: obj[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Removes all listeners from the specified <c>channel</c>. Removes all listeners from all channels if no channel is specified.
        /// </summary>
        /// <param name="channel"></param>
        [<Erase>]
        static member mutable removeAllListeners(?channel: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Adds a handler for an <c>invoke</c>able IPC. This handler will be called whenever a renderer calls <c>ipcRenderer.invoke(channel, ...args)</c>.<br/><br/>If <c>listener</c> returns
        /// a Promise, the eventual result of the promise will be returned as a reply to the remote caller. Otherwise, the
        /// return value of the listener will be used as the value of the reply.<br/><br/>The <c>event</c> that is passed as the
        /// first argument to the handler is the same as that passed to a regular event listener. It includes information about
        /// which WebContents is the source of the invoke request.<br/><br/>Errors thrown through <c>handle</c> in the main process are not transparent as
        /// they are serialized and only the <c>message</c> property from the original error is provided to the renderer process. Please refer
        /// to #24427 for details.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable handle(channel: string, listener: IpcMain.Handle.Listener) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Handles a single <c>invoke</c>able IPC message, then removes the listener. See <c>ipcMain.handle(channel, listener)</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        static member mutable handleOnce(channel: string, listener: IpcMain.HandleOnce.Listener) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Removes any handler for <c>channel</c>, if present.
        /// </summary>
        /// <param name="channel"></param>
        [<Erase>]
        static member mutable removeHandler(channel: string) : unit = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// </summary>
    [<Import("IpcMainServiceWorker", "electron")>]
    type IpcMainServiceWorker =
        /// <summary>
        /// Listens to <c>channel</c>, when a new message arrives <c>listener</c> would be called with <c>listener(event, args...)</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.on(channel: string, listener: IpcMainServiceWorker.On.Listener) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Adds a one time <c>listener</c> function for the event. This <c>listener</c> is invoked only the next time a message is
        /// sent to <c>channel</c>, after which it is removed.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.once(channel: string, listener: IpcMainServiceWorker.Once.Listener) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Removes the specified <c>listener</c> from the listener array for the specified <c>channel</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.removeListener(channel: string, listener: obj[] -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Removes listeners of the specified <c>channel</c>.
        /// </summary>
        /// <param name="channel"></param>
        [<Erase>]
        member inline _.removeAllListeners(?channel: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.handle(channel: string, listener: IpcMainServiceWorker.Handle.Listener) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Handles a single <c>invoke</c>able IPC message, then removes the listener. See <c>ipcMainServiceWorker.handle(channel, listener)</c>.
        /// </summary>
        /// <param name="channel"></param>
        /// <param name="listener"></param>
        [<Erase>]
        member inline _.handleOnce(channel: string, listener: IpcMainServiceWorker.HandleOnce.Listener) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Removes any handler for <c>channel</c>, if present.
        /// </summary>
        /// <param name="channel"></param>
        [<Erase>]
        member inline _.removeHandler(channel: string) : unit = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ✔ | Exported ❌</para>
    /// </summary>
    [<Import("IncomingMessage", "electron")>]
    type IncomingMessage =
        interface EventEmitter

        /// <summary>
        /// The <c>data</c> event is the usual method of transferring response data into applicative code.
        /// </summary>
        [<Emit("$0.on('data', $1)")>]
        member inline _.onData(handler: Buffer -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>data</c> event is the usual method of transferring response data into applicative code.
        /// </summary>
        [<Emit("$0.once('data', $1)")>]
        member inline _.onceData(handler: Buffer -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>data</c> event is the usual method of transferring response data into applicative code.
        /// </summary>
        [<Emit("$0.off('data', $1)")>]
        member inline _.offData(handler: Buffer -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Indicates that response body has ended. Must be placed before 'data' event.
        /// </summary>
        [<Emit("$0.on('end', $1)")>]
        member inline _.onEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Indicates that response body has ended. Must be placed before 'data' event.
        /// </summary>
        [<Emit("$0.once('end', $1)")>]
        member inline _.onceEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Indicates that response body has ended. Must be placed before 'data' event.
        /// </summary>
        [<Emit("$0.off('end', $1)")>]
        member inline _.offEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a request has been canceled during an ongoing HTTP transaction.
        /// </summary>
        [<Emit("$0.on('aborted', $1)")>]
        member inline _.onAborted(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a request has been canceled during an ongoing HTTP transaction.
        /// </summary>
        [<Emit("$0.once('aborted', $1)")>]
        member inline _.onceAborted(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a request has been canceled during an ongoing HTTP transaction.
        /// </summary>
        [<Emit("$0.off('aborted', $1)")>]
        member inline _.offAborted(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an error was encountered while streaming response data events. For instance, if the server closes the underlying while
        /// the response is still streaming, an <c>error</c> event will be emitted on the response object and a <c>close</c> event will
        /// subsequently follow on the request object.
        /// </summary>
        [<Emit("$0.on('error', $1)")>]
        member inline _.onError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an error was encountered while streaming response data events. For instance, if the server closes the underlying while
        /// the response is still streaming, an <c>error</c> event will be emitted on the response object and a <c>close</c> event will
        /// subsequently follow on the request object.
        /// </summary>
        [<Emit("$0.once('error', $1)")>]
        member inline _.onceError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an error was encountered while streaming response data events. For instance, if the server closes the underlying while
        /// the response is still streaming, an <c>error</c> event will be emitted on the response object and a <c>close</c> event will
        /// subsequently follow on the request object.
        /// </summary>
        [<Emit("$0.off('error', $1)")>]
        member inline _.offError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// An <c>Integer</c> indicating the HTTP response status code.
        /// </summary>
        [<Erase>]
        member val statusCode: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> representing the HTTP status message.
        /// </summary>
        [<Erase>]
        member val statusMessage: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>Record&lt;string, string | string[]&gt;</c> representing the HTTP response headers. The <c>headers</c> object is formatted as follows:<br/><br/>* All header names
        /// are lowercased.<br/>* Duplicates of <c>age</c>, <c>authorization</c>, <c>content-length</c>, <c>content-type</c>, <c>etag</c>, <c>expires</c>, <c>from</c>, <c>host</c>, <c>if-modified-since</c>, <c>if-unmodified-since</c>, <c>last-modified</c>, <c>location</c>, <c>max-forwards</c>, <c>proxy-authorization</c>, <c>referer</c>, <c>retry-after</c>,
        /// <c>server</c>, or <c>user-agent</c> are discarded.<br/>* <c>set-cookie</c> is always an array. Duplicates are added to the array.<br/>* For duplicate <c>cookie</c> headers,
        /// the values are joined together with '; '.<br/>* For all other headers, the values are joined together with ', '.
        /// </summary>
        [<Erase>]
        member val headers: Record<string, U2<string, string[]>> = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> indicating the HTTP protocol version number. Typical values are '1.0' or '1.1'. Additionally <c>httpVersionMajor</c> and <c>httpVersionMinor</c> are two
        /// Integer-valued readable properties that return respectively the HTTP major and minor version numbers.
        /// </summary>
        [<Erase>]
        member val httpVersion: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An <c>Integer</c> indicating the HTTP protocol major version number.
        /// </summary>
        [<Erase>]
        member val httpVersionMajor: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// An <c>Integer</c> indicating the HTTP protocol minor version number.
        /// </summary>
        [<Erase>]
        member val httpVersionMinor: int = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string[]</c> containing the raw HTTP response headers exactly as they were received. The keys and values are in the
        /// same list. It is not a list of tuples. So, the even-numbered offsets are key values, and the odd-numbered offsets
        /// are the associated values. Header names are not lowercased, and duplicates are not merged.
        /// </summary>
        [<Erase>]
        member val rawHeaders: string[] = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; In-app purchases on Mac App Store.<br/><br/>Process: Main
    /// </summary>
    [<Import("inAppPurchase", "electron")>]
    type InAppPurchase =
        interface EventEmitter

        /// <summary>
        /// Emitted when one or more transactions have been updated.
        /// </summary>
        [<Emit("$0.on('transactions-updated', $1)"); Import("inAppPurchase", "electron")>]
        static member mutable onTransactionsUpdated(handler: Event -> Transaction[] -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more transactions have been updated.
        /// </summary>
        [<Emit("$0.on('transactions-updated', $1)"); Import("inAppPurchase", "electron")>]
        static member mutable onTransactionsUpdated
            (handler: Fable.Electron.EventInterfaces.InAppPurchase.IOnTransactionsUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more transactions have been updated.
        /// </summary>
        [<Emit("$0.once('transactions-updated', $1)"); Import("inAppPurchase", "electron")>]
        static member mutable onceTransactionsUpdated(handler: Event -> Transaction[] -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more transactions have been updated.
        /// </summary>
        [<Emit("$0.once('transactions-updated', $1)"); Import("inAppPurchase", "electron")>]
        static member mutable onceTransactionsUpdated
            (handler: Fable.Electron.EventInterfaces.InAppPurchase.IOnTransactionsUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more transactions have been updated.
        /// </summary>
        [<Emit("$0.off('transactions-updated', $1)"); Import("inAppPurchase", "electron")>]
        static member mutable offTransactionsUpdated(handler: Event -> Transaction[] -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when one or more transactions have been updated.
        /// </summary>
        [<Emit("$0.off('transactions-updated', $1)"); Import("inAppPurchase", "electron")>]
        static member mutable offTransactionsUpdated
            (handler: Fable.Electron.EventInterfaces.InAppPurchase.IOnTransactionsUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Returns <c>true</c> if the product is valid and added to the payment queue.<br/><br/>You should listen for the <c>transactions-updated</c> event as
        /// soon as possible and certainly before you call <c>purchaseProduct</c>.
        /// </summary>
        /// <param name="productID"></param>
        /// <param name="opts">If specified as an integer, defines the quantity.</param>
        [<Erase>]
        static member mutable purchaseProduct
            (productID: string, ?opts: U2<int, InAppPurchase.PurchaseProduct.Opts>)
            : Promise<bool> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with an array of <c>Product</c> objects.<br/><br/>Retrieves the product descriptions.
        /// </summary>
        /// <param name="productIDs">The identifiers of the products to get.</param>
        [<Erase>]
        static member mutable getProducts(productIDs: string[]) : Promise<Product[]> = Unchecked.defaultof<_>

        /// <summary>
        /// whether a user can make a payment.
        /// </summary>
        [<Erase>]
        static member mutable canMakePayments() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Restores finished transactions. This method can be called either to install purchases on additional devices, or to restore purchases for
        /// an application that the user deleted and reinstalled.<br/><br/>The payment queue delivers a new transaction for each previously completed transaction that
        /// can be restored. Each transaction includes a copy of the original transaction.
        /// </summary>
        [<Erase>]
        static member mutable restoreCompletedTransactions() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// the path to the receipt.
        /// </summary>
        [<Erase>]
        static member mutable getReceiptURL() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Completes all pending transactions.
        /// </summary>
        [<Erase>]
        static member mutable finishAllTransactions() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Completes the pending transactions corresponding to the date.
        /// </summary>
        /// <param name="date">The ISO formatted date of the transaction to finish.</param>
        [<Erase>]
        static member mutable finishTransactionByDate(date: string) : unit = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; A View that displays an image.<br/><br/>Process: Main<br/><br/>This module cannot be used until the <c>ready</c> event of the <c>app</c> module
    /// is emitted.<br/><br/>Useful for showing splash screens that will be swapped for <c>WebContentsView</c>s when the content finishes loading.<br/><br/>Note that <c>ImageView</c> is
    /// experimental and may be changed or removed in the future.<br/><br/>### Class: ImageView extends <c>View</c><br/><br/>&gt; A View that displays an image.<br/><br/>Process:
    /// Main<br/><br/><c>ImageView</c> inherits from <c>View</c>.<br/><br/><c>ImageView</c> is an EventEmitter.<br/><br/>&gt; [!WARNING] Electron's built-in classes cannot be subclassed in user code. For more information,
    /// see the FAQ.
    /// </summary>
    [<Import("ImageView", "electron")>]
    type ImageView() =
        interface EventEmitter

        /// <summary>
        /// Emitted when the view's bounds have changed in response to being laid out. The new bounds can be retrieved with
        /// <c>view.getBounds()</c>.
        /// </summary>
        [<Emit("$0.on('bounds-changed', $1)")>]
        member inline _.onBoundsChanged(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the view's bounds have changed in response to being laid out. The new bounds can be retrieved with
        /// <c>view.getBounds()</c>.
        /// </summary>
        [<Emit("$0.once('bounds-changed', $1)")>]
        member inline _.onceBoundsChanged(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the view's bounds have changed in response to being laid out. The new bounds can be retrieved with
        /// <c>view.getBounds()</c>.
        /// </summary>
        [<Emit("$0.off('bounds-changed', $1)")>]
        member inline _.offBoundsChanged(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the image for this <c>ImageView</c>. Note that only image formats supported by <c>NativeImage</c> can be used with an <c>ImageView</c>.
        /// </summary>
        /// <param name="image"></param>
        [<Erase; Experimental("Experimental according to Electron")>]
        member inline _.setImage(image: NativeImage) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// If the same View is added to a parent which already contains it, it will be reordered such that it
        /// becomes the topmost view.
        /// </summary>
        /// <param name="view">Child view to add.</param>
        /// <param name="index">Index at which to insert the child view. Defaults to adding the child at the end of the child
        /// list.</param>
        [<Erase>]
        member inline _.addChildView(view: View, ?index: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// If the view passed as a parameter is not a child of this view, this method is a no-op.
        /// </summary>
        /// <param name="view">Child view to remove.</param>
        [<Erase>]
        member inline _.removeChildView(view: View) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        /// <param name="bounds">New bounds of the View.</param>
        [<Erase>]
        member inline _.setBounds(bounds: Rectangle) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The bounds of this View, relative to its parent.
        /// </summary>
        [<Erase>]
        member inline _.getBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Examples of valid <c>color</c> values:<br/><br/>* Hex<br/>  * <c>#fff</c> (RGB)<br/>  * <c>#ffff</c> (ARGB)<br/>  * <c>#ffffff</c> (RRGGBB)<br/>  *
        /// <c>#ffffffff</c> (AARRGGBB)<br/>* RGB<br/>  * <c>rgb\(([\d]+),\s*([\d]+),\s*([\d]+)\)</c><br/>    * e.g. <c>rgb(255, 255, 255)</c><br/>* RGBA<br/>  * <c>rgba\(([\d]+),\s*([\d]+),\s*([\d]+),\s*([\d.]+)\)</c><br/>
        ///  * e.g. <c>rgba(255, 255, 255, 1.0)</c><br/>* HSL<br/>  * <c>hsl\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%\)</c><br/>    * e.g. <c>hsl(200, 20%, 50%)</c><br/>* HSLA<br/>
        ///  * <c>hsla\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)</c><br/>    * e.g. <c>hsla(200, 20%, 50%, 0.5)</c><br/>* Color name<br/>  * Options are listed in
        /// SkParseColor.cpp<br/>  * Similar to CSS Color Module Level 3 keywords, but case-sensitive.<br/>    * e.g. <c>blueviolet</c> or
        /// <c>red</c><br/><br/>&gt; [!NOTE] Hex format with alpha takes <c>AARRGGBB</c> or <c>ARGB</c>, _not_ <c>RRGGBBAA</c> or <c>RGB</c>.
        /// </summary>
        /// <param name="color">Color in Hex, RGB, ARGB, HSL, HSLA or named CSS color format. The alpha channel is optional for the
        /// hex type.</param>
        [<Erase>]
        member inline _.setBackgroundColor(color: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// &gt; [!NOTE] The area cutout of the view's border still captures clicks.
        /// </summary>
        /// <param name="radius">Border radius size in pixels.</param>
        [<Erase>]
        member inline _.setBorderRadius(radius: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        /// <param name="visible">If false, the view will be hidden from display.</param>
        [<Erase>]
        member inline _.setVisible(visible: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the view should be drawn. Note that this is different from whether the view is visible on screen—it may
        /// still be obscured or out of view.
        /// </summary>
        [<Erase>]
        member inline _.getVisible() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>View[]</c> property representing the child views of this view.
        /// </summary>
        [<Erase>]
        member val children: View[] = Unchecked.defaultof<_> with get

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Detect keyboard events when the application does not have keyboard focus.<br/><br/>Process: Main<br/><br/>The <c>globalShortcut</c> module can register/unregister a global keyboard
    /// shortcut with the operating system so that you can customize the operations for various shortcuts.<br/><br/>&gt; [!NOTE] The shortcut is global;
    /// it will work even if the app does not have the keyboard focus. This module cannot be used before the
    /// <c>ready</c> event of the app module is emitted. Please also note that it is also possible to use Chromium's <c>GlobalShortcutsPortal</c>
    /// implementation, which allows apps to bind global shortcuts when running within a Wayland session.<br/><br/><code><br/>const { app, globalShortcut } = require('electron')<br/><br/>//
    /// Enable usage of Portal's globalShortcuts. This is essential for cases when<br/>// the app runs in a Wayland session.<br/>app.commandLine.appendSwitch('enable-features', 'GlobalShortcutsPortal')<br/><br/>app.whenReady().then(() =&gt;
    /// {<br/>  // Register a 'CommandOrControl+X' shortcut listener.<br/>  const ret = globalShortcut.register('CommandOrControl+X', () =&gt; {<br/>    console.log('CommandOrControl+X
    /// is pressed')<br/>  })<br/><br/>  if (!ret) {<br/>    console.log('registration failed')<br/>  }<br/><br/>  // Check whether a
    /// shortcut is registered.<br/>  console.log(globalShortcut.isRegistered('CommandOrControl+X'))<br/>})<br/><br/>app.on('will-quit', () =&gt; {<br/>  // Unregister a shortcut.<br/>  globalShortcut.unregister('CommandOrControl+X')<br/><br/>  // Unregister all shortcuts.<br/>
    ///  globalShortcut.unregisterAll()<br/>})<br/></code><br/><br/>&gt; [!TIP] See also: A detailed guide on Keyboard Shortcuts.
    /// </summary>
    [<Import("globalShortcut", "electron")>]
    type GlobalShortcut =
        /// <summary>
        /// Whether or not the shortcut was registered successfully.<br/><br/>Registers a global shortcut of <c>accelerator</c>. The <c>callback</c> is called when the registered
        /// shortcut is pressed by the user.<br/><br/>When the accelerator is already taken by other applications, this call will silently fail. This
        /// behavior is intended by operating systems, since they don't want applications to fight for global shortcuts.<br/><br/>The following accelerators will not
        /// be registered successfully on macOS 10.14 Mojave unless the app has been authorized as a trusted accessibility client:<br/><br/>* "Media Play/Pause"<br/>*
        /// "Media Next Track"<br/>* "Media Previous Track"<br/>* "Media Stop"
        /// </summary>
        /// <param name="accelerator">An accelerator shortcut.</param>
        /// <param name="callback"></param>
        [<Erase>]
        static member mutable register(accelerator: string, callback: unit -> unit) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Registers a global shortcut of all <c>accelerator</c> items in <c>accelerators</c>. The <c>callback</c> is called when any of the registered shortcuts
        /// are pressed by the user.<br/><br/>When a given accelerator is already taken by other applications, this call will silently fail. This
        /// behavior is intended by operating systems, since they don't want applications to fight for global shortcuts.<br/><br/>The following accelerators will not
        /// be registered successfully on macOS 10.14 Mojave unless the app has been authorized as a trusted accessibility client:<br/><br/>* "Media Play/Pause"<br/>*
        /// "Media Next Track"<br/>* "Media Previous Track"<br/>* "Media Stop"
        /// </summary>
        /// <param name="accelerators">An array of accelerator shortcuts.</param>
        /// <param name="callback"></param>
        [<Erase>]
        static member mutable registerAll(accelerators: string[], callback: unit -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether this application has registered <c>accelerator</c>.<br/><br/>When the accelerator is already taken by other applications, this call will still return <c>false</c>.
        /// This behavior is intended by operating systems, since they don't want applications to fight for global shortcuts.
        /// </summary>
        /// <param name="accelerator">An accelerator shortcut.</param>
        [<Erase>]
        static member mutable isRegistered(accelerator: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Unregisters the global shortcut of <c>accelerator</c>.
        /// </summary>
        /// <param name="accelerator">An accelerator shortcut.</param>
        [<Erase>]
        static member mutable unregister(accelerator: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Unregisters all of the global shortcuts.
        /// </summary>
        [<Erase>]
        static member mutable unregisterAll() : unit = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("Extensions", "electron")>]
    type Extensions =
        interface EventEmitter

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Extensions.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.on('extension-loaded', $1)")>]
        member inline _.onExtensionLoaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Extensions.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.on('extension-loaded', $1)")>]
        member inline _.onExtensionLoaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionLoaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Extensions.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.once('extension-loaded', $1)")>]
        member inline _.onceExtensionLoaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Extensions.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.once('extension-loaded', $1)")>]
        member inline _.onceExtensionLoaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionLoaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Extensions.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.off('extension-loaded', $1)")>]
        member inline _.offExtensionLoaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
        /// includes:<br/><br/>* Extensions being loaded from <c>Extensions.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
        /// it (<c>chrome.runtime.reload()</c>).
        /// </summary>
        [<Emit("$0.off('extension-loaded', $1)")>]
        member inline _.offExtensionLoaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionLoaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.on('extension-unloaded', $1)")>]
        member inline _.onExtensionUnloaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.on('extension-unloaded', $1)")>]
        member inline _.onExtensionUnloaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionUnloaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.once('extension-unloaded', $1)")>]
        member inline _.onceExtensionUnloaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.once('extension-unloaded', $1)")>]
        member inline _.onceExtensionUnloaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionUnloaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.off('extension-unloaded', $1)")>]
        member inline _.offExtensionUnloaded(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
        /// </summary>
        [<Emit("$0.off('extension-unloaded', $1)")>]
        member inline _.offExtensionUnloaded
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionUnloaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.on('extension-ready', $1)")>]
        member inline _.onExtensionReady(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.on('extension-ready', $1)")>]
        member inline _.onExtensionReady
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionReady -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.once('extension-ready', $1)")>]
        member inline _.onceExtensionReady(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.once('extension-ready', $1)")>]
        member inline _.onceExtensionReady
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionReady -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.off('extension-ready', $1)")>]
        member inline _.offExtensionReady(handler: Event -> Extension -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
        /// background page.
        /// </summary>
        [<Emit("$0.off('extension-ready', $1)")>]
        member inline _.offExtensionReady
            (handler: Fable.Electron.EventInterfaces.Root.IOnExtensionReady -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// resolves when the extension is loaded.<br/><br/>This method will raise an exception if the extension could not be loaded. If there
        /// are warnings when installing the extension (e.g. if the extension requests an API that Electron does not support) then they
        /// will be logged to the console.<br/><br/>Note that Electron does not support the full range of Chrome extensions APIs. See Supported
        /// Extensions APIs for more details on what is supported.<br/><br/>Note that in previous versions of Electron, extensions that were loaded would
        /// be remembered for future runs of the application. This is no longer the case: <c>loadExtension</c> must be called on every
        /// boot of your app if you want the extension to be loaded.<br/><br/>This API does not support loading packed (.crx) extensions.<br/><br/>&gt;
        /// [!NOTE] This API cannot be called before the <c>ready</c> event of the <c>app</c> module is emitted.<br/><br/>&gt; [!NOTE] Loading extensions into
        /// in-memory (non-persistent) sessions is not supported and will throw an error.
        /// </summary>
        /// <param name="path">Path to a directory containing an unpacked Chrome extension</param>
        /// <param name="options"></param>
        [<Erase>]
        member inline _.loadExtension(path: string, ?options: Extensions.LoadExtension.Options) : Promise<Extension> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Unloads an extension.<br/><br/>&gt; [!NOTE] This API cannot be called before the <c>ready</c> event of the <c>app</c> module is emitted.
        /// </summary>
        /// <param name="extensionId">ID of extension to remove</param>
        [<Erase>]
        member inline _.removeExtension(extensionId: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The loaded extension with the given ID.<br/><br/>&gt; [!NOTE] This API cannot be called before the <c>ready</c> event of the <c>app</c>
        /// module is emitted.
        /// </summary>
        /// <param name="extensionId">ID of extension to query</param>
        [<Erase>]
        member inline _.getExtension(extensionId: string) : Option<Extension> = Unchecked.defaultof<_>

        /// <summary>
        /// A list of all loaded extensions.<br/><br/>&gt; [!NOTE] This API cannot be called before the <c>ready</c> event of the <c>app</c> module
        /// is emitted.
        /// </summary>
        [<Erase>]
        member inline _.getAllExtensions() : Extension[] = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("DownloadItem", "electron")>]
    type DownloadItem =
        interface EventEmitter

        /// <summary>
        /// Emitted when the download has been updated and is not done.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>progressing</c> - The
        /// download is in-progress.<br/>* <c>interrupted</c> - The download has interrupted and can be resumed.
        /// </summary>
        [<Emit("$0.on('updated', $1)")>]
        member inline _.onUpdated(handler: Event -> Enums.DownloadItem.Updated.State -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download has been updated and is not done.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>progressing</c> - The
        /// download is in-progress.<br/>* <c>interrupted</c> - The download has interrupted and can be resumed.
        /// </summary>
        [<Emit("$0.on('updated', $1)")>]
        member inline _.onUpdated(handler: Fable.Electron.EventInterfaces.Root.IOnUpdated -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download has been updated and is not done.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>progressing</c> - The
        /// download is in-progress.<br/>* <c>interrupted</c> - The download has interrupted and can be resumed.
        /// </summary>
        [<Emit("$0.once('updated', $1)")>]
        member inline _.onceUpdated(handler: Event -> Enums.DownloadItem.Updated.State -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download has been updated and is not done.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>progressing</c> - The
        /// download is in-progress.<br/>* <c>interrupted</c> - The download has interrupted and can be resumed.
        /// </summary>
        [<Emit("$0.once('updated', $1)")>]
        member inline _.onceUpdated(handler: Fable.Electron.EventInterfaces.Root.IOnUpdated -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download has been updated and is not done.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>progressing</c> - The
        /// download is in-progress.<br/>* <c>interrupted</c> - The download has interrupted and can be resumed.
        /// </summary>
        [<Emit("$0.off('updated', $1)")>]
        member inline _.offUpdated(handler: Event -> Enums.DownloadItem.Updated.State -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download has been updated and is not done.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>progressing</c> - The
        /// download is in-progress.<br/>* <c>interrupted</c> - The download has interrupted and can be resumed.
        /// </summary>
        [<Emit("$0.off('updated', $1)")>]
        member inline _.offUpdated(handler: Fable.Electron.EventInterfaces.Root.IOnUpdated -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download is in a terminal state. This includes a completed download, a cancelled download (via <c>downloadItem.cancel()</c>), and
        /// interrupted download that can't be resumed.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>completed</c> - The download completed successfully.<br/>* <c>cancelled</c> -
        /// The download has been cancelled.<br/>* <c>interrupted</c> - The download has interrupted and can not resume.
        /// </summary>
        [<Emit("$0.on('done', $1)")>]
        member inline _.onDone(handler: Event -> Enums.DownloadItem.Done.State -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download is in a terminal state. This includes a completed download, a cancelled download (via <c>downloadItem.cancel()</c>), and
        /// interrupted download that can't be resumed.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>completed</c> - The download completed successfully.<br/>* <c>cancelled</c> -
        /// The download has been cancelled.<br/>* <c>interrupted</c> - The download has interrupted and can not resume.
        /// </summary>
        [<Emit("$0.on('done', $1)")>]
        member inline _.onDone(handler: Fable.Electron.EventInterfaces.Root.IOnDone -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download is in a terminal state. This includes a completed download, a cancelled download (via <c>downloadItem.cancel()</c>), and
        /// interrupted download that can't be resumed.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>completed</c> - The download completed successfully.<br/>* <c>cancelled</c> -
        /// The download has been cancelled.<br/>* <c>interrupted</c> - The download has interrupted and can not resume.
        /// </summary>
        [<Emit("$0.once('done', $1)")>]
        member inline _.onceDone(handler: Event -> Enums.DownloadItem.Done.State -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download is in a terminal state. This includes a completed download, a cancelled download (via <c>downloadItem.cancel()</c>), and
        /// interrupted download that can't be resumed.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>completed</c> - The download completed successfully.<br/>* <c>cancelled</c> -
        /// The download has been cancelled.<br/>* <c>interrupted</c> - The download has interrupted and can not resume.
        /// </summary>
        [<Emit("$0.once('done', $1)")>]
        member inline _.onceDone(handler: Fable.Electron.EventInterfaces.Root.IOnDone -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download is in a terminal state. This includes a completed download, a cancelled download (via <c>downloadItem.cancel()</c>), and
        /// interrupted download that can't be resumed.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>completed</c> - The download completed successfully.<br/>* <c>cancelled</c> -
        /// The download has been cancelled.<br/>* <c>interrupted</c> - The download has interrupted and can not resume.
        /// </summary>
        [<Emit("$0.off('done', $1)")>]
        member inline _.offDone(handler: Event -> Enums.DownloadItem.Done.State -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the download is in a terminal state. This includes a completed download, a cancelled download (via <c>downloadItem.cancel()</c>), and
        /// interrupted download that can't be resumed.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>completed</c> - The download completed successfully.<br/>* <c>cancelled</c> -
        /// The download has been cancelled.<br/>* <c>interrupted</c> - The download has interrupted and can not resume.
        /// </summary>
        [<Emit("$0.off('done', $1)")>]
        member inline _.offDone(handler: Fable.Electron.EventInterfaces.Root.IOnDone -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The API is only available in session's <c>will-download</c> callback function. If <c>path</c> doesn't exist, Electron will try to make the
        /// directory recursively. If user doesn't set the save path via the API, Electron will use the original routine to determine
        /// the save path; this usually prompts a save dialog.
        /// </summary>
        /// <param name="path">Set the save file path of the download item.</param>
        [<Erase>]
        member inline _.setSavePath(path: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The save path of the download item. This will be either the path set via <c>downloadItem.setSavePath(path)</c> or the path selected
        /// from the shown save dialog.
        /// </summary>
        [<Erase>]
        member inline _.getSavePath() : string = Unchecked.defaultof<_>

        /// <summary>
        /// This API allows the user to set custom options for the save dialog that opens for the download item by
        /// default. The API is only available in session's <c>will-download</c> callback function.
        /// </summary>
        /// <param name="options">Set the save file dialog options. This object has the same properties as the <c>options</c> parameter of <c>dialog.showSaveDialog()</c>.</param>
        [<Erase>]
        member inline _.setSaveDialogOptions(options: SaveDialogOptions) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Returns the object previously set by <c>downloadItem.setSaveDialogOptions(options)</c>.
        /// </summary>
        [<Erase>]
        member inline _.getSaveDialogOptions() : SaveDialogOptions = Unchecked.defaultof<_>

        /// <summary>
        /// Pauses the download.
        /// </summary>
        [<Erase>]
        member inline _.pause() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the download is paused.
        /// </summary>
        [<Erase>]
        member inline _.isPaused() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Resumes the download that has been paused.<br/><br/>&gt; [!NOTE] To enable resumable downloads the server you are downloading from must support
        /// range requests and provide both <c>Last-Modified</c> and <c>ETag</c> header values. Otherwise <c>resume()</c> will dismiss previously received bytes and restart the
        /// download from the beginning.
        /// </summary>
        [<Erase>]
        member inline _.resume() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the download can resume.
        /// </summary>
        [<Erase>]
        member inline _.canResume() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Cancels the download operation.
        /// </summary>
        [<Erase>]
        member inline _.cancel() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The origin URL where the item is downloaded from.
        /// </summary>
        [<Erase>]
        member inline _.getURL() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The files mime type.
        /// </summary>
        [<Erase>]
        member inline _.getMimeType() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the download has user gesture.
        /// </summary>
        [<Erase>]
        member inline _.hasUserGesture() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// The file name of the download item.<br/><br/>&gt; [!NOTE] The file name is not always the same as the actual one
        /// saved in local disk. If user changes the file name in a prompted download saving dialog, the actual name of
        /// saved file will be different.
        /// </summary>
        [<Erase>]
        member inline _.getFilename() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The current download speed in bytes per second.
        /// </summary>
        [<Erase>]
        member inline _.getCurrentBytesPerSecond() : int = Unchecked.defaultof<_>

        /// <summary>
        /// The total size in bytes of the download item.<br/><br/>If the size is unknown, it returns 0.
        /// </summary>
        [<Erase>]
        member inline _.getTotalBytes() : int = Unchecked.defaultof<_>

        /// <summary>
        /// The received bytes of the download item.
        /// </summary>
        [<Erase>]
        member inline _.getReceivedBytes() : int = Unchecked.defaultof<_>

        /// <summary>
        /// The download completion in percent.
        /// </summary>
        [<Erase>]
        member inline _.getPercentComplete() : int = Unchecked.defaultof<_>

        /// <summary>
        /// The Content-Disposition field from the response header.
        /// </summary>
        [<Erase>]
        member inline _.getContentDisposition() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The current state. Can be <c>progressing</c>, <c>completed</c>, <c>cancelled</c> or <c>interrupted</c>.<br/><br/>&gt; [!NOTE] The following methods are useful specifically to resume a
        /// <c>cancelled</c> item when session is restarted.
        /// </summary>
        [<Erase>]
        member inline _.getState() : Enums.DownloadItem.GetState = Unchecked.defaultof<_>

        /// <summary>
        /// The complete URL chain of the item including any redirects.
        /// </summary>
        [<Erase>]
        member inline _.getURLChain() : string[] = Unchecked.defaultof<_>

        /// <summary>
        /// Last-Modified header value.
        /// </summary>
        [<Erase>]
        member inline _.getLastModifiedTime() : string = Unchecked.defaultof<_>

        /// <summary>
        /// ETag header value.
        /// </summary>
        [<Erase>]
        member inline _.getETag() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Number of seconds since the UNIX epoch when the download was started.
        /// </summary>
        [<Erase>]
        member inline _.getStartTime() : double = Unchecked.defaultof<_>

        /// <summary>
        /// Number of seconds since the UNIX epoch when the download ended.
        /// </summary>
        [<Erase>]
        member inline _.getEndTime() : double = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>string</c> property that determines the save file path of the download item.<br/><br/>The property is only available in session's <c>will-download</c>
        /// callback function. If user doesn't set the save path via the property, Electron will use the original routine to determine
        /// the save path; this usually prompts a save dialog.
        /// </summary>
        [<Erase>]
        member val savePath: string = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("Dock", "electron")>]
    type Dock =
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// an ID representing the request.<br/><br/>When <c>critical</c> is passed, the dock icon will bounce until either the application becomes active or
        /// the request is canceled.<br/><br/>When <c>informational</c> is passed, the dock icon will bounce for one second. However, the request remains active
        /// until either the application becomes active or the request is canceled.<br/><br/>&gt; [!NOTE] This method can only be used while the
        /// app is not focused; when the app is focused it will return -1.
        /// </summary>
        /// <param name="``type``">Can be <c>critical</c> or <c>informational</c>. The default is <c>informational</c></param>
        [<Erase>]
        member inline _.bounce(?``type``: Enums.Dock.Bounce.Type) : int = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Cancel the bounce of <c>id</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        member inline _.cancelBounce(id: int) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Bounces the Downloads stack if the filePath is inside the Downloads folder.
        /// </summary>
        /// <param name="filePath"></param>
        [<Erase>]
        member inline _.downloadFinished(filePath: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the string to be displayed in the dock’s badging area.<br/><br/>&gt; [!IMPORTANT] You need to ensure that your application has
        /// the permission to display notifications for this method to work.
        /// </summary>
        /// <param name="text"></param>
        [<Erase>]
        member inline _.setBadge(text: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The badge string of the dock.
        /// </summary>
        [<Erase>]
        member inline _.getBadge() : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Hides the dock icon.
        /// </summary>
        [<Erase>]
        member inline _.hide() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Resolves when the dock icon is shown.
        /// </summary>
        [<Erase>]
        member inline _.show() : Promise<unit> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the dock icon is visible.
        /// </summary>
        [<Erase>]
        member inline _.isVisible() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the application's dock menu.
        /// </summary>
        /// <param name="menu"></param>
        [<Erase>]
        member inline _.setMenu(menu: Menu) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The application's dock menu.
        /// </summary>
        [<Erase>]
        member inline _.getMenu() : Option<Menu> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the <c>image</c> associated with this dock icon.
        /// </summary>
        /// <param name="image"></param>
        [<Erase>]
        member inline _.setIcon(image: U2<NativeImage, string>) : unit = Unchecked.defaultof<_>
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Display native system dialogs for opening and saving files, alerting, etc.<br/><br/>Process: Main<br/><br/>An example of showing a dialog to select
    /// multiple files:
    /// </summary>
    [<Import("dialog", "electron")>]
    type Dialog =
        /// <summary>
        /// the file paths chosen by the user; if the dialog is cancelled it returns <c>undefined</c>.<br/><br/>The <c>window</c> argument allows the dialog
        /// to attach itself to a parent window, making it modal.<br/><br/>The <c>filters</c> specifies an array of file types that can be
        /// displayed or selected when you want to limit the user to a specific type. For example:<br/><br/>The <c>extensions</c> array should contain
        /// extensions without wildcards or dots (e.g. <c>'png'</c> is good but <c>'.png'</c> and <c>'*.png'</c> are bad). To show all files, use
        /// the <c>'*'</c> wildcard (no other wildcard is supported).<br/><br/>&gt; [!NOTE] On Windows and Linux an open dialog can not be both
        /// a file selector and a directory selector, so if you set <c>properties</c> to <c>['openFile', 'openDirectory']</c> on these platforms, a directory
        /// selector will be shown.<br/><br/>&gt; [!NOTE] On Linux <c>defaultPath</c> is not supported when using portal file chooser dialogs unless the portal
        /// backend is version 4 or higher. You can use <c>--xdg-portal-required-version</c> command-line switch to force gtk or kde dialogs.
        /// </summary>
        /// <param name="window"></param>
        /// <param name="title"></param>
        /// <param name="defaultPath"></param>
        /// <param name="buttonLabel">Custom label for the confirmation button, when left empty the default label will be used.</param>
        /// <param name="filters"></param>
        /// <param name="properties">Contains which features the dialog should use. The following values are supported:</param>
        /// <param name="message">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Message to display above
        /// input boxes.</param>
        /// <param name="securityScopedBookmarks">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ✔ || Create security scoped bookmarks
        /// when packaged for the Mac App Store.</param>
        [<Erase; ParamObject(1)>]
        static member mutable showOpenDialogSync
            (
                ?window: BaseWindow,
                ?title: string,
                ?defaultPath: string,
                ?buttonLabel: string,
                ?filters: FileFilter[],
                ?properties: Enums.Dialog.ShowOpenDialogSync.Options.Properties[],
                ?message: string,
                ?securityScopedBookmarks: bool
            ) : Option<string[]> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resolve with an object containing the following:<br/><br/>* <c>canceled</c> boolean - whether or not the dialog was canceled.<br/>* <c>filePaths</c> string[] -
        /// An array of file paths chosen by the user. If the dialog is cancelled this will be an empty array.<br/>*
        /// <c>bookmarks</c> string[] (optional) _macOS_ _mas_ - An array matching the <c>filePaths</c> array of base64 encoded strings which contains security scoped
        /// bookmark data. <c>securityScopedBookmarks</c> must be enabled for this to be populated. (For return values, see table here.)<br/><br/>The <c>window</c> argument allows
        /// the dialog to attach itself to a parent window, making it modal.<br/><br/>The <c>filters</c> specifies an array of file types that
        /// can be displayed or selected when you want to limit the user to a specific type. For example:<br/><br/>The <c>extensions</c> array
        /// should contain extensions without wildcards or dots (e.g. <c>'png'</c> is good but <c>'.png'</c> and <c>'*.png'</c> are bad). To show all
        /// files, use the <c>'*'</c> wildcard (no other wildcard is supported).<br/><br/>&gt; [!NOTE] On Windows and Linux an open dialog can not
        /// be both a file selector and a directory selector, so if you set <c>properties</c> to <c>['openFile', 'openDirectory']</c> on these platforms,
        /// a directory selector will be shown.<br/><br/>&gt; [!NOTE] On Linux <c>defaultPath</c> is not supported when using portal file chooser dialogs unless
        /// the portal backend is version 4 or higher. You can use <c>--xdg-portal-required-version</c> command-line switch to force gtk or kde dialogs.
        /// </summary>
        /// <param name="window"></param>
        /// <param name="title"></param>
        /// <param name="defaultPath"></param>
        /// <param name="buttonLabel">Custom label for the confirmation button, when left empty the default label will be used.</param>
        /// <param name="filters"></param>
        /// <param name="properties">Contains which features the dialog should use. The following values are supported:</param>
        /// <param name="message">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Message to display above
        /// input boxes.</param>
        /// <param name="securityScopedBookmarks">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ✔ || Create security scoped bookmarks
        /// when packaged for the Mac App Store.</param>
        [<Erase; ParamObject(1)>]
        static member mutable showOpenDialog
            (
                ?window: BaseWindow,
                ?title: string,
                ?defaultPath: string,
                ?buttonLabel: string,
                ?filters: FileFilter[],
                ?properties: Enums.Dialog.ShowOpenDialog.Options.Properties[],
                ?message: string,
                ?securityScopedBookmarks: bool
            ) : Promise<Dialog.ShowOpenDialog> =
            Unchecked.defaultof<_>

        /// <summary>
        /// the path of the file chosen by the user; if the dialog is cancelled it returns an empty string.<br/><br/>The <c>window</c>
        /// argument allows the dialog to attach itself to a parent window, making it modal.<br/><br/>The <c>filters</c> specifies an array of file
        /// types that can be displayed, see <c>dialog.showOpenDialog</c> for an example.
        /// </summary>
        /// <param name="window"></param>
        /// <param name="title">The dialog title. Cannot be displayed on some _Linux_ desktop environments.</param>
        /// <param name="defaultPath">Absolute directory path, absolute file path, or file name to use by default.</param>
        /// <param name="buttonLabel">Custom label for the confirmation button, when left empty the default label will be used.</param>
        /// <param name="filters"></param>
        /// <param name="message">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Message to display above
        /// text fields.</param>
        /// <param name="nameFieldLabel">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Custom label for the
        /// text displayed in front of the filename text field.</param>
        /// <param name="showsTagField">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Show the tags input
        /// box, defaults to <c>true</c>.</param>
        /// <param name="properties"></param>
        /// <param name="securityScopedBookmarks">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ✔ || Create a security scoped
        /// bookmark when packaged for the Mac App Store. If this option is enabled and the file doesn't already exist a
        /// blank file will be created at the chosen path.</param>
        [<Erase; ParamObject(1)>]
        static member mutable showSaveDialogSync
            (
                ?window: BaseWindow,
                ?title: string,
                ?defaultPath: string,
                ?buttonLabel: string,
                ?filters: FileFilter[],
                ?message: string,
                ?nameFieldLabel: string,
                ?showsTagField: bool,
                ?properties: Enums.Dialog.ShowSaveDialogSync.Options.Properties[],
                ?securityScopedBookmarks: bool
            ) : string =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resolve with an object containing the following:<br/><br/>* <c>canceled</c> boolean - whether or not the dialog was canceled.<br/>* <c>filePath</c> string -
        /// If the dialog is canceled, this will be an empty string.<br/>* <c>bookmark</c> string (optional) _macOS_ _mas_ - Base64 encoded string
        /// which contains the security scoped bookmark data for the saved file. <c>securityScopedBookmarks</c> must be enabled for this to be present.
        /// (For return values, see table here.)<br/><br/>The <c>window</c> argument allows the dialog to attach itself to a parent window, making it
        /// modal.<br/><br/>The <c>filters</c> specifies an array of file types that can be displayed, see <c>dialog.showOpenDialog</c> for an example.<br/><br/>&gt; [!NOTE] On macOS,
        /// using the asynchronous version is recommended to avoid issues when expanding and collapsing the dialog.
        /// </summary>
        /// <param name="window"></param>
        /// <param name="title">The dialog title. Cannot be displayed on some _Linux_ desktop environments.</param>
        /// <param name="defaultPath">Absolute directory path, absolute file path, or file name to use by default.</param>
        /// <param name="buttonLabel">Custom label for the confirmation button, when left empty the default label will be used.</param>
        /// <param name="filters"></param>
        /// <param name="message">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Message to display above
        /// text fields.</param>
        /// <param name="nameFieldLabel">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Custom label for the
        /// text displayed in front of the filename text field.</param>
        /// <param name="showsTagField">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Show the tags input
        /// box, defaults to <c>true</c>.</param>
        /// <param name="properties"></param>
        /// <param name="securityScopedBookmarks">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ✔ || Create a security scoped
        /// bookmark when packaged for the Mac App Store. If this option is enabled and the file doesn't already exist a
        /// blank file will be created at the chosen path.</param>
        [<Erase; ParamObject(1)>]
        static member mutable showSaveDialog
            (
                ?window: BaseWindow,
                ?title: string,
                ?defaultPath: string,
                ?buttonLabel: string,
                ?filters: FileFilter[],
                ?message: string,
                ?nameFieldLabel: string,
                ?showsTagField: bool,
                ?properties: Enums.Dialog.ShowSaveDialog.Options.Properties[],
                ?securityScopedBookmarks: bool
            ) : Promise<Dialog.ShowSaveDialog> =
            Unchecked.defaultof<_>

        /// <summary>
        /// the index of the clicked button.<br/><br/>Shows a message box, it will block the process until the message box is closed.
        /// It returns the index of the clicked button.<br/><br/>The <c>window</c> argument allows the dialog to attach itself to a parent window,
        /// making it modal. If <c>window</c> is not shown dialog will not be attached to it. In such case it will
        /// be displayed as an independent window.
        /// </summary>
        /// <param name="window"></param>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable showMessageBoxSync
            (?window: BaseWindow, options: Dialog.ShowMessageBoxSync.Options)
            : int =
            Unchecked.defaultof<_>

        /// <summary>
        /// resolves with a promise containing the following properties:<br/><br/>* <c>response</c> number - The index of the clicked button.<br/>* <c>checkboxChecked</c> boolean -
        /// The checked state of the checkbox if <c>checkboxLabel</c> was set. Otherwise <c>false</c>.<br/><br/>Shows a message box.<br/><br/>The <c>window</c> argument allows the dialog
        /// to attach itself to a parent window, making it modal.
        /// </summary>
        /// <param name="window"></param>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable showMessageBox
            (?window: BaseWindow, options: Dialog.ShowMessageBox.Options)
            : Promise<Dialog.ShowMessageBox> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Displays a modal dialog that shows an error message.<br/><br/>This API can be called safely before the <c>ready</c> event the <c>app</c>
        /// module emits, it is usually used to report errors in early stage of startup. If called before the app <c>ready</c>event
        /// on Linux, the message will be emitted to stderr, and no GUI dialog will appear.
        /// </summary>
        /// <param name="title">The title to display in the error box.</param>
        /// <param name="content">The text content to display in the error box.</param>
        [<Erase>]
        static member mutable showErrorBox(title: string, content: string) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// resolves when the certificate trust dialog is shown.<br/><br/>On macOS, this displays a modal dialog that shows a message and certificate
        /// information, and gives the user the option of trusting/importing the certificate. If you provide a <c>window</c> argument the dialog will
        /// be attached to the parent window, making it modal.<br/><br/>On Windows the options are more limited, due to the Win32 APIs
        /// used:<br/><br/>* The <c>message</c> argument is not used, as the OS provides its own confirmation dialog.<br/>* The <c>window</c> argument is ignored
        /// since it is not possible to make this confirmation dialog modal.
        /// </summary>
        /// <param name="window"></param>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable showCertificateTrustDialog
            (?window: BaseWindow, options: Dialog.ShowCertificateTrustDialog.Options)
            : Promise<unit> =
            Unchecked.defaultof<_>
        #endif


    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Access information about media sources that can be used to capture audio and video from the desktop using the
    /// <c>navigator.mediaDevices.getUserMedia</c> API.<br/><br/>Process: Main<br/><br/>The following example shows how to capture video from a desktop window whose title is <c>Electron</c>:<br/><br/><code><br/>// main.js<br/>const {
    /// app, BrowserWindow, desktopCapturer, session } = require('electron')<br/><br/>app.whenReady().then(() =&gt; {<br/>  const mainWindow = new BrowserWindow()<br/><br/>  session.defaultSession.setDisplayMediaRequestHandler((request, callback) =&gt; {<br/>
    ///    desktopCapturer.getSources({ types: ['screen'] }).then((sources) =&gt; {<br/>      // Grant access to the first
    /// screen found.<br/>      callback({ video: sources[0], audio: 'loopback' })<br/>    })<br/>
    /// // If true, use the system picker if available.<br/>    // Note: this is currently experimental. If the
    /// system picker<br/>    // is available, it will be used and the media request handler<br/>
    /// // will not be invoked.<br/>  }, { useSystemPicker: true })<br/><br/>  mainWindow.loadFile('index.html')<br/>})<br/></code><br/><br/><code><br/>// renderer.js<br/>const startButton = document.getElementById('startButton')<br/>const stopButton = document.getElementById('stopButton')<br/>const
    /// video = document.querySelector('video')<br/><br/>startButton.addEventListener('click', () =&gt; {<br/>  navigator.mediaDevices.getDisplayMedia({<br/>    audio: true,<br/>    video: {<br/>
    ///    width: 320,<br/>      height: 240,<br/>      frameRate: 30<br/>
    ///   }<br/>  }).then(stream =&gt; {<br/>    video.srcObject = stream<br/>    video.onloadedmetadata = (e) =&gt;
    /// video.play()<br/>  }).catch(e =&gt; console.log(e))<br/>})<br/><br/>stopButton.addEventListener('click', () =&gt; {<br/>  video.pause()<br/>})<br/></code><br/><br/><code><br/>&lt;!-- index.html --&gt;<br/>&lt;html&gt;<br/>&lt;meta http-equiv="content-security-policy" content="script-src 'self' 'unsafe-inline'" /&gt;<br/>  &lt;body&gt;<br/>
    ///   &lt;button id="startButton" class="button"&gt;Start&lt;/button&gt;<br/>    &lt;button id="stopButton" class="button"&gt;Stop&lt;/button&gt;<br/>    &lt;video width="320" height="240" autoplay&gt;&lt;/video&gt;<br/>
    ///  &lt;script src="renderer.js"&gt;&lt;/script&gt;<br/>  &lt;/body&gt;<br/>&lt;/html&gt;<br/></code><br/><br/>See <c>navigator.mediaDevices.getDisplayMedia</c> for more information.<br/><br/>&gt; [!NOTE] <c>navigator.mediaDevices.getDisplayMedia</c> does not permit the use of <c>deviceId</c> for selection
    /// of a source - see specification.
    /// </summary>
    [<Import("desktopCapturer", "electron")>]
    type DesktopCapturer =
        /// <summary>
        /// Resolves with an array of <c>DesktopCapturerSource</c> objects, each <c>DesktopCapturerSource</c> represents a screen or an individual window that can be captured.<br/><br/>&gt;
        /// [!NOTE] Capturing the screen contents requires user consent on macOS 10.15 Catalina or higher, which can detected by <c>systemPreferences.getMediaAccessStatus</c>.
        /// </summary>
        /// <param name="types">An array of strings that lists the types of desktop sources to be captured, available types can be <c>screen</c>
        /// and <c>window</c>.</param>
        /// <param name="thumbnailSize">The size that the media source thumbnail should be scaled to. Default is <c>150</c> x <c>150</c>. Set width or
        /// height to 0 when you do not need the thumbnails. This will save the processing time required for capturing the
        /// content of each window and screen.</param>
        /// <param name="fetchWindowIcons">Set to true to enable fetching window icons. The default value is false. When false the appIcon property of
        /// the sources return null. Same if a source has the type screen.</param>
        [<Erase; ParamObject(0)>]
        static member mutable getSources
            (types: Enums.DesktopCapturer.GetSources.Options.Types[], ?thumbnailSize: Size, ?fetchWindowIcons: bool)
            : Promise<DesktopCapturerSource[]> =
            Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("Debugger", "electron")>]
    type Debugger =
        interface EventEmitter

        /// <summary>
        /// Emitted when the debugging session is terminated. This happens either when <c>webContents</c> is closed or devtools is invoked for the
        /// attached <c>webContents</c>.
        /// </summary>
        [<Emit("$0.on('detach', $1)")>]
        member inline _.onDetach(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the debugging session is terminated. This happens either when <c>webContents</c> is closed or devtools is invoked for the
        /// attached <c>webContents</c>.
        /// </summary>
        [<Emit("$0.on('detach', $1)")>]
        member inline _.onDetach(handler: Fable.Electron.EventInterfaces.Root.IOnDetach -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the debugging session is terminated. This happens either when <c>webContents</c> is closed or devtools is invoked for the
        /// attached <c>webContents</c>.
        /// </summary>
        [<Emit("$0.once('detach', $1)")>]
        member inline _.onceDetach(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the debugging session is terminated. This happens either when <c>webContents</c> is closed or devtools is invoked for the
        /// attached <c>webContents</c>.
        /// </summary>
        [<Emit("$0.once('detach', $1)")>]
        member inline _.onceDetach(handler: Fable.Electron.EventInterfaces.Root.IOnDetach -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the debugging session is terminated. This happens either when <c>webContents</c> is closed or devtools is invoked for the
        /// attached <c>webContents</c>.
        /// </summary>
        [<Emit("$0.off('detach', $1)")>]
        member inline _.offDetach(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the debugging session is terminated. This happens either when <c>webContents</c> is closed or devtools is invoked for the
        /// attached <c>webContents</c>.
        /// </summary>
        [<Emit("$0.off('detach', $1)")>]
        member inline _.offDetach(handler: Fable.Electron.EventInterfaces.Root.IOnDetach -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted whenever the debugging target issues an instrumentation event.
        /// </summary>
        [<Emit("$0.on('message', $1)")>]
        member inline _.onMessage(handler: Event -> string -> obj -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted whenever the debugging target issues an instrumentation event.
        /// </summary>
        [<Emit("$0.on('message', $1)")>]
        member inline _.onMessage(handler: Fable.Electron.EventInterfaces.Root.IOnMessage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted whenever the debugging target issues an instrumentation event.
        /// </summary>
        [<Emit("$0.once('message', $1)")>]
        member inline _.onceMessage(handler: Event -> string -> obj -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted whenever the debugging target issues an instrumentation event.
        /// </summary>
        [<Emit("$0.once('message', $1)")>]
        member inline _.onceMessage(handler: Fable.Electron.EventInterfaces.Root.IOnMessage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted whenever the debugging target issues an instrumentation event.
        /// </summary>
        [<Emit("$0.off('message', $1)")>]
        member inline _.offMessage(handler: Event -> string -> obj -> string -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted whenever the debugging target issues an instrumentation event.
        /// </summary>
        [<Emit("$0.off('message', $1)")>]
        member inline _.offMessage(handler: Fable.Electron.EventInterfaces.Root.IOnMessage -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Attaches the debugger to the <c>webContents</c>.
        /// </summary>
        /// <param name="protocolVersion">Requested debugging protocol version.</param>
        [<Erase>]
        member inline _.attach(?protocolVersion: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether a debugger is attached to the <c>webContents</c>.
        /// </summary>
        [<Erase>]
        member inline _.isAttached() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Detaches the debugger from the <c>webContents</c>.
        /// </summary>
        [<Erase>]
        member inline _.detach() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// A promise that resolves with the response defined by the 'returns' attribute of the command description in the remote debugging
        /// protocol or is rejected indicating the failure of the command.<br/><br/>Send given command to the debugging target.
        /// </summary>
        /// <param name="method">Method name, should be one of the methods defined by the remote debugging protocol.</param>
        /// <param name="commandParams">JSON object with request parameters.</param>
        /// <param name="sessionId">send command to the target with associated debugging session id. The initial value can be obtained by sending Target.attachToTarget
        /// message.</param>
        [<Erase>]
        member inline _.sendCommand(method: string, ?commandParams: obj, ?sessionId: string) : Promise<obj> =
            Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Submit crash reports to a remote server.<br/><br/>Process: Main, Renderer<br/><br/>&gt; [!IMPORTANT] If you want to call this API from a
    /// renderer process with context isolation enabled, place the API call in your preload script and expose it using the <c>contextBridge</c>
    /// API.<br/><br/>The following is an example of setting up Electron to automatically submit crash reports to a remote server:<br/><br/><code><br/>const { crashReporter
    /// } = require('electron')<br/><br/>crashReporter.start({ submitURL: 'https://your-domain.com/url-to-submit' })<br/></code><br/><br/>For setting up a server to accept and process crash reports, you can use following
    /// projects:<br/><br/>* socorro<br/>* mini-breakpad-server<br/><br/>&gt; [!NOTE] Electron uses Crashpad, not Breakpad, to collect and upload crashes, but for the time being, the
    /// upload protocol is the same.<br/><br/>Or use a 3rd party hosted solution:<br/><br/>* Backtrace<br/>* Sentry<br/>* BugSplat<br/>* Bugsnag<br/><br/>Crash reports are stored temporarily before
    /// being uploaded in a directory underneath the app's user data directory, called 'Crashpad'. You can override this directory by calling
    /// <c>app.setPath('crashDumps', '/path/to/crashes')</c> before starting the crash reporter.<br/><br/>Electron uses crashpad to monitor and report crashes.
    /// </summary>
    [<Import("crashReporter", "electron")>]
    type CrashReporter =
        /// <summary>
        /// This method must be called before using any other <c>crashReporter</c> APIs. Once initialized this way, the crashpad handler collects crashes
        /// from all subsequently created processes. The crash reporter cannot be disabled once started.<br/><br/>This method should be called as early as
        /// possible in app startup, preferably before <c>app.on('ready')</c>. If the crash reporter is not initialized at the time a renderer process
        /// is created, then that renderer process will not be monitored by the crash reporter.<br/><br/>&gt; [!NOTE] You can test out the
        /// crash reporter by generating a crash using <c>process.crash()</c>.<br/><br/>&gt; [!NOTE] If you need to send additional/updated <c>extra</c> parameters after your first
        /// call <c>start</c> you can call <c>addExtraParameter</c>.<br/><br/>&gt; [!NOTE] Parameters passed in <c>extra</c>, <c>globalExtra</c> or set with <c>addExtraParameter</c> have limits on the
        /// length of the keys and values. Key names must be at most 39 bytes long, and values must be no
        /// longer than 127 bytes. Keys with names longer than the maximum will be silently ignored. Key values longer than the
        /// maximum length will be truncated.<br/><br/>&gt; [!NOTE] This method is only available in the main process.
        /// </summary>
        /// <param name="submitURL">URL that crash reports will be sent to as POST. Required unless <c>uploadToServer</c> is <c>false</c>.</param>
        /// <param name="productName">Defaults to <c>app.name</c>.</param>
        /// <param name="companyName">Deprecated alias for <c>{ globalExtra: { _companyName: ... } }</c>.</param>
        /// <param name="uploadToServer">Whether crash reports should be sent to the server. If false, crash reports will be collected and stored in
        /// the crashes directory, but not uploaded. Default is <c>true</c>.</param>
        /// <param name="ignoreSystemCrashHandler">If true, crashes generated in the main process will not be forwarded to the system crash handler. Default is
        /// <c>false</c>.</param>
        /// <param name="rateLimit">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || If true, limit the
        /// number of crashes uploaded to 1/hour. Default is <c>false</c>.</param>
        /// <param name="compress">If true, crash reports will be compressed and uploaded with <c>Content-Encoding: gzip</c>. Default is <c>true</c>.</param>
        /// <param name="extra">Extra string key/value annotations that will be sent along with crash reports that are generated in the main process.
        /// Only string values are supported. Crashes generated in child processes will not include these extra parameters. To add extra parameters
        /// to crash reports generated from child processes, call <c>addExtraParameter</c> from the child process.</param>
        /// <param name="globalExtra">Extra string key/value annotations that will be sent along with any crash reports generated in any process. These annotations
        /// cannot be changed once the crash reporter has been started. If a key is present in both the global extra
        /// parameters and the process-specific extra parameters, then the global one will take precedence. By default, <c>productName</c> and the app version
        /// are included, as well as the Electron version.</param>
        [<Erase; ParamObject(0)>]
        static member mutable start
            (
                ?submitURL: string,
                ?productName: string,
                ?companyName: string,
                ?uploadToServer: bool,
                ?ignoreSystemCrashHandler: bool,
                ?rateLimit: bool,
                ?compress: bool,
                ?extra: Record<string, string>,
                ?globalExtra: Record<string, string>
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The date and ID of the last crash report. Only crash reports that have been uploaded will be returned; even
        /// if a crash report is present on disk it will not be returned until it is uploaded. In the case
        /// that there are no uploaded reports, <c>null</c> is returned.<br/><br/>&gt; [!NOTE] This method is only available in the main process.
        /// </summary>
        [<Erase>]
        static member mutable getLastCrashReport() : Option<CrashReport> = Unchecked.defaultof<_>

        /// <summary>
        /// Returns all uploaded crash reports. Each report contains the date and uploaded ID.<br/><br/>&gt; [!NOTE] This method is only available in
        /// the main process.
        /// </summary>
        [<Erase>]
        static member mutable getUploadedReports() : CrashReport[] = Unchecked.defaultof<_>

        /// <summary>
        /// Whether reports should be submitted to the server. Set through the <c>start</c> method or <c>setUploadToServer</c>.<br/><br/>&gt; [!NOTE] This method is only
        /// available in the main process.
        /// </summary>
        [<Erase>]
        static member mutable getUploadToServer() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// This would normally be controlled by user preferences. This has no effect if called before <c>start</c> is called.<br/><br/>&gt; [!NOTE] This
        /// method is only available in the main process.
        /// </summary>
        /// <param name="uploadToServer">Whether reports should be submitted to the server.</param>
        [<Erase>]
        static member mutable setUploadToServer(uploadToServer: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Set an extra parameter to be sent with the crash report. The values specified here will be sent in addition
        /// to any values set via the <c>extra</c> option when <c>start</c> was called.<br/><br/>Parameters added in this fashion (or via the <c>extra</c>
        /// parameter to <c>crashReporter.start</c>) are specific to the calling process. Adding extra parameters in the main process will not cause those
        /// parameters to be sent along with crashes from renderer or other child processes. Similarly, adding extra parameters in a renderer
        /// process will not result in those parameters being sent with crashes that occur in other renderer processes or in the
        /// main process.<br/><br/>&gt; [!NOTE] Parameters have limits on the length of the keys and values. Key names must be no longer
        /// than 39 bytes, and values must be no longer than 20320 bytes. Keys with names longer than the maximum will
        /// be silently ignored. Key values longer than the maximum length will be truncated.
        /// </summary>
        /// <param name="key">Parameter key, must be no longer than 39 bytes.</param>
        /// <param name="value">Parameter value, must be no longer than 127 bytes.</param>
        [<Erase>]
        static member mutable addExtraParameter(key: string, value: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Remove an extra parameter from the current set of parameters. Future crashes will not include this parameter.
        /// </summary>
        /// <param name="key">Parameter key, must be no longer than 39 bytes.</param>
        [<Erase>]
        static member mutable removeExtraParameter(key: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The current 'extra' parameters of the crash reporter.
        /// </summary>
        [<Erase>]
        static member mutable getParameters() : Record<string, string> = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("Cookies", "electron")>]
    type Cookies =
        interface EventEmitter

        /// <summary>
        /// Emitted when a cookie is changed because it was added, edited, removed, or expired.
        /// </summary>
        [<Emit("$0.on('changed', $1)")>]
        member inline _.onChanged(handler: Event -> Cookie -> Enums.Cookies.Changed.Cause -> bool -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a cookie is changed because it was added, edited, removed, or expired.
        /// </summary>
        [<Emit("$0.on('changed', $1)")>]
        member inline _.onChanged(handler: Fable.Electron.EventInterfaces.Root.IOnChanged -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a cookie is changed because it was added, edited, removed, or expired.
        /// </summary>
        [<Emit("$0.once('changed', $1)")>]
        member inline _.onceChanged(handler: Event -> Cookie -> Enums.Cookies.Changed.Cause -> bool -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a cookie is changed because it was added, edited, removed, or expired.
        /// </summary>
        [<Emit("$0.once('changed', $1)")>]
        member inline _.onceChanged(handler: Fable.Electron.EventInterfaces.Root.IOnChanged -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a cookie is changed because it was added, edited, removed, or expired.
        /// </summary>
        [<Emit("$0.off('changed', $1)")>]
        member inline _.offChanged(handler: Event -> Cookie -> Enums.Cookies.Changed.Cause -> bool -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a cookie is changed because it was added, edited, removed, or expired.
        /// </summary>
        [<Emit("$0.off('changed', $1)")>]
        member inline _.offChanged(handler: Fable.Electron.EventInterfaces.Root.IOnChanged -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// A promise which resolves an array of cookie objects.<br/><br/>Sends a request to get all cookies matching <c>filter</c>, and resolves a
        /// promise with the response.
        /// </summary>
        /// <param name="url">Retrieves cookies which are associated with <c>url</c>. Empty implies retrieving cookies of all URLs.</param>
        /// <param name="name">Filters cookies by name.</param>
        /// <param name="domain">Retrieves cookies whose domains match or are subdomains of <c>domains</c>.</param>
        /// <param name="path">Retrieves cookies whose path matches <c>path</c>.</param>
        /// <param name="secure">Filters cookies by their Secure property.</param>
        /// <param name="session">Filters out session or persistent cookies.</param>
        /// <param name="httpOnly">Filters cookies by httpOnly.</param>
        [<Erase; ParamObject(0)>]
        member inline _.get
            (?url: string, ?name: string, ?domain: string, ?path: string, ?secure: bool, ?session: bool, ?httpOnly: bool) : Promise<
                                                                                                                                Cookie[]
                                                                                                                             >
            =
            Unchecked.defaultof<_>

        /// <summary>
        /// A promise which resolves when the cookie has been set<br/><br/>Sets a cookie with <c>details</c>.
        /// </summary>
        /// <param name="url">The URL to associate the cookie with. The promise will be rejected if the URL is invalid.</param>
        /// <param name="name">The name of the cookie. Empty by default if omitted.</param>
        /// <param name="value">The value of the cookie. Empty by default if omitted.</param>
        /// <param name="domain">The domain of the cookie; this will be normalized with a preceding dot so that it's also valid for
        /// subdomains. Empty by default if omitted.</param>
        /// <param name="path">The path of the cookie. Empty by default if omitted.</param>
        /// <param name="secure">Whether the cookie should be marked as Secure. Defaults to false unless Same Site=None attribute is used.</param>
        /// <param name="httpOnly">Whether the cookie should be marked as HTTP only. Defaults to false.</param>
        /// <param name="expirationDate">The expiration date of the cookie as the number of seconds since the UNIX epoch. If omitted then the
        /// cookie becomes a session cookie and will not be retained between sessions.</param>
        /// <param name="sameSite">The Same Site policy to apply to this cookie.  Can be <c>unspecified</c>, <c>no_restriction</c>, <c>lax</c> or <c>strict</c>.  Default
        /// is <c>lax</c>.</param>
        [<Erase; ParamObject(0)>]
        member inline _.set
            (
                url: string,
                ?name: string,
                ?value: string,
                ?domain: string,
                ?path: string,
                ?secure: bool,
                ?httpOnly: bool,
                ?expirationDate: double,
                ?sameSite: Enums.Cookies.Set.Details.SameSite
            ) : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// A promise which resolves when the cookie has been removed<br/><br/>Removes the cookies matching <c>url</c> and <c>name</c>
        /// </summary>
        /// <param name="url">The URL associated with the cookie.</param>
        /// <param name="name">The name of cookie to remove.</param>
        [<Erase>]
        member inline _.remove(url: string, name: string) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// A promise which resolves when the cookie store has been flushed<br/><br/>Writes any unwritten cookies data to disk<br/><br/>Cookies written by any
        /// method will not be written to disk immediately, but will be written every 30 seconds or 512 operations<br/><br/>Calling this method
        /// can cause the cookie to be written to disk immediately.
        /// </summary>
        [<Erase>]
        member inline _.flushStore() : Promise<unit> = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Collect tracing data from Chromium to find performance bottlenecks and slow operations.<br/><br/>Process: Main<br/><br/>This module does not include a web
    /// interface. To view recorded traces, use trace viewer, available at <c>chrome://tracing</c> in Chrome.<br/><br/>&gt; [!NOTE] You should not use this module
    /// until the <c>ready</c> event of the app module is emitted.
    /// </summary>
    [<Import("contentTracing", "electron")>]
    type ContentTracing =
        /// <summary>
        /// resolves with an array of category groups once all child processes have acknowledged the <c>getCategories</c> request<br/><br/>Get a set of category
        /// groups. The category groups can change as new code paths are reached. See also the list of built-in tracing categories.<br/><br/>&gt;
        /// **NOTE:** Electron adds a non-default tracing category called <c>"electron"</c>. This category can be used to capture Electron-specific tracing events.
        /// </summary>
        [<Erase>]
        static member mutable getCategories() : Promise<string[]> = Unchecked.defaultof<_>

        /// <summary>
        /// resolved once all child processes have acknowledged the <c>startRecording</c> request.<br/><br/>Start recording on all processes.<br/><br/>Recording begins immediately locally and asynchronously on
        /// child processes as soon as they receive the EnableRecording request.<br/><br/>If a recording is already running, the promise will be immediately
        /// resolved, as only one trace operation can be in progress at a time.
        /// </summary>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable startRecording(options: U2<TraceConfig, TraceCategoriesAndOptions>) : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// resolves with a path to a file that contains the traced data once all child processes have acknowledged the <c>stopRecording</c>
        /// request<br/><br/>Stop recording on all processes.<br/><br/>Child processes typically cache trace data and only rarely flush and send trace data back to
        /// the main process. This helps to minimize the runtime overhead of tracing since sending trace data over IPC can be
        /// an expensive operation. So, to end tracing, Chromium asynchronously asks all child processes to flush any pending trace data.<br/><br/>Trace data
        /// will be written into <c>resultFilePath</c>. If <c>resultFilePath</c> is empty or not provided, trace data will be written to a temporary
        /// file, and the path will be returned in the promise.
        /// </summary>
        /// <param name="resultFilePath"></param>
        [<Erase>]
        static member mutable stopRecording(?resultFilePath: string) : Promise<string> = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with an object containing the <c>value</c> and <c>percentage</c> of trace buffer maximum usage<br/><br/>* <c>value</c> number<br/>* <c>percentage</c> number<br/><br/>Get the maximum
        /// usage across processes of trace buffer as a percentage of the full state.
        /// </summary>
        [<Erase>]
        static member mutable getTraceBufferUsage() : Promise<ContentTracing.GetTraceBufferUsage> =
            Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ❌</para>
    /// </summary>
    [<Import("CommandLine", "electron")>]
    type CommandLine =
        /// <summary>
        /// Append a switch (with optional <c>value</c>) to Chromium's command line.<br/><br/>&gt; [!NOTE] This will not affect <c>process.argv</c>. The intended usage of
        /// this function is to control Chromium's behavior.
        /// </summary>
        /// <param name="switch">A command-line switch, without the leading <c>--</c>.</param>
        /// <param name="value">A value for the given switch.</param>
        [<Erase>]
        member inline _.appendSwitch(switch: string, ?value: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Append an argument to Chromium's command line. The argument will be quoted correctly. Switches will precede arguments regardless of appending
        /// order.<br/><br/>If you're appending an argument like <c>--switch=value</c>, consider using <c>appendSwitch('switch', 'value')</c> instead.<br/><br/>&gt; [!NOTE] This will not affect <c>process.argv</c>. The intended
        /// usage of this function is to control Chromium's behavior.
        /// </summary>
        /// <param name="value">The argument to append to the command line.</param>
        [<Erase>]
        member inline _.appendArgument(value: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the command-line switch is present.
        /// </summary>
        /// <param name="switch">A command-line switch.</param>
        [<Erase>]
        member inline _.hasSwitch(switch: string) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// The command-line switch value.<br/><br/>This function is meant to obtain Chromium command line switches. It is not meant to be used
        /// for application-specific command line arguments. For the latter, please use <c>process.argv</c>.<br/><br/>&gt; [!NOTE] When the switch is not present or has
        /// no value, it returns empty string.
        /// </summary>
        /// <param name="switch">A command-line switch.</param>
        [<Erase>]
        member inline _.getSwitchValue(switch: string) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Removes the specified switch from Chromium's command line.<br/><br/>&gt; [!NOTE] This will not affect <c>process.argv</c>. The intended usage of this function
        /// is to control Chromium's behavior.
        /// </summary>
        /// <param name="switch">A command-line switch.</param>
        [<Erase>]
        member inline _.removeSwitch(switch: string) : unit = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ✔ | Utility ❌ | Exported ✔</para>
    /// &gt; Perform copy and paste operations on the system clipboard.<br/><br/>Process: Main, Renderer (non-sandboxed only)<br/><br/>&gt; [!IMPORTANT] If you want to call
    /// this API from a renderer process with context isolation enabled, place the API call in your preload script and expose
    /// it using the <c>contextBridge</c> API.<br/><br/>On Linux, there is also a <c>selection</c> clipboard. To manipulate it you need to pass <c>selection</c>
    /// to each method:
    /// </summary>
    [<Import("clipboard", "electron")>]
    type Clipboard =
        /// <summary>
        /// The content in the clipboard as plain text.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable readText(?``type``: Enums.Clipboard.ReadText.Type) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Writes the <c>text</c> into the clipboard as plain text.
        /// </summary>
        /// <param name="text"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable writeText(text: string, ?``type``: Enums.Clipboard.WriteText.Type) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The content in the clipboard as markup.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable readHTML(?``type``: Enums.Clipboard.ReadHTML.Type) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Writes <c>markup</c> to the clipboard.
        /// </summary>
        /// <param name="markup"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable writeHTML(markup: string, ?``type``: Enums.Clipboard.WriteHTML.Type) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The image content in the clipboard.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable readImage(?``type``: Enums.Clipboard.ReadImage.Type) : NativeImage =
            Unchecked.defaultof<_>

        /// <summary>
        /// Writes <c>image</c> to the clipboard.
        /// </summary>
        /// <param name="image"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable writeImage(image: NativeImage, ?``type``: Enums.Clipboard.WriteImage.Type) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The content in the clipboard as RTF.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable readRTF(?``type``: Enums.Clipboard.ReadRTF.Type) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Writes the <c>text</c> into the clipboard in RTF.
        /// </summary>
        /// <param name="text"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable writeRTF(text: string, ?``type``: Enums.Clipboard.WriteRTF.Type) : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// * <c>title</c> string<br/>* <c>url</c> string<br/><br/>Returns an Object containing <c>title</c> and <c>url</c> keys representing the bookmark in the clipboard. The <c>title</c>
        /// and <c>url</c> values will be empty strings when the bookmark is unavailable.  The <c>title</c> value will always be empty
        /// on Windows.
        /// </summary>
        [<Erase>]
        static member mutable readBookmark() : Clipboard.ReadBookmark = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Writes the <c>title</c> (macOS only) and <c>url</c> into the clipboard as a bookmark.<br/><br/>&gt; [!NOTE] Most apps on Windows don't support
        /// pasting bookmarks into them so you can use <c>clipboard.write</c> to write both a bookmark and fallback text to the clipboard.
        /// </summary>
        /// <param name="title">Unused on Windows</param>
        /// <param name="url"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable writeBookmark
            (title: string, url: string, ?``type``: Enums.Clipboard.WriteBookmark.Type)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The text on the find pasteboard, which is the pasteboard that holds information about the current state of the active
        /// application’s find panel.<br/><br/>This method uses synchronous IPC when called from the renderer process. The cached value is reread from the
        /// find pasteboard whenever the application is activated.
        /// </summary>
        [<Erase>]
        static member mutable readFindText() : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Writes the <c>text</c> into the find pasteboard (the pasteboard that holds information about the current state of the active application’s
        /// find panel) as plain text. This method uses synchronous IPC when called from the renderer process.
        /// </summary>
        /// <param name="text"></param>
        [<Erase>]
        static member mutable writeFindText(text: string) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Clears the clipboard content.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable clear(?``type``: Enums.Clipboard.Clear.Type) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// An array of supported formats for the clipboard <c>type</c>.
        /// </summary>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable availableFormats(?``type``: Enums.Clipboard.AvailableFormats.Type) : string[] =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the clipboard supports the specified <c>format</c>.
        /// </summary>
        /// <param name="format"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase; Experimental("Experimental according to Electron")>]
        static member mutable has(format: string, ?``type``: Enums.Clipboard.Has.Type) : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Reads <c>format</c> type from the clipboard.<br/><br/><c>format</c> should contain valid ASCII characters and have <c>/</c> separator. <c>a/c</c>, <c>a/bc</c> are valid formats
        /// while <c>/abc</c>, <c>abc/</c>, <c>a/</c>, <c>/a</c>, <c>a</c> are not valid.
        /// </summary>
        /// <param name="format"></param>
        [<Erase; Experimental("Experimental according to Electron")>]
        static member mutable read(format: string) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Reads <c>format</c> type from the clipboard.
        /// </summary>
        /// <param name="format"></param>
        [<Erase; Experimental("Experimental according to Electron")>]
        static member mutable readBuffer(format: string) : Buffer = Unchecked.defaultof<_>

        /// <summary>
        /// Writes the <c>buffer</c> into the clipboard as <c>format</c>.
        /// </summary>
        /// <param name="format"></param>
        /// <param name="buffer"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase; Experimental("Experimental according to Electron")>]
        static member mutable writeBuffer
            (format: string, buffer: Buffer, ?``type``: Enums.Clipboard.WriteBuffer.Type)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Writes <c>data</c> to the clipboard.
        /// </summary>
        /// <param name="data"></param>
        /// <param name="``type``">Can be <c>selection</c> or <c>clipboard</c>; default is 'clipboard'. <c>selection</c> is only available on Linux.</param>
        [<Erase>]
        static member mutable write(data: Clipboard.Write.Data, ?``type``: Enums.Clipboard.Write.Type) : unit =
            Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ✔ | Exported ❌</para>
    /// &gt; Make HTTP/HTTPS requests.<br/><br/>Process: Main, Utility<br/> _This class is not exported from the <c>'electron'</c> module. It is only available as
    /// a return value of other methods in the Electron API._<br/><br/><c>ClientRequest</c> implements the Writable Stream interface and is therefore an EventEmitter.
    /// </summary>
    [<Import("ClientRequest", "electron")>]
    type ClientRequest
        /// <param name="options">If <c>options</c> is a string, it is interpreted as the request URL. If it is an object, it is
        /// expected to fully specify an HTTP request via the following properties:</param>
        (options: U2<ClientRequest.Options, string>) =
        interface EventEmitter

        [<Emit("$0.on('response', $1)")>]
        member inline _.onResponse(handler: IncomingMessage -> unit) : unit = Unchecked.defaultof<_>

        [<Emit("$0.once('response', $1)")>]
        member inline _.onceResponse(handler: IncomingMessage -> unit) : unit = Unchecked.defaultof<_>

        [<Emit("$0.off('response', $1)")>]
        member inline _.offResponse(handler: IncomingMessage -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.on('login', $1)")>]
        member inline _.onLogin(handler: ClientRequest.Login.AuthInfo -> ClientRequest.Login.Callback -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.on('login', $1)")>]
        member inline _.onLogin(handler: Fable.Electron.EventInterfaces.Root.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.once('login', $1)")>]
        member inline _.onceLogin
            (handler: ClientRequest.Login.AuthInfo -> ClientRequest.Login.Callback -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.once('login', $1)")>]
        member inline _.onceLogin(handler: Fable.Electron.EventInterfaces.Root.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.off('login', $1)")>]
        member inline _.offLogin(handler: ClientRequest.Login.AuthInfo -> ClientRequest.Login.Callback -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
        /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
        /// </summary>
        [<Emit("$0.off('login', $1)")>]
        member inline _.offLogin(handler: Fable.Electron.EventInterfaces.Root.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted just after the last chunk of the <c>request</c>'s data has been written into the <c>request</c> object.
        /// </summary>
        [<Emit("$0.on('finish', $1)")>]
        member inline _.onFinish(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted just after the last chunk of the <c>request</c>'s data has been written into the <c>request</c> object.
        /// </summary>
        [<Emit("$0.once('finish', $1)")>]
        member inline _.onceFinish(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted just after the last chunk of the <c>request</c>'s data has been written into the <c>request</c> object.
        /// </summary>
        [<Emit("$0.off('finish', $1)")>]
        member inline _.offFinish(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>request</c> is aborted. The <c>abort</c> event will not be fired if the <c>request</c> is already closed.
        /// </summary>
        [<Emit("$0.on('abort', $1)")>]
        member inline _.onAbort(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>request</c> is aborted. The <c>abort</c> event will not be fired if the <c>request</c> is already closed.
        /// </summary>
        [<Emit("$0.once('abort', $1)")>]
        member inline _.onceAbort(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>request</c> is aborted. The <c>abort</c> event will not be fired if the <c>request</c> is already closed.
        /// </summary>
        [<Emit("$0.off('abort', $1)")>]
        member inline _.offAbort(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>net</c> module fails to issue a network request. Typically when the <c>request</c> object emits an <c>error</c> event,
        /// a <c>close</c> event will subsequently follow and no response object will be provided.
        /// </summary>
        [<Emit("$0.on('error', $1)")>]
        member inline _.onError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>net</c> module fails to issue a network request. Typically when the <c>request</c> object emits an <c>error</c> event,
        /// a <c>close</c> event will subsequently follow and no response object will be provided.
        /// </summary>
        [<Emit("$0.once('error', $1)")>]
        member inline _.onceError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the <c>net</c> module fails to issue a network request. Typically when the <c>request</c> object emits an <c>error</c> event,
        /// a <c>close</c> event will subsequently follow and no response object will be provided.
        /// </summary>
        [<Emit("$0.off('error', $1)")>]
        member inline _.offError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted as the last event in the HTTP request-response transaction. The <c>close</c> event indicates that no more events will be
        /// emitted on either the <c>request</c> or <c>response</c> objects.
        /// </summary>
        [<Emit("$0.on('close', $1)")>]
        member inline _.onClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted as the last event in the HTTP request-response transaction. The <c>close</c> event indicates that no more events will be
        /// emitted on either the <c>request</c> or <c>response</c> objects.
        /// </summary>
        [<Emit("$0.once('close', $1)")>]
        member inline _.onceClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted as the last event in the HTTP request-response transaction. The <c>close</c> event indicates that no more events will be
        /// emitted on either the <c>request</c> or <c>response</c> objects.
        /// </summary>
        [<Emit("$0.off('close', $1)")>]
        member inline _.offClose(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.on('redirect', $1)")>]
        member inline _.onRedirect(handler: int -> string -> string -> Record<string, string[]> -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.on('redirect', $1)")>]
        member inline _.onRedirect(handler: Fable.Electron.EventInterfaces.Root.IOnRedirect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.once('redirect', $1)")>]
        member inline _.onceRedirect(handler: int -> string -> string -> Record<string, string[]> -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.once('redirect', $1)")>]
        member inline _.onceRedirect(handler: Fable.Electron.EventInterfaces.Root.IOnRedirect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.off('redirect', $1)")>]
        member inline _.offRedirect(handler: int -> string -> string -> Record<string, string[]> -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
        /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
        /// </summary>
        [<Emit("$0.off('redirect', $1)")>]
        member inline _.offRedirect(handler: Fable.Electron.EventInterfaces.Root.IOnRedirect -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Adds an extra HTTP header. The header name will be issued as-is without lowercasing. It can be called only before
        /// first write. Calling this method after the first write will throw an error. If the passed value is not a
        /// <c>string</c>, its <c>toString()</c> method will be called to obtain the final value.<br/><br/>Certain headers are restricted from being set by apps.
        /// These headers are listed below. More information on restricted headers can be found in Chromium's header utils.<br/><br/>* <c>Content-Length</c><br/>* <c>Host</c><br/>* <c>Trailer</c>
        /// or <c>Te</c><br/>* <c>Upgrade</c><br/>* <c>Cookie2</c><br/>* <c>Keep-Alive</c><br/>* <c>Transfer-Encoding</c><br/><br/>Additionally, setting the <c>Connection</c> header to the value <c>upgrade</c> is also disallowed.
        /// </summary>
        /// <param name="name">An extra HTTP header name.</param>
        /// <param name="value">An extra HTTP header value.</param>
        [<Erase>]
        member inline _.setHeader(name: string, value: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The value of a previously set extra header name.
        /// </summary>
        /// <param name="name">Specify an extra header name.</param>
        [<Erase>]
        member inline _.getHeader(name: string) : string = Unchecked.defaultof<_>

        /// <summary>
        /// Removes a previously set extra header name. This method can be called only before first write. Trying to call it
        /// after the first write will throw an error.
        /// </summary>
        /// <param name="name">Specify an extra header name.</param>
        [<Erase>]
        member inline _.removeHeader(name: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// <c>callback</c> is essentially a dummy function introduced in the purpose of keeping similarity with the Node.js API. It is called
        /// asynchronously in the next tick after <c>chunk</c> content have been delivered to the Chromium networking layer. Contrary to the Node.js
        /// implementation, it is not guaranteed that <c>chunk</c> content have been flushed on the wire before <c>callback</c> is called.<br/><br/>Adds a chunk
        /// of data to the request body. The first write operation may cause the request headers to be issued on the
        /// wire. After the first write operation, it is not allowed to add or remove a custom header.
        /// </summary>
        /// <param name="chunk">A chunk of the request body's data. If it is a string, it is converted into a Buffer using
        /// the specified encoding.</param>
        /// <param name="encoding">Used to convert string chunks into Buffer objects. Defaults to 'utf-8'.</param>
        /// <param name="callback">Called after the write operation ends.</param>
        [<Erase>]
        member inline _.write(chunk: U2<string, Buffer>, ?encoding: string, ?callback: unit -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Sends the last chunk of the request data. Subsequent write or end operations will not be allowed. The <c>finish</c> event
        /// is emitted just after the end operation.
        /// </summary>
        /// <param name="chunk"></param>
        /// <param name="encoding"></param>
        /// <param name="callback"></param>
        [<Erase; CompiledName("end")>]
        member inline _.``end``(?chunk: U2<string, Buffer>, ?encoding: string, ?callback: unit -> unit) : this =
            Unchecked.defaultof<_>

        /// <summary>
        /// Cancels an ongoing HTTP transaction. If the request has already emitted the <c>close</c> event, the abort operation will have no
        /// effect. Otherwise an ongoing event will emit <c>abort</c> and <c>close</c> events. Additionally, if there is an ongoing response object,it will
        /// emit the <c>aborted</c> event.
        /// </summary>
        [<Erase>]
        member inline _.abort() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Continues any pending redirection. Can only be called during a <c>'redirect'</c> event.
        /// </summary>
        [<Erase>]
        member inline _.followRedirect() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// * <c>active</c> boolean - Whether the request is currently active. If this is false no other properties will be set<br/>*
        /// <c>started</c> boolean - Whether the upload has started. If this is false both <c>current</c> and <c>total</c> will be set to
        /// 0.<br/>* <c>current</c> Integer - The number of bytes that have been uploaded so far<br/>* <c>total</c> Integer - The number of
        /// bytes that will be uploaded this request<br/><br/>You can use this method in conjunction with <c>POST</c> requests to get the progress
        /// of a file upload or other data transfer.
        /// </summary>
        [<Erase>]
        member inline _.getUploadProgress() : ClientRequest.GetUploadProgress = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>boolean</c> specifying whether the request will use HTTP chunked transfer encoding or not. Defaults to false. The property is
        /// readable and writable, however it can be set only before the first write operation as the HTTP headers are not
        /// yet put on the wire. Trying to set the <c>chunkedEncoding</c> property after the first write will throw an error.<br/><br/>Using chunked
        /// encoding is strongly recommended if you need to send a large request body as data will be streamed in small
        /// chunks instead of being internally buffered inside Electron process memory.
        /// </summary>
        [<Erase>]
        member val chunkedEncoding: bool = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Create and control browser windows.<br/><br/>Process: Main<br/><br/>This module cannot be used until the <c>ready</c> event of the <c>app</c> module is
    /// emitted.<br/><br/>### Window customization<br/><br/>The <c>BrowserWindow</c> class exposes various ways to modify the look and behavior of your app's windows. For more
    /// details, see the Window Customization tutorial.<br/><br/>### Showing the window gracefully<br/><br/>When loading a page in the window directly, users may see
    /// the page load incrementally, which is not a good experience for a native app. To make the window display without
    /// a visual flash, there are two solutions for different situations.<br/><br/>### Using the <c>ready-to-show</c> event<br/><br/>While loading the page, the <c>ready-to-show</c> event
    /// will be emitted when the renderer process has rendered the page for the first time if the window has not
    /// been shown yet. Showing the window after this event will have no visual flash:<br/><br/><code><br/>const { BrowserWindow } = require('electron')<br/><br/>const win
    /// = new BrowserWindow({ show: false })<br/>win.once('ready-to-show', () =&gt; {<br/>  win.show()<br/>})<br/></code><br/><br/>This event is usually emitted after the <c>did-finish-load</c> event, but
    /// for pages with many remote resources, it may be emitted before the <c>did-finish-load</c> event.<br/><br/>Please note that using this event implies
    /// that the renderer will be considered "visible" and paint even though <c>show</c> is false.  This event will never fire
    /// if you use <c>paintWhenInitiallyHidden: false</c><br/><br/>### Setting the <c>backgroundColor</c> property<br/><br/>For a complex app, the <c>ready-to-show</c> event could be emitted too late,
    /// making the app feel slow. In this case, it is recommended to show the window immediately, and use a <c>backgroundColor</c>
    /// close to your app's background:<br/><br/><code><br/>const { BrowserWindow } = require('electron')<br/><br/>const win = new BrowserWindow({ backgroundColor: '#2e2c29' })<br/>win.loadURL('https://github.com')<br/></code><br/><br/>Note that even for
    /// apps that use <c>ready-to-show</c> event, it is still recommended to set <c>backgroundColor</c> to make the app feel more native.<br/><br/>Some examples
    /// of valid <c>backgroundColor</c> values include:<br/><br/><code><br/>const win = new BrowserWindow()<br/>win.setBackgroundColor('hsl(230, 100%, 50%)')<br/>win.setBackgroundColor('rgb(255, 145, 145)')<br/>win.setBackgroundColor('#ff00a3')<br/>win.setBackgroundColor('blueviolet')<br/></code><br/><br/>For more information about these color types see
    /// valid options in win.setBackgroundColor.<br/><br/>### Parent and child windows<br/><br/>By using <c>parent</c> option, you can create child windows:<br/><br/><code><br/>const { BrowserWindow } =
    /// require('electron')<br/><br/>const top = new BrowserWindow()<br/>const child = new BrowserWindow({ parent: top })<br/>child.show()<br/>top.show()<br/></code><br/><br/>The <c>child</c> window will always show on top of
    /// the <c>top</c> window.<br/><br/>### Modal windows<br/><br/>A modal window is a child window that disables parent window. To create a modal window,
    /// you have to set both the <c>parent</c> and <c>modal</c> options:<br/><br/><code><br/>const { BrowserWindow } = require('electron')<br/><br/>const top = new BrowserWindow()<br/>const child
    /// = new BrowserWindow({ parent: top, modal: true, show: false })<br/>child.loadURL('https://github.com')<br/>child.once('ready-to-show', () =&gt; {<br/>  child.show()<br/>})<br/></code><br/><br/>### Page visibility<br/><br/>The Page Visibility API
    /// works as follows:<br/><br/>* On all platforms, the visibility state tracks whether the window is hidden/minimized or not.<br/>* Additionally, on macOS,
    /// the visibility state also tracks the window occlusion state. If the window is occluded (i.e. fully covered) by another window,
    /// the visibility state will be <c>hidden</c>. On other platforms, the visibility state will be <c>hidden</c> only when the window is
    /// minimized or explicitly hidden with <c>win.hide()</c>.<br/>* If a <c>BrowserWindow</c> is created with <c>show: false</c>, the initial visibility state will be
    /// <c>visible</c> despite the window actually being hidden.<br/>* If <c>backgroundThrottling</c> is disabled, the visibility state will remain <c>visible</c> even if the
    /// window is minimized, occluded, or hidden.<br/><br/>It is recommended that you pause expensive operations when the visibility state is <c>hidden</c> in
    /// order to minimize power consumption.<br/><br/>### Platform notices<br/><br/>* On macOS modal windows will be displayed as sheets attached to the parent
    /// window.<br/>* On macOS the child windows will keep the relative position to parent window when parent window moves, while on
    /// Windows and Linux child windows will not move.<br/>* On Linux the type of modal windows will be changed to <c>dialog</c>.<br/>*
    /// On Linux many desktop environments do not support hiding a modal window.<br/><br/>### Class: BrowserWindow extends <c>BaseWindow</c><br/><br/>&gt; Create and control browser
    /// windows.<br/><br/>Process: Main<br/><br/><c>BrowserWindow</c> is an EventEmitter.<br/><br/>It creates a new <c>BrowserWindow</c> with native properties as set by the <c>options</c>.<br/><br/>&gt; [!WARNING] Electron's built-in
    /// classes cannot be subclassed in user code. For more information, see the FAQ.
    /// </summary>
    [<Import("BrowserWindow", "electron")>]
    type BrowserWindow
        /// <param name="options"></param>
        (?options: BrowserWindowConstructorOptions) =
        interface EventEmitter

        /// <summary>
        /// Emitted when the document changed its title, calling <c>event.preventDefault()</c> will prevent the native window's title from changing. <c>explicitSet</c> is false
        /// when title is synthesized from file URL.
        /// </summary>
        [<Emit("$0.on('page-title-updated', $1)")>]
        member inline _.onPageTitleUpdated(handler: Event -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the document changed its title, calling <c>event.preventDefault()</c> will prevent the native window's title from changing. <c>explicitSet</c> is false
        /// when title is synthesized from file URL.
        /// </summary>
        [<Emit("$0.on('page-title-updated', $1)")>]
        member inline _.onPageTitleUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageTitleUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the document changed its title, calling <c>event.preventDefault()</c> will prevent the native window's title from changing. <c>explicitSet</c> is false
        /// when title is synthesized from file URL.
        /// </summary>
        [<Emit("$0.once('page-title-updated', $1)")>]
        member inline _.oncePageTitleUpdated(handler: Event -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the document changed its title, calling <c>event.preventDefault()</c> will prevent the native window's title from changing. <c>explicitSet</c> is false
        /// when title is synthesized from file URL.
        /// </summary>
        [<Emit("$0.once('page-title-updated', $1)")>]
        member inline _.oncePageTitleUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageTitleUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the document changed its title, calling <c>event.preventDefault()</c> will prevent the native window's title from changing. <c>explicitSet</c> is false
        /// when title is synthesized from file URL.
        /// </summary>
        [<Emit("$0.off('page-title-updated', $1)")>]
        member inline _.offPageTitleUpdated(handler: Event -> string -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the document changed its title, calling <c>event.preventDefault()</c> will prevent the native window's title from changing. <c>explicitSet</c> is false
        /// when title is synthesized from file URL.
        /// </summary>
        [<Emit("$0.off('page-title-updated', $1)")>]
        member inline _.offPageTitleUpdated
            (handler: Fable.Electron.EventInterfaces.Root.IOnPageTitleUpdated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is going to be closed. It's emitted before the <c>beforeunload</c> and <c>unload</c> event of the DOM.
        /// Calling <c>event.preventDefault()</c> will cancel the close.<br/><br/>Usually you would want to use the <c>beforeunload</c> handler to decide whether the window should
        /// be closed, which will also be called when the window is reloaded. In Electron, returning any value other than <c>undefined</c>
        /// would cancel the close. For example:<br/><br/>&gt; [!NOTE] There is a subtle difference between the behaviors of <c>window.onbeforeunload = handler</c> and
        /// <c>window.addEventListener('beforeunload', handler)</c>. It is recommended to always set the <c>event.returnValue</c> explicitly, instead of only returning a value, as the former
        /// works more consistently within Electron.
        /// </summary>
        [<Emit("$0.on('close', $1)")>]
        member inline _.onClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is going to be closed. It's emitted before the <c>beforeunload</c> and <c>unload</c> event of the DOM.
        /// Calling <c>event.preventDefault()</c> will cancel the close.<br/><br/>Usually you would want to use the <c>beforeunload</c> handler to decide whether the window should
        /// be closed, which will also be called when the window is reloaded. In Electron, returning any value other than <c>undefined</c>
        /// would cancel the close. For example:<br/><br/>&gt; [!NOTE] There is a subtle difference between the behaviors of <c>window.onbeforeunload = handler</c> and
        /// <c>window.addEventListener('beforeunload', handler)</c>. It is recommended to always set the <c>event.returnValue</c> explicitly, instead of only returning a value, as the former
        /// works more consistently within Electron.
        /// </summary>
        [<Emit("$0.once('close', $1)")>]
        member inline _.onceClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is going to be closed. It's emitted before the <c>beforeunload</c> and <c>unload</c> event of the DOM.
        /// Calling <c>event.preventDefault()</c> will cancel the close.<br/><br/>Usually you would want to use the <c>beforeunload</c> handler to decide whether the window should
        /// be closed, which will also be called when the window is reloaded. In Electron, returning any value other than <c>undefined</c>
        /// would cancel the close. For example:<br/><br/>&gt; [!NOTE] There is a subtle difference between the behaviors of <c>window.onbeforeunload = handler</c> and
        /// <c>window.addEventListener('beforeunload', handler)</c>. It is recommended to always set the <c>event.returnValue</c> explicitly, instead of only returning a value, as the former
        /// works more consistently within Electron.
        /// </summary>
        [<Emit("$0.off('close', $1)")>]
        member inline _.offClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is closed. After you have received this event you should remove the reference to the window
        /// and avoid using it any more.
        /// </summary>
        [<Emit("$0.on('closed', $1)")>]
        member inline _.onClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is closed. After you have received this event you should remove the reference to the window
        /// and avoid using it any more.
        /// </summary>
        [<Emit("$0.once('closed', $1)")>]
        member inline _.onceClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is closed. After you have received this event you should remove the reference to the window
        /// and avoid using it any more.
        /// </summary>
        [<Emit("$0.off('closed', $1)")>]
        member inline _.offClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Calling <c>event.preventDefault()</c> can
        /// delay the system shutdown, though it’s generally best to respect the user’s choice to end the session. However, you may
        /// choose to use it if ending the session puts the user at risk of losing data.
        /// </summary>
        [<Emit("$0.on('query-session-end', $1)")>]
        member inline _.onQuerySessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Calling <c>event.preventDefault()</c> can
        /// delay the system shutdown, though it’s generally best to respect the user’s choice to end the session. However, you may
        /// choose to use it if ending the session puts the user at risk of losing data.
        /// </summary>
        [<Emit("$0.once('query-session-end', $1)")>]
        member inline _.onceQuerySessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Calling <c>event.preventDefault()</c> can
        /// delay the system shutdown, though it’s generally best to respect the user’s choice to end the session. However, you may
        /// choose to use it if ending the session puts the user at risk of losing data.
        /// </summary>
        [<Emit("$0.off('query-session-end', $1)")>]
        member inline _.offQuerySessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event
        /// fires, there is no way to prevent the session from ending.
        /// </summary>
        [<Emit("$0.on('session-end', $1)")>]
        member inline _.onSessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event
        /// fires, there is no way to prevent the session from ending.
        /// </summary>
        [<Emit("$0.once('session-end', $1)")>]
        member inline _.onceSessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event
        /// fires, there is no way to prevent the session from ending.
        /// </summary>
        [<Emit("$0.off('session-end', $1)")>]
        member inline _.offSessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when the web page becomes unresponsive.
        /// </summary>
        [<Emit("$0.on('unresponsive', $1)")>]
        member inline _.onUnresponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the web page becomes unresponsive.
        /// </summary>
        [<Emit("$0.once('unresponsive', $1)")>]
        member inline _.onceUnresponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the web page becomes unresponsive.
        /// </summary>
        [<Emit("$0.off('unresponsive', $1)")>]
        member inline _.offUnresponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the unresponsive web page becomes responsive again.
        /// </summary>
        [<Emit("$0.on('responsive', $1)")>]
        member inline _.onResponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the unresponsive web page becomes responsive again.
        /// </summary>
        [<Emit("$0.once('responsive', $1)")>]
        member inline _.onceResponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the unresponsive web page becomes responsive again.
        /// </summary>
        [<Emit("$0.off('responsive', $1)")>]
        member inline _.offResponsive(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window loses focus.
        /// </summary>
        [<Emit("$0.on('blur', $1)")>]
        member inline _.onBlur(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window loses focus.
        /// </summary>
        [<Emit("$0.once('blur', $1)")>]
        member inline _.onceBlur(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window loses focus.
        /// </summary>
        [<Emit("$0.off('blur', $1)")>]
        member inline _.offBlur(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window gains focus.
        /// </summary>
        [<Emit("$0.on('focus', $1)")>]
        member inline _.onFocus(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window gains focus.
        /// </summary>
        [<Emit("$0.once('focus', $1)")>]
        member inline _.onceFocus(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window gains focus.
        /// </summary>
        [<Emit("$0.off('focus', $1)")>]
        member inline _.offFocus(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is shown.
        /// </summary>
        [<Emit("$0.on('show', $1)")>]
        member inline _.onShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is shown.
        /// </summary>
        [<Emit("$0.once('show', $1)")>]
        member inline _.onceShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is shown.
        /// </summary>
        [<Emit("$0.off('show', $1)")>]
        member inline _.offShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is hidden.
        /// </summary>
        [<Emit("$0.on('hide', $1)")>]
        member inline _.onHide(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is hidden.
        /// </summary>
        [<Emit("$0.once('hide', $1)")>]
        member inline _.onceHide(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is hidden.
        /// </summary>
        [<Emit("$0.off('hide', $1)")>]
        member inline _.offHide(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the web page has been rendered (while not being shown) and window can be displayed without a visual
        /// flash.<br/><br/>Please note that using this event implies that the renderer will be considered "visible" and paint even though <c>show</c> is
        /// false.  This event will never fire if you use <c>paintWhenInitiallyHidden: false</c>
        /// </summary>
        [<Emit("$0.on('ready-to-show', $1)")>]
        member inline _.onReadyToShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the web page has been rendered (while not being shown) and window can be displayed without a visual
        /// flash.<br/><br/>Please note that using this event implies that the renderer will be considered "visible" and paint even though <c>show</c> is
        /// false.  This event will never fire if you use <c>paintWhenInitiallyHidden: false</c>
        /// </summary>
        [<Emit("$0.once('ready-to-show', $1)")>]
        member inline _.onceReadyToShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the web page has been rendered (while not being shown) and window can be displayed without a visual
        /// flash.<br/><br/>Please note that using this event implies that the renderer will be considered "visible" and paint even though <c>show</c> is
        /// false.  This event will never fire if you use <c>paintWhenInitiallyHidden: false</c>
        /// </summary>
        [<Emit("$0.off('ready-to-show', $1)")>]
        member inline _.offReadyToShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when window is maximized.
        /// </summary>
        [<Emit("$0.on('maximize', $1)")>]
        member inline _.onMaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when window is maximized.
        /// </summary>
        [<Emit("$0.once('maximize', $1)")>]
        member inline _.onceMaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when window is maximized.
        /// </summary>
        [<Emit("$0.off('maximize', $1)")>]
        member inline _.offMaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window exits from a maximized state.
        /// </summary>
        [<Emit("$0.on('unmaximize', $1)")>]
        member inline _.onUnmaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window exits from a maximized state.
        /// </summary>
        [<Emit("$0.once('unmaximize', $1)")>]
        member inline _.onceUnmaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window exits from a maximized state.
        /// </summary>
        [<Emit("$0.off('unmaximize', $1)")>]
        member inline _.offUnmaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is minimized.
        /// </summary>
        [<Emit("$0.on('minimize', $1)")>]
        member inline _.onMinimize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is minimized.
        /// </summary>
        [<Emit("$0.once('minimize', $1)")>]
        member inline _.onceMinimize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is minimized.
        /// </summary>
        [<Emit("$0.off('minimize', $1)")>]
        member inline _.offMinimize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is restored from a minimized state.
        /// </summary>
        [<Emit("$0.on('restore', $1)")>]
        member inline _.onRestore(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is restored from a minimized state.
        /// </summary>
        [<Emit("$0.once('restore', $1)")>]
        member inline _.onceRestore(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is restored from a minimized state.
        /// </summary>
        [<Emit("$0.off('restore', $1)")>]
        member inline _.offRestore(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.on('will-resize', $1)")>]
        member inline _.onWillResize(handler: Event -> Rectangle -> BrowserWindow.WillResize.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.on('will-resize', $1)")>]
        member inline _.onWillResize(handler: Fable.Electron.EventInterfaces.Root.IOnWillResize -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.once('will-resize', $1)")>]
        member inline _.onceWillResize(handler: Event -> Rectangle -> BrowserWindow.WillResize.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.once('will-resize', $1)")>]
        member inline _.onceWillResize(handler: Fable.Electron.EventInterfaces.Root.IOnWillResize -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.off('will-resize', $1)")>]
        member inline _.offWillResize(handler: Event -> Rectangle -> BrowserWindow.WillResize.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.off('will-resize', $1)")>]
        member inline _.offWillResize(handler: Fable.Electron.EventInterfaces.Root.IOnWillResize -> unit) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted after the window has been resized.
        /// </summary>
        [<Emit("$0.on('resize', $1)")>]
        member inline _.onResize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the window has been resized.
        /// </summary>
        [<Emit("$0.once('resize', $1)")>]
        member inline _.onceResize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the window has been resized.
        /// </summary>
        [<Emit("$0.off('resize', $1)")>]
        member inline _.offResize(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window has finished being resized.<br/><br/>This is usually emitted when the window has been resized manually. On
        /// macOS, resizing the window with <c>setBounds</c>/<c>setSize</c> and setting the <c>animate</c> parameter to <c>true</c> will also emit this event once resizing
        /// has finished.
        /// </summary>
        [<Emit("$0.on('resized', $1)")>]
        member inline _.onResized(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window has finished being resized.<br/><br/>This is usually emitted when the window has been resized manually. On
        /// macOS, resizing the window with <c>setBounds</c>/<c>setSize</c> and setting the <c>animate</c> parameter to <c>true</c> will also emit this event once resizing
        /// has finished.
        /// </summary>
        [<Emit("$0.once('resized', $1)")>]
        member inline _.onceResized(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window has finished being resized.<br/><br/>This is usually emitted when the window has been resized manually. On
        /// macOS, resizing the window with <c>setBounds</c>/<c>setSize</c> and setting the <c>animate</c> parameter to <c>true</c> will also emit this event once resizing
        /// has finished.
        /// </summary>
        [<Emit("$0.off('resized', $1)")>]
        member inline _.offResized(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.on('will-move', $1)")>]
        member inline _.onWillMove(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.on('will-move', $1)")>]
        member inline _.onWillMove(handler: Fable.Electron.EventInterfaces.Root.IOnWillMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.once('will-move', $1)")>]
        member inline _.onceWillMove(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.once('will-move', $1)")>]
        member inline _.onceWillMove(handler: Fable.Electron.EventInterfaces.Root.IOnWillMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.off('will-move', $1)")>]
        member inline _.offWillMove(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.off('will-move', $1)")>]
        member inline _.offWillMove(handler: Fable.Electron.EventInterfaces.Root.IOnWillMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when the window is being moved to a new position.
        /// </summary>
        [<Emit("$0.on('move', $1)")>]
        member inline _.onMove(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is being moved to a new position.
        /// </summary>
        [<Emit("$0.once('move', $1)")>]
        member inline _.onceMove(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is being moved to a new position.
        /// </summary>
        [<Emit("$0.off('move', $1)")>]
        member inline _.offMove(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window is moved to a new position.<br/><br/>&gt; [!NOTE] On macOS, this event is an alias of
        /// <c>move</c>.
        /// </summary>
        [<Emit("$0.on('moved', $1)")>]
        member inline _.onMoved(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window is moved to a new position.<br/><br/>&gt; [!NOTE] On macOS, this event is an alias of
        /// <c>move</c>.
        /// </summary>
        [<Emit("$0.once('moved', $1)")>]
        member inline _.onceMoved(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window is moved to a new position.<br/><br/>&gt; [!NOTE] On macOS, this event is an alias of
        /// <c>move</c>.
        /// </summary>
        [<Emit("$0.off('moved', $1)")>]
        member inline _.offMoved(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when the window enters a full-screen state.
        /// </summary>
        [<Emit("$0.on('enter-full-screen', $1)")>]
        member inline _.onEnterFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state.
        /// </summary>
        [<Emit("$0.once('enter-full-screen', $1)")>]
        member inline _.onceEnterFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state.
        /// </summary>
        [<Emit("$0.off('enter-full-screen', $1)")>]
        member inline _.offEnterFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state.
        /// </summary>
        [<Emit("$0.on('leave-full-screen', $1)")>]
        member inline _.onLeaveFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state.
        /// </summary>
        [<Emit("$0.once('leave-full-screen', $1)")>]
        member inline _.onceLeaveFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state.
        /// </summary>
        [<Emit("$0.off('leave-full-screen', $1)")>]
        member inline _.offLeaveFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.on('enter-html-full-screen', $1)")>]
        member inline _.onEnterHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.once('enter-html-full-screen', $1)")>]
        member inline _.onceEnterHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.off('enter-html-full-screen', $1)")>]
        member inline _.offEnterHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.on('leave-html-full-screen', $1)")>]
        member inline _.onLeaveHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.once('leave-html-full-screen', $1)")>]
        member inline _.onceLeaveHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state triggered by HTML API.
        /// </summary>
        [<Emit("$0.off('leave-html-full-screen', $1)")>]
        member inline _.offLeaveHtmlFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.on('always-on-top-changed', $1)")>]
        member inline _.onAlwaysOnTopChanged(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.on('always-on-top-changed', $1)")>]
        member inline _.onAlwaysOnTopChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnAlwaysOnTopChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.once('always-on-top-changed', $1)")>]
        member inline _.onceAlwaysOnTopChanged(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.once('always-on-top-changed', $1)")>]
        member inline _.onceAlwaysOnTopChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnAlwaysOnTopChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.off('always-on-top-changed', $1)")>]
        member inline _.offAlwaysOnTopChanged(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.off('always-on-top-changed', $1)")>]
        member inline _.offAlwaysOnTopChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnAlwaysOnTopChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.on('app-command', $1)")>]
        member inline _.onAppCommand(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.on('app-command', $1)")>]
        member inline _.onAppCommand(handler: Fable.Electron.EventInterfaces.Root.IOnAppCommand -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.once('app-command', $1)")>]
        member inline _.onceAppCommand(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.once('app-command', $1)")>]
        member inline _.onceAppCommand(handler: Fable.Electron.EventInterfaces.Root.IOnAppCommand -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.off('app-command', $1)")>]
        member inline _.offAppCommand(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.off('app-command', $1)")>]
        member inline _.offAppCommand(handler: Fable.Electron.EventInterfaces.Root.IOnAppCommand -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.on('swipe', $1)")>]
        member inline _.onSwipe(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.on('swipe', $1)")>]
        member inline _.onSwipe(handler: Fable.Electron.EventInterfaces.Root.IOnSwipe -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.once('swipe', $1)")>]
        member inline _.onceSwipe(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.once('swipe', $1)")>]
        member inline _.onceSwipe(handler: Fable.Electron.EventInterfaces.Root.IOnSwipe -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.off('swipe', $1)")>]
        member inline _.offSwipe(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.off('swipe', $1)")>]
        member inline _.offSwipe(handler: Fable.Electron.EventInterfaces.Root.IOnSwipe -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.on('rotate-gesture', $1)")>]
        member inline _.onRotateGesture(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.on('rotate-gesture', $1)")>]
        member inline _.onRotateGesture(handler: Fable.Electron.EventInterfaces.Root.IOnRotateGesture -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.once('rotate-gesture', $1)")>]
        member inline _.onceRotateGesture(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.once('rotate-gesture', $1)")>]
        member inline _.onceRotateGesture
            (handler: Fable.Electron.EventInterfaces.Root.IOnRotateGesture -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.off('rotate-gesture', $1)")>]
        member inline _.offRotateGesture(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.off('rotate-gesture', $1)")>]
        member inline _.offRotateGesture(handler: Fable.Electron.EventInterfaces.Root.IOnRotateGesture -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window opens a sheet.
        /// </summary>
        [<Emit("$0.on('sheet-begin', $1)")>]
        member inline _.onSheetBegin(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window opens a sheet.
        /// </summary>
        [<Emit("$0.once('sheet-begin', $1)")>]
        member inline _.onceSheetBegin(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window opens a sheet.
        /// </summary>
        [<Emit("$0.off('sheet-begin', $1)")>]
        member inline _.offSheetBegin(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window has closed a sheet.
        /// </summary>
        [<Emit("$0.on('sheet-end', $1)")>]
        member inline _.onSheetEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window has closed a sheet.
        /// </summary>
        [<Emit("$0.once('sheet-end', $1)")>]
        member inline _.onceSheetEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window has closed a sheet.
        /// </summary>
        [<Emit("$0.off('sheet-end', $1)")>]
        member inline _.offSheetEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the native new tab button is clicked.
        /// </summary>
        [<Emit("$0.on('new-window-for-tab', $1)")>]
        member inline _.onNewWindowForTab(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the native new tab button is clicked.
        /// </summary>
        [<Emit("$0.once('new-window-for-tab', $1)")>]
        member inline _.onceNewWindowForTab(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the native new tab button is clicked.
        /// </summary>
        [<Emit("$0.off('new-window-for-tab', $1)")>]
        member inline _.offNewWindowForTab(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.on('system-context-menu', $1)")>]
        member inline _.onSystemContextMenu(handler: Event -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.on('system-context-menu', $1)")>]
        member inline _.onSystemContextMenu
            (handler: Fable.Electron.EventInterfaces.Root.IOnSystemContextMenu -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.once('system-context-menu', $1)")>]
        member inline _.onceSystemContextMenu(handler: Event -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.once('system-context-menu', $1)")>]
        member inline _.onceSystemContextMenu
            (handler: Fable.Electron.EventInterfaces.Root.IOnSystemContextMenu -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.off('system-context-menu', $1)")>]
        member inline _.offSystemContextMenu(handler: Event -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.off('system-context-menu', $1)")>]
        member inline _.offSystemContextMenu
            (handler: Fable.Electron.EventInterfaces.Root.IOnSystemContextMenu -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when the window is going to be closed. It's emitted before the <c>beforeunload</c> and <c>unload</c> event of the DOM.
        /// Calling <c>event.preventDefault()</c> will cancel the close.<br/><br/>Usually you would want to use the <c>beforeunload</c> handler to decide whether the window should
        /// be closed, which will also be called when the window is reloaded. In Electron, returning any value other than <c>undefined</c>
        /// would cancel the close. For example:<br/><br/>&gt; [!NOTE] There is a subtle difference between the behaviors of <c>window.onbeforeunload = handler</c> and
        /// <c>window.addEventListener('beforeunload', handler)</c>. It is recommended to always set the <c>event.returnValue</c> explicitly, instead of only returning a value, as the former
        /// works more consistently within Electron.
        /// </summary>
        [<Emit("$0.on('close', $1)")>]
        member inline _.onClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is going to be closed. It's emitted before the <c>beforeunload</c> and <c>unload</c> event of the DOM.
        /// Calling <c>event.preventDefault()</c> will cancel the close.<br/><br/>Usually you would want to use the <c>beforeunload</c> handler to decide whether the window should
        /// be closed, which will also be called when the window is reloaded. In Electron, returning any value other than <c>undefined</c>
        /// would cancel the close. For example:<br/><br/>&gt; [!NOTE] There is a subtle difference between the behaviors of <c>window.onbeforeunload = handler</c> and
        /// <c>window.addEventListener('beforeunload', handler)</c>. It is recommended to always set the <c>event.returnValue</c> explicitly, instead of only returning a value, as the former
        /// works more consistently within Electron.
        /// </summary>
        [<Emit("$0.once('close', $1)")>]
        member inline _.onceClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is going to be closed. It's emitted before the <c>beforeunload</c> and <c>unload</c> event of the DOM.
        /// Calling <c>event.preventDefault()</c> will cancel the close.<br/><br/>Usually you would want to use the <c>beforeunload</c> handler to decide whether the window should
        /// be closed, which will also be called when the window is reloaded. In Electron, returning any value other than <c>undefined</c>
        /// would cancel the close. For example:<br/><br/>&gt; [!NOTE] There is a subtle difference between the behaviors of <c>window.onbeforeunload = handler</c> and
        /// <c>window.addEventListener('beforeunload', handler)</c>. It is recommended to always set the <c>event.returnValue</c> explicitly, instead of only returning a value, as the former
        /// works more consistently within Electron.
        /// </summary>
        [<Emit("$0.off('close', $1)")>]
        member inline _.offClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is closed. After you have received this event you should remove the reference to the window
        /// and avoid using it any more.
        /// </summary>
        [<Emit("$0.on('closed', $1)")>]
        member inline _.onClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is closed. After you have received this event you should remove the reference to the window
        /// and avoid using it any more.
        /// </summary>
        [<Emit("$0.once('closed', $1)")>]
        member inline _.onceClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is closed. After you have received this event you should remove the reference to the window
        /// and avoid using it any more.
        /// </summary>
        [<Emit("$0.off('closed', $1)")>]
        member inline _.offClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Calling <c>event.preventDefault()</c> can
        /// delay the system shutdown, though it’s generally best to respect the user’s choice to end the session. However, you may
        /// choose to use it if ending the session puts the user at risk of losing data.
        /// </summary>
        [<Emit("$0.on('query-session-end', $1)")>]
        member inline _.onQuerySessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Calling <c>event.preventDefault()</c> can
        /// delay the system shutdown, though it’s generally best to respect the user’s choice to end the session. However, you may
        /// choose to use it if ending the session puts the user at risk of losing data.
        /// </summary>
        [<Emit("$0.once('query-session-end', $1)")>]
        member inline _.onceQuerySessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Calling <c>event.preventDefault()</c> can
        /// delay the system shutdown, though it’s generally best to respect the user’s choice to end the session. However, you may
        /// choose to use it if ending the session puts the user at risk of losing data.
        /// </summary>
        [<Emit("$0.off('query-session-end', $1)")>]
        member inline _.offQuerySessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event
        /// fires, there is no way to prevent the session from ending.
        /// </summary>
        [<Emit("$0.on('session-end', $1)")>]
        member inline _.onSessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event
        /// fires, there is no way to prevent the session from ending.
        /// </summary>
        [<Emit("$0.once('session-end', $1)")>]
        member inline _.onceSessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event
        /// fires, there is no way to prevent the session from ending.
        /// </summary>
        [<Emit("$0.off('session-end', $1)")>]
        member inline _.offSessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when the window loses focus.
        /// </summary>
        [<Emit("$0.on('blur', $1)")>]
        member inline _.onBlur(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window loses focus.
        /// </summary>
        [<Emit("$0.once('blur', $1)")>]
        member inline _.onceBlur(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window loses focus.
        /// </summary>
        [<Emit("$0.off('blur', $1)")>]
        member inline _.offBlur(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window gains focus.
        /// </summary>
        [<Emit("$0.on('focus', $1)")>]
        member inline _.onFocus(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window gains focus.
        /// </summary>
        [<Emit("$0.once('focus', $1)")>]
        member inline _.onceFocus(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window gains focus.
        /// </summary>
        [<Emit("$0.off('focus', $1)")>]
        member inline _.offFocus(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is shown.
        /// </summary>
        [<Emit("$0.on('show', $1)")>]
        member inline _.onShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is shown.
        /// </summary>
        [<Emit("$0.once('show', $1)")>]
        member inline _.onceShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is shown.
        /// </summary>
        [<Emit("$0.off('show', $1)")>]
        member inline _.offShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is hidden.
        /// </summary>
        [<Emit("$0.on('hide', $1)")>]
        member inline _.onHide(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is hidden.
        /// </summary>
        [<Emit("$0.once('hide', $1)")>]
        member inline _.onceHide(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is hidden.
        /// </summary>
        [<Emit("$0.off('hide', $1)")>]
        member inline _.offHide(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when window is maximized.
        /// </summary>
        [<Emit("$0.on('maximize', $1)")>]
        member inline _.onMaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when window is maximized.
        /// </summary>
        [<Emit("$0.once('maximize', $1)")>]
        member inline _.onceMaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when window is maximized.
        /// </summary>
        [<Emit("$0.off('maximize', $1)")>]
        member inline _.offMaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window exits from a maximized state.
        /// </summary>
        [<Emit("$0.on('unmaximize', $1)")>]
        member inline _.onUnmaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window exits from a maximized state.
        /// </summary>
        [<Emit("$0.once('unmaximize', $1)")>]
        member inline _.onceUnmaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window exits from a maximized state.
        /// </summary>
        [<Emit("$0.off('unmaximize', $1)")>]
        member inline _.offUnmaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is minimized.
        /// </summary>
        [<Emit("$0.on('minimize', $1)")>]
        member inline _.onMinimize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is minimized.
        /// </summary>
        [<Emit("$0.once('minimize', $1)")>]
        member inline _.onceMinimize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is minimized.
        /// </summary>
        [<Emit("$0.off('minimize', $1)")>]
        member inline _.offMinimize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is restored from a minimized state.
        /// </summary>
        [<Emit("$0.on('restore', $1)")>]
        member inline _.onRestore(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is restored from a minimized state.
        /// </summary>
        [<Emit("$0.once('restore', $1)")>]
        member inline _.onceRestore(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is restored from a minimized state.
        /// </summary>
        [<Emit("$0.off('restore', $1)")>]
        member inline _.offRestore(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.on('will-resize', $1)")>]
        member inline _.onWillResize(handler: Event -> Rectangle -> BaseWindow.WillResize.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.on('will-resize', $1)")>]
        member inline _.onWillResize(handler: Fable.Electron.EventInterfaces.Root.IOnWillResize -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.once('will-resize', $1)")>]
        member inline _.onceWillResize(handler: Event -> Rectangle -> BaseWindow.WillResize.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.once('will-resize', $1)")>]
        member inline _.onceWillResize(handler: Fable.Electron.EventInterfaces.Root.IOnWillResize -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.off('will-resize', $1)")>]
        member inline _.offWillResize(handler: Event -> Rectangle -> BaseWindow.WillResize.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.off('will-resize', $1)")>]
        member inline _.offWillResize(handler: Fable.Electron.EventInterfaces.Root.IOnWillResize -> unit) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted after the window has been resized.
        /// </summary>
        [<Emit("$0.on('resize', $1)")>]
        member inline _.onResize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the window has been resized.
        /// </summary>
        [<Emit("$0.once('resize', $1)")>]
        member inline _.onceResize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the window has been resized.
        /// </summary>
        [<Emit("$0.off('resize', $1)")>]
        member inline _.offResize(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window has finished being resized.<br/><br/>This is usually emitted when the window has been resized manually. On
        /// macOS, resizing the window with <c>setBounds</c>/<c>setSize</c> and setting the <c>animate</c> parameter to <c>true</c> will also emit this event once resizing
        /// has finished.
        /// </summary>
        [<Emit("$0.on('resized', $1)")>]
        member inline _.onResized(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window has finished being resized.<br/><br/>This is usually emitted when the window has been resized manually. On
        /// macOS, resizing the window with <c>setBounds</c>/<c>setSize</c> and setting the <c>animate</c> parameter to <c>true</c> will also emit this event once resizing
        /// has finished.
        /// </summary>
        [<Emit("$0.once('resized', $1)")>]
        member inline _.onceResized(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window has finished being resized.<br/><br/>This is usually emitted when the window has been resized manually. On
        /// macOS, resizing the window with <c>setBounds</c>/<c>setSize</c> and setting the <c>animate</c> parameter to <c>true</c> will also emit this event once resizing
        /// has finished.
        /// </summary>
        [<Emit("$0.off('resized', $1)")>]
        member inline _.offResized(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.on('will-move', $1)")>]
        member inline _.onWillMove(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.on('will-move', $1)")>]
        member inline _.onWillMove(handler: Fable.Electron.EventInterfaces.Root.IOnWillMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.once('will-move', $1)")>]
        member inline _.onceWillMove(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.once('will-move', $1)")>]
        member inline _.onceWillMove(handler: Fable.Electron.EventInterfaces.Root.IOnWillMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.off('will-move', $1)")>]
        member inline _.offWillMove(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.off('will-move', $1)")>]
        member inline _.offWillMove(handler: Fable.Electron.EventInterfaces.Root.IOnWillMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when the window is being moved to a new position.
        /// </summary>
        [<Emit("$0.on('move', $1)")>]
        member inline _.onMove(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is being moved to a new position.
        /// </summary>
        [<Emit("$0.once('move', $1)")>]
        member inline _.onceMove(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is being moved to a new position.
        /// </summary>
        [<Emit("$0.off('move', $1)")>]
        member inline _.offMove(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window is moved to a new position.<br/><br/>&gt; [!NOTE] On macOS, this event is an alias of
        /// <c>move</c>.
        /// </summary>
        [<Emit("$0.on('moved', $1)")>]
        member inline _.onMoved(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window is moved to a new position.<br/><br/>&gt; [!NOTE] On macOS, this event is an alias of
        /// <c>move</c>.
        /// </summary>
        [<Emit("$0.once('moved', $1)")>]
        member inline _.onceMoved(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window is moved to a new position.<br/><br/>&gt; [!NOTE] On macOS, this event is an alias of
        /// <c>move</c>.
        /// </summary>
        [<Emit("$0.off('moved', $1)")>]
        member inline _.offMoved(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when the window enters a full-screen state.
        /// </summary>
        [<Emit("$0.on('enter-full-screen', $1)")>]
        member inline _.onEnterFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state.
        /// </summary>
        [<Emit("$0.once('enter-full-screen', $1)")>]
        member inline _.onceEnterFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state.
        /// </summary>
        [<Emit("$0.off('enter-full-screen', $1)")>]
        member inline _.offEnterFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state.
        /// </summary>
        [<Emit("$0.on('leave-full-screen', $1)")>]
        member inline _.onLeaveFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state.
        /// </summary>
        [<Emit("$0.once('leave-full-screen', $1)")>]
        member inline _.onceLeaveFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state.
        /// </summary>
        [<Emit("$0.off('leave-full-screen', $1)")>]
        member inline _.offLeaveFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.on('always-on-top-changed', $1)")>]
        member inline _.onAlwaysOnTopChanged(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.on('always-on-top-changed', $1)")>]
        member inline _.onAlwaysOnTopChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnAlwaysOnTopChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.once('always-on-top-changed', $1)")>]
        member inline _.onceAlwaysOnTopChanged(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.once('always-on-top-changed', $1)")>]
        member inline _.onceAlwaysOnTopChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnAlwaysOnTopChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.off('always-on-top-changed', $1)")>]
        member inline _.offAlwaysOnTopChanged(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.off('always-on-top-changed', $1)")>]
        member inline _.offAlwaysOnTopChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnAlwaysOnTopChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.on('app-command', $1)")>]
        member inline _.onAppCommand(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.on('app-command', $1)")>]
        member inline _.onAppCommand(handler: Fable.Electron.EventInterfaces.Root.IOnAppCommand -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.once('app-command', $1)")>]
        member inline _.onceAppCommand(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.once('app-command', $1)")>]
        member inline _.onceAppCommand(handler: Fable.Electron.EventInterfaces.Root.IOnAppCommand -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.off('app-command', $1)")>]
        member inline _.offAppCommand(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.off('app-command', $1)")>]
        member inline _.offAppCommand(handler: Fable.Electron.EventInterfaces.Root.IOnAppCommand -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.on('swipe', $1)")>]
        member inline _.onSwipe(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.on('swipe', $1)")>]
        member inline _.onSwipe(handler: Fable.Electron.EventInterfaces.Root.IOnSwipe -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.once('swipe', $1)")>]
        member inline _.onceSwipe(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.once('swipe', $1)")>]
        member inline _.onceSwipe(handler: Fable.Electron.EventInterfaces.Root.IOnSwipe -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.off('swipe', $1)")>]
        member inline _.offSwipe(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.off('swipe', $1)")>]
        member inline _.offSwipe(handler: Fable.Electron.EventInterfaces.Root.IOnSwipe -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.on('rotate-gesture', $1)")>]
        member inline _.onRotateGesture(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.on('rotate-gesture', $1)")>]
        member inline _.onRotateGesture(handler: Fable.Electron.EventInterfaces.Root.IOnRotateGesture -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.once('rotate-gesture', $1)")>]
        member inline _.onceRotateGesture(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.once('rotate-gesture', $1)")>]
        member inline _.onceRotateGesture
            (handler: Fable.Electron.EventInterfaces.Root.IOnRotateGesture -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.off('rotate-gesture', $1)")>]
        member inline _.offRotateGesture(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.off('rotate-gesture', $1)")>]
        member inline _.offRotateGesture(handler: Fable.Electron.EventInterfaces.Root.IOnRotateGesture -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window opens a sheet.
        /// </summary>
        [<Emit("$0.on('sheet-begin', $1)")>]
        member inline _.onSheetBegin(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window opens a sheet.
        /// </summary>
        [<Emit("$0.once('sheet-begin', $1)")>]
        member inline _.onceSheetBegin(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window opens a sheet.
        /// </summary>
        [<Emit("$0.off('sheet-begin', $1)")>]
        member inline _.offSheetBegin(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window has closed a sheet.
        /// </summary>
        [<Emit("$0.on('sheet-end', $1)")>]
        member inline _.onSheetEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window has closed a sheet.
        /// </summary>
        [<Emit("$0.once('sheet-end', $1)")>]
        member inline _.onceSheetEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window has closed a sheet.
        /// </summary>
        [<Emit("$0.off('sheet-end', $1)")>]
        member inline _.offSheetEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the native new tab button is clicked.
        /// </summary>
        [<Emit("$0.on('new-window-for-tab', $1)")>]
        member inline _.onNewWindowForTab(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the native new tab button is clicked.
        /// </summary>
        [<Emit("$0.once('new-window-for-tab', $1)")>]
        member inline _.onceNewWindowForTab(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the native new tab button is clicked.
        /// </summary>
        [<Emit("$0.off('new-window-for-tab', $1)")>]
        member inline _.offNewWindowForTab(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.on('system-context-menu', $1)")>]
        member inline _.onSystemContextMenu(handler: Event -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.on('system-context-menu', $1)")>]
        member inline _.onSystemContextMenu
            (handler: Fable.Electron.EventInterfaces.Root.IOnSystemContextMenu -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.once('system-context-menu', $1)")>]
        member inline _.onceSystemContextMenu(handler: Event -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.once('system-context-menu', $1)")>]
        member inline _.onceSystemContextMenu
            (handler: Fable.Electron.EventInterfaces.Root.IOnSystemContextMenu -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.off('system-context-menu', $1)")>]
        member inline _.offSystemContextMenu(handler: Event -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.off('system-context-menu', $1)")>]
        member inline _.offSystemContextMenu
            (handler: Fable.Electron.EventInterfaces.Root.IOnSystemContextMenu -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Force closing the window, the <c>unload</c> and <c>beforeunload</c> event won't be emitted for the web page, and <c>close</c> event will
        /// also not be emitted for this window, but it guarantees the <c>closed</c> event will be emitted.
        /// </summary>
        [<Erase>]
        member inline _.destroy() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Try to close the window. This has the same effect as a user manually clicking the close button of the
        /// window. The web page may cancel the close though. See the close event.
        /// </summary>
        [<Erase>]
        member inline _.close() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Focuses on the window.
        /// </summary>
        [<Erase>]
        member inline _.focus() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Removes focus from the window.
        /// </summary>
        [<Erase>]
        member inline _.blur() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is focused.
        /// </summary>
        [<Erase>]
        member inline _.isFocused() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is destroyed.
        /// </summary>
        [<Erase>]
        member inline _.isDestroyed() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Shows and gives focus to the window.
        /// </summary>
        [<Erase>]
        member inline _.show() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Shows the window but doesn't focus on it.
        /// </summary>
        [<Erase>]
        member inline _.showInactive() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Hides the window.
        /// </summary>
        [<Erase>]
        member inline _.hide() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is visible to the user in the foreground of the app.
        /// </summary>
        [<Erase>]
        member inline _.isVisible() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether current window is a modal window.
        /// </summary>
        [<Erase>]
        member inline _.isModal() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Maximizes the window. This will also show (but not focus) the window if it isn't being displayed already.
        /// </summary>
        [<Erase>]
        member inline _.maximize() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Unmaximizes the window.
        /// </summary>
        [<Erase>]
        member inline _.unmaximize() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is maximized.
        /// </summary>
        [<Erase>]
        member inline _.isMaximized() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Minimizes the window. On some platforms the minimized window will be shown in the Dock.
        /// </summary>
        [<Erase>]
        member inline _.minimize() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Restores the window from minimized state to its previous state.
        /// </summary>
        [<Erase>]
        member inline _.restore() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is minimized.
        /// </summary>
        [<Erase>]
        member inline _.isMinimized() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Sets whether the window should be in fullscreen mode.<br/><br/>&gt; [!NOTE] On macOS, fullscreen transitions take place asynchronously. If further actions
        /// depend on the fullscreen state, use the 'enter-full-screen' or 'leave-full-screen' events.
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.setFullScreen(flag: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is in fullscreen mode.<br/><br/>&gt; [!NOTE] On macOS, fullscreen transitions take place asynchronously. When querying for a BrowserWindow's
        /// fullscreen status, you should ensure that either the 'enter-full-screen' or 'leave-full-screen' events have been emitted.
        /// </summary>
        [<Erase>]
        member inline _.isFullScreen() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Enters or leaves simple fullscreen mode.<br/><br/>Simple fullscreen mode emulates the native fullscreen behavior found in versions of macOS prior to
        /// Lion (10.7).
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.setSimpleFullScreen(flag: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window is in simple (pre-Lion) fullscreen mode.
        /// </summary>
        [<Erase>]
        member inline _.isSimpleFullScreen() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Whether the window is in normal state (not maximized, not minimized, not in fullscreen mode).
        /// </summary>
        [<Erase>]
        member inline _.isNormal() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// This will make a window maintain an aspect ratio. The extra size allows a developer to have space, specified in
        /// pixels, not included within the aspect ratio calculations. This API already takes into account the difference between a window's size
        /// and its content size.<br/><br/>Consider a normal window with an HD video player and associated controls. Perhaps there are 15 pixels
        /// of controls on the left edge, 25 pixels of controls on the right edge and 50 pixels of controls below
        /// the player. In order to maintain a 16:9 aspect ratio (standard aspect ratio for HD @1920x1080) within the player itself
        /// we would call this function with arguments of 16/9 and { width: 40, height: 50 }. The second argument doesn't
        /// care where the extra width and height are within the content view--only that they exist. Sum any extra width and
        /// height areas you have within the overall content view.<br/><br/>The aspect ratio is not respected when window is resized programmatically with
        /// APIs like <c>win.setSize</c>.<br/><br/>To reset an aspect ratio, pass 0 as the <c>aspectRatio</c> value: <c>win.setAspectRatio(0)</c>.
        /// </summary>
        /// <param name="aspectRatio">The aspect ratio to maintain for some portion of the content view.</param>
        /// <param name="extraSize">The extra size not to be included while maintaining the aspect ratio.</param>
        [<Erase>]
        member inline _.setAspectRatio(aspectRatio: float, ?extraSize: Size) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Examples of valid <c>backgroundColor</c> values:<br/><br/>* Hex<br/>  * #fff (shorthand RGB)<br/>  * #ffff (shorthand ARGB)<br/>  * #ffffff (RGB)<br/>
        ///  * #ffffffff (ARGB)<br/>* RGB<br/>  * <c>rgb\(([\d]+),\s*([\d]+),\s*([\d]+)\)</c><br/>    * e.g. rgb(255, 255, 255)<br/>* RGBA<br/>  * <c>rgba\(([\d]+),\s*([\d]+),\s*([\d]+),\s*([\d.]+)\)</c><br/>
        ///    * e.g. rgba(255, 255, 255, 1.0)<br/>* HSL<br/>  * <c>hsl\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%\)</c><br/>    * e.g. hsl(200, 20%,
        /// 50%)<br/>* HSLA<br/>  * <c>hsla\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)</c><br/>    * e.g. hsla(200, 20%, 50%, 0.5)<br/>* Color name<br/>  * Options are
        /// listed in SkParseColor.cpp<br/>  * Similar to CSS Color Module Level 3 keywords, but case-sensitive.<br/>    * e.g.
        /// <c>blueviolet</c> or <c>red</c><br/><br/>Sets the background color of the window. See Setting <c>backgroundColor</c>.
        /// </summary>
        /// <param name="backgroundColor">Color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. The alpha channel is optional for the
        /// hex type.</param>
        [<Erase>]
        member inline _.setBackgroundColor(backgroundColor: string) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Uses Quick Look to preview a file at a given path.
        /// </summary>
        /// <param name="path">The absolute path to the file to preview with QuickLook. This is important as Quick Look uses the file
        /// name and file extension on the path to determine the content type of the file to open.</param>
        /// <param name="displayName">The name of the file to display on the Quick Look modal view. This is purely visual and does
        /// not affect the content type of the file. Defaults to <c>path</c>.</param>
        [<Erase>]
        member inline _.previewFile(path: string, ?displayName: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Closes the currently open Quick Look panel.
        /// </summary>
        [<Erase>]
        member inline _.closeFilePreview() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Resizes and moves the window to the supplied bounds. Any properties that are not supplied will default to their current
        /// values.<br/><br/>&gt; [!NOTE] On macOS, the y-coordinate value cannot be smaller than the Tray height. The tray height has changed over
        /// time and depends on the operating system, but is between 20-40px. Passing a value lower than the tray height will
        /// result in a window that is flush to the tray.
        /// </summary>
        /// <param name="bounds"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setBounds(bounds: Rectangle, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>bounds</c> of the window as <c>Object</c>.<br/><br/>&gt; [!NOTE] On macOS, the y-coordinate value returned will be at minimum the Tray
        /// height. For example, calling <c>win.setBounds({ x: 25, y: 20, width: 800, height: 600 })</c> with a tray height of 38
        /// means that <c>win.getBounds()</c> will return <c>{ x: 25, y: 38, width: 800, height: 600 }</c>.
        /// </summary>
        [<Erase>]
        member inline _.getBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Gets the background color of the window in Hex (<c>#RRGGBB</c>) format.<br/><br/>See Setting <c>backgroundColor</c>.<br/><br/>&gt; [!NOTE] The alpha value is _not_ returned
        /// alongside the red, green, and blue values.
        /// </summary>
        [<Erase>]
        member inline _.getBackgroundColor() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Resizes and moves the window's client area (e.g. the web page) to the supplied bounds.
        /// </summary>
        /// <param name="bounds"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setContentBounds(bounds: Rectangle, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>bounds</c> of the window's client area as <c>Object</c>.
        /// </summary>
        [<Erase>]
        member inline _.getContentBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window bounds of the normal state<br/><br/>&gt; [!NOTE] Whatever the current state of the window (maximized, minimized or in
        /// fullscreen), this function always returns the position and size of the window in normal state. In normal state, <c>getBounds</c> and
        /// <c>getNormalBounds</c> return the same <c>Rectangle</c>.
        /// </summary>
        [<Erase>]
        member inline _.getNormalBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Disable or enable the window.
        /// </summary>
        /// <param name="enable"></param>
        [<Erase>]
        member inline _.setEnabled(enable: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// whether the window is enabled.
        /// </summary>
        [<Erase>]
        member inline _.isEnabled() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Resizes the window to <c>width</c> and <c>height</c>. If <c>width</c> or <c>height</c> are below any set minimum size constraints the window
        /// will snap to its minimum size.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setSize(width: int, height: int, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's width and height.
        /// </summary>
        [<Erase>]
        member inline _.getSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Resizes the window's client area (e.g. the web page) to <c>width</c> and <c>height</c>.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setContentSize(width: int, height: int, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's client area's width and height.
        /// </summary>
        [<Erase>]
        member inline _.getContentSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the minimum size of window to <c>width</c> and <c>height</c>.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [<Erase>]
        member inline _.setMinimumSize(width: int, height: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's minimum width and height.
        /// </summary>
        [<Erase>]
        member inline _.getMinimumSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the maximum size of window to <c>width</c> and <c>height</c>.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [<Erase>]
        member inline _.setMaximumSize(width: int, height: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's maximum width and height.
        /// </summary>
        [<Erase>]
        member inline _.getMaximumSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Sets whether the window can be manually resized by the user.
        /// </summary>
        /// <param name="resizable"></param>
        [<Erase>]
        member inline _.setResizable(resizable: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window can be manually resized by the user.
        /// </summary>
        [<Erase>]
        member inline _.isResizable() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be moved by user. On Linux does nothing.
        /// </summary>
        /// <param name="movable"></param>
        [<Erase>]
        member inline _.setMovable(movable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be moved by user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isMovable() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be manually minimized by user. On Linux does nothing.
        /// </summary>
        /// <param name="minimizable"></param>
        [<Erase>]
        member inline _.setMinimizable(minimizable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be manually minimized by the user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isMinimizable() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be manually maximized by user. On Linux does nothing.
        /// </summary>
        /// <param name="maximizable"></param>
        [<Erase>]
        member inline _.setMaximizable(maximizable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be manually maximized by user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isMaximizable() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
        /// </summary>
        /// <param name="fullscreenable"></param>
        [<Erase>]
        member inline _.setFullScreenable(fullscreenable: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
        /// </summary>
        [<Erase>]
        member inline _.isFullScreenable() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be manually closed by user. On Linux does nothing.
        /// </summary>
        /// <param name="closable"></param>
        [<Erase>]
        member inline _.setClosable(closable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be manually closed by user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isClosable() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window will be hidden when the user toggles into mission control.
        /// </summary>
        /// <param name="hidden"></param>
        [<Erase>]
        member inline _.setHiddenInMissionControl(hidden: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window will be hidden when the user toggles into mission control.
        /// </summary>
        [<Erase>]
        member inline _.isHiddenInMissionControl() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets whether the window should show always on top of other windows. After setting this, the window is still a
        /// normal window, not a toolbox window which can not be focused on.
        /// </summary>
        /// <param name="flag"></param>
        /// <param name="level">Values include <c>normal</c>, <c>floating</c>, <c>torn-off-menu</c>, <c>modal-panel</c>, <c>main-menu</c>, <c>status</c>, <c>pop-up-menu</c>, <c>screen-saver</c>, and ~~<c>dock</c>~~ (Deprecated). The default is <c>floating</c> when <c>flag</c>
        /// is true. The <c>level</c> is reset to <c>normal</c> when the flag is false. Note that from <c>floating</c> to <c>status</c> included,
        /// the window is placed below the Dock on macOS and below the taskbar on Windows. From <c>pop-up-menu</c> to a higher
        /// it is shown above the Dock on macOS and above the taskbar on Windows. See the macOS docs for more
        /// details.</param>
        /// <param name="relativeLevel">The number of layers higher to set this window relative to the given <c>level</c>. The default is <c>0</c>. Note
        /// that Apple discourages setting levels higher than 1 above <c>screen-saver</c>.</param>
        [<Erase>]
        member inline _.setAlwaysOnTop
            (flag: bool, ?level: Enums.BrowserWindow.SetAlwaysOnTop.Level, ?relativeLevel: int)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is always on top of other windows.
        /// </summary>
        [<Erase>]
        member inline _.isAlwaysOnTop() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window above the source window in the sense of z-order. If the <c>mediaSourceId</c> is not of type window or
        /// if the window does not exist then this method throws an error.
        /// </summary>
        /// <param name="mediaSourceId">Window id in the format of DesktopCapturerSource's id. For example "window:1869:0".</param>
        [<Erase>]
        member inline _.moveAbove(mediaSourceId: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window to top(z-order) regardless of focus
        /// </summary>
        [<Erase>]
        member inline _.moveTop() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window to the center of the screen.
        /// </summary>
        [<Erase>]
        member inline _.center() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window to <c>x</c> and <c>y</c>.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setPosition(x: int, y: int, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's current position.
        /// </summary>
        [<Erase>]
        member inline _.getPosition() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Changes the title of native window to <c>title</c>.
        /// </summary>
        /// <param name="title"></param>
        [<Erase>]
        member inline _.setTitle(title: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The title of the native window.<br/><br/>&gt; [!NOTE] The title of the web page can be different from the title of
        /// the native window.
        /// </summary>
        [<Erase>]
        member inline _.getTitle() : string = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Changes the attachment point for sheets on macOS. By default, sheets are attached just below the window frame, but you
        /// may want to display them beneath a HTML-rendered toolbar. For example:
        /// </summary>
        /// <param name="offsetY"></param>
        /// <param name="offsetX"></param>
        [<Erase>]
        member inline _.setSheetOffset(offsetY: float, ?offsetX: float) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Starts or stops flashing the window to attract user's attention.
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.flashFrame(flag: bool) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Makes the window not show in the taskbar.
        /// </summary>
        /// <param name="skip"></param>
        [<Erase>]
        member inline _.setSkipTaskbar(skip: bool) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Enters or leaves kiosk mode.
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.setKiosk(flag: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is in kiosk mode.
        /// </summary>
        [<Erase>]
        member inline _.isKiosk() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window is in Windows 10 tablet mode.<br/><br/>Since Windows 10 users can use their PC as tablet, under this
        /// mode apps can choose to optimize their UI for tablets, such as enlarging the titlebar and hiding titlebar buttons.<br/><br/>This API
        /// returns whether the window is in tablet mode, and the <c>resize</c> event can be be used to listen to changes
        /// to tablet mode.
        /// </summary>
        [<Erase>]
        member inline _.isTabletMode() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Window id in the format of DesktopCapturerSource's id. For example "window:1324:0".<br/><br/>More precisely the format is <c>window:id:other_id</c> where <c>id</c> is <c>HWND</c>
        /// on Windows, <c>CGWindowID</c> (<c>uint64_t</c>) on macOS and <c>Window</c> (<c>unsigned long</c>) on Linux. <c>other_id</c> is used to identify web contents (tabs)
        /// so within the same top level window.
        /// </summary>
        [<Erase>]
        member inline _.getMediaSourceId() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The platform-specific handle of the window.<br/><br/>The native type of the handle is <c>HWND</c> on Windows, <c>NSView*</c> on macOS, and <c>Window</c>
        /// (<c>unsigned long</c>) on Linux.
        /// </summary>
        [<Erase>]
        member inline _.getNativeWindowHandle() : Buffer = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Hooks a windows message. The <c>callback</c> is called when the message is received in the WndProc.
        /// </summary>
        /// <param name="message"></param>
        /// <param name="callback"></param>
        [<Erase>]
        member inline _.hookWindowMessage(message: int, callback: BrowserWindow.HookWindowMessage.Callback) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// <c>true</c> or <c>false</c> depending on whether the message is hooked.
        /// </summary>
        /// <param name="message"></param>
        [<Erase>]
        member inline _.isWindowMessageHooked(message: int) : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Unhook the window message.
        /// </summary>
        /// <param name="message"></param>
        [<Erase>]
        member inline _.unhookWindowMessage(message: int) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Unhooks all of the window messages.
        /// </summary>
        [<Erase>]
        member inline _.unhookAllWindowMessages() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the pathname of the file the window represents, and the icon of the file will show in window's title
        /// bar.
        /// </summary>
        /// <param name="filename"></param>
        [<Erase>]
        member inline _.setRepresentedFilename(filename: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The pathname of the file the window represents.
        /// </summary>
        [<Erase>]
        member inline _.getRepresentedFilename() : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Specifies whether the window’s document has been edited, and the icon in title bar will become gray when set to
        /// <c>true</c>.
        /// </summary>
        /// <param name="edited"></param>
        [<Erase>]
        member inline _.setDocumentEdited(edited: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window's document has been edited.
        /// </summary>
        [<Erase>]
        member inline _.isDocumentEdited() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// </summary>
        [<Erase>]
        member inline _.focusOnWebView() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// </summary>
        [<Erase>]
        member inline _.blurWebView() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with a NativeImage<br/><br/>Captures a snapshot of the page within <c>rect</c>. Omitting <c>rect</c> will capture the whole visible page. If
        /// the page is not visible, <c>rect</c> may be empty. The page is considered visible when its browser window is hidden
        /// and the capturer count is non-zero. If you would like the page to stay hidden, you should ensure that <c>stayHidden</c>
        /// is set to true.
        /// </summary>
        /// <param name="rect">The bounds to capture</param>
        /// <param name="stayHidden"> Keep the page hidden instead of visible. Default is <c>false</c>.</param>
        /// <param name="stayAwake"> Keep the system awake instead of allowing it to sleep. Default is <c>false</c>.</param>
        [<Erase; ParamObject(1)>]
        member inline _.capturePage(?rect: Rectangle, ?stayHidden: bool, ?stayAwake: bool) : Promise<NativeImage> =
            Unchecked.defaultof<_>

        /// <summary>
        /// the promise will resolve when the page has finished loading (see <c>did-finish-load</c>), and rejects if the page fails to load
        /// (see <c>did-fail-load</c>).<br/><br/>Same as <c>webContents.loadURL(url[, options])</c>.<br/><br/>The <c>url</c> can be a remote address (e.g. <c>http://</c>) or a path to a local HTML
        /// file using the <c>file://</c> protocol.<br/><br/>To ensure that file URLs are properly formatted, it is recommended to use Node's <c>url.format</c> method:<br/><br/>You
        /// can load a URL using a <c>POST</c> request with URL-encoded data by doing the following:
        /// </summary>
        /// <param name="url"></param>
        /// <param name="httpReferrer">An HTTP Referrer URL.</param>
        /// <param name="userAgent">A user agent originating the request.</param>
        /// <param name="extraHeaders">Extra headers separated by "\n"</param>
        /// <param name="postData"></param>
        /// <param name="baseURLForDataURL">Base URL (with trailing path separator) for files to be loaded by the data URL. This is needed only
        /// if the specified <c>url</c> is a data URL and needs to load other files.</param>
        [<Erase; ParamObject(1)>]
        member inline _.loadURL
            (
                url: string,
                ?httpReferrer: U2<string, Referrer>,
                ?userAgent: string,
                ?extraHeaders: string,
                ?postData: U2<UploadRawData, UploadFile>[],
                ?baseURLForDataURL: string
            ) : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// the promise will resolve when the page has finished loading (see <c>did-finish-load</c>), and rejects if the page fails to load
        /// (see <c>did-fail-load</c>).<br/><br/>Same as <c>webContents.loadFile</c>, <c>filePath</c> should be a path to an HTML file relative to the root of your application.
        ///  See the <c>webContents</c> docs for more information.
        /// </summary>
        /// <param name="filePath"></param>
        /// <param name="query">Passed to <c>url.format()</c>.</param>
        /// <param name="search">Passed to <c>url.format()</c>.</param>
        /// <param name="hash">Passed to <c>url.format()</c>.</param>
        [<Erase; ParamObject(1)>]
        member inline _.loadFile
            (filePath: string, ?query: Record<string, string>, ?search: string, ?hash: string)
            : Promise<unit> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Same as <c>webContents.reload</c>.
        /// </summary>
        [<Erase>]
        member inline _.reload() : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets the <c>menu</c> as the window's menu bar.
        /// </summary>
        /// <param name="menu"></param>
        [<Erase>]
        member inline _.setMenu(menu: Option<Menu>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Remove the window's menu bar.
        /// </summary>
        [<Erase>]
        member inline _.removeMenu() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets progress value in progress bar. Valid range is [0, 1.0].<br/><br/>Remove progress bar when progress &lt; 0; Change to indeterminate
        /// mode when progress &gt; 1.<br/><br/>On Linux platform, only supports Unity desktop environment, you need to specify the <c>*.desktop</c> file name
        /// to <c>desktopName</c> field in <c>package.json</c>. By default, it will assume <c>{app.name}.desktop</c>.<br/><br/>On Windows, a mode can be passed. Accepted values are
        /// <c>none</c>, <c>normal</c>, <c>indeterminate</c>, <c>error</c>, and <c>paused</c>. If you call <c>setProgressBar</c> without a mode set (but with a value within the
        /// valid range), <c>normal</c> will be assumed.
        /// </summary>
        /// <param name="progress"></param>
        /// <param name="options"></param>
        [<Erase>]
        member inline _.setProgressBar(progress: double, ?options: BrowserWindow.SetProgressBar.Options) : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets a 16 x 16 pixel overlay onto the current taskbar icon, usually used to convey some sort of application
        /// status or to passively notify the user.
        /// </summary>
        /// <param name="overlay">the icon to display on the bottom right corner of the taskbar icon. If this parameter is <c>null</c>, the
        /// overlay is cleared</param>
        /// <param name="description">a description that will be provided to Accessibility screen readers</param>
        [<Erase>]
        member inline _.setOverlayIcon(overlay: Option<NativeImage>, description: string) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Invalidates the window shadow so that it is recomputed based on the current window shape.<br/><br/><c>BrowserWindows</c> that are transparent can sometimes
        /// leave behind visual artifacts on macOS. This method can be used to clear these artifacts when, for example, performing an
        /// animation.
        /// </summary>
        [<Erase>]
        member inline _.invalidateShadow() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets whether the window should have a shadow.
        /// </summary>
        /// <param name="hasShadow"></param>
        [<Erase>]
        member inline _.setHasShadow(hasShadow: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window has a shadow.
        /// </summary>
        [<Erase>]
        member inline _.hasShadow() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the opacity of the window. On Linux, does nothing. Out of bound number values are clamped to the [0,
        /// 1] range.
        /// </summary>
        /// <param name="opacity">between 0.0 (fully transparent) and 1.0 (fully opaque)</param>
        [<Erase>]
        member inline _.setOpacity(opacity: float) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// between 0.0 (fully transparent) and 1.0 (fully opaque). On Linux, always returns 1.
        /// </summary>
        [<Erase>]
        member inline _.getOpacity() : float = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Setting a window shape determines the area within the window where the system permits drawing and user interaction. Outside of
        /// the given region, no pixels will be drawn and no mouse events will be registered. Mouse events outside of the
        /// region will not be received by that window, but will fall through to whatever is behind the window.
        /// </summary>
        /// <param name="rects">Sets a shape on the window. Passing an empty list reverts the window to being rectangular.</param>
        [<Erase; Experimental("Experimental according to Electron")>]
        member inline _.setShape(rects: Rectangle[]) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the buttons were added successfully<br/><br/>Add a thumbnail toolbar with a specified set of buttons to the thumbnail image of
        /// a window in a taskbar button layout. Returns a <c>boolean</c> object indicates whether the thumbnail has been added successfully.<br/><br/>The number
        /// of buttons in thumbnail toolbar should be no greater than 7 due to the limited room. Once you setup the
        /// thumbnail toolbar, the toolbar cannot be removed due to the platform's limitation. But you can call the API with an
        /// empty array to clean the buttons.<br/><br/>The <c>buttons</c> is an array of <c>Button</c> objects:<br/><br/>* <c>Button</c> Object<br/>  * <c>icon</c> NativeImage -
        /// The icon showing in thumbnail toolbar.<br/>  * <c>click</c> Function<br/>  * <c>tooltip</c> string (optional) - The text of the
        /// button's tooltip.<br/>  * <c>flags</c> string[] (optional) - Control specific states and behaviors of the button. By default, it is
        /// <c>['enabled']</c>.<br/><br/>The <c>flags</c> is an array that can include following <c>string</c>s:<br/><br/>* <c>enabled</c> - The button is active and available to the
        /// user.<br/>* <c>disabled</c> - The button is disabled. It is present, but has a visual state indicating it will not respond
        /// to user action.<br/>* <c>dismissonclick</c> - When the button is clicked, the thumbnail window closes immediately.<br/>* <c>nobackground</c> - Do not draw
        /// a button border, use only the image.<br/>* <c>hidden</c> - The button is not shown to the user.<br/>* <c>noninteractive</c> - The
        /// button is enabled but not interactive; no pressed button state is drawn. This value is intended for instances where the
        /// button is used in a notification.
        /// </summary>
        /// <param name="buttons"></param>
        [<Erase>]
        member inline _.setThumbarButtons(buttons: ThumbarButton[]) : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the region of the window to show as the thumbnail image displayed when hovering over the window in the
        /// taskbar. You can reset the thumbnail to be the entire window by specifying an empty region: <c>{ x: 0, y:
        /// 0, width: 0, height: 0 }</c>.
        /// </summary>
        /// <param name="region">Region of the window</param>
        [<Erase>]
        member inline _.setThumbnailClip(region: Rectangle) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the toolTip that is displayed when hovering over the window thumbnail in the taskbar.
        /// </summary>
        /// <param name="toolTip"></param>
        [<Erase>]
        member inline _.setThumbnailToolTip(toolTip: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the properties for the window's taskbar button.<br/><br/>&gt; [!NOTE] <c>relaunchCommand</c> and <c>relaunchDisplayName</c> must always be set together. If one of
        /// those properties is not set, then neither will be used.
        /// </summary>
        /// <param name="appId">Window's App User Model ID. It has to be set, otherwise the other options will have no effect.</param>
        /// <param name="appIconPath">Window's Relaunch Icon.</param>
        /// <param name="appIconIndex">Index of the icon in <c>appIconPath</c>. Ignored when <c>appIconPath</c> is not set. Default is <c>0</c>.</param>
        /// <param name="relaunchCommand">Window's Relaunch Command.</param>
        /// <param name="relaunchDisplayName">Window's Relaunch Display Name.</param>
        [<Erase; ParamObject(0)>]
        member inline _.setAppDetails
            (
                ?appId: string,
                ?appIconPath: string,
                ?appIconIndex: int,
                ?relaunchCommand: string,
                ?relaunchDisplayName: string
            ) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the system accent color and highlighting of active window border.<br/><br/>The <c>accentColor</c> parameter accepts the following values:<br/><br/>* **Color string** -
        /// Sets a custom accent color using standard CSS color formats (Hex, RGB, RGBA, HSL, HSLA, or named colors). Alpha values
        /// in RGBA/HSLA formats are ignored and the color is treated as fully opaque.<br/>* **<c>true</c>** - Uses the system's default accent
        /// color from user preferences in System Settings.<br/>* **<c>false</c>** - Explicitly disables accent color highlighting for the window.<br/><br/>Examples:
        /// </summary>
        /// <param name="accentColor">The accent color for the window. By default, follows user preference in System Settings.</param>
        [<Erase>]
        member inline _.setAccentColor(accentColor: U2<bool, string>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// the system accent color and highlighting of active window border in Hex RGB format.<br/><br/>If a color has been set for
        /// the window that differs from the system accent color, the window accent color will be returned. Otherwise, a boolean will
        /// be returned, with <c>true</c> indicating that the window uses the global system accent color, and <c>false</c> indicating that accent color
        /// highlighting is disabled for this window.
        /// </summary>
        [<Erase>]
        member inline _.getAccentColor() : U2<string, bool> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Same as <c>webContents.showDefinitionForSelection()</c>.
        /// </summary>
        [<Erase>]
        member inline _.showDefinitionForSelection() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Changes window icon.
        /// </summary>
        /// <param name="icon"></param>
        [<Erase>]
        member inline _.setIcon(icon: U2<NativeImage, string>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window traffic light buttons should be visible.
        /// </summary>
        /// <param name="visible"></param>
        [<Erase>]
        member inline _.setWindowButtonVisibility(visible: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets whether the window menu bar should hide itself automatically. Once set the menu bar will only show when users
        /// press the single <c>Alt</c> key.<br/><br/>If the menu bar is already visible, calling <c>setAutoHideMenuBar(true)</c> won't hide it immediately.
        /// </summary>
        /// <param name="hide"></param>
        [<Erase>]
        member inline _.setAutoHideMenuBar(hide: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether menu bar automatically hides itself.
        /// </summary>
        [<Erase>]
        member inline _.isMenuBarAutoHide() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets whether the menu bar should be visible. If the menu bar is auto-hide, users can still bring up the
        /// menu bar by pressing the single <c>Alt</c> key.
        /// </summary>
        /// <param name="visible"></param>
        [<Erase>]
        member inline _.setMenuBarVisibility(visible: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether the menu bar is visible.
        /// </summary>
        [<Erase>]
        member inline _.isMenuBarVisible() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// whether the window is arranged via Snap.<br/><br/>The window is snapped via buttons shown when the mouse is hovered over window
        /// maximize button, or by dragging it to the edges of the screen.
        /// </summary>
        [<Erase>]
        member inline _.isSnapped() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets whether the window should be visible on all workspaces.<br/><br/>&gt; [!NOTE] This API does nothing on Windows.
        /// </summary>
        /// <param name="visible"></param>
        /// <param name="visibleOnFullScreen">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Sets whether the window
        /// should be visible above fullscreen windows.</param>
        /// <param name="skipTransformProcessType">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Calling setVisibleOnAllWorkspaces will by
        /// default transform the process type between UIElementApplication and ForegroundApplication to ensure the correct behavior. However, this will hide the window
        /// and dock for a short time every time it is called. If your window is already of type UIElementApplication, you
        /// can bypass this transformation by passing true to skipTransformProcessType.</param>
        [<Erase; ParamObject(1)>]
        member inline _.setVisibleOnAllWorkspaces
            (visible: bool, ?visibleOnFullScreen: bool, ?skipTransformProcessType: bool)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether the window is visible on all workspaces.<br/><br/>&gt; [!NOTE] This API always returns false on Windows.
        /// </summary>
        [<Erase>]
        member inline _.isVisibleOnAllWorkspaces() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Makes the window ignore all mouse events.<br/><br/>All mouse events happened in this window will be passed to the window below
        /// this window, but if this window has focus, it will still receive keyboard events.
        /// </summary>
        /// <param name="ignore"></param>
        /// <param name="forward">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || If true, forwards mouse
        /// move messages to Chromium, enabling mouse related events such as <c>mouseleave</c>. Only used when <c>ignore</c> is true. If <c>ignore</c> is
        /// false, forwarding is always disabled regardless of this value.</param>
        [<Erase; ParamObject(1)>]
        member inline _.setIgnoreMouseEvents(ignore: bool, ?forward: bool) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Prevents the window contents from being captured by other apps.<br/><br/>On Windows, it calls <c>SetWindowDisplayAffinity</c> with <c>WDA_EXCLUDEFROMCAPTURE</c>. For Windows 10 version
        /// 2004 and up the window will be removed from capture entirely, older Windows versions behave as if <c>WDA_MONITOR</c> is applied
        /// capturing a black window.<br/><br/>On macOS, it sets the <c>NSWindow</c>'s <c>sharingType</c> to <c>NSWindowSharingNone</c>. Unfortunately, due to an intentional change in macOS,
        /// newer Mac applications that use <c>ScreenCaptureKit</c> will capture your window despite <c>win.setContentProtection(true)</c>. See here.
        /// </summary>
        /// <param name="enable"></param>
        [<Erase>]
        member inline _.setContentProtection(enable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// whether or not content protection is currently enabled.
        /// </summary>
        [<Erase>]
        member inline _.isContentProtected() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Changes whether the window can be focused.<br/><br/>On macOS it does not remove the focus from the window.
        /// </summary>
        /// <param name="focusable"></param>
        [<Erase>]
        member inline _.setFocusable(focusable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be focused.
        /// </summary>
        [<Erase>]
        member inline _.isFocusable() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets <c>parent</c> as current window's parent window, passing <c>null</c> will turn current window into a top-level window.
        /// </summary>
        /// <param name="parent"></param>
        [<Erase>]
        member inline _.setParentWindow(parent: Option<BrowserWindow>) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The parent window or <c>null</c> if there is no parent.
        /// </summary>
        [<Erase>]
        member inline _.getParentWindow() : Option<BrowserWindow> = Unchecked.defaultof<_>

        /// <summary>
        /// All child windows.
        /// </summary>
        [<Erase>]
        member inline _.getChildWindows() : BrowserWindow[] = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Controls whether to hide cursor when typing.
        /// </summary>
        /// <param name="autoHide"></param>
        [<Erase>]
        member inline _.setAutoHideCursor(autoHide: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Selects the previous tab when native tabs are enabled and there are other tabs in the window.
        /// </summary>
        [<Erase>]
        member inline _.selectPreviousTab() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Selects the next tab when native tabs are enabled and there are other tabs in the window.
        /// </summary>
        [<Erase>]
        member inline _.selectNextTab() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Shows or hides the tab overview when native tabs are enabled.
        /// </summary>
        [<Erase>]
        member inline _.showAllTabs() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Merges all windows into one window with multiple tabs when native tabs are enabled and there is more than one
        /// open window.
        /// </summary>
        [<Erase>]
        member inline _.mergeAllWindows() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Moves the current tab into a new window if native tabs are enabled and there is more than one tab
        /// in the current window.
        /// </summary>
        [<Erase>]
        member inline _.moveTabToNewWindow() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Toggles the visibility of the tab bar if native tabs are enabled and there is only one tab in the
        /// current window.
        /// </summary>
        [<Erase>]
        member inline _.toggleTabBar() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Adds a window as a tab on this window, after the tab for the window instance.
        /// </summary>
        /// <param name="browserWindow"></param>
        [<Erase>]
        member inline _.addTabbedWindow(browserWindow: BrowserWindow) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Adds a vibrancy effect to the browser window. Passing <c>null</c> or an empty string will remove the vibrancy effect on
        /// the window. The <c>animationDuration</c> parameter only animates fading in or fading out the vibrancy effect. Animating between different types of
        /// vibrancy is not supported.
        /// </summary>
        /// <param name="``type``">Can be <c>titlebar</c>, <c>selection</c>, <c>menu</c>, <c>popover</c>, <c>sidebar</c>, <c>header</c>, <c>sheet</c>, <c>window</c>, <c>hud</c>, <c>fullscreen-ui</c>, <c>tooltip</c>, <c>content</c>, <c>under-window</c>, or <c>under-page</c>. See the
        /// macOS documentation for more details.</param>
        /// <param name="animationDuration">if greater than zero, the change to vibrancy will be animated over the given duration (in milliseconds).</param>
        [<Erase; ParamObject(1)>]
        member inline _.setVibrancy
            (``type``: Option<Enums.BrowserWindow.SetVibrancy.Type>, ?animationDuration: float)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// This method sets the browser window's system-drawn background material, including behind the non-client area.<br/><br/>See the Windows documentation for more details.<br/><br/>&gt;
        /// [!NOTE] This method is only supported on Windows 11 22H2 and up.
        /// </summary>
        /// <param name="material"></param>
        [<Erase>]
        member inline _.setBackgroundMaterial(material: Enums.BrowserWindow.SetBackgroundMaterial.Material) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Set a custom position for the traffic light buttons in frameless window. Passing <c>null</c> will reset the position to default.
        /// </summary>
        /// <param name="position"></param>
        [<Erase>]
        member inline _.setWindowButtonPosition(position: Option<Point>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The custom position for the traffic light buttons in frameless window, <c>null</c> will be returned when there is no custom
        /// position.
        /// </summary>
        [<Erase>]
        member inline _.getWindowButtonPosition() : Option<Point> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the touchBar layout for the current window. Specifying <c>null</c> or <c>undefined</c> clears the touch bar. This method only has
        /// an effect if the machine has a touch bar.<br/><br/>&gt; [!NOTE] The TouchBar API is currently experimental and may change or
        /// be removed in future Electron releases.
        /// </summary>
        /// <param name="touchBar"></param>
        [<Erase>]
        member inline _.setTouchBar(touchBar: Option<TouchBar>) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// &gt; [!WARNING] The <c>BrowserView</c> class is deprecated, and replaced by the new <c>WebContentsView</c> class.
        /// </summary>
        /// <param name="browserView">Attach <c>browserView</c> to <c>win</c>. If there are other <c>BrowserView</c>s attached, they will be removed from this window.</param>
        [<Erase; Experimental("Experimental according to Electron"); System.Obsolete>]
        member inline _.setBrowserView(browserView: Option<BrowserView>) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>BrowserView</c> attached to <c>win</c>. Returns <c>null</c> if one is not attached. Throws an error if multiple <c>BrowserView</c>s are attached.<br/><br/>&gt;
        /// [!WARNING] The <c>BrowserView</c> class is deprecated, and replaced by the new <c>WebContentsView</c> class.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron"); System.Obsolete>]
        member inline _.getBrowserView() : Option<BrowserView> = Unchecked.defaultof<_>

        /// <summary>
        /// Replacement API for setBrowserView supporting work with multi browser views.<br/><br/>&gt; [!WARNING] The <c>BrowserView</c> class is deprecated, and replaced by the
        /// new <c>WebContentsView</c> class.
        /// </summary>
        /// <param name="browserView"></param>
        [<Erase; Experimental("Experimental according to Electron"); System.Obsolete>]
        member inline _.addBrowserView(browserView: BrowserView) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// &gt; [!WARNING] The <c>BrowserView</c> class is deprecated, and replaced by the new <c>WebContentsView</c> class.
        /// </summary>
        /// <param name="browserView"></param>
        [<Erase; Experimental("Experimental according to Electron"); System.Obsolete>]
        member inline _.removeBrowserView(browserView: BrowserView) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Raises <c>browserView</c> above other <c>BrowserView</c>s attached to <c>win</c>. Throws an error if <c>browserView</c> is not attached to <c>win</c>.<br/><br/>&gt; [!WARNING] The
        /// <c>BrowserView</c> class is deprecated, and replaced by the new <c>WebContentsView</c> class.
        /// </summary>
        /// <param name="browserView"></param>
        [<Erase; Experimental("Experimental according to Electron"); System.Obsolete>]
        member inline _.setTopBrowserView(browserView: BrowserView) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// a sorted by z-index array of all BrowserViews that have been attached with <c>addBrowserView</c> or <c>setBrowserView</c>. The top-most BrowserView is
        /// the last element of the array.<br/><br/>&gt; [!WARNING] The <c>BrowserView</c> class is deprecated, and replaced by the new <c>WebContentsView</c> class.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron"); System.Obsolete>]
        member inline _.getBrowserViews() : BrowserView[] = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// On a window with Window Controls Overlay already enabled, this method updates the style of the title bar overlay.<br/><br/>On Linux,
        /// the <c>symbolColor</c> is automatically calculated to have minimum accessible contrast to the <c>color</c> if not explicitly set.
        /// </summary>
        /// <param name="color">The CSS color of the Window Controls Overlay when enabled.</param>
        /// <param name="symbolColor">The CSS color of the symbols on the Window Controls Overlay when enabled.</param>
        /// <param name="height">The height of the title bar and Window Controls Overlay in pixels.</param>
        [<Erase; ParamObject(0)>]
        member inline _.setTitleBarOverlay(?color: string, ?symbolColor: string, ?height: int) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets the content view of the window.
        /// </summary>
        /// <param name="view"></param>
        [<Erase>]
        member inline _.setContentView(view: View) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The content view of the window.
        /// </summary>
        [<Erase>]
        member inline _.getContentView() : View = Unchecked.defaultof<_>

        /// <summary>
        /// Force closing the window, the <c>unload</c> and <c>beforeunload</c> event won't be emitted for the web page, and <c>close</c> event will
        /// also not be emitted for this window, but it guarantees the <c>closed</c> event will be emitted.
        /// </summary>
        [<Erase>]
        member inline _.destroy() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Try to close the window. This has the same effect as a user manually clicking the close button of the
        /// window. The web page may cancel the close though. See the close event.
        /// </summary>
        [<Erase>]
        member inline _.close() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Focuses on the window.
        /// </summary>
        [<Erase>]
        member inline _.focus() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Removes focus from the window.
        /// </summary>
        [<Erase>]
        member inline _.blur() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is focused.
        /// </summary>
        [<Erase>]
        member inline _.isFocused() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is destroyed.
        /// </summary>
        [<Erase>]
        member inline _.isDestroyed() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Shows and gives focus to the window.
        /// </summary>
        [<Erase>]
        member inline _.show() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Shows the window but doesn't focus on it.
        /// </summary>
        [<Erase>]
        member inline _.showInactive() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Hides the window.
        /// </summary>
        [<Erase>]
        member inline _.hide() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is visible to the user in the foreground of the app.
        /// </summary>
        [<Erase>]
        member inline _.isVisible() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether current window is a modal window.
        /// </summary>
        [<Erase>]
        member inline _.isModal() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Maximizes the window. This will also show (but not focus) the window if it isn't being displayed already.
        /// </summary>
        [<Erase>]
        member inline _.maximize() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Unmaximizes the window.
        /// </summary>
        [<Erase>]
        member inline _.unmaximize() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is maximized.
        /// </summary>
        [<Erase>]
        member inline _.isMaximized() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Minimizes the window. On some platforms the minimized window will be shown in the Dock.
        /// </summary>
        [<Erase>]
        member inline _.minimize() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Restores the window from minimized state to its previous state.
        /// </summary>
        [<Erase>]
        member inline _.restore() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is minimized.
        /// </summary>
        [<Erase>]
        member inline _.isMinimized() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Sets whether the window should be in fullscreen mode.<br/><br/>&gt; [!NOTE] On macOS, fullscreen transitions take place asynchronously. If further actions
        /// depend on the fullscreen state, use the 'enter-full-screen' or &gt; 'leave-full-screen' events.
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.setFullScreen(flag: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is in fullscreen mode.
        /// </summary>
        [<Erase>]
        member inline _.isFullScreen() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Enters or leaves simple fullscreen mode.<br/><br/>Simple fullscreen mode emulates the native fullscreen behavior found in versions of macOS prior to
        /// Lion (10.7).
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.setSimpleFullScreen(flag: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window is in simple (pre-Lion) fullscreen mode.
        /// </summary>
        [<Erase>]
        member inline _.isSimpleFullScreen() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Whether the window is in normal state (not maximized, not minimized, not in fullscreen mode).
        /// </summary>
        [<Erase>]
        member inline _.isNormal() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// This will make a window maintain an aspect ratio. The extra size allows a developer to have space, specified in
        /// pixels, not included within the aspect ratio calculations. This API already takes into account the difference between a window's size
        /// and its content size.<br/><br/>Consider a normal window with an HD video player and associated controls. Perhaps there are 15 pixels
        /// of controls on the left edge, 25 pixels of controls on the right edge and 50 pixels of controls below
        /// the player. In order to maintain a 16:9 aspect ratio (standard aspect ratio for HD @1920x1080) within the player itself
        /// we would call this function with arguments of 16/9 and { width: 40, height: 50 }. The second argument doesn't
        /// care where the extra width and height are within the content view--only that they exist. Sum any extra width and
        /// height areas you have within the overall content view.<br/><br/>The aspect ratio is not respected when window is resized programmatically with
        /// APIs like <c>win.setSize</c>.<br/><br/>To reset an aspect ratio, pass 0 as the <c>aspectRatio</c> value: <c>win.setAspectRatio(0)</c>.
        /// </summary>
        /// <param name="aspectRatio">The aspect ratio to maintain for some portion of the content view.</param>
        /// <param name="extraSize">The extra size not to be included while maintaining the aspect ratio.</param>
        [<Erase>]
        member inline _.setAspectRatio(aspectRatio: float, ?extraSize: Size) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Examples of valid <c>backgroundColor</c> values:<br/><br/>* Hex<br/>  * #fff (shorthand RGB)<br/>  * #ffff (shorthand ARGB)<br/>  * #ffffff (RGB)<br/>
        ///  * #ffffffff (ARGB)<br/>* RGB<br/>  * <c>rgb\(([\d]+),\s*([\d]+),\s*([\d]+)\)</c><br/>    * e.g. rgb(255, 255, 255)<br/>* RGBA<br/>  * <c>rgba\(([\d]+),\s*([\d]+),\s*([\d]+),\s*([\d.]+)\)</c><br/>
        ///    * e.g. rgba(255, 255, 255, 1.0)<br/>* HSL<br/>  * <c>hsl\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%\)</c><br/>    * e.g. hsl(200, 20%,
        /// 50%)<br/>* HSLA<br/>  * <c>hsla\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)</c><br/>    * e.g. hsla(200, 20%, 50%, 0.5)<br/>* Color name<br/>  * Options are
        /// listed in SkParseColor.cpp<br/>  * Similar to CSS Color Module Level 3 keywords, but case-sensitive.<br/>    * e.g.
        /// <c>blueviolet</c> or <c>red</c><br/><br/>Sets the background color of the window. See Setting <c>backgroundColor</c>.
        /// </summary>
        /// <param name="backgroundColor">Color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. The alpha channel is optional for the
        /// hex type.</param>
        [<Erase>]
        member inline _.setBackgroundColor(backgroundColor: string) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Uses Quick Look to preview a file at a given path.
        /// </summary>
        /// <param name="path">The absolute path to the file to preview with QuickLook. This is important as Quick Look uses the file
        /// name and file extension on the path to determine the content type of the file to open.</param>
        /// <param name="displayName">The name of the file to display on the Quick Look modal view. This is purely visual and does
        /// not affect the content type of the file. Defaults to <c>path</c>.</param>
        [<Erase>]
        member inline _.previewFile(path: string, ?displayName: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Closes the currently open Quick Look panel.
        /// </summary>
        [<Erase>]
        member inline _.closeFilePreview() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Resizes and moves the window to the supplied bounds. Any properties that are not supplied will default to their current
        /// values.<br/><br/>&gt; [!NOTE] On macOS, the y-coordinate value cannot be smaller than the Tray height. The tray height has changed over
        /// time and depends on the operating system, but is between 20-40px. Passing a value lower than the tray height will
        /// result in a window that is flush to the tray.
        /// </summary>
        /// <param name="bounds"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setBounds(bounds: Rectangle, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>bounds</c> of the window as <c>Object</c>.<br/><br/>&gt; [!NOTE] On macOS, the y-coordinate value returned will be at minimum the Tray
        /// height. For example, calling <c>win.setBounds({ x: 25, y: 20, width: 800, height: 600 })</c> with a tray height of 38
        /// means that <c>win.getBounds()</c> will return <c>{ x: 25, y: 38, width: 800, height: 600 }</c>.
        /// </summary>
        [<Erase>]
        member inline _.getBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Gets the background color of the window in Hex (<c>#RRGGBB</c>) format.<br/><br/>See Setting <c>backgroundColor</c>.<br/><br/>&gt; [!NOTE] The alpha value is _not_ returned
        /// alongside the red, green, and blue values.
        /// </summary>
        [<Erase>]
        member inline _.getBackgroundColor() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Resizes and moves the window's client area (e.g. the web page) to the supplied bounds.
        /// </summary>
        /// <param name="bounds"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setContentBounds(bounds: Rectangle, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>bounds</c> of the window's client area as <c>Object</c>.
        /// </summary>
        [<Erase>]
        member inline _.getContentBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window bounds of the normal state<br/><br/>&gt; [!NOTE] Whatever the current state of the window : maximized, minimized or
        /// in fullscreen, this function always returns the position and size of the window in normal state. In normal state, getBounds
        /// and getNormalBounds returns the same <c>Rectangle</c>.
        /// </summary>
        [<Erase>]
        member inline _.getNormalBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Disable or enable the window.
        /// </summary>
        /// <param name="enable"></param>
        [<Erase>]
        member inline _.setEnabled(enable: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// whether the window is enabled.
        /// </summary>
        [<Erase>]
        member inline _.isEnabled() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Resizes the window to <c>width</c> and <c>height</c>. If <c>width</c> or <c>height</c> are below any set minimum size constraints the window
        /// will snap to its minimum size.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setSize(width: int, height: int, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's width and height.
        /// </summary>
        [<Erase>]
        member inline _.getSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Resizes the window's client area (e.g. the web page) to <c>width</c> and <c>height</c>.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setContentSize(width: int, height: int, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's client area's width and height.
        /// </summary>
        [<Erase>]
        member inline _.getContentSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the minimum size of window to <c>width</c> and <c>height</c>.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [<Erase>]
        member inline _.setMinimumSize(width: int, height: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's minimum width and height.
        /// </summary>
        [<Erase>]
        member inline _.getMinimumSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the maximum size of window to <c>width</c> and <c>height</c>.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [<Erase>]
        member inline _.setMaximumSize(width: int, height: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's maximum width and height.
        /// </summary>
        [<Erase>]
        member inline _.getMaximumSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Sets whether the window can be manually resized by the user.
        /// </summary>
        /// <param name="resizable"></param>
        [<Erase>]
        member inline _.setResizable(resizable: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window can be manually resized by the user.
        /// </summary>
        [<Erase>]
        member inline _.isResizable() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be moved by user. On Linux does nothing.
        /// </summary>
        /// <param name="movable"></param>
        [<Erase>]
        member inline _.setMovable(movable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be moved by user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isMovable() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be manually minimized by user. On Linux does nothing.
        /// </summary>
        /// <param name="minimizable"></param>
        [<Erase>]
        member inline _.setMinimizable(minimizable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be manually minimized by the user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isMinimizable() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be manually maximized by user. On Linux does nothing.
        /// </summary>
        /// <param name="maximizable"></param>
        [<Erase>]
        member inline _.setMaximizable(maximizable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be manually maximized by user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isMaximizable() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
        /// </summary>
        /// <param name="fullscreenable"></param>
        [<Erase>]
        member inline _.setFullScreenable(fullscreenable: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
        /// </summary>
        [<Erase>]
        member inline _.isFullScreenable() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be manually closed by user. On Linux does nothing.
        /// </summary>
        /// <param name="closable"></param>
        [<Erase>]
        member inline _.setClosable(closable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be manually closed by user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isClosable() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window will be hidden when the user toggles into mission control.
        /// </summary>
        /// <param name="hidden"></param>
        [<Erase>]
        member inline _.setHiddenInMissionControl(hidden: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window will be hidden when the user toggles into mission control.
        /// </summary>
        [<Erase>]
        member inline _.isHiddenInMissionControl() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets whether the window should show always on top of other windows. After setting this, the window is still a
        /// normal window, not a toolbox window which can not be focused on.
        /// </summary>
        /// <param name="flag"></param>
        /// <param name="level">Values include <c>normal</c>, <c>floating</c>, <c>torn-off-menu</c>, <c>modal-panel</c>, <c>main-menu</c>, <c>status</c>, <c>pop-up-menu</c>, <c>screen-saver</c>, and ~~<c>dock</c>~~ (Deprecated). The default is <c>floating</c> when <c>flag</c>
        /// is true. The <c>level</c> is reset to <c>normal</c> when the flag is false. Note that from <c>floating</c> to <c>status</c> included,
        /// the window is placed below the Dock on macOS and below the taskbar on Windows. From <c>pop-up-menu</c> to a higher
        /// it is shown above the Dock on macOS and above the taskbar on Windows. See the macOS docs for more
        /// details.</param>
        /// <param name="relativeLevel">The number of layers higher to set this window relative to the given <c>level</c>. The default is <c>0</c>. Note
        /// that Apple discourages setting levels higher than 1 above <c>screen-saver</c>.</param>
        [<Erase>]
        member inline _.setAlwaysOnTop
            (flag: bool, ?level: Enums.BaseWindow.SetAlwaysOnTop.Level, ?relativeLevel: int)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is always on top of other windows.
        /// </summary>
        [<Erase>]
        member inline _.isAlwaysOnTop() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window above the source window in the sense of z-order. If the <c>mediaSourceId</c> is not of type window or
        /// if the window does not exist then this method throws an error.
        /// </summary>
        /// <param name="mediaSourceId">Window id in the format of DesktopCapturerSource's id. For example "window:1869:0".</param>
        [<Erase>]
        member inline _.moveAbove(mediaSourceId: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window to top(z-order) regardless of focus
        /// </summary>
        [<Erase>]
        member inline _.moveTop() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window to the center of the screen.
        /// </summary>
        [<Erase>]
        member inline _.center() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window to <c>x</c> and <c>y</c>.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setPosition(x: int, y: int, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's current position.
        /// </summary>
        [<Erase>]
        member inline _.getPosition() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Changes the title of native window to <c>title</c>.
        /// </summary>
        /// <param name="title"></param>
        [<Erase>]
        member inline _.setTitle(title: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The title of the native window.<br/><br/>&gt; [!NOTE] The title of the web page can be different from the title of
        /// the native window.
        /// </summary>
        [<Erase>]
        member inline _.getTitle() : string = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Changes the attachment point for sheets on macOS. By default, sheets are attached just below the window frame, but you
        /// may want to display them beneath a HTML-rendered toolbar. For example:
        /// </summary>
        /// <param name="offsetY"></param>
        /// <param name="offsetX"></param>
        [<Erase>]
        member inline _.setSheetOffset(offsetY: float, ?offsetX: float) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Starts or stops flashing the window to attract user's attention.
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.flashFrame(flag: bool) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Makes the window not show in the taskbar.
        /// </summary>
        /// <param name="skip"></param>
        [<Erase>]
        member inline _.setSkipTaskbar(skip: bool) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Enters or leaves kiosk mode.
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.setKiosk(flag: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is in kiosk mode.
        /// </summary>
        [<Erase>]
        member inline _.isKiosk() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window is in Windows 10 tablet mode.<br/><br/>Since Windows 10 users can use their PC as tablet, under this
        /// mode apps can choose to optimize their UI for tablets, such as enlarging the titlebar and hiding titlebar buttons.<br/><br/>This API
        /// returns whether the window is in tablet mode, and the <c>resize</c> event can be be used to listen to changes
        /// to tablet mode.
        /// </summary>
        [<Erase>]
        member inline _.isTabletMode() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Window id in the format of DesktopCapturerSource's id. For example "window:1324:0".<br/><br/>More precisely the format is <c>window:id:other_id</c> where <c>id</c> is <c>HWND</c>
        /// on Windows, <c>CGWindowID</c> (<c>uint64_t</c>) on macOS and <c>Window</c> (<c>unsigned long</c>) on Linux. <c>other_id</c> is used to identify web contents (tabs)
        /// so within the same top level window.
        /// </summary>
        [<Erase>]
        member inline _.getMediaSourceId() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The platform-specific handle of the window.<br/><br/>The native type of the handle is <c>HWND</c> on Windows, <c>NSView*</c> on macOS, and <c>Window</c>
        /// (<c>unsigned long</c>) on Linux.
        /// </summary>
        [<Erase>]
        member inline _.getNativeWindowHandle() : Buffer = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Hooks a windows message. The <c>callback</c> is called when the message is received in the WndProc.
        /// </summary>
        /// <param name="message"></param>
        /// <param name="callback"></param>
        [<Erase>]
        member inline _.hookWindowMessage(message: int, callback: BaseWindow.HookWindowMessage.Callback) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// <c>true</c> or <c>false</c> depending on whether the message is hooked.
        /// </summary>
        /// <param name="message"></param>
        [<Erase>]
        member inline _.isWindowMessageHooked(message: int) : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Unhook the window message.
        /// </summary>
        /// <param name="message"></param>
        [<Erase>]
        member inline _.unhookWindowMessage(message: int) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Unhooks all of the window messages.
        /// </summary>
        [<Erase>]
        member inline _.unhookAllWindowMessages() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the pathname of the file the window represents, and the icon of the file will show in window's title
        /// bar.
        /// </summary>
        /// <param name="filename"></param>
        [<Erase>]
        member inline _.setRepresentedFilename(filename: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The pathname of the file the window represents.
        /// </summary>
        [<Erase>]
        member inline _.getRepresentedFilename() : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Specifies whether the window’s document has been edited, and the icon in title bar will become gray when set to
        /// <c>true</c>.
        /// </summary>
        /// <param name="edited"></param>
        [<Erase>]
        member inline _.setDocumentEdited(edited: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window's document has been edited.
        /// </summary>
        [<Erase>]
        member inline _.isDocumentEdited() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets the <c>menu</c> as the window's menu bar.
        /// </summary>
        /// <param name="menu"></param>
        [<Erase>]
        member inline _.setMenu(menu: Option<Menu>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Remove the window's menu bar.
        /// </summary>
        [<Erase>]
        member inline _.removeMenu() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets progress value in progress bar. Valid range is [0, 1.0].<br/><br/>Remove progress bar when progress &lt; 0; Change to indeterminate
        /// mode when progress &gt; 1.<br/><br/>On Linux platform, only supports Unity desktop environment, you need to specify the <c>*.desktop</c> file name
        /// to <c>desktopName</c> field in <c>package.json</c>. By default, it will assume <c>{app.name}.desktop</c>.<br/><br/>On Windows, a mode can be passed. Accepted values are
        /// <c>none</c>, <c>normal</c>, <c>indeterminate</c>, <c>error</c>, and <c>paused</c>. If you call <c>setProgressBar</c> without a mode set (but with a value within the
        /// valid range), <c>normal</c> will be assumed.
        /// </summary>
        /// <param name="progress"></param>
        /// <param name="options"></param>
        [<Erase>]
        member inline _.setProgressBar(progress: double, ?options: BaseWindow.SetProgressBar.Options) : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets a 16 x 16 pixel overlay onto the current taskbar icon, usually used to convey some sort of application
        /// status or to passively notify the user.
        /// </summary>
        /// <param name="overlay">the icon to display on the bottom right corner of the taskbar icon. If this parameter is <c>null</c>, the
        /// overlay is cleared</param>
        /// <param name="description">a description that will be provided to Accessibility screen readers</param>
        [<Erase>]
        member inline _.setOverlayIcon(overlay: Option<NativeImage>, description: string) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Invalidates the window shadow so that it is recomputed based on the current window shape.<br/><br/><c>BaseWindow</c>s that are transparent can sometimes
        /// leave behind visual artifacts on macOS. This method can be used to clear these artifacts when, for example, performing an
        /// animation.
        /// </summary>
        [<Erase>]
        member inline _.invalidateShadow() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets whether the window should have a shadow.
        /// </summary>
        /// <param name="hasShadow"></param>
        [<Erase>]
        member inline _.setHasShadow(hasShadow: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window has a shadow.
        /// </summary>
        [<Erase>]
        member inline _.hasShadow() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the opacity of the window. On Linux, does nothing. Out of bound number values are clamped to the [0,
        /// 1] range.
        /// </summary>
        /// <param name="opacity">between 0.0 (fully transparent) and 1.0 (fully opaque)</param>
        [<Erase>]
        member inline _.setOpacity(opacity: float) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// between 0.0 (fully transparent) and 1.0 (fully opaque). On Linux, always returns 1.
        /// </summary>
        [<Erase>]
        member inline _.getOpacity() : float = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Setting a window shape determines the area within the window where the system permits drawing and user interaction. Outside of
        /// the given region, no pixels will be drawn and no mouse events will be registered. Mouse events outside of the
        /// region will not be received by that window, but will fall through to whatever is behind the window.
        /// </summary>
        /// <param name="rects">Sets a shape on the window. Passing an empty list reverts the window to being rectangular.</param>
        [<Erase; Experimental("Experimental according to Electron")>]
        member inline _.setShape(rects: Rectangle[]) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the buttons were added successfully<br/><br/>Add a thumbnail toolbar with a specified set of buttons to the thumbnail image of
        /// a window in a taskbar button layout. Returns a <c>boolean</c> object indicates whether the thumbnail has been added successfully.<br/><br/>The number
        /// of buttons in thumbnail toolbar should be no greater than 7 due to the limited room. Once you setup the
        /// thumbnail toolbar, the toolbar cannot be removed due to the platform's limitation. But you can call the API with an
        /// empty array to clean the buttons.<br/><br/>The <c>buttons</c> is an array of <c>Button</c> objects:<br/><br/>* <c>Button</c> Object<br/>  * <c>icon</c> NativeImage -
        /// The icon showing in thumbnail toolbar.<br/>  * <c>click</c> Function<br/>  * <c>tooltip</c> string (optional) - The text of the
        /// button's tooltip.<br/>  * <c>flags</c> string[] (optional) - Control specific states and behaviors of the button. By default, it is
        /// <c>['enabled']</c>.<br/><br/>The <c>flags</c> is an array that can include following <c>string</c>s:<br/><br/>* <c>enabled</c> - The button is active and available to the
        /// user.<br/>* <c>disabled</c> - The button is disabled. It is present, but has a visual state indicating it will not respond
        /// to user action.<br/>* <c>dismissonclick</c> - When the button is clicked, the thumbnail window closes immediately.<br/>* <c>nobackground</c> - Do not draw
        /// a button border, use only the image.<br/>* <c>hidden</c> - The button is not shown to the user.<br/>* <c>noninteractive</c> - The
        /// button is enabled but not interactive; no pressed button state is drawn. This value is intended for instances where the
        /// button is used in a notification.
        /// </summary>
        /// <param name="buttons"></param>
        [<Erase>]
        member inline _.setThumbarButtons(buttons: ThumbarButton[]) : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the region of the window to show as the thumbnail image displayed when hovering over the window in the
        /// taskbar. You can reset the thumbnail to be the entire window by specifying an empty region: <c>{ x: 0, y:
        /// 0, width: 0, height: 0 }</c>.
        /// </summary>
        /// <param name="region">Region of the window</param>
        [<Erase>]
        member inline _.setThumbnailClip(region: Rectangle) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the toolTip that is displayed when hovering over the window thumbnail in the taskbar.
        /// </summary>
        /// <param name="toolTip"></param>
        [<Erase>]
        member inline _.setThumbnailToolTip(toolTip: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the properties for the window's taskbar button.<br/><br/>&gt; [!NOTE] <c>relaunchCommand</c> and <c>relaunchDisplayName</c> must always be set together. If one of
        /// those properties is not set, then neither will be used.
        /// </summary>
        /// <param name="appId">Window's App User Model ID. It has to be set, otherwise the other options will have no effect.</param>
        /// <param name="appIconPath">Window's Relaunch Icon.</param>
        /// <param name="appIconIndex">Index of the icon in <c>appIconPath</c>. Ignored when <c>appIconPath</c> is not set. Default is <c>0</c>.</param>
        /// <param name="relaunchCommand">Window's Relaunch Command.</param>
        /// <param name="relaunchDisplayName">Window's Relaunch Display Name.</param>
        [<Erase; ParamObject(0)>]
        member inline _.setAppDetails
            (
                ?appId: string,
                ?appIconPath: string,
                ?appIconIndex: int,
                ?relaunchCommand: string,
                ?relaunchDisplayName: string
            ) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the system accent color and highlighting of active window border.<br/><br/>The <c>accentColor</c> parameter accepts the following values:<br/><br/>* **Color string** -
        /// Sets a custom accent color using standard CSS color formats (Hex, RGB, RGBA, HSL, HSLA, or named colors). Alpha values
        /// in RGBA/HSLA formats are ignored and the color is treated as fully opaque.<br/>* **<c>true</c>** - Uses the system's default accent
        /// color from user preferences in System Settings.<br/>* **<c>false</c>** - Explicitly disables accent color highlighting for the window.<br/><br/>Examples:
        /// </summary>
        /// <param name="accentColor">The accent color for the window. By default, follows user preference in System Settings.</param>
        [<Erase>]
        member inline _.setAccentColor(accentColor: U2<bool, string>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// the system accent color and highlighting of active window border in Hex RGB format.<br/><br/>If a color has been set for
        /// the window that differs from the system accent color, the window accent color will be returned. Otherwise, a boolean will
        /// be returned, with <c>true</c> indicating that the window uses the global system accent color, and <c>false</c> indicating that accent color
        /// highlighting is disabled for this window.
        /// </summary>
        [<Erase>]
        member inline _.getAccentColor() : U2<string, bool> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Changes window icon.
        /// </summary>
        /// <param name="icon"></param>
        [<Erase>]
        member inline _.setIcon(icon: U2<NativeImage, string>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window traffic light buttons should be visible.
        /// </summary>
        /// <param name="visible"></param>
        [<Erase>]
        member inline _.setWindowButtonVisibility(visible: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets whether the window menu bar should hide itself automatically. Once set the menu bar will only show when users
        /// press the single <c>Alt</c> key.<br/><br/>If the menu bar is already visible, calling <c>setAutoHideMenuBar(true)</c> won't hide it immediately.
        /// </summary>
        /// <param name="hide"></param>
        [<Erase>]
        member inline _.setAutoHideMenuBar(hide: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether menu bar automatically hides itself.
        /// </summary>
        [<Erase>]
        member inline _.isMenuBarAutoHide() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets whether the menu bar should be visible. If the menu bar is auto-hide, users can still bring up the
        /// menu bar by pressing the single <c>Alt</c> key.
        /// </summary>
        /// <param name="visible"></param>
        [<Erase>]
        member inline _.setMenuBarVisibility(visible: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether the menu bar is visible.
        /// </summary>
        [<Erase>]
        member inline _.isMenuBarVisible() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// whether the window is arranged via Snap.<br/><br/>The window is snapped via buttons shown when the mouse is hovered over window
        /// maximize button, or by dragging it to the edges of the screen.
        /// </summary>
        [<Erase>]
        member inline _.isSnapped() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets whether the window should be visible on all workspaces.<br/><br/>&gt; [!NOTE] This API does nothing on Windows.
        /// </summary>
        /// <param name="visible"></param>
        /// <param name="visibleOnFullScreen">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Sets whether the window
        /// should be visible above fullscreen windows.</param>
        /// <param name="skipTransformProcessType">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Calling setVisibleOnAllWorkspaces will by
        /// default transform the process type between UIElementApplication and ForegroundApplication to ensure the correct behavior. However, this will hide the window
        /// and dock for a short time every time it is called. If your window is already of type UIElementApplication, you
        /// can bypass this transformation by passing true to skipTransformProcessType.</param>
        [<Erase; ParamObject(1)>]
        member inline _.setVisibleOnAllWorkspaces
            (visible: bool, ?visibleOnFullScreen: bool, ?skipTransformProcessType: bool)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether the window is visible on all workspaces.<br/><br/>&gt; [!NOTE] This API always returns false on Windows.
        /// </summary>
        [<Erase>]
        member inline _.isVisibleOnAllWorkspaces() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Makes the window ignore all mouse events.<br/><br/>All mouse events happened in this window will be passed to the window below
        /// this window, but if this window has focus, it will still receive keyboard events.
        /// </summary>
        /// <param name="ignore"></param>
        /// <param name="forward">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || If true, forwards mouse
        /// move messages to Chromium, enabling mouse related events such as <c>mouseleave</c>. Only used when <c>ignore</c> is true. If <c>ignore</c> is
        /// false, forwarding is always disabled regardless of this value.</param>
        [<Erase; ParamObject(1)>]
        member inline _.setIgnoreMouseEvents(ignore: bool, ?forward: bool) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Prevents the window contents from being captured by other apps.<br/><br/>On macOS it sets the NSWindow's sharingType to NSWindowSharingNone. On Windows
        /// it calls SetWindowDisplayAffinity with <c>WDA_EXCLUDEFROMCAPTURE</c>. For Windows 10 version 2004 and up the window will be removed from capture entirely,
        /// older Windows versions behave as if <c>WDA_MONITOR</c> is applied capturing a black window.
        /// </summary>
        /// <param name="enable"></param>
        [<Erase>]
        member inline _.setContentProtection(enable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// whether or not content protection is currently enabled.
        /// </summary>
        [<Erase>]
        member inline _.isContentProtected() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Changes whether the window can be focused.<br/><br/>On macOS it does not remove the focus from the window.
        /// </summary>
        /// <param name="focusable"></param>
        [<Erase>]
        member inline _.setFocusable(focusable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be focused.
        /// </summary>
        [<Erase>]
        member inline _.isFocusable() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets <c>parent</c> as current window's parent window, passing <c>null</c> will turn current window into a top-level window.
        /// </summary>
        /// <param name="parent"></param>
        [<Erase>]
        member inline _.setParentWindow(parent: Option<BaseWindow>) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The parent window or <c>null</c> if there is no parent.
        /// </summary>
        [<Erase>]
        member inline _.getParentWindow() : Option<BaseWindow> = Unchecked.defaultof<_>

        /// <summary>
        /// All child windows.
        /// </summary>
        [<Erase>]
        member inline _.getChildWindows() : BaseWindow[] = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Controls whether to hide cursor when typing.
        /// </summary>
        /// <param name="autoHide"></param>
        [<Erase>]
        member inline _.setAutoHideCursor(autoHide: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Selects the previous tab when native tabs are enabled and there are other tabs in the window.
        /// </summary>
        [<Erase>]
        member inline _.selectPreviousTab() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Selects the next tab when native tabs are enabled and there are other tabs in the window.
        /// </summary>
        [<Erase>]
        member inline _.selectNextTab() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Shows or hides the tab overview when native tabs are enabled.
        /// </summary>
        [<Erase>]
        member inline _.showAllTabs() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Merges all windows into one window with multiple tabs when native tabs are enabled and there is more than one
        /// open window.
        /// </summary>
        [<Erase>]
        member inline _.mergeAllWindows() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Moves the current tab into a new window if native tabs are enabled and there is more than one tab
        /// in the current window.
        /// </summary>
        [<Erase>]
        member inline _.moveTabToNewWindow() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Toggles the visibility of the tab bar if native tabs are enabled and there is only one tab in the
        /// current window.
        /// </summary>
        [<Erase>]
        member inline _.toggleTabBar() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Adds a window as a tab on this window, after the tab for the window instance.
        /// </summary>
        /// <param name="baseWindow"></param>
        [<Erase>]
        member inline _.addTabbedWindow(baseWindow: BaseWindow) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Adds a vibrancy effect to the window. Passing <c>null</c> or an empty string will remove the vibrancy effect on the
        /// window.
        /// </summary>
        /// <param name="``type``">Can be <c>titlebar</c>, <c>selection</c>, <c>menu</c>, <c>popover</c>, <c>sidebar</c>, <c>header</c>, <c>sheet</c>, <c>window</c>, <c>hud</c>, <c>fullscreen-ui</c>, <c>tooltip</c>, <c>content</c>, <c>under-window</c>, or <c>under-page</c>. See the
        /// macOS documentation for more details.</param>
        [<Erase>]
        member inline _.setVibrancy(``type``: Option<Enums.BaseWindow.SetVibrancy.Type>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// This method sets the browser window's system-drawn background material, including behind the non-client area.<br/><br/>See the Windows documentation for more details.<br/><br/>&gt;
        /// [!NOTE] This method is only supported on Windows 11 22H2 and up.
        /// </summary>
        /// <param name="material"></param>
        [<Erase>]
        member inline _.setBackgroundMaterial(material: Enums.BaseWindow.SetBackgroundMaterial.Material) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Set a custom position for the traffic light buttons in frameless window. Passing <c>null</c> will reset the position to default.
        /// </summary>
        /// <param name="position"></param>
        [<Erase>]
        member inline _.setWindowButtonPosition(position: Option<Point>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The custom position for the traffic light buttons in frameless window, <c>null</c> will be returned when there is no custom
        /// position.
        /// </summary>
        [<Erase>]
        member inline _.getWindowButtonPosition() : Option<Point> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the touchBar layout for the current window. Specifying <c>null</c> or <c>undefined</c> clears the touch bar. This method only has
        /// an effect if the machine has a touch bar.<br/><br/>&gt; [!NOTE] The TouchBar API is currently experimental and may change or
        /// be removed in future Electron releases.
        /// </summary>
        /// <param name="touchBar"></param>
        [<Erase>]
        member inline _.setTouchBar(touchBar: Option<TouchBar>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// On a Window with Window Controls Overlay already enabled, this method updates the style of the title bar overlay.<br/><br/>On Linux,
        /// the <c>symbolColor</c> is automatically calculated to have minimum accessible contrast to the <c>color</c> if not explicitly set.
        /// </summary>
        /// <param name="color">The CSS color of the Window Controls Overlay when enabled.</param>
        /// <param name="symbolColor">The CSS color of the symbols on the Window Controls Overlay when enabled.</param>
        /// <param name="height">The height of the title bar and Window Controls Overlay in pixels.</param>
        [<Erase; ParamObject(0)>]
        member inline _.setTitleBarOverlay(?color: string, ?symbolColor: string, ?height: int) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// A <c>WebContents</c> object this window owns. All web page related events and operations will be done via it.<br/><br/>See the <c>webContents</c>
        /// documentation for its methods and events.
        /// </summary>
        [<Erase>]
        member val webContents: WebContents = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>Integer</c> property representing the unique ID of the window. Each ID is unique among all <c>BrowserWindow</c> instances of the
        /// entire Electron application.
        /// </summary>
        [<Erase>]
        member val id: int = Unchecked.defaultof<_> with get
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>string</c> (optional) property that is equal to the <c>tabbingIdentifier</c> passed to the <c>BrowserWindow</c> constructor or <c>undefined</c> if none was
        /// set.
        /// </summary>
        [<Erase>]
        member val tabbingIdentifier: string = Unchecked.defaultof<_> with get
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window menu bar should hide itself automatically. Once set, the menu bar will
        /// only show when users press the single <c>Alt</c> key.<br/><br/>If the menu bar is already visible, setting this property to <c>true</c>
        /// won't hide it immediately.
        /// </summary>
        [<Erase>]
        member val autoHideMenuBar: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the window is in simple (pre-Lion) fullscreen mode.
        /// </summary>
        [<Erase>]
        member val simpleFullScreen: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> property that determines whether the window is in fullscreen mode.
        /// </summary>
        [<Erase>]
        member val fullScreen: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window is focusable.
        /// </summary>
        [<Erase>]
        member val focusable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window is visible on all workspaces.<br/><br/>&gt; [!NOTE] Always returns false on Windows.
        /// </summary>
        [<Erase>]
        member val visibleOnAllWorkspaces: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the window has a shadow.
        /// </summary>
        [<Erase>]
        member val shadow: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the menu bar should be visible.<br/><br/>&gt; [!NOTE] If the menu bar is auto-hide, users
        /// can still bring up the menu bar by pressing the single <c>Alt</c> key.
        /// </summary>
        [<Erase>]
        member val menuBarVisible: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the window is in kiosk mode.
        /// </summary>
        [<Erase>]
        member val kiosk: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that specifies whether the window’s document has been edited.<br/><br/>The icon in title bar will become gray when
        /// set to <c>true</c>.
        /// </summary>
        [<Erase>]
        member val documentEdited: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>string</c> property that determines the pathname of the file the window represents, and the icon of the file will
        /// show in window's title bar.
        /// </summary>
        [<Erase>]
        member val representedFilename: string = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>string</c> property that determines the title of the native window.<br/><br/>&gt; [!NOTE] The title of the web page can be
        /// different from the title of the native window.
        /// </summary>
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window can be manually minimized by user.<br/><br/>On Linux the setter is a no-op,
        /// although the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val minimizable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window can be manually maximized by user.<br/><br/>On Linux the setter is a no-op,
        /// although the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val maximizable: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
        /// </summary>
        [<Erase>]
        member val fullScreenable: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> property that determines whether the window can be manually resized by user.
        /// </summary>
        [<Erase>]
        member val resizable: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window can be manually closed by user.<br/><br/>On Linux the setter is a no-op,
        /// although the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val closable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines Whether the window can be moved by user.<br/><br/>On Linux the setter is a no-op, although
        /// the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val movable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window is excluded from the application’s Windows menu. <c>false</c> by default.
        /// </summary>
        [<Erase>]
        member val excludedFromShownWindowsMenu: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>string</c> property that defines an alternative title provided only to accessibility tools such as screen readers. This string is
        /// not directly visible to users.
        /// </summary>
        [<Erase>]
        member val accessibleTitle: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that indicates whether the window is arranged via Snap.
        /// </summary>
        [<Erase>]
        member val snapped: bool = Unchecked.defaultof<_> with get
        #endif


        /// <summary>
        /// A <c>Integer</c> property representing the unique ID of the window. Each ID is unique among all <c>BaseWindow</c> instances of the
        /// entire Electron application.
        /// </summary>
        [<Erase>]
        member val id: int = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>View</c> property for the content view of the window.
        /// </summary>
        [<Erase>]
        member val contentView: View = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>string</c> (optional) property that is equal to the <c>tabbingIdentifier</c> passed to the <c>BrowserWindow</c> constructor or <c>undefined</c> if none was
        /// set.
        /// </summary>
        [<Erase>]
        member val tabbingIdentifier: string = Unchecked.defaultof<_> with get
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window menu bar should hide itself automatically. Once set, the menu bar will
        /// only show when users press the single <c>Alt</c> key.<br/><br/>If the menu bar is already visible, setting this property to <c>true</c>
        /// won't hide it immediately.
        /// </summary>
        [<Erase>]
        member val autoHideMenuBar: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the window is in simple (pre-Lion) fullscreen mode.
        /// </summary>
        [<Erase>]
        member val simpleFullScreen: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> property that determines whether the window is in fullscreen mode.
        /// </summary>
        [<Erase>]
        member val fullScreen: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window is focusable.
        /// </summary>
        [<Erase>]
        member val focusable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window is visible on all workspaces.<br/><br/>&gt; [!NOTE] Always returns false on Windows.
        /// </summary>
        [<Erase>]
        member val visibleOnAllWorkspaces: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the window has a shadow.
        /// </summary>
        [<Erase>]
        member val shadow: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the menu bar should be visible.<br/><br/>&gt; [!NOTE] If the menu bar is auto-hide, users
        /// can still bring up the menu bar by pressing the single <c>Alt</c> key.
        /// </summary>
        [<Erase>]
        member val menuBarVisible: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the window is in kiosk mode.
        /// </summary>
        [<Erase>]
        member val kiosk: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that specifies whether the window’s document has been edited.<br/><br/>The icon in title bar will become gray when
        /// set to <c>true</c>.
        /// </summary>
        [<Erase>]
        member val documentEdited: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>string</c> property that determines the pathname of the file the window represents, and the icon of the file will
        /// show in window's title bar.
        /// </summary>
        [<Erase>]
        member val representedFilename: string = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>string</c> property that determines the title of the native window.<br/><br/>&gt; [!NOTE] The title of the web page can be
        /// different from the title of the native window.
        /// </summary>
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window can be manually minimized by user.<br/><br/>On Linux the setter is a no-op,
        /// although the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val minimizable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window can be manually maximized by user.<br/><br/>On Linux the setter is a no-op,
        /// although the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val maximizable: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
        /// </summary>
        [<Erase>]
        member val fullScreenable: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> property that determines whether the window can be manually resized by user.
        /// </summary>
        [<Erase>]
        member val resizable: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window can be manually closed by user.<br/><br/>On Linux the setter is a no-op,
        /// although the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val closable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines Whether the window can be moved by user.<br/><br/>On Linux the setter is a no-op, although
        /// the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val movable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window is excluded from the application’s Windows menu. <c>false</c> by default.
        /// </summary>
        [<Erase>]
        member val excludedFromShownWindowsMenu: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>string</c> property that defines an alternative title provided only to accessibility tools such as screen readers. This string is
        /// not directly visible to users.
        /// </summary>
        [<Erase>]
        member val accessibleTitle: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that indicates whether the window is arranged via Snap.
        /// </summary>
        [<Erase>]
        member val snapped: bool = Unchecked.defaultof<_> with get
        #endif


        /// <summary>
        /// An array of all opened browser windows.
        /// </summary>
        [<Erase>]
        static member mutable getAllWindows() : BrowserWindow[] = Unchecked.defaultof<_>

        /// <summary>
        /// The window that is focused in this application, otherwise returns <c>null</c>.
        /// </summary>
        [<Erase>]
        static member mutable getFocusedWindow() : Option<BrowserWindow> = Unchecked.defaultof<_>

        /// <summary>
        /// The window that owns the given <c>webContents</c> or <c>null</c> if the contents are not owned by a window.
        /// </summary>
        /// <param name="webContents"></param>
        [<Erase>]
        static member mutable fromWebContents(webContents: WebContents) : Option<BrowserWindow> = Unchecked.defaultof<_>

        /// <summary>
        /// &gt; [!NOTE] The <c>BrowserView</c> class is deprecated, and replaced by the new <c>WebContentsView</c> class.<br/><br/>The window that owns the given <c>browserView</c>.
        /// If the given view is not attached to any window, returns <c>null</c>.
        /// </summary>
        /// <param name="browserView"></param>
        [<Erase; System.Obsolete>]
        static member mutable fromBrowserView(browserView: BrowserView) : Option<BrowserWindow> = Unchecked.defaultof<_>

        /// <summary>
        /// The window with the given <c>id</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable fromId(id: int) : Option<BrowserWindow> = Unchecked.defaultof<_>

        /// <summary>
        /// An array of all opened browser windows.
        /// </summary>
        [<Erase>]
        static member mutable getAllWindows() : BaseWindow[] = Unchecked.defaultof<_>

        /// <summary>
        /// The window that is focused in this application, otherwise returns <c>null</c>.
        /// </summary>
        [<Erase>]
        static member mutable getFocusedWindow() : Option<BaseWindow> = Unchecked.defaultof<_>

        /// <summary>
        /// The window with the given <c>id</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable fromId(id: int) : Option<BaseWindow> = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; [!NOTE] The <c>BrowserView</c> class is deprecated, and replaced by the new <c>WebContentsView</c> class.<br/><br/>A <c>BrowserView</c> can be used to embed
    /// additional web content into a <c>BrowserWindow</c>. It is like a child window, except that it is positioned relative to its
    /// owning window. It is meant to be an alternative to the <c>webview</c> tag.<br/><br/>### Class: BrowserView<br/><br/>&gt; Create and control views.<br/><br/>&gt; [!NOTE]
    /// The <c>BrowserView</c> class is deprecated, and replaced by the new <c>WebContentsView</c> class.<br/><br/>Process: Main<br/><br/>This module cannot be used until the <c>ready</c>
    /// event of the <c>app</c> module is emitted.<br/><br/>&gt; [!WARNING] Electron's built-in classes cannot be subclassed in user code. For more information,
    /// see the FAQ.<br/><br/>### Example<br/><br/><code><br/>// In the main process.<br/>const { app, BrowserView, BrowserWindow } = require('electron')<br/><br/>app.whenReady().then(() =&gt; {<br/>  const win
    /// = new BrowserWindow({ width: 800, height: 600 })<br/><br/>  const view = new BrowserView()<br/>  win.setBrowserView(view)<br/>  view.setBounds({ x: 0,
    /// y: 0, width: 300, height: 300 })<br/>  view.webContents.loadURL('https://electronjs.org')<br/>})<br/></code>
    /// </summary>
    [<Import("BrowserView", "electron")>]
    type BrowserView
        /// <param name="webPreferences">Settings of web page's features.</param>
        [<ParamObject(0)>]
        (?webPreferences: WebPreferences) =
        /// <summary>
        /// </summary>
        /// <param name="width">If <c>true</c>, the view's width will grow and shrink together with the window. <c>false</c> by default.</param>
        /// <param name="height">If <c>true</c>, the view's height will grow and shrink together with the window. <c>false</c> by default.</param>
        /// <param name="horizontal">If <c>true</c>, the view's x position and width will grow and shrink proportionally with the window. <c>false</c> by default.</param>
        /// <param name="vertical">If <c>true</c>, the view's y position and height will grow and shrink proportionally with the window. <c>false</c> by default.</param>
        [<Erase; ParamObject(0); Experimental("Experimental according to Electron"); System.Obsolete>]
        member inline _.setAutoResize(?width: bool, ?height: bool, ?horizontal: bool, ?vertical: bool) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Resizes and moves the view to the supplied bounds relative to the window.
        /// </summary>
        /// <param name="bounds"></param>
        [<Erase; Experimental("Experimental according to Electron"); System.Obsolete>]
        member inline _.setBounds(bounds: Rectangle) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>bounds</c> of this BrowserView instance as <c>Object</c>.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron"); System.Obsolete>]
        member inline _.getBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Examples of valid <c>color</c> values:<br/><br/>* Hex<br/>  * <c>#fff</c> (RGB)<br/>  * <c>#ffff</c> (ARGB)<br/>  * <c>#ffffff</c> (RRGGBB)<br/>  *
        /// <c>#ffffffff</c> (AARRGGBB)<br/>* RGB<br/>  * <c>rgb\(([\d]+),\s*([\d]+),\s*([\d]+)\)</c><br/>    * e.g. <c>rgb(255, 255, 255)</c><br/>* RGBA<br/>  * <c>rgba\(([\d]+),\s*([\d]+),\s*([\d]+),\s*([\d.]+)\)</c><br/>
        ///  * e.g. <c>rgba(255, 255, 255, 1.0)</c><br/>* HSL<br/>  * <c>hsl\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%\)</c><br/>    * e.g. <c>hsl(200, 20%, 50%)</c><br/>* HSLA<br/>
        ///  * <c>hsla\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)</c><br/>    * e.g. <c>hsla(200, 20%, 50%, 0.5)</c><br/>* Color name<br/>  * Options are listed in
        /// SkParseColor.cpp<br/>  * Similar to CSS Color Module Level 3 keywords, but case-sensitive.<br/>    * e.g. <c>blueviolet</c> or
        /// <c>red</c><br/><br/>&gt; [!NOTE] Hex format with alpha takes <c>AARRGGBB</c> or <c>ARGB</c>, _not_ <c>RRGGBBAA</c> or <c>RGB</c>.
        /// </summary>
        /// <param name="color">Color in Hex, RGB, ARGB, HSL, HSLA or named CSS color format. The alpha channel is optional for the
        /// hex type.</param>
        [<Erase; Experimental("Experimental according to Electron"); System.Obsolete>]
        member inline _.setBackgroundColor(color: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// A <c>WebContents</c> object owned by this view.
        /// </summary>
        [<Erase; Experimental("Experimental according to Electron"); System.Obsolete>]
        member val webContents: WebContents = Unchecked.defaultof<_> with get, set

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Create and control windows.<br/><br/>Process: Main<br/><br/>&gt; [!NOTE] <c>BaseWindow</c> provides a flexible way to compose multiple web views in a single
    /// window. For windows with only a single, full-size web view, the <c>BrowserWindow</c> class may be a simpler option.<br/><br/>This module cannot
    /// be used until the <c>ready</c> event of the <c>app</c> module is emitted.<br/><br/>### Parent and child windows<br/><br/>By using <c>parent</c> option, you
    /// can create child windows:<br/><br/><code><br/>const { BaseWindow } = require('electron')<br/><br/>const parent = new BaseWindow()<br/>const child = new BaseWindow({ parent })<br/></code><br/><br/>The <c>child</c>
    /// window will always show on top of the <c>parent</c> window.<br/><br/>### Modal windows<br/><br/>A modal window is a child window that disables
    /// parent window. To create a modal window, you have to set both the <c>parent</c> and <c>modal</c> options:<br/><br/><code><br/>const { BaseWindow }
    /// = require('electron')<br/><br/>const parent = new BaseWindow()<br/>const child = new BaseWindow({ parent, modal: true })<br/></code><br/><br/>### Platform notices<br/><br/>* On macOS modal windows
    /// will be displayed as sheets attached to the parent window.<br/>* On macOS the child windows will keep the relative position
    /// to parent window when parent window moves, while on Windows and Linux child windows will not move.<br/>* On Linux the
    /// type of modal windows will be changed to <c>dialog</c>.<br/>* On Linux many desktop environments do not support hiding a modal
    /// window.<br/><br/>### Resource management<br/><br/>When you add a <c>WebContentsView</c> to a <c>BaseWindow</c> and the <c>BaseWindow</c> is closed, the <c>webContents</c> of the <c>WebContentsView</c>
    /// are not destroyed automatically.<br/><br/>It is your responsibility to close the <c>webContents</c> when you no longer need them, e.g. when the
    /// <c>BaseWindow</c> is closed:<br/><br/><code><br/>const { BaseWindow, WebContentsView } = require('electron')<br/><br/>const win = new BaseWindow({ width: 800, height: 600 })<br/><br/>const view =
    /// new WebContentsView()<br/>win.contentView.addChildView(view)<br/><br/>win.on('closed', () =&gt; {<br/>  view.webContents.close()<br/>})<br/></code><br/><br/>Unlike with a <c>BrowserWindow</c>, if you don't explicitly close the <c>webContents</c>, you'll encounter memory
    /// leaks.<br/><br/>### Class: BaseWindow<br/><br/>&gt; Create and control windows.<br/><br/>Process: Main<br/><br/><c>BaseWindow</c> is an EventEmitter.<br/><br/>It creates a new <c>BaseWindow</c> with native properties as set
    /// by the <c>options</c>.<br/><br/>&gt; [!WARNING] Electron's built-in classes cannot be subclassed in user code. For more information, see the FAQ.
    /// </summary>
    [<Import("BaseWindow", "electron")>]
    type BaseWindow
        /// <param name="options"></param>
        (?options: BaseWindowConstructorOptions) =
        interface EventEmitter

        /// <summary>
        /// Emitted when the window is going to be closed. It's emitted before the <c>beforeunload</c> and <c>unload</c> event of the DOM.
        /// Calling <c>event.preventDefault()</c> will cancel the close.<br/><br/>Usually you would want to use the <c>beforeunload</c> handler to decide whether the window should
        /// be closed, which will also be called when the window is reloaded. In Electron, returning any value other than <c>undefined</c>
        /// would cancel the close. For example:<br/><br/>&gt; [!NOTE] There is a subtle difference between the behaviors of <c>window.onbeforeunload = handler</c> and
        /// <c>window.addEventListener('beforeunload', handler)</c>. It is recommended to always set the <c>event.returnValue</c> explicitly, instead of only returning a value, as the former
        /// works more consistently within Electron.
        /// </summary>
        [<Emit("$0.on('close', $1)")>]
        member inline _.onClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is going to be closed. It's emitted before the <c>beforeunload</c> and <c>unload</c> event of the DOM.
        /// Calling <c>event.preventDefault()</c> will cancel the close.<br/><br/>Usually you would want to use the <c>beforeunload</c> handler to decide whether the window should
        /// be closed, which will also be called when the window is reloaded. In Electron, returning any value other than <c>undefined</c>
        /// would cancel the close. For example:<br/><br/>&gt; [!NOTE] There is a subtle difference between the behaviors of <c>window.onbeforeunload = handler</c> and
        /// <c>window.addEventListener('beforeunload', handler)</c>. It is recommended to always set the <c>event.returnValue</c> explicitly, instead of only returning a value, as the former
        /// works more consistently within Electron.
        /// </summary>
        [<Emit("$0.once('close', $1)")>]
        member inline _.onceClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is going to be closed. It's emitted before the <c>beforeunload</c> and <c>unload</c> event of the DOM.
        /// Calling <c>event.preventDefault()</c> will cancel the close.<br/><br/>Usually you would want to use the <c>beforeunload</c> handler to decide whether the window should
        /// be closed, which will also be called when the window is reloaded. In Electron, returning any value other than <c>undefined</c>
        /// would cancel the close. For example:<br/><br/>&gt; [!NOTE] There is a subtle difference between the behaviors of <c>window.onbeforeunload = handler</c> and
        /// <c>window.addEventListener('beforeunload', handler)</c>. It is recommended to always set the <c>event.returnValue</c> explicitly, instead of only returning a value, as the former
        /// works more consistently within Electron.
        /// </summary>
        [<Emit("$0.off('close', $1)")>]
        member inline _.offClose(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is closed. After you have received this event you should remove the reference to the window
        /// and avoid using it any more.
        /// </summary>
        [<Emit("$0.on('closed', $1)")>]
        member inline _.onClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is closed. After you have received this event you should remove the reference to the window
        /// and avoid using it any more.
        /// </summary>
        [<Emit("$0.once('closed', $1)")>]
        member inline _.onceClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is closed. After you have received this event you should remove the reference to the window
        /// and avoid using it any more.
        /// </summary>
        [<Emit("$0.off('closed', $1)")>]
        member inline _.offClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Calling <c>event.preventDefault()</c> can
        /// delay the system shutdown, though it’s generally best to respect the user’s choice to end the session. However, you may
        /// choose to use it if ending the session puts the user at risk of losing data.
        /// </summary>
        [<Emit("$0.on('query-session-end', $1)")>]
        member inline _.onQuerySessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Calling <c>event.preventDefault()</c> can
        /// delay the system shutdown, though it’s generally best to respect the user’s choice to end the session. However, you may
        /// choose to use it if ending the session puts the user at risk of losing data.
        /// </summary>
        [<Emit("$0.once('query-session-end', $1)")>]
        member inline _.onceQuerySessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Calling <c>event.preventDefault()</c> can
        /// delay the system shutdown, though it’s generally best to respect the user’s choice to end the session. However, you may
        /// choose to use it if ending the session puts the user at risk of losing data.
        /// </summary>
        [<Emit("$0.off('query-session-end', $1)")>]
        member inline _.offQuerySessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event
        /// fires, there is no way to prevent the session from ending.
        /// </summary>
        [<Emit("$0.on('session-end', $1)")>]
        member inline _.onSessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event
        /// fires, there is no way to prevent the session from ending.
        /// </summary>
        [<Emit("$0.once('session-end', $1)")>]
        member inline _.onceSessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when a session is about to end due to a shutdown, machine restart, or user log-off. Once this event
        /// fires, there is no way to prevent the session from ending.
        /// </summary>
        [<Emit("$0.off('session-end', $1)")>]
        member inline _.offSessionEnd(handler: WindowSessionEndEvent -> unit) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when the window loses focus.
        /// </summary>
        [<Emit("$0.on('blur', $1)")>]
        member inline _.onBlur(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window loses focus.
        /// </summary>
        [<Emit("$0.once('blur', $1)")>]
        member inline _.onceBlur(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window loses focus.
        /// </summary>
        [<Emit("$0.off('blur', $1)")>]
        member inline _.offBlur(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window gains focus.
        /// </summary>
        [<Emit("$0.on('focus', $1)")>]
        member inline _.onFocus(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window gains focus.
        /// </summary>
        [<Emit("$0.once('focus', $1)")>]
        member inline _.onceFocus(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window gains focus.
        /// </summary>
        [<Emit("$0.off('focus', $1)")>]
        member inline _.offFocus(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is shown.
        /// </summary>
        [<Emit("$0.on('show', $1)")>]
        member inline _.onShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is shown.
        /// </summary>
        [<Emit("$0.once('show', $1)")>]
        member inline _.onceShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is shown.
        /// </summary>
        [<Emit("$0.off('show', $1)")>]
        member inline _.offShow(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is hidden.
        /// </summary>
        [<Emit("$0.on('hide', $1)")>]
        member inline _.onHide(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is hidden.
        /// </summary>
        [<Emit("$0.once('hide', $1)")>]
        member inline _.onceHide(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is hidden.
        /// </summary>
        [<Emit("$0.off('hide', $1)")>]
        member inline _.offHide(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when window is maximized.
        /// </summary>
        [<Emit("$0.on('maximize', $1)")>]
        member inline _.onMaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when window is maximized.
        /// </summary>
        [<Emit("$0.once('maximize', $1)")>]
        member inline _.onceMaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when window is maximized.
        /// </summary>
        [<Emit("$0.off('maximize', $1)")>]
        member inline _.offMaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window exits from a maximized state.
        /// </summary>
        [<Emit("$0.on('unmaximize', $1)")>]
        member inline _.onUnmaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window exits from a maximized state.
        /// </summary>
        [<Emit("$0.once('unmaximize', $1)")>]
        member inline _.onceUnmaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window exits from a maximized state.
        /// </summary>
        [<Emit("$0.off('unmaximize', $1)")>]
        member inline _.offUnmaximize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is minimized.
        /// </summary>
        [<Emit("$0.on('minimize', $1)")>]
        member inline _.onMinimize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is minimized.
        /// </summary>
        [<Emit("$0.once('minimize', $1)")>]
        member inline _.onceMinimize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is minimized.
        /// </summary>
        [<Emit("$0.off('minimize', $1)")>]
        member inline _.offMinimize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is restored from a minimized state.
        /// </summary>
        [<Emit("$0.on('restore', $1)")>]
        member inline _.onRestore(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is restored from a minimized state.
        /// </summary>
        [<Emit("$0.once('restore', $1)")>]
        member inline _.onceRestore(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is restored from a minimized state.
        /// </summary>
        [<Emit("$0.off('restore', $1)")>]
        member inline _.offRestore(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.on('will-resize', $1)")>]
        member inline _.onWillResize(handler: Event -> Rectangle -> BaseWindow.WillResize.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.on('will-resize', $1)")>]
        member inline _.onWillResize(handler: Fable.Electron.EventInterfaces.Root.IOnWillResize -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.once('will-resize', $1)")>]
        member inline _.onceWillResize(handler: Event -> Rectangle -> BaseWindow.WillResize.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.once('will-resize', $1)")>]
        member inline _.onceWillResize(handler: Fable.Electron.EventInterfaces.Root.IOnWillResize -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.off('will-resize', $1)")>]
        member inline _.offWillResize(handler: Event -> Rectangle -> BaseWindow.WillResize.Details -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
        /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
        /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
        /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
        /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
        /// </summary>
        [<Emit("$0.off('will-resize', $1)")>]
        member inline _.offWillResize(handler: Fable.Electron.EventInterfaces.Root.IOnWillResize -> unit) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted after the window has been resized.
        /// </summary>
        [<Emit("$0.on('resize', $1)")>]
        member inline _.onResize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the window has been resized.
        /// </summary>
        [<Emit("$0.once('resize', $1)")>]
        member inline _.onceResize(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted after the window has been resized.
        /// </summary>
        [<Emit("$0.off('resize', $1)")>]
        member inline _.offResize(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window has finished being resized.<br/><br/>This is usually emitted when the window has been resized manually. On
        /// macOS, resizing the window with <c>setBounds</c>/<c>setSize</c> and setting the <c>animate</c> parameter to <c>true</c> will also emit this event once resizing
        /// has finished.
        /// </summary>
        [<Emit("$0.on('resized', $1)")>]
        member inline _.onResized(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window has finished being resized.<br/><br/>This is usually emitted when the window has been resized manually. On
        /// macOS, resizing the window with <c>setBounds</c>/<c>setSize</c> and setting the <c>animate</c> parameter to <c>true</c> will also emit this event once resizing
        /// has finished.
        /// </summary>
        [<Emit("$0.once('resized', $1)")>]
        member inline _.onceResized(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window has finished being resized.<br/><br/>This is usually emitted when the window has been resized manually. On
        /// macOS, resizing the window with <c>setBounds</c>/<c>setSize</c> and setting the <c>animate</c> parameter to <c>true</c> will also emit this event once resizing
        /// has finished.
        /// </summary>
        [<Emit("$0.off('resized', $1)")>]
        member inline _.offResized(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.on('will-move', $1)")>]
        member inline _.onWillMove(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.on('will-move', $1)")>]
        member inline _.onWillMove(handler: Fable.Electron.EventInterfaces.Root.IOnWillMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.once('will-move', $1)")>]
        member inline _.onceWillMove(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.once('will-move', $1)")>]
        member inline _.onceWillMove(handler: Fable.Electron.EventInterfaces.Root.IOnWillMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.off('will-move', $1)")>]
        member inline _.offWillMove(handler: Event -> Rectangle -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
        /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
        /// </summary>
        [<Emit("$0.off('will-move', $1)")>]
        member inline _.offWillMove(handler: Fable.Electron.EventInterfaces.Root.IOnWillMove -> unit) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when the window is being moved to a new position.
        /// </summary>
        [<Emit("$0.on('move', $1)")>]
        member inline _.onMove(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is being moved to a new position.
        /// </summary>
        [<Emit("$0.once('move', $1)")>]
        member inline _.onceMove(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is being moved to a new position.
        /// </summary>
        [<Emit("$0.off('move', $1)")>]
        member inline _.offMove(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window is moved to a new position.<br/><br/>&gt; [!NOTE] On macOS, this event is an alias of
        /// <c>move</c>.
        /// </summary>
        [<Emit("$0.on('moved', $1)")>]
        member inline _.onMoved(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window is moved to a new position.<br/><br/>&gt; [!NOTE] On macOS, this event is an alias of
        /// <c>move</c>.
        /// </summary>
        [<Emit("$0.once('moved', $1)")>]
        member inline _.onceMoved(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted once when the window is moved to a new position.<br/><br/>&gt; [!NOTE] On macOS, this event is an alias of
        /// <c>move</c>.
        /// </summary>
        [<Emit("$0.off('moved', $1)")>]
        member inline _.offMoved(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when the window enters a full-screen state.
        /// </summary>
        [<Emit("$0.on('enter-full-screen', $1)")>]
        member inline _.onEnterFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state.
        /// </summary>
        [<Emit("$0.once('enter-full-screen', $1)")>]
        member inline _.onceEnterFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window enters a full-screen state.
        /// </summary>
        [<Emit("$0.off('enter-full-screen', $1)")>]
        member inline _.offEnterFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state.
        /// </summary>
        [<Emit("$0.on('leave-full-screen', $1)")>]
        member inline _.onLeaveFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state.
        /// </summary>
        [<Emit("$0.once('leave-full-screen', $1)")>]
        member inline _.onceLeaveFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window leaves a full-screen state.
        /// </summary>
        [<Emit("$0.off('leave-full-screen', $1)")>]
        member inline _.offLeaveFullScreen(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.on('always-on-top-changed', $1)")>]
        member inline _.onAlwaysOnTopChanged(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.on('always-on-top-changed', $1)")>]
        member inline _.onAlwaysOnTopChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnAlwaysOnTopChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.once('always-on-top-changed', $1)")>]
        member inline _.onceAlwaysOnTopChanged(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.once('always-on-top-changed', $1)")>]
        member inline _.onceAlwaysOnTopChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnAlwaysOnTopChanged -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.off('always-on-top-changed', $1)")>]
        member inline _.offAlwaysOnTopChanged(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the window is set or unset to show always on top of other windows.
        /// </summary>
        [<Emit("$0.off('always-on-top-changed', $1)")>]
        member inline _.offAlwaysOnTopChanged
            (handler: Fable.Electron.EventInterfaces.Root.IOnAlwaysOnTopChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.on('app-command', $1)")>]
        member inline _.onAppCommand(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.on('app-command', $1)")>]
        member inline _.onAppCommand(handler: Fable.Electron.EventInterfaces.Root.IOnAppCommand -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.once('app-command', $1)")>]
        member inline _.onceAppCommand(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.once('app-command', $1)")>]
        member inline _.onceAppCommand(handler: Fable.Electron.EventInterfaces.Root.IOnAppCommand -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.off('app-command', $1)")>]
        member inline _.offAppCommand(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
        /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
        /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
        /// </summary>
        [<Emit("$0.off('app-command', $1)")>]
        member inline _.offAppCommand(handler: Fable.Electron.EventInterfaces.Root.IOnAppCommand -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.on('swipe', $1)")>]
        member inline _.onSwipe(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.on('swipe', $1)")>]
        member inline _.onSwipe(handler: Fable.Electron.EventInterfaces.Root.IOnSwipe -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.once('swipe', $1)")>]
        member inline _.onceSwipe(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.once('swipe', $1)")>]
        member inline _.onceSwipe(handler: Fable.Electron.EventInterfaces.Root.IOnSwipe -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.off('swipe', $1)")>]
        member inline _.offSwipe(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
        /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
        /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
        /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
        /// </summary>
        [<Emit("$0.off('swipe', $1)")>]
        member inline _.offSwipe(handler: Fable.Electron.EventInterfaces.Root.IOnSwipe -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.on('rotate-gesture', $1)")>]
        member inline _.onRotateGesture(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.on('rotate-gesture', $1)")>]
        member inline _.onRotateGesture(handler: Fable.Electron.EventInterfaces.Root.IOnRotateGesture -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.once('rotate-gesture', $1)")>]
        member inline _.onceRotateGesture(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.once('rotate-gesture', $1)")>]
        member inline _.onceRotateGesture
            (handler: Fable.Electron.EventInterfaces.Root.IOnRotateGesture -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.off('rotate-gesture', $1)")>]
        member inline _.offRotateGesture(handler: Event -> float -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
        /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
        /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
        /// </summary>
        [<Emit("$0.off('rotate-gesture', $1)")>]
        member inline _.offRotateGesture(handler: Fable.Electron.EventInterfaces.Root.IOnRotateGesture -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window opens a sheet.
        /// </summary>
        [<Emit("$0.on('sheet-begin', $1)")>]
        member inline _.onSheetBegin(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window opens a sheet.
        /// </summary>
        [<Emit("$0.once('sheet-begin', $1)")>]
        member inline _.onceSheetBegin(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window opens a sheet.
        /// </summary>
        [<Emit("$0.off('sheet-begin', $1)")>]
        member inline _.offSheetBegin(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window has closed a sheet.
        /// </summary>
        [<Emit("$0.on('sheet-end', $1)")>]
        member inline _.onSheetEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window has closed a sheet.
        /// </summary>
        [<Emit("$0.once('sheet-end', $1)")>]
        member inline _.onceSheetEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the window has closed a sheet.
        /// </summary>
        [<Emit("$0.off('sheet-end', $1)")>]
        member inline _.offSheetEnd(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the native new tab button is clicked.
        /// </summary>
        [<Emit("$0.on('new-window-for-tab', $1)")>]
        member inline _.onNewWindowForTab(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the native new tab button is clicked.
        /// </summary>
        [<Emit("$0.once('new-window-for-tab', $1)")>]
        member inline _.onceNewWindowForTab(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the native new tab button is clicked.
        /// </summary>
        [<Emit("$0.off('new-window-for-tab', $1)")>]
        member inline _.offNewWindowForTab(handler: unit -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.on('system-context-menu', $1)")>]
        member inline _.onSystemContextMenu(handler: Event -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.on('system-context-menu', $1)")>]
        member inline _.onSystemContextMenu
            (handler: Fable.Electron.EventInterfaces.Root.IOnSystemContextMenu -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.once('system-context-menu', $1)")>]
        member inline _.onceSystemContextMenu(handler: Event -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.once('system-context-menu', $1)")>]
        member inline _.onceSystemContextMenu
            (handler: Fable.Electron.EventInterfaces.Root.IOnSystemContextMenu -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.off('system-context-menu', $1)")>]
        member inline _.offSystemContextMenu(handler: Event -> Point -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
        /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
        /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
        /// <c>screen.screenToDipPoint(point)</c>.
        /// </summary>
        [<Emit("$0.off('system-context-menu', $1)")>]
        member inline _.offSystemContextMenu
            (handler: Fable.Electron.EventInterfaces.Root.IOnSystemContextMenu -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets the content view of the window.
        /// </summary>
        /// <param name="view"></param>
        [<Erase>]
        member inline _.setContentView(view: View) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The content view of the window.
        /// </summary>
        [<Erase>]
        member inline _.getContentView() : View = Unchecked.defaultof<_>

        /// <summary>
        /// Force closing the window, the <c>unload</c> and <c>beforeunload</c> event won't be emitted for the web page, and <c>close</c> event will
        /// also not be emitted for this window, but it guarantees the <c>closed</c> event will be emitted.
        /// </summary>
        [<Erase>]
        member inline _.destroy() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Try to close the window. This has the same effect as a user manually clicking the close button of the
        /// window. The web page may cancel the close though. See the close event.
        /// </summary>
        [<Erase>]
        member inline _.close() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Focuses on the window.
        /// </summary>
        [<Erase>]
        member inline _.focus() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Removes focus from the window.
        /// </summary>
        [<Erase>]
        member inline _.blur() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is focused.
        /// </summary>
        [<Erase>]
        member inline _.isFocused() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is destroyed.
        /// </summary>
        [<Erase>]
        member inline _.isDestroyed() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Shows and gives focus to the window.
        /// </summary>
        [<Erase>]
        member inline _.show() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Shows the window but doesn't focus on it.
        /// </summary>
        [<Erase>]
        member inline _.showInactive() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Hides the window.
        /// </summary>
        [<Erase>]
        member inline _.hide() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is visible to the user in the foreground of the app.
        /// </summary>
        [<Erase>]
        member inline _.isVisible() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Whether current window is a modal window.
        /// </summary>
        [<Erase>]
        member inline _.isModal() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Maximizes the window. This will also show (but not focus) the window if it isn't being displayed already.
        /// </summary>
        [<Erase>]
        member inline _.maximize() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Unmaximizes the window.
        /// </summary>
        [<Erase>]
        member inline _.unmaximize() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is maximized.
        /// </summary>
        [<Erase>]
        member inline _.isMaximized() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Minimizes the window. On some platforms the minimized window will be shown in the Dock.
        /// </summary>
        [<Erase>]
        member inline _.minimize() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Restores the window from minimized state to its previous state.
        /// </summary>
        [<Erase>]
        member inline _.restore() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is minimized.
        /// </summary>
        [<Erase>]
        member inline _.isMinimized() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Sets whether the window should be in fullscreen mode.<br/><br/>&gt; [!NOTE] On macOS, fullscreen transitions take place asynchronously. If further actions
        /// depend on the fullscreen state, use the 'enter-full-screen' or &gt; 'leave-full-screen' events.
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.setFullScreen(flag: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is in fullscreen mode.
        /// </summary>
        [<Erase>]
        member inline _.isFullScreen() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Enters or leaves simple fullscreen mode.<br/><br/>Simple fullscreen mode emulates the native fullscreen behavior found in versions of macOS prior to
        /// Lion (10.7).
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.setSimpleFullScreen(flag: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window is in simple (pre-Lion) fullscreen mode.
        /// </summary>
        [<Erase>]
        member inline _.isSimpleFullScreen() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Whether the window is in normal state (not maximized, not minimized, not in fullscreen mode).
        /// </summary>
        [<Erase>]
        member inline _.isNormal() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// This will make a window maintain an aspect ratio. The extra size allows a developer to have space, specified in
        /// pixels, not included within the aspect ratio calculations. This API already takes into account the difference between a window's size
        /// and its content size.<br/><br/>Consider a normal window with an HD video player and associated controls. Perhaps there are 15 pixels
        /// of controls on the left edge, 25 pixels of controls on the right edge and 50 pixels of controls below
        /// the player. In order to maintain a 16:9 aspect ratio (standard aspect ratio for HD @1920x1080) within the player itself
        /// we would call this function with arguments of 16/9 and { width: 40, height: 50 }. The second argument doesn't
        /// care where the extra width and height are within the content view--only that they exist. Sum any extra width and
        /// height areas you have within the overall content view.<br/><br/>The aspect ratio is not respected when window is resized programmatically with
        /// APIs like <c>win.setSize</c>.<br/><br/>To reset an aspect ratio, pass 0 as the <c>aspectRatio</c> value: <c>win.setAspectRatio(0)</c>.
        /// </summary>
        /// <param name="aspectRatio">The aspect ratio to maintain for some portion of the content view.</param>
        /// <param name="extraSize">The extra size not to be included while maintaining the aspect ratio.</param>
        [<Erase>]
        member inline _.setAspectRatio(aspectRatio: float, ?extraSize: Size) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Examples of valid <c>backgroundColor</c> values:<br/><br/>* Hex<br/>  * #fff (shorthand RGB)<br/>  * #ffff (shorthand ARGB)<br/>  * #ffffff (RGB)<br/>
        ///  * #ffffffff (ARGB)<br/>* RGB<br/>  * <c>rgb\(([\d]+),\s*([\d]+),\s*([\d]+)\)</c><br/>    * e.g. rgb(255, 255, 255)<br/>* RGBA<br/>  * <c>rgba\(([\d]+),\s*([\d]+),\s*([\d]+),\s*([\d.]+)\)</c><br/>
        ///    * e.g. rgba(255, 255, 255, 1.0)<br/>* HSL<br/>  * <c>hsl\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%\)</c><br/>    * e.g. hsl(200, 20%,
        /// 50%)<br/>* HSLA<br/>  * <c>hsla\((-?[\d.]+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)</c><br/>    * e.g. hsla(200, 20%, 50%, 0.5)<br/>* Color name<br/>  * Options are
        /// listed in SkParseColor.cpp<br/>  * Similar to CSS Color Module Level 3 keywords, but case-sensitive.<br/>    * e.g.
        /// <c>blueviolet</c> or <c>red</c><br/><br/>Sets the background color of the window. See Setting <c>backgroundColor</c>.
        /// </summary>
        /// <param name="backgroundColor">Color in Hex, RGB, RGBA, HSL, HSLA or named CSS color format. The alpha channel is optional for the
        /// hex type.</param>
        [<Erase>]
        member inline _.setBackgroundColor(backgroundColor: string) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Uses Quick Look to preview a file at a given path.
        /// </summary>
        /// <param name="path">The absolute path to the file to preview with QuickLook. This is important as Quick Look uses the file
        /// name and file extension on the path to determine the content type of the file to open.</param>
        /// <param name="displayName">The name of the file to display on the Quick Look modal view. This is purely visual and does
        /// not affect the content type of the file. Defaults to <c>path</c>.</param>
        [<Erase>]
        member inline _.previewFile(path: string, ?displayName: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Closes the currently open Quick Look panel.
        /// </summary>
        [<Erase>]
        member inline _.closeFilePreview() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Resizes and moves the window to the supplied bounds. Any properties that are not supplied will default to their current
        /// values.<br/><br/>&gt; [!NOTE] On macOS, the y-coordinate value cannot be smaller than the Tray height. The tray height has changed over
        /// time and depends on the operating system, but is between 20-40px. Passing a value lower than the tray height will
        /// result in a window that is flush to the tray.
        /// </summary>
        /// <param name="bounds"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setBounds(bounds: Rectangle, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>bounds</c> of the window as <c>Object</c>.<br/><br/>&gt; [!NOTE] On macOS, the y-coordinate value returned will be at minimum the Tray
        /// height. For example, calling <c>win.setBounds({ x: 25, y: 20, width: 800, height: 600 })</c> with a tray height of 38
        /// means that <c>win.getBounds()</c> will return <c>{ x: 25, y: 38, width: 800, height: 600 }</c>.
        /// </summary>
        [<Erase>]
        member inline _.getBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Gets the background color of the window in Hex (<c>#RRGGBB</c>) format.<br/><br/>See Setting <c>backgroundColor</c>.<br/><br/>&gt; [!NOTE] The alpha value is _not_ returned
        /// alongside the red, green, and blue values.
        /// </summary>
        [<Erase>]
        member inline _.getBackgroundColor() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Resizes and moves the window's client area (e.g. the web page) to the supplied bounds.
        /// </summary>
        /// <param name="bounds"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setContentBounds(bounds: Rectangle, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The <c>bounds</c> of the window's client area as <c>Object</c>.
        /// </summary>
        [<Erase>]
        member inline _.getContentBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window bounds of the normal state<br/><br/>&gt; [!NOTE] Whatever the current state of the window : maximized, minimized or
        /// in fullscreen, this function always returns the position and size of the window in normal state. In normal state, getBounds
        /// and getNormalBounds returns the same <c>Rectangle</c>.
        /// </summary>
        [<Erase>]
        member inline _.getNormalBounds() : Rectangle = Unchecked.defaultof<_>

        /// <summary>
        /// Disable or enable the window.
        /// </summary>
        /// <param name="enable"></param>
        [<Erase>]
        member inline _.setEnabled(enable: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// whether the window is enabled.
        /// </summary>
        [<Erase>]
        member inline _.isEnabled() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Resizes the window to <c>width</c> and <c>height</c>. If <c>width</c> or <c>height</c> are below any set minimum size constraints the window
        /// will snap to its minimum size.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setSize(width: int, height: int, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's width and height.
        /// </summary>
        [<Erase>]
        member inline _.getSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Resizes the window's client area (e.g. the web page) to <c>width</c> and <c>height</c>.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setContentSize(width: int, height: int, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's client area's width and height.
        /// </summary>
        [<Erase>]
        member inline _.getContentSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the minimum size of window to <c>width</c> and <c>height</c>.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [<Erase>]
        member inline _.setMinimumSize(width: int, height: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's minimum width and height.
        /// </summary>
        [<Erase>]
        member inline _.getMinimumSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the maximum size of window to <c>width</c> and <c>height</c>.
        /// </summary>
        /// <param name="width"></param>
        /// <param name="height"></param>
        [<Erase>]
        member inline _.setMaximumSize(width: int, height: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's maximum width and height.
        /// </summary>
        [<Erase>]
        member inline _.getMaximumSize() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Sets whether the window can be manually resized by the user.
        /// </summary>
        /// <param name="resizable"></param>
        [<Erase>]
        member inline _.setResizable(resizable: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window can be manually resized by the user.
        /// </summary>
        [<Erase>]
        member inline _.isResizable() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be moved by user. On Linux does nothing.
        /// </summary>
        /// <param name="movable"></param>
        [<Erase>]
        member inline _.setMovable(movable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be moved by user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isMovable() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be manually minimized by user. On Linux does nothing.
        /// </summary>
        /// <param name="minimizable"></param>
        [<Erase>]
        member inline _.setMinimizable(minimizable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be manually minimized by the user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isMinimizable() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be manually maximized by user. On Linux does nothing.
        /// </summary>
        /// <param name="maximizable"></param>
        [<Erase>]
        member inline _.setMaximizable(maximizable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be manually maximized by user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isMaximizable() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
        /// </summary>
        /// <param name="fullscreenable"></param>
        [<Erase>]
        member inline _.setFullScreenable(fullscreenable: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
        /// </summary>
        [<Erase>]
        member inline _.isFullScreenable() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window can be manually closed by user. On Linux does nothing.
        /// </summary>
        /// <param name="closable"></param>
        [<Erase>]
        member inline _.setClosable(closable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be manually closed by user.<br/><br/>On Linux always returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member inline _.isClosable() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window will be hidden when the user toggles into mission control.
        /// </summary>
        /// <param name="hidden"></param>
        [<Erase>]
        member inline _.setHiddenInMissionControl(hidden: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window will be hidden when the user toggles into mission control.
        /// </summary>
        [<Erase>]
        member inline _.isHiddenInMissionControl() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets whether the window should show always on top of other windows. After setting this, the window is still a
        /// normal window, not a toolbox window which can not be focused on.
        /// </summary>
        /// <param name="flag"></param>
        /// <param name="level">Values include <c>normal</c>, <c>floating</c>, <c>torn-off-menu</c>, <c>modal-panel</c>, <c>main-menu</c>, <c>status</c>, <c>pop-up-menu</c>, <c>screen-saver</c>, and ~~<c>dock</c>~~ (Deprecated). The default is <c>floating</c> when <c>flag</c>
        /// is true. The <c>level</c> is reset to <c>normal</c> when the flag is false. Note that from <c>floating</c> to <c>status</c> included,
        /// the window is placed below the Dock on macOS and below the taskbar on Windows. From <c>pop-up-menu</c> to a higher
        /// it is shown above the Dock on macOS and above the taskbar on Windows. See the macOS docs for more
        /// details.</param>
        /// <param name="relativeLevel">The number of layers higher to set this window relative to the given <c>level</c>. The default is <c>0</c>. Note
        /// that Apple discourages setting levels higher than 1 above <c>screen-saver</c>.</param>
        [<Erase>]
        member inline _.setAlwaysOnTop
            (flag: bool, ?level: Enums.BaseWindow.SetAlwaysOnTop.Level, ?relativeLevel: int)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is always on top of other windows.
        /// </summary>
        [<Erase>]
        member inline _.isAlwaysOnTop() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window above the source window in the sense of z-order. If the <c>mediaSourceId</c> is not of type window or
        /// if the window does not exist then this method throws an error.
        /// </summary>
        /// <param name="mediaSourceId">Window id in the format of DesktopCapturerSource's id. For example "window:1869:0".</param>
        [<Erase>]
        member inline _.moveAbove(mediaSourceId: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window to top(z-order) regardless of focus
        /// </summary>
        [<Erase>]
        member inline _.moveTop() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window to the center of the screen.
        /// </summary>
        [<Erase>]
        member inline _.center() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Moves window to <c>x</c> and <c>y</c>.
        /// </summary>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="animate"></param>
        [<Erase>]
        member inline _.setPosition(x: int, y: int, ?animate: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Contains the window's current position.
        /// </summary>
        [<Erase>]
        member inline _.getPosition() : int[] = Unchecked.defaultof<_>

        /// <summary>
        /// Changes the title of native window to <c>title</c>.
        /// </summary>
        /// <param name="title"></param>
        [<Erase>]
        member inline _.setTitle(title: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The title of the native window.<br/><br/>&gt; [!NOTE] The title of the web page can be different from the title of
        /// the native window.
        /// </summary>
        [<Erase>]
        member inline _.getTitle() : string = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Changes the attachment point for sheets on macOS. By default, sheets are attached just below the window frame, but you
        /// may want to display them beneath a HTML-rendered toolbar. For example:
        /// </summary>
        /// <param name="offsetY"></param>
        /// <param name="offsetX"></param>
        [<Erase>]
        member inline _.setSheetOffset(offsetY: float, ?offsetX: float) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Starts or stops flashing the window to attract user's attention.
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.flashFrame(flag: bool) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Makes the window not show in the taskbar.
        /// </summary>
        /// <param name="skip"></param>
        [<Erase>]
        member inline _.setSkipTaskbar(skip: bool) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Enters or leaves kiosk mode.
        /// </summary>
        /// <param name="flag"></param>
        [<Erase>]
        member inline _.setKiosk(flag: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window is in kiosk mode.
        /// </summary>
        [<Erase>]
        member inline _.isKiosk() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window is in Windows 10 tablet mode.<br/><br/>Since Windows 10 users can use their PC as tablet, under this
        /// mode apps can choose to optimize their UI for tablets, such as enlarging the titlebar and hiding titlebar buttons.<br/><br/>This API
        /// returns whether the window is in tablet mode, and the <c>resize</c> event can be be used to listen to changes
        /// to tablet mode.
        /// </summary>
        [<Erase>]
        member inline _.isTabletMode() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Window id in the format of DesktopCapturerSource's id. For example "window:1324:0".<br/><br/>More precisely the format is <c>window:id:other_id</c> where <c>id</c> is <c>HWND</c>
        /// on Windows, <c>CGWindowID</c> (<c>uint64_t</c>) on macOS and <c>Window</c> (<c>unsigned long</c>) on Linux. <c>other_id</c> is used to identify web contents (tabs)
        /// so within the same top level window.
        /// </summary>
        [<Erase>]
        member inline _.getMediaSourceId() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The platform-specific handle of the window.<br/><br/>The native type of the handle is <c>HWND</c> on Windows, <c>NSView*</c> on macOS, and <c>Window</c>
        /// (<c>unsigned long</c>) on Linux.
        /// </summary>
        [<Erase>]
        member inline _.getNativeWindowHandle() : Buffer = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Hooks a windows message. The <c>callback</c> is called when the message is received in the WndProc.
        /// </summary>
        /// <param name="message"></param>
        /// <param name="callback"></param>
        [<Erase>]
        member inline _.hookWindowMessage(message: int, callback: BaseWindow.HookWindowMessage.Callback) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// <c>true</c> or <c>false</c> depending on whether the message is hooked.
        /// </summary>
        /// <param name="message"></param>
        [<Erase>]
        member inline _.isWindowMessageHooked(message: int) : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Unhook the window message.
        /// </summary>
        /// <param name="message"></param>
        [<Erase>]
        member inline _.unhookWindowMessage(message: int) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Unhooks all of the window messages.
        /// </summary>
        [<Erase>]
        member inline _.unhookAllWindowMessages() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the pathname of the file the window represents, and the icon of the file will show in window's title
        /// bar.
        /// </summary>
        /// <param name="filename"></param>
        [<Erase>]
        member inline _.setRepresentedFilename(filename: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The pathname of the file the window represents.
        /// </summary>
        [<Erase>]
        member inline _.getRepresentedFilename() : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Specifies whether the window’s document has been edited, and the icon in title bar will become gray when set to
        /// <c>true</c>.
        /// </summary>
        /// <param name="edited"></param>
        [<Erase>]
        member inline _.setDocumentEdited(edited: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window's document has been edited.
        /// </summary>
        [<Erase>]
        member inline _.isDocumentEdited() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets the <c>menu</c> as the window's menu bar.
        /// </summary>
        /// <param name="menu"></param>
        [<Erase>]
        member inline _.setMenu(menu: Option<Menu>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Remove the window's menu bar.
        /// </summary>
        [<Erase>]
        member inline _.removeMenu() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets progress value in progress bar. Valid range is [0, 1.0].<br/><br/>Remove progress bar when progress &lt; 0; Change to indeterminate
        /// mode when progress &gt; 1.<br/><br/>On Linux platform, only supports Unity desktop environment, you need to specify the <c>*.desktop</c> file name
        /// to <c>desktopName</c> field in <c>package.json</c>. By default, it will assume <c>{app.name}.desktop</c>.<br/><br/>On Windows, a mode can be passed. Accepted values are
        /// <c>none</c>, <c>normal</c>, <c>indeterminate</c>, <c>error</c>, and <c>paused</c>. If you call <c>setProgressBar</c> without a mode set (but with a value within the
        /// valid range), <c>normal</c> will be assumed.
        /// </summary>
        /// <param name="progress"></param>
        /// <param name="options"></param>
        [<Erase>]
        member inline _.setProgressBar(progress: double, ?options: BaseWindow.SetProgressBar.Options) : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets a 16 x 16 pixel overlay onto the current taskbar icon, usually used to convey some sort of application
        /// status or to passively notify the user.
        /// </summary>
        /// <param name="overlay">the icon to display on the bottom right corner of the taskbar icon. If this parameter is <c>null</c>, the
        /// overlay is cleared</param>
        /// <param name="description">a description that will be provided to Accessibility screen readers</param>
        [<Erase>]
        member inline _.setOverlayIcon(overlay: Option<NativeImage>, description: string) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Invalidates the window shadow so that it is recomputed based on the current window shape.<br/><br/><c>BaseWindow</c>s that are transparent can sometimes
        /// leave behind visual artifacts on macOS. This method can be used to clear these artifacts when, for example, performing an
        /// animation.
        /// </summary>
        [<Erase>]
        member inline _.invalidateShadow() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets whether the window should have a shadow.
        /// </summary>
        /// <param name="hasShadow"></param>
        [<Erase>]
        member inline _.setHasShadow(hasShadow: bool) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Whether the window has a shadow.
        /// </summary>
        [<Erase>]
        member inline _.hasShadow() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the opacity of the window. On Linux, does nothing. Out of bound number values are clamped to the [0,
        /// 1] range.
        /// </summary>
        /// <param name="opacity">between 0.0 (fully transparent) and 1.0 (fully opaque)</param>
        [<Erase>]
        member inline _.setOpacity(opacity: float) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// between 0.0 (fully transparent) and 1.0 (fully opaque). On Linux, always returns 1.
        /// </summary>
        [<Erase>]
        member inline _.getOpacity() : float = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Setting a window shape determines the area within the window where the system permits drawing and user interaction. Outside of
        /// the given region, no pixels will be drawn and no mouse events will be registered. Mouse events outside of the
        /// region will not be received by that window, but will fall through to whatever is behind the window.
        /// </summary>
        /// <param name="rects">Sets a shape on the window. Passing an empty list reverts the window to being rectangular.</param>
        [<Erase; Experimental("Experimental according to Electron")>]
        member inline _.setShape(rects: Rectangle[]) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the buttons were added successfully<br/><br/>Add a thumbnail toolbar with a specified set of buttons to the thumbnail image of
        /// a window in a taskbar button layout. Returns a <c>boolean</c> object indicates whether the thumbnail has been added successfully.<br/><br/>The number
        /// of buttons in thumbnail toolbar should be no greater than 7 due to the limited room. Once you setup the
        /// thumbnail toolbar, the toolbar cannot be removed due to the platform's limitation. But you can call the API with an
        /// empty array to clean the buttons.<br/><br/>The <c>buttons</c> is an array of <c>Button</c> objects:<br/><br/>* <c>Button</c> Object<br/>  * <c>icon</c> NativeImage -
        /// The icon showing in thumbnail toolbar.<br/>  * <c>click</c> Function<br/>  * <c>tooltip</c> string (optional) - The text of the
        /// button's tooltip.<br/>  * <c>flags</c> string[] (optional) - Control specific states and behaviors of the button. By default, it is
        /// <c>['enabled']</c>.<br/><br/>The <c>flags</c> is an array that can include following <c>string</c>s:<br/><br/>* <c>enabled</c> - The button is active and available to the
        /// user.<br/>* <c>disabled</c> - The button is disabled. It is present, but has a visual state indicating it will not respond
        /// to user action.<br/>* <c>dismissonclick</c> - When the button is clicked, the thumbnail window closes immediately.<br/>* <c>nobackground</c> - Do not draw
        /// a button border, use only the image.<br/>* <c>hidden</c> - The button is not shown to the user.<br/>* <c>noninteractive</c> - The
        /// button is enabled but not interactive; no pressed button state is drawn. This value is intended for instances where the
        /// button is used in a notification.
        /// </summary>
        /// <param name="buttons"></param>
        [<Erase>]
        member inline _.setThumbarButtons(buttons: ThumbarButton[]) : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the region of the window to show as the thumbnail image displayed when hovering over the window in the
        /// taskbar. You can reset the thumbnail to be the entire window by specifying an empty region: <c>{ x: 0, y:
        /// 0, width: 0, height: 0 }</c>.
        /// </summary>
        /// <param name="region">Region of the window</param>
        [<Erase>]
        member inline _.setThumbnailClip(region: Rectangle) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the toolTip that is displayed when hovering over the window thumbnail in the taskbar.
        /// </summary>
        /// <param name="toolTip"></param>
        [<Erase>]
        member inline _.setThumbnailToolTip(toolTip: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the properties for the window's taskbar button.<br/><br/>&gt; [!NOTE] <c>relaunchCommand</c> and <c>relaunchDisplayName</c> must always be set together. If one of
        /// those properties is not set, then neither will be used.
        /// </summary>
        /// <param name="appId">Window's App User Model ID. It has to be set, otherwise the other options will have no effect.</param>
        /// <param name="appIconPath">Window's Relaunch Icon.</param>
        /// <param name="appIconIndex">Index of the icon in <c>appIconPath</c>. Ignored when <c>appIconPath</c> is not set. Default is <c>0</c>.</param>
        /// <param name="relaunchCommand">Window's Relaunch Command.</param>
        /// <param name="relaunchDisplayName">Window's Relaunch Display Name.</param>
        [<Erase; ParamObject(0)>]
        member inline _.setAppDetails
            (
                ?appId: string,
                ?appIconPath: string,
                ?appIconIndex: int,
                ?relaunchCommand: string,
                ?relaunchDisplayName: string
            ) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the system accent color and highlighting of active window border.<br/><br/>The <c>accentColor</c> parameter accepts the following values:<br/><br/>* **Color string** -
        /// Sets a custom accent color using standard CSS color formats (Hex, RGB, RGBA, HSL, HSLA, or named colors). Alpha values
        /// in RGBA/HSLA formats are ignored and the color is treated as fully opaque.<br/>* **<c>true</c>** - Uses the system's default accent
        /// color from user preferences in System Settings.<br/>* **<c>false</c>** - Explicitly disables accent color highlighting for the window.<br/><br/>Examples:
        /// </summary>
        /// <param name="accentColor">The accent color for the window. By default, follows user preference in System Settings.</param>
        [<Erase>]
        member inline _.setAccentColor(accentColor: U2<bool, string>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// the system accent color and highlighting of active window border in Hex RGB format.<br/><br/>If a color has been set for
        /// the window that differs from the system accent color, the window accent color will be returned. Otherwise, a boolean will
        /// be returned, with <c>true</c> indicating that the window uses the global system accent color, and <c>false</c> indicating that accent color
        /// highlighting is disabled for this window.
        /// </summary>
        [<Erase>]
        member inline _.getAccentColor() : U2<string, bool> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Changes window icon.
        /// </summary>
        /// <param name="icon"></param>
        [<Erase>]
        member inline _.setIcon(icon: U2<NativeImage, string>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets whether the window traffic light buttons should be visible.
        /// </summary>
        /// <param name="visible"></param>
        [<Erase>]
        member inline _.setWindowButtonVisibility(visible: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets whether the window menu bar should hide itself automatically. Once set the menu bar will only show when users
        /// press the single <c>Alt</c> key.<br/><br/>If the menu bar is already visible, calling <c>setAutoHideMenuBar(true)</c> won't hide it immediately.
        /// </summary>
        /// <param name="hide"></param>
        [<Erase>]
        member inline _.setAutoHideMenuBar(hide: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether menu bar automatically hides itself.
        /// </summary>
        [<Erase>]
        member inline _.isMenuBarAutoHide() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets whether the menu bar should be visible. If the menu bar is auto-hide, users can still bring up the
        /// menu bar by pressing the single <c>Alt</c> key.
        /// </summary>
        /// <param name="visible"></param>
        [<Erase>]
        member inline _.setMenuBarVisibility(visible: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether the menu bar is visible.
        /// </summary>
        [<Erase>]
        member inline _.isMenuBarVisible() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// whether the window is arranged via Snap.<br/><br/>The window is snapped via buttons shown when the mouse is hovered over window
        /// maximize button, or by dragging it to the edges of the screen.
        /// </summary>
        [<Erase>]
        member inline _.isSnapped() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Sets whether the window should be visible on all workspaces.<br/><br/>&gt; [!NOTE] This API does nothing on Windows.
        /// </summary>
        /// <param name="visible"></param>
        /// <param name="visibleOnFullScreen">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Sets whether the window
        /// should be visible above fullscreen windows.</param>
        /// <param name="skipTransformProcessType">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Calling setVisibleOnAllWorkspaces will by
        /// default transform the process type between UIElementApplication and ForegroundApplication to ensure the correct behavior. However, this will hide the window
        /// and dock for a short time every time it is called. If your window is already of type UIElementApplication, you
        /// can bypass this transformation by passing true to skipTransformProcessType.</param>
        [<Erase; ParamObject(1)>]
        member inline _.setVisibleOnAllWorkspaces
            (visible: bool, ?visibleOnFullScreen: bool, ?skipTransformProcessType: bool)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether the window is visible on all workspaces.<br/><br/>&gt; [!NOTE] This API always returns false on Windows.
        /// </summary>
        [<Erase>]
        member inline _.isVisibleOnAllWorkspaces() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Makes the window ignore all mouse events.<br/><br/>All mouse events happened in this window will be passed to the window below
        /// this window, but if this window has focus, it will still receive keyboard events.
        /// </summary>
        /// <param name="ignore"></param>
        /// <param name="forward">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || If true, forwards mouse
        /// move messages to Chromium, enabling mouse related events such as <c>mouseleave</c>. Only used when <c>ignore</c> is true. If <c>ignore</c> is
        /// false, forwarding is always disabled regardless of this value.</param>
        [<Erase; ParamObject(1)>]
        member inline _.setIgnoreMouseEvents(ignore: bool, ?forward: bool) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Prevents the window contents from being captured by other apps.<br/><br/>On macOS it sets the NSWindow's sharingType to NSWindowSharingNone. On Windows
        /// it calls SetWindowDisplayAffinity with <c>WDA_EXCLUDEFROMCAPTURE</c>. For Windows 10 version 2004 and up the window will be removed from capture entirely,
        /// older Windows versions behave as if <c>WDA_MONITOR</c> is applied capturing a black window.
        /// </summary>
        /// <param name="enable"></param>
        [<Erase>]
        member inline _.setContentProtection(enable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// whether or not content protection is currently enabled.
        /// </summary>
        [<Erase>]
        member inline _.isContentProtected() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Changes whether the window can be focused.<br/><br/>On macOS it does not remove the focus from the window.
        /// </summary>
        /// <param name="focusable"></param>
        [<Erase>]
        member inline _.setFocusable(focusable: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the window can be focused.
        /// </summary>
        [<Erase>]
        member inline _.isFocusable() : bool = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets <c>parent</c> as current window's parent window, passing <c>null</c> will turn current window into a top-level window.
        /// </summary>
        /// <param name="parent"></param>
        [<Erase>]
        member inline _.setParentWindow(parent: Option<BaseWindow>) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The parent window or <c>null</c> if there is no parent.
        /// </summary>
        [<Erase>]
        member inline _.getParentWindow() : Option<BaseWindow> = Unchecked.defaultof<_>

        /// <summary>
        /// All child windows.
        /// </summary>
        [<Erase>]
        member inline _.getChildWindows() : BaseWindow[] = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Controls whether to hide cursor when typing.
        /// </summary>
        /// <param name="autoHide"></param>
        [<Erase>]
        member inline _.setAutoHideCursor(autoHide: bool) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Selects the previous tab when native tabs are enabled and there are other tabs in the window.
        /// </summary>
        [<Erase>]
        member inline _.selectPreviousTab() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Selects the next tab when native tabs are enabled and there are other tabs in the window.
        /// </summary>
        [<Erase>]
        member inline _.selectNextTab() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Shows or hides the tab overview when native tabs are enabled.
        /// </summary>
        [<Erase>]
        member inline _.showAllTabs() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Merges all windows into one window with multiple tabs when native tabs are enabled and there is more than one
        /// open window.
        /// </summary>
        [<Erase>]
        member inline _.mergeAllWindows() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Moves the current tab into a new window if native tabs are enabled and there is more than one tab
        /// in the current window.
        /// </summary>
        [<Erase>]
        member inline _.moveTabToNewWindow() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Toggles the visibility of the tab bar if native tabs are enabled and there is only one tab in the
        /// current window.
        /// </summary>
        [<Erase>]
        member inline _.toggleTabBar() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Adds a window as a tab on this window, after the tab for the window instance.
        /// </summary>
        /// <param name="baseWindow"></param>
        [<Erase>]
        member inline _.addTabbedWindow(baseWindow: BaseWindow) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Adds a vibrancy effect to the window. Passing <c>null</c> or an empty string will remove the vibrancy effect on the
        /// window.
        /// </summary>
        /// <param name="``type``">Can be <c>titlebar</c>, <c>selection</c>, <c>menu</c>, <c>popover</c>, <c>sidebar</c>, <c>header</c>, <c>sheet</c>, <c>window</c>, <c>hud</c>, <c>fullscreen-ui</c>, <c>tooltip</c>, <c>content</c>, <c>under-window</c>, or <c>under-page</c>. See the
        /// macOS documentation for more details.</param>
        [<Erase>]
        member inline _.setVibrancy(``type``: Option<Enums.BaseWindow.SetVibrancy.Type>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// This method sets the browser window's system-drawn background material, including behind the non-client area.<br/><br/>See the Windows documentation for more details.<br/><br/>&gt;
        /// [!NOTE] This method is only supported on Windows 11 22H2 and up.
        /// </summary>
        /// <param name="material"></param>
        [<Erase>]
        member inline _.setBackgroundMaterial(material: Enums.BaseWindow.SetBackgroundMaterial.Material) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Set a custom position for the traffic light buttons in frameless window. Passing <c>null</c> will reset the position to default.
        /// </summary>
        /// <param name="position"></param>
        [<Erase>]
        member inline _.setWindowButtonPosition(position: Option<Point>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The custom position for the traffic light buttons in frameless window, <c>null</c> will be returned when there is no custom
        /// position.
        /// </summary>
        [<Erase>]
        member inline _.getWindowButtonPosition() : Option<Point> = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the touchBar layout for the current window. Specifying <c>null</c> or <c>undefined</c> clears the touch bar. This method only has
        /// an effect if the machine has a touch bar.<br/><br/>&gt; [!NOTE] The TouchBar API is currently experimental and may change or
        /// be removed in future Electron releases.
        /// </summary>
        /// <param name="touchBar"></param>
        [<Erase>]
        member inline _.setTouchBar(touchBar: Option<TouchBar>) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// On a Window with Window Controls Overlay already enabled, this method updates the style of the title bar overlay.<br/><br/>On Linux,
        /// the <c>symbolColor</c> is automatically calculated to have minimum accessible contrast to the <c>color</c> if not explicitly set.
        /// </summary>
        /// <param name="color">The CSS color of the Window Controls Overlay when enabled.</param>
        /// <param name="symbolColor">The CSS color of the symbols on the Window Controls Overlay when enabled.</param>
        /// <param name="height">The height of the title bar and Window Controls Overlay in pixels.</param>
        [<Erase; ParamObject(0)>]
        member inline _.setTitleBarOverlay(?color: string, ?symbolColor: string, ?height: int) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// A <c>Integer</c> property representing the unique ID of the window. Each ID is unique among all <c>BaseWindow</c> instances of the
        /// entire Electron application.
        /// </summary>
        [<Erase>]
        member val id: int = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>View</c> property for the content view of the window.
        /// </summary>
        [<Erase>]
        member val contentView: View = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>string</c> (optional) property that is equal to the <c>tabbingIdentifier</c> passed to the <c>BrowserWindow</c> constructor or <c>undefined</c> if none was
        /// set.
        /// </summary>
        [<Erase>]
        member val tabbingIdentifier: string = Unchecked.defaultof<_> with get
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window menu bar should hide itself automatically. Once set, the menu bar will
        /// only show when users press the single <c>Alt</c> key.<br/><br/>If the menu bar is already visible, setting this property to <c>true</c>
        /// won't hide it immediately.
        /// </summary>
        [<Erase>]
        member val autoHideMenuBar: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the window is in simple (pre-Lion) fullscreen mode.
        /// </summary>
        [<Erase>]
        member val simpleFullScreen: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> property that determines whether the window is in fullscreen mode.
        /// </summary>
        [<Erase>]
        member val fullScreen: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window is focusable.
        /// </summary>
        [<Erase>]
        member val focusable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window is visible on all workspaces.<br/><br/>&gt; [!NOTE] Always returns false on Windows.
        /// </summary>
        [<Erase>]
        member val visibleOnAllWorkspaces: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the window has a shadow.
        /// </summary>
        [<Erase>]
        member val shadow: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the menu bar should be visible.<br/><br/>&gt; [!NOTE] If the menu bar is auto-hide, users
        /// can still bring up the menu bar by pressing the single <c>Alt</c> key.
        /// </summary>
        [<Erase>]
        member val menuBarVisible: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the window is in kiosk mode.
        /// </summary>
        [<Erase>]
        member val kiosk: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that specifies whether the window’s document has been edited.<br/><br/>The icon in title bar will become gray when
        /// set to <c>true</c>.
        /// </summary>
        [<Erase>]
        member val documentEdited: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>string</c> property that determines the pathname of the file the window represents, and the icon of the file will
        /// show in window's title bar.
        /// </summary>
        [<Erase>]
        member val representedFilename: string = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>string</c> property that determines the title of the native window.<br/><br/>&gt; [!NOTE] The title of the web page can be
        /// different from the title of the native window.
        /// </summary>
        [<Erase>]
        member val title: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window can be manually minimized by user.<br/><br/>On Linux the setter is a no-op,
        /// although the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val minimizable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window can be manually maximized by user.<br/><br/>On Linux the setter is a no-op,
        /// although the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val maximizable: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>boolean</c> property that determines whether the maximize/zoom window button toggles fullscreen mode or maximizes the window.
        /// </summary>
        [<Erase>]
        member val fullScreenable: bool = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>boolean</c> property that determines whether the window can be manually resized by user.
        /// </summary>
        [<Erase>]
        member val resizable: bool = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window can be manually closed by user.<br/><br/>On Linux the setter is a no-op,
        /// although the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val closable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines Whether the window can be moved by user.<br/><br/>On Linux the setter is a no-op, although
        /// the getter returns <c>true</c>.
        /// </summary>
        [<Erase>]
        member val movable: bool = Unchecked.defaultof<_> with get, set
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that determines whether the window is excluded from the application’s Windows menu. <c>false</c> by default.
        /// </summary>
        [<Erase>]
        member val excludedFromShownWindowsMenu: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>string</c> property that defines an alternative title provided only to accessibility tools such as screen readers. This string is
        /// not directly visible to users.
        /// </summary>
        [<Erase>]
        member val accessibleTitle: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that indicates whether the window is arranged via Snap.
        /// </summary>
        [<Erase>]
        member val snapped: bool = Unchecked.defaultof<_> with get
        #endif


        /// <summary>
        /// An array of all opened browser windows.
        /// </summary>
        [<Erase>]
        static member mutable getAllWindows() : BaseWindow[] = Unchecked.defaultof<_>

        /// <summary>
        /// The window that is focused in this application, otherwise returns <c>null</c>.
        /// </summary>
        [<Erase>]
        static member mutable getFocusedWindow() : Option<BaseWindow> = Unchecked.defaultof<_>

        /// <summary>
        /// The window with the given <c>id</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable fromId(id: int) : Option<BaseWindow> = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Enable apps to automatically update themselves.<br/><br/>Process: Main<br/><br/>**See also: A detailed guide about how to implement updates in your application.**<br/><br/><c>autoUpdater</c>
    /// is an EventEmitter.<br/><br/>### Platform Notices<br/><br/>Currently, only macOS and Windows are supported. There is no built-in support for auto-updater on Linux,
    /// so it is recommended to use the distribution's package manager to update your app.<br/><br/>In addition, there are some subtle differences
    /// on each platform:<br/><br/>### macOS<br/><br/>On macOS, the <c>autoUpdater</c> module is built upon Squirrel.Mac, meaning you don't need any special setup to
    /// make it work. For server-side requirements, you can read Server Support. Note that App Transport Security (ATS) applies to all
    /// requests made as part of the update process. Apps that need to disable ATS can add the <c>NSAllowsArbitraryLoads</c> key to
    /// their app's plist.<br/><br/>&gt; [!IMPORTANT] Your application must be signed for automatic updates on macOS. This is a requirement of <c>Squirrel.Mac</c>.<br/><br/>###
    /// Windows<br/><br/>On Windows, you have to install your app into a user's machine before you can use the <c>autoUpdater</c>, so it
    /// is recommended that you use electron-winstaller or Electron Forge's Squirrel.Windows maker to generate a Windows installer.<br/><br/>Apps built with Squirrel.Windows will
    /// trigger custom launch events that must be handled by your Electron application to ensure proper setup and teardown.<br/><br/>Squirrel.Windows apps will
    /// launch with the <c>--squirrel-firstrun</c> argument immediately after installation. During this time, Squirrel.Windows will obtain a file lock on your app,
    /// and <c>autoUpdater</c> requests will fail until the lock is released. In practice, this means that you won't be able to
    /// check for updates on first launch for the first few seconds. You can work around this by not checking for
    /// updates when <c>process.argv</c> contains the <c>--squirrel-firstrun</c> flag or by setting a 10-second timeout on your update checks (see electron/electron#7155 for
    /// more information).<br/><br/>The installer generated with Squirrel.Windows will create a shortcut icon with an Application User Model ID in the format
    /// of <c>com.squirrel.PACKAGE_ID.YOUR_EXE_WITHOUT_DOT_EXE</c>, examples are <c>com.squirrel.slack.Slack</c> and <c>com.squirrel.code.Code</c>. You have to use the same ID for your app with <c>app.setAppUserModelId</c> API,
    /// otherwise Windows will not be able to pin your app properly in task bar.
    /// </summary>
    [<Import("autoUpdater", "electron")>]
    type AutoUpdater =
        interface EventEmitter

        /// <summary>
        /// Emitted when there is an error while updating.
        /// </summary>
        [<Emit("$0.on('error', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is an error while updating.
        /// </summary>
        [<Emit("$0.once('error', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onceError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is an error while updating.
        /// </summary>
        [<Emit("$0.off('error', $1)"); Import("autoUpdater", "electron")>]
        static member mutable offError(handler: Error -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when checking for an available update has started.
        /// </summary>
        [<Emit("$0.on('checking-for-update', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onCheckingForUpdate(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when checking for an available update has started.
        /// </summary>
        [<Emit("$0.once('checking-for-update', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onceCheckingForUpdate(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when checking for an available update has started.
        /// </summary>
        [<Emit("$0.off('checking-for-update', $1)"); Import("autoUpdater", "electron")>]
        static member mutable offCheckingForUpdate(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is an available update. The update is downloaded automatically.
        /// </summary>
        [<Emit("$0.on('update-available', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onUpdateAvailable(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is an available update. The update is downloaded automatically.
        /// </summary>
        [<Emit("$0.once('update-available', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onceUpdateAvailable(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is an available update. The update is downloaded automatically.
        /// </summary>
        [<Emit("$0.off('update-available', $1)"); Import("autoUpdater", "electron")>]
        static member mutable offUpdateAvailable(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is no available update.
        /// </summary>
        [<Emit("$0.on('update-not-available', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onUpdateNotAvailable(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is no available update.
        /// </summary>
        [<Emit("$0.once('update-not-available', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onceUpdateNotAvailable(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when there is no available update.
        /// </summary>
        [<Emit("$0.off('update-not-available', $1)"); Import("autoUpdater", "electron")>]
        static member mutable offUpdateNotAvailable(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an update has been downloaded.<br/><br/>On Windows only <c>releaseName</c> is available.<br/><br/>&gt; [!NOTE] It is not strictly necessary to handle
        /// this event. A successfully downloaded update will still be applied the next time the application starts.
        /// </summary>
        [<Emit("$0.on('update-downloaded', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onUpdateDownloaded
            (handler: Event -> string -> string -> System.DateTime -> string -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an update has been downloaded.<br/><br/>On Windows only <c>releaseName</c> is available.<br/><br/>&gt; [!NOTE] It is not strictly necessary to handle
        /// this event. A successfully downloaded update will still be applied the next time the application starts.
        /// </summary>
        [<Emit("$0.on('update-downloaded', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onUpdateDownloaded
            (handler: Fable.Electron.EventInterfaces.AutoUpdater.IOnUpdateDownloaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an update has been downloaded.<br/><br/>On Windows only <c>releaseName</c> is available.<br/><br/>&gt; [!NOTE] It is not strictly necessary to handle
        /// this event. A successfully downloaded update will still be applied the next time the application starts.
        /// </summary>
        [<Emit("$0.once('update-downloaded', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onceUpdateDownloaded
            (handler: Event -> string -> string -> System.DateTime -> string -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an update has been downloaded.<br/><br/>On Windows only <c>releaseName</c> is available.<br/><br/>&gt; [!NOTE] It is not strictly necessary to handle
        /// this event. A successfully downloaded update will still be applied the next time the application starts.
        /// </summary>
        [<Emit("$0.once('update-downloaded', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onceUpdateDownloaded
            (handler: Fable.Electron.EventInterfaces.AutoUpdater.IOnUpdateDownloaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an update has been downloaded.<br/><br/>On Windows only <c>releaseName</c> is available.<br/><br/>&gt; [!NOTE] It is not strictly necessary to handle
        /// this event. A successfully downloaded update will still be applied the next time the application starts.
        /// </summary>
        [<Emit("$0.off('update-downloaded', $1)"); Import("autoUpdater", "electron")>]
        static member mutable offUpdateDownloaded
            (handler: Event -> string -> string -> System.DateTime -> string -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when an update has been downloaded.<br/><br/>On Windows only <c>releaseName</c> is available.<br/><br/>&gt; [!NOTE] It is not strictly necessary to handle
        /// this event. A successfully downloaded update will still be applied the next time the application starts.
        /// </summary>
        [<Emit("$0.off('update-downloaded', $1)"); Import("autoUpdater", "electron")>]
        static member mutable offUpdateDownloaded
            (handler: Fable.Electron.EventInterfaces.AutoUpdater.IOnUpdateDownloaded -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event is emitted after a user calls <c>quitAndInstall()</c>.<br/><br/>When this API is called, the <c>before-quit</c> event is not emitted before
        /// all windows are closed. As a result you should listen to this event if you wish to perform actions before
        /// the windows are closed while a process is quitting, as well as listening to <c>before-quit</c>.
        /// </summary>
        [<Emit("$0.on('before-quit-for-update', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onBeforeQuitForUpdate(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// This event is emitted after a user calls <c>quitAndInstall()</c>.<br/><br/>When this API is called, the <c>before-quit</c> event is not emitted before
        /// all windows are closed. As a result you should listen to this event if you wish to perform actions before
        /// the windows are closed while a process is quitting, as well as listening to <c>before-quit</c>.
        /// </summary>
        [<Emit("$0.once('before-quit-for-update', $1)"); Import("autoUpdater", "electron")>]
        static member mutable onceBeforeQuitForUpdate(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// This event is emitted after a user calls <c>quitAndInstall()</c>.<br/><br/>When this API is called, the <c>before-quit</c> event is not emitted before
        /// all windows are closed. As a result you should listen to this event if you wish to perform actions before
        /// the windows are closed while a process is quitting, as well as listening to <c>before-quit</c>.
        /// </summary>
        [<Emit("$0.off('before-quit-for-update', $1)"); Import("autoUpdater", "electron")>]
        static member mutable offBeforeQuitForUpdate(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Sets the <c>url</c> and initialize the auto updater.
        /// </summary>
        /// <param name="url"></param>
        /// <param name="headers">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || HTTP request headers.</param>
        /// <param name="serverType">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Can be <c>json</c> or
        /// <c>default</c>, see the Squirrel.Mac README for more information.</param>
        [<Erase; ParamObject(0)>]
        static member mutable setFeedURL
            (url: string, ?headers: Record<string, string>, ?serverType: Enums.AutoUpdater.SetFeedURL.Options.ServerType) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// The current update feed URL.
        /// </summary>
        [<Erase>]
        static member mutable getFeedURL() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Asks the server whether there is an update. You must call <c>setFeedURL</c> before using this API.<br/><br/>&gt; [!NOTE] If an update
        /// is available it will be downloaded automatically. Calling <c>autoUpdater.checkForUpdates()</c> twice will download the update two times.
        /// </summary>
        [<Erase>]
        static member mutable checkForUpdates() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Restarts the app and installs the update after it has been downloaded. It should only be called after <c>update-downloaded</c> has
        /// been emitted.<br/><br/>Under the hood calling <c>autoUpdater.quitAndInstall()</c> will close all application windows first, and automatically call <c>app.quit()</c> after all windows have
        /// been closed.<br/><br/>&gt; [!NOTE] It is not strictly necessary to call this function to apply an update, as a successfully downloaded
        /// update will always be applied the next time the application starts.
        /// </summary>
        [<Erase>]
        static member mutable quitAndInstall() : unit = Unchecked.defaultof<_>

    /// <summary>
    /// <para>⚠ Process Availability: Main ✔ | Renderer ❌ | Utility ❌ | Exported ✔</para>
    /// &gt; Control your application's event lifecycle.<br/><br/>Process: Main<br/><br/>The following example shows how to quit the application when the last window is
    /// closed:
    /// </summary>
    [<Import("app", "electron")>]
    type App =
        interface EventEmitter

        /// <summary>
        /// Emitted when the application has finished basic startup. On Windows and Linux, the <c>will-finish-launching</c> event is the same as the
        /// <c>ready</c> event; on macOS, this event represents the <c>applicationWillFinishLaunching</c> notification of <c>NSApplication</c>.<br/><br/>In most cases, you should do everything in the
        /// <c>ready</c> event handler.
        /// </summary>
        [<Emit("$0.on('will-finish-launching', $1)"); Import("app", "electron")>]
        static member mutable onWillFinishLaunching(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the application has finished basic startup. On Windows and Linux, the <c>will-finish-launching</c> event is the same as the
        /// <c>ready</c> event; on macOS, this event represents the <c>applicationWillFinishLaunching</c> notification of <c>NSApplication</c>.<br/><br/>In most cases, you should do everything in the
        /// <c>ready</c> event handler.
        /// </summary>
        [<Emit("$0.once('will-finish-launching', $1)"); Import("app", "electron")>]
        static member mutable onceWillFinishLaunching(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the application has finished basic startup. On Windows and Linux, the <c>will-finish-launching</c> event is the same as the
        /// <c>ready</c> event; on macOS, this event represents the <c>applicationWillFinishLaunching</c> notification of <c>NSApplication</c>.<br/><br/>In most cases, you should do everything in the
        /// <c>ready</c> event handler.
        /// </summary>
        [<Emit("$0.off('will-finish-launching', $1)"); Import("app", "electron")>]
        static member mutable offWillFinishLaunching(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once, when Electron has finished initializing. On macOS, <c>launchInfo</c> holds the <c>userInfo</c> of the <c>NSUserNotification</c> or information from <c>UNNotificationResponse</c>
        /// that was used to open the application, if it was launched from Notification Center. You can also call <c>app.isReady()</c> to
        /// check if this event has already fired and <c>app.whenReady()</c> to get a Promise that is fulfilled when Electron is initialized.<br/><br/>&gt;
        /// [!NOTE] The <c>ready</c> event is only fired after the main process has finished running the first tick of the event
        /// loop. If an Electron API needs to be called before the <c>ready</c> event, ensure that it is called synchronously in
        /// the top-level context of the main process.
        /// </summary>
        [<Emit("$0.on('ready', $1)"); Import("app", "electron")>]
        static member mutable onReady(handler: Event -> U2<Record<string, obj>, NotificationResponse> -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once, when Electron has finished initializing. On macOS, <c>launchInfo</c> holds the <c>userInfo</c> of the <c>NSUserNotification</c> or information from <c>UNNotificationResponse</c>
        /// that was used to open the application, if it was launched from Notification Center. You can also call <c>app.isReady()</c> to
        /// check if this event has already fired and <c>app.whenReady()</c> to get a Promise that is fulfilled when Electron is initialized.<br/><br/>&gt;
        /// [!NOTE] The <c>ready</c> event is only fired after the main process has finished running the first tick of the event
        /// loop. If an Electron API needs to be called before the <c>ready</c> event, ensure that it is called synchronously in
        /// the top-level context of the main process.
        /// </summary>
        [<Emit("$0.on('ready', $1)"); Import("app", "electron")>]
        static member mutable onReady(handler: Fable.Electron.EventInterfaces.App.IOnReady -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once, when Electron has finished initializing. On macOS, <c>launchInfo</c> holds the <c>userInfo</c> of the <c>NSUserNotification</c> or information from <c>UNNotificationResponse</c>
        /// that was used to open the application, if it was launched from Notification Center. You can also call <c>app.isReady()</c> to
        /// check if this event has already fired and <c>app.whenReady()</c> to get a Promise that is fulfilled when Electron is initialized.<br/><br/>&gt;
        /// [!NOTE] The <c>ready</c> event is only fired after the main process has finished running the first tick of the event
        /// loop. If an Electron API needs to be called before the <c>ready</c> event, ensure that it is called synchronously in
        /// the top-level context of the main process.
        /// </summary>
        [<Emit("$0.once('ready', $1)"); Import("app", "electron")>]
        static member mutable onceReady
            (handler: Event -> U2<Record<string, obj>, NotificationResponse> -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once, when Electron has finished initializing. On macOS, <c>launchInfo</c> holds the <c>userInfo</c> of the <c>NSUserNotification</c> or information from <c>UNNotificationResponse</c>
        /// that was used to open the application, if it was launched from Notification Center. You can also call <c>app.isReady()</c> to
        /// check if this event has already fired and <c>app.whenReady()</c> to get a Promise that is fulfilled when Electron is initialized.<br/><br/>&gt;
        /// [!NOTE] The <c>ready</c> event is only fired after the main process has finished running the first tick of the event
        /// loop. If an Electron API needs to be called before the <c>ready</c> event, ensure that it is called synchronously in
        /// the top-level context of the main process.
        /// </summary>
        [<Emit("$0.once('ready', $1)"); Import("app", "electron")>]
        static member mutable onceReady(handler: Fable.Electron.EventInterfaces.App.IOnReady -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once, when Electron has finished initializing. On macOS, <c>launchInfo</c> holds the <c>userInfo</c> of the <c>NSUserNotification</c> or information from <c>UNNotificationResponse</c>
        /// that was used to open the application, if it was launched from Notification Center. You can also call <c>app.isReady()</c> to
        /// check if this event has already fired and <c>app.whenReady()</c> to get a Promise that is fulfilled when Electron is initialized.<br/><br/>&gt;
        /// [!NOTE] The <c>ready</c> event is only fired after the main process has finished running the first tick of the event
        /// loop. If an Electron API needs to be called before the <c>ready</c> event, ensure that it is called synchronously in
        /// the top-level context of the main process.
        /// </summary>
        [<Emit("$0.off('ready', $1)"); Import("app", "electron")>]
        static member mutable offReady(handler: Event -> U2<Record<string, obj>, NotificationResponse> -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted once, when Electron has finished initializing. On macOS, <c>launchInfo</c> holds the <c>userInfo</c> of the <c>NSUserNotification</c> or information from <c>UNNotificationResponse</c>
        /// that was used to open the application, if it was launched from Notification Center. You can also call <c>app.isReady()</c> to
        /// check if this event has already fired and <c>app.whenReady()</c> to get a Promise that is fulfilled when Electron is initialized.<br/><br/>&gt;
        /// [!NOTE] The <c>ready</c> event is only fired after the main process has finished running the first tick of the event
        /// loop. If an Electron API needs to be called before the <c>ready</c> event, ensure that it is called synchronously in
        /// the top-level context of the main process.
        /// </summary>
        [<Emit("$0.off('ready', $1)"); Import("app", "electron")>]
        static member mutable offReady(handler: Fable.Electron.EventInterfaces.App.IOnReady -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when all windows have been closed.<br/><br/>If you do not subscribe to this event and all windows are closed, the
        /// default behavior is to quit the app; however, if you subscribe, you control whether the app quits or not. If
        /// the user pressed <c>Cmd + Q</c>, or the developer called <c>app.quit()</c>, Electron will first try to close all the windows
        /// and then emit the <c>will-quit</c> event, and in this case the <c>window-all-closed</c> event would not be emitted.
        /// </summary>
        [<Emit("$0.on('window-all-closed', $1)"); Import("app", "electron")>]
        static member mutable onWindowAllClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when all windows have been closed.<br/><br/>If you do not subscribe to this event and all windows are closed, the
        /// default behavior is to quit the app; however, if you subscribe, you control whether the app quits or not. If
        /// the user pressed <c>Cmd + Q</c>, or the developer called <c>app.quit()</c>, Electron will first try to close all the windows
        /// and then emit the <c>will-quit</c> event, and in this case the <c>window-all-closed</c> event would not be emitted.
        /// </summary>
        [<Emit("$0.once('window-all-closed', $1)"); Import("app", "electron")>]
        static member mutable onceWindowAllClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when all windows have been closed.<br/><br/>If you do not subscribe to this event and all windows are closed, the
        /// default behavior is to quit the app; however, if you subscribe, you control whether the app quits or not. If
        /// the user pressed <c>Cmd + Q</c>, or the developer called <c>app.quit()</c>, Electron will first try to close all the windows
        /// and then emit the <c>will-quit</c> event, and in this case the <c>window-all-closed</c> event would not be emitted.
        /// </summary>
        [<Emit("$0.off('window-all-closed', $1)"); Import("app", "electron")>]
        static member mutable offWindowAllClosed(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before the application starts closing its windows. Calling <c>event.preventDefault()</c> will prevent the default behavior, which is terminating the application.<br/><br/>&gt;
        /// [!NOTE] If application quit was initiated by <c>autoUpdater.quitAndInstall()</c>, then <c>before-quit</c> is emitted _after_ emitting <c>close</c> event on all windows and
        /// closing them.<br/><br/>&gt; [!NOTE] On Windows, this event will not be emitted if the app is closed due to a shutdown/restart
        /// of the system or a user logout.
        /// </summary>
        [<Emit("$0.on('before-quit', $1)"); Import("app", "electron")>]
        static member mutable onBeforeQuit(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before the application starts closing its windows. Calling <c>event.preventDefault()</c> will prevent the default behavior, which is terminating the application.<br/><br/>&gt;
        /// [!NOTE] If application quit was initiated by <c>autoUpdater.quitAndInstall()</c>, then <c>before-quit</c> is emitted _after_ emitting <c>close</c> event on all windows and
        /// closing them.<br/><br/>&gt; [!NOTE] On Windows, this event will not be emitted if the app is closed due to a shutdown/restart
        /// of the system or a user logout.
        /// </summary>
        [<Emit("$0.once('before-quit', $1)"); Import("app", "electron")>]
        static member mutable onceBeforeQuit(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted before the application starts closing its windows. Calling <c>event.preventDefault()</c> will prevent the default behavior, which is terminating the application.<br/><br/>&gt;
        /// [!NOTE] If application quit was initiated by <c>autoUpdater.quitAndInstall()</c>, then <c>before-quit</c> is emitted _after_ emitting <c>close</c> event on all windows and
        /// closing them.<br/><br/>&gt; [!NOTE] On Windows, this event will not be emitted if the app is closed due to a shutdown/restart
        /// of the system or a user logout.
        /// </summary>
        [<Emit("$0.off('before-quit', $1)"); Import("app", "electron")>]
        static member mutable offBeforeQuit(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when all windows have been closed and the application will quit. Calling <c>event.preventDefault()</c> will prevent the default behavior, which
        /// is terminating the application.<br/><br/>See the description of the <c>window-all-closed</c> event for the differences between the <c>will-quit</c> and <c>window-all-closed</c> events.<br/><br/>&gt; [!NOTE]
        /// On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system
        /// or a user logout.
        /// </summary>
        [<Emit("$0.on('will-quit', $1)"); Import("app", "electron")>]
        static member mutable onWillQuit(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when all windows have been closed and the application will quit. Calling <c>event.preventDefault()</c> will prevent the default behavior, which
        /// is terminating the application.<br/><br/>See the description of the <c>window-all-closed</c> event for the differences between the <c>will-quit</c> and <c>window-all-closed</c> events.<br/><br/>&gt; [!NOTE]
        /// On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system
        /// or a user logout.
        /// </summary>
        [<Emit("$0.once('will-quit', $1)"); Import("app", "electron")>]
        static member mutable onceWillQuit(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when all windows have been closed and the application will quit. Calling <c>event.preventDefault()</c> will prevent the default behavior, which
        /// is terminating the application.<br/><br/>See the description of the <c>window-all-closed</c> event for the differences between the <c>will-quit</c> and <c>window-all-closed</c> events.<br/><br/>&gt; [!NOTE]
        /// On Windows, this event will not be emitted if the app is closed due to a shutdown/restart of the system
        /// or a user logout.
        /// </summary>
        [<Emit("$0.off('will-quit', $1)"); Import("app", "electron")>]
        static member mutable offWillQuit(handler: Event -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the application is quitting.<br/><br/>&gt; [!NOTE] On Windows, this event will not be emitted if the app is closed
        /// due to a shutdown/restart of the system or a user logout.
        /// </summary>
        [<Emit("$0.on('quit', $1)"); Import("app", "electron")>]
        static member mutable onQuit(handler: Event -> int -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the application is quitting.<br/><br/>&gt; [!NOTE] On Windows, this event will not be emitted if the app is closed
        /// due to a shutdown/restart of the system or a user logout.
        /// </summary>
        [<Emit("$0.on('quit', $1)"); Import("app", "electron")>]
        static member mutable onQuit(handler: Fable.Electron.EventInterfaces.App.IOnQuit -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the application is quitting.<br/><br/>&gt; [!NOTE] On Windows, this event will not be emitted if the app is closed
        /// due to a shutdown/restart of the system or a user logout.
        /// </summary>
        [<Emit("$0.once('quit', $1)"); Import("app", "electron")>]
        static member mutable onceQuit(handler: Event -> int -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the application is quitting.<br/><br/>&gt; [!NOTE] On Windows, this event will not be emitted if the app is closed
        /// due to a shutdown/restart of the system or a user logout.
        /// </summary>
        [<Emit("$0.once('quit', $1)"); Import("app", "electron")>]
        static member mutable onceQuit(handler: Fable.Electron.EventInterfaces.App.IOnQuit -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the application is quitting.<br/><br/>&gt; [!NOTE] On Windows, this event will not be emitted if the app is closed
        /// due to a shutdown/restart of the system or a user logout.
        /// </summary>
        [<Emit("$0.off('quit', $1)"); Import("app", "electron")>]
        static member mutable offQuit(handler: Event -> int -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the application is quitting.<br/><br/>&gt; [!NOTE] On Windows, this event will not be emitted if the app is closed
        /// due to a shutdown/restart of the system or a user logout.
        /// </summary>
        [<Emit("$0.off('quit', $1)"); Import("app", "electron")>]
        static member mutable offQuit(handler: Fable.Electron.EventInterfaces.App.IOnQuit -> unit) : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a file with the application. The <c>open-file</c> event is usually emitted when the
        /// application is already open and the OS wants to reuse the application to open the file. <c>open-file</c> is also emitted
        /// when a file is dropped onto the dock and the application is not yet running. Make sure to listen for
        /// the <c>open-file</c> event very early in your application startup to handle this case (even before the <c>ready</c> event is emitted).<br/><br/>You
        /// should call <c>event.preventDefault()</c> if you want to handle this event.<br/><br/>On Windows, you have to parse <c>process.argv</c> (in the main process)
        /// to get the filepath.
        /// </summary>
        [<Emit("$0.on('open-file', $1)"); Import("app", "electron")>]
        static member mutable onOpenFile(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a file with the application. The <c>open-file</c> event is usually emitted when the
        /// application is already open and the OS wants to reuse the application to open the file. <c>open-file</c> is also emitted
        /// when a file is dropped onto the dock and the application is not yet running. Make sure to listen for
        /// the <c>open-file</c> event very early in your application startup to handle this case (even before the <c>ready</c> event is emitted).<br/><br/>You
        /// should call <c>event.preventDefault()</c> if you want to handle this event.<br/><br/>On Windows, you have to parse <c>process.argv</c> (in the main process)
        /// to get the filepath.
        /// </summary>
        [<Emit("$0.on('open-file', $1)"); Import("app", "electron")>]
        static member mutable onOpenFile(handler: Fable.Electron.EventInterfaces.App.IOnOpenFile -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a file with the application. The <c>open-file</c> event is usually emitted when the
        /// application is already open and the OS wants to reuse the application to open the file. <c>open-file</c> is also emitted
        /// when a file is dropped onto the dock and the application is not yet running. Make sure to listen for
        /// the <c>open-file</c> event very early in your application startup to handle this case (even before the <c>ready</c> event is emitted).<br/><br/>You
        /// should call <c>event.preventDefault()</c> if you want to handle this event.<br/><br/>On Windows, you have to parse <c>process.argv</c> (in the main process)
        /// to get the filepath.
        /// </summary>
        [<Emit("$0.once('open-file', $1)"); Import("app", "electron")>]
        static member mutable onceOpenFile(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a file with the application. The <c>open-file</c> event is usually emitted when the
        /// application is already open and the OS wants to reuse the application to open the file. <c>open-file</c> is also emitted
        /// when a file is dropped onto the dock and the application is not yet running. Make sure to listen for
        /// the <c>open-file</c> event very early in your application startup to handle this case (even before the <c>ready</c> event is emitted).<br/><br/>You
        /// should call <c>event.preventDefault()</c> if you want to handle this event.<br/><br/>On Windows, you have to parse <c>process.argv</c> (in the main process)
        /// to get the filepath.
        /// </summary>
        [<Emit("$0.once('open-file', $1)"); Import("app", "electron")>]
        static member mutable onceOpenFile(handler: Fable.Electron.EventInterfaces.App.IOnOpenFile -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a file with the application. The <c>open-file</c> event is usually emitted when the
        /// application is already open and the OS wants to reuse the application to open the file. <c>open-file</c> is also emitted
        /// when a file is dropped onto the dock and the application is not yet running. Make sure to listen for
        /// the <c>open-file</c> event very early in your application startup to handle this case (even before the <c>ready</c> event is emitted).<br/><br/>You
        /// should call <c>event.preventDefault()</c> if you want to handle this event.<br/><br/>On Windows, you have to parse <c>process.argv</c> (in the main process)
        /// to get the filepath.
        /// </summary>
        [<Emit("$0.off('open-file', $1)"); Import("app", "electron")>]
        static member mutable offOpenFile(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a file with the application. The <c>open-file</c> event is usually emitted when the
        /// application is already open and the OS wants to reuse the application to open the file. <c>open-file</c> is also emitted
        /// when a file is dropped onto the dock and the application is not yet running. Make sure to listen for
        /// the <c>open-file</c> event very early in your application startup to handle this case (even before the <c>ready</c> event is emitted).<br/><br/>You
        /// should call <c>event.preventDefault()</c> if you want to handle this event.<br/><br/>On Windows, you have to parse <c>process.argv</c> (in the main process)
        /// to get the filepath.
        /// </summary>
        [<Emit("$0.off('open-file', $1)"); Import("app", "electron")>]
        static member mutable offOpenFile(handler: Fable.Electron.EventInterfaces.App.IOnOpenFile -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a URL with the application. Your application's <c>Info.plist</c> file must define the URL
        /// scheme within the <c>CFBundleURLTypes</c> key, and set <c>NSPrincipalClass</c> to <c>AtomApplication</c>.<br/><br/>As with the <c>open-file</c> event, be sure to register a listener
        /// for the <c>open-url</c> event early in your application startup to detect if the application is being opened to handle a
        /// URL. If you register the listener in response to a <c>ready</c> event, you'll miss URLs that trigger the launch of
        /// your application.
        /// </summary>
        [<Emit("$0.on('open-url', $1)"); Import("app", "electron")>]
        static member mutable onOpenUrl(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a URL with the application. Your application's <c>Info.plist</c> file must define the URL
        /// scheme within the <c>CFBundleURLTypes</c> key, and set <c>NSPrincipalClass</c> to <c>AtomApplication</c>.<br/><br/>As with the <c>open-file</c> event, be sure to register a listener
        /// for the <c>open-url</c> event early in your application startup to detect if the application is being opened to handle a
        /// URL. If you register the listener in response to a <c>ready</c> event, you'll miss URLs that trigger the launch of
        /// your application.
        /// </summary>
        [<Emit("$0.on('open-url', $1)"); Import("app", "electron")>]
        static member mutable onOpenUrl(handler: Fable.Electron.EventInterfaces.App.IOnOpenUrl -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a URL with the application. Your application's <c>Info.plist</c> file must define the URL
        /// scheme within the <c>CFBundleURLTypes</c> key, and set <c>NSPrincipalClass</c> to <c>AtomApplication</c>.<br/><br/>As with the <c>open-file</c> event, be sure to register a listener
        /// for the <c>open-url</c> event early in your application startup to detect if the application is being opened to handle a
        /// URL. If you register the listener in response to a <c>ready</c> event, you'll miss URLs that trigger the launch of
        /// your application.
        /// </summary>
        [<Emit("$0.once('open-url', $1)"); Import("app", "electron")>]
        static member mutable onceOpenUrl(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a URL with the application. Your application's <c>Info.plist</c> file must define the URL
        /// scheme within the <c>CFBundleURLTypes</c> key, and set <c>NSPrincipalClass</c> to <c>AtomApplication</c>.<br/><br/>As with the <c>open-file</c> event, be sure to register a listener
        /// for the <c>open-url</c> event early in your application startup to detect if the application is being opened to handle a
        /// URL. If you register the listener in response to a <c>ready</c> event, you'll miss URLs that trigger the launch of
        /// your application.
        /// </summary>
        [<Emit("$0.once('open-url', $1)"); Import("app", "electron")>]
        static member mutable onceOpenUrl(handler: Fable.Electron.EventInterfaces.App.IOnOpenUrl -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a URL with the application. Your application's <c>Info.plist</c> file must define the URL
        /// scheme within the <c>CFBundleURLTypes</c> key, and set <c>NSPrincipalClass</c> to <c>AtomApplication</c>.<br/><br/>As with the <c>open-file</c> event, be sure to register a listener
        /// for the <c>open-url</c> event early in your application startup to detect if the application is being opened to handle a
        /// URL. If you register the listener in response to a <c>ready</c> event, you'll miss URLs that trigger the launch of
        /// your application.
        /// </summary>
        [<Emit("$0.off('open-url', $1)"); Import("app", "electron")>]
        static member mutable offOpenUrl(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user wants to open a URL with the application. Your application's <c>Info.plist</c> file must define the URL
        /// scheme within the <c>CFBundleURLTypes</c> key, and set <c>NSPrincipalClass</c> to <c>AtomApplication</c>.<br/><br/>As with the <c>open-file</c> event, be sure to register a listener
        /// for the <c>open-url</c> event early in your application startup to detect if the application is being opened to handle a
        /// URL. If you register the listener in response to a <c>ready</c> event, you'll miss URLs that trigger the launch of
        /// your application.
        /// </summary>
        [<Emit("$0.off('open-url', $1)"); Import("app", "electron")>]
        static member mutable offOpenUrl(handler: Fable.Electron.EventInterfaces.App.IOnOpenUrl -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the application is activated. Various actions can trigger this event, such as launching the application for the first
        /// time, attempting to re-launch the application when it's already running, or clicking on the application's dock or taskbar icon.
        /// </summary>
        [<Emit("$0.on('activate', $1)"); Import("app", "electron")>]
        static member mutable onActivate(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the application is activated. Various actions can trigger this event, such as launching the application for the first
        /// time, attempting to re-launch the application when it's already running, or clicking on the application's dock or taskbar icon.
        /// </summary>
        [<Emit("$0.on('activate', $1)"); Import("app", "electron")>]
        static member mutable onActivate(handler: Fable.Electron.EventInterfaces.App.IOnActivate -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the application is activated. Various actions can trigger this event, such as launching the application for the first
        /// time, attempting to re-launch the application when it's already running, or clicking on the application's dock or taskbar icon.
        /// </summary>
        [<Emit("$0.once('activate', $1)"); Import("app", "electron")>]
        static member mutable onceActivate(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the application is activated. Various actions can trigger this event, such as launching the application for the first
        /// time, attempting to re-launch the application when it's already running, or clicking on the application's dock or taskbar icon.
        /// </summary>
        [<Emit("$0.once('activate', $1)"); Import("app", "electron")>]
        static member mutable onceActivate(handler: Fable.Electron.EventInterfaces.App.IOnActivate -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the application is activated. Various actions can trigger this event, such as launching the application for the first
        /// time, attempting to re-launch the application when it's already running, or clicking on the application's dock or taskbar icon.
        /// </summary>
        [<Emit("$0.off('activate', $1)"); Import("app", "electron")>]
        static member mutable offActivate(handler: Event -> bool -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the application is activated. Various actions can trigger this event, such as launching the application for the first
        /// time, attempting to re-launch the application when it's already running, or clicking on the application's dock or taskbar icon.
        /// </summary>
        [<Emit("$0.off('activate', $1)"); Import("app", "electron")>]
        static member mutable offActivate(handler: Fable.Electron.EventInterfaces.App.IOnActivate -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the application becomes active. This differs from the <c>activate</c> event in that <c>did-become-active</c> is emitted every time the
        /// app becomes active, not only when Dock icon is clicked or application is re-launched. It is also emitted when a
        /// user switches to the app via the macOS App Switcher.
        /// </summary>
        [<Emit("$0.on('did-become-active', $1)"); Import("app", "electron")>]
        static member mutable onDidBecomeActive(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the application becomes active. This differs from the <c>activate</c> event in that <c>did-become-active</c> is emitted every time the
        /// app becomes active, not only when Dock icon is clicked or application is re-launched. It is also emitted when a
        /// user switches to the app via the macOS App Switcher.
        /// </summary>
        [<Emit("$0.once('did-become-active', $1)"); Import("app", "electron")>]
        static member mutable onceDidBecomeActive(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the application becomes active. This differs from the <c>activate</c> event in that <c>did-become-active</c> is emitted every time the
        /// app becomes active, not only when Dock icon is clicked or application is re-launched. It is also emitted when a
        /// user switches to the app via the macOS App Switcher.
        /// </summary>
        [<Emit("$0.off('did-become-active', $1)"); Import("app", "electron")>]
        static member mutable offDidBecomeActive(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the app is no longer active and doesn’t have focus. This can be triggered, for example, by clicking
        /// on another application or by using the macOS App Switcher to switch to another application.
        /// </summary>
        [<Emit("$0.on('did-resign-active', $1)"); Import("app", "electron")>]
        static member mutable onDidResignActive(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the app is no longer active and doesn’t have focus. This can be triggered, for example, by clicking
        /// on another application or by using the macOS App Switcher to switch to another application.
        /// </summary>
        [<Emit("$0.once('did-resign-active', $1)"); Import("app", "electron")>]
        static member mutable onceDidResignActive(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the app is no longer active and doesn’t have focus. This can be triggered, for example, by clicking
        /// on another application or by using the macOS App Switcher to switch to another application.
        /// </summary>
        [<Emit("$0.off('did-resign-active', $1)"); Import("app", "electron")>]
        static member mutable offDidResignActive(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.<br/><br/>A user activity can be continued only in an app that has the same developer Team
        /// ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's
        /// <c>Info.plist</c> under the <c>NSUserActivityTypes</c> key.
        /// </summary>
        [<Emit("$0.on('continue-activity', $1)"); Import("app", "electron")>]
        static member mutable onContinueActivity
            (handler: Event -> string -> obj -> App.ContinueActivity.Details -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.<br/><br/>A user activity can be continued only in an app that has the same developer Team
        /// ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's
        /// <c>Info.plist</c> under the <c>NSUserActivityTypes</c> key.
        /// </summary>
        [<Emit("$0.on('continue-activity', $1)"); Import("app", "electron")>]
        static member mutable onContinueActivity
            (handler: Fable.Electron.EventInterfaces.App.IOnContinueActivity -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.<br/><br/>A user activity can be continued only in an app that has the same developer Team
        /// ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's
        /// <c>Info.plist</c> under the <c>NSUserActivityTypes</c> key.
        /// </summary>
        [<Emit("$0.once('continue-activity', $1)"); Import("app", "electron")>]
        static member mutable onceContinueActivity
            (handler: Event -> string -> obj -> App.ContinueActivity.Details -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.<br/><br/>A user activity can be continued only in an app that has the same developer Team
        /// ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's
        /// <c>Info.plist</c> under the <c>NSUserActivityTypes</c> key.
        /// </summary>
        [<Emit("$0.once('continue-activity', $1)"); Import("app", "electron")>]
        static member mutable onceContinueActivity
            (handler: Fable.Electron.EventInterfaces.App.IOnContinueActivity -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.<br/><br/>A user activity can be continued only in an app that has the same developer Team
        /// ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's
        /// <c>Info.plist</c> under the <c>NSUserActivityTypes</c> key.
        /// </summary>
        [<Emit("$0.off('continue-activity', $1)"); Import("app", "electron")>]
        static member mutable offContinueActivity
            (handler: Event -> string -> obj -> App.ContinueActivity.Details -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.<br/><br/>A user activity can be continued only in an app that has the same developer Team
        /// ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's
        /// <c>Info.plist</c> under the <c>NSUserActivityTypes</c> key.
        /// </summary>
        [<Emit("$0.off('continue-activity', $1)"); Import("app", "electron")>]
        static member mutable offContinueActivity
            (handler: Fable.Electron.EventInterfaces.App.IOnContinueActivity -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff before an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.
        /// </summary>
        [<Emit("$0.on('will-continue-activity', $1)"); Import("app", "electron")>]
        static member mutable onWillContinueActivity(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff before an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.
        /// </summary>
        [<Emit("$0.on('will-continue-activity', $1)"); Import("app", "electron")>]
        static member mutable onWillContinueActivity
            (handler: Fable.Electron.EventInterfaces.App.IOnWillContinueActivity -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff before an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.
        /// </summary>
        [<Emit("$0.once('will-continue-activity', $1)"); Import("app", "electron")>]
        static member mutable onceWillContinueActivity(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff before an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.
        /// </summary>
        [<Emit("$0.once('will-continue-activity', $1)"); Import("app", "electron")>]
        static member mutable onceWillContinueActivity
            (handler: Fable.Electron.EventInterfaces.App.IOnWillContinueActivity -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff before an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.
        /// </summary>
        [<Emit("$0.off('will-continue-activity', $1)"); Import("app", "electron")>]
        static member mutable offWillContinueActivity(handler: Event -> string -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff before an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
        /// want to handle this event.
        /// </summary>
        [<Emit("$0.off('will-continue-activity', $1)"); Import("app", "electron")>]
        static member mutable offWillContinueActivity
            (handler: Fable.Electron.EventInterfaces.App.IOnWillContinueActivity -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device fails to be resumed.
        /// </summary>
        [<Emit("$0.on('continue-activity-error', $1)"); Import("app", "electron")>]
        static member mutable onContinueActivityError(handler: Event -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device fails to be resumed.
        /// </summary>
        [<Emit("$0.on('continue-activity-error', $1)"); Import("app", "electron")>]
        static member mutable onContinueActivityError
            (handler: Fable.Electron.EventInterfaces.App.IOnContinueActivityError -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device fails to be resumed.
        /// </summary>
        [<Emit("$0.once('continue-activity-error', $1)"); Import("app", "electron")>]
        static member mutable onceContinueActivityError(handler: Event -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device fails to be resumed.
        /// </summary>
        [<Emit("$0.once('continue-activity-error', $1)"); Import("app", "electron")>]
        static member mutable onceContinueActivityError
            (handler: Fable.Electron.EventInterfaces.App.IOnContinueActivityError -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device fails to be resumed.
        /// </summary>
        [<Emit("$0.off('continue-activity-error', $1)"); Import("app", "electron")>]
        static member mutable offContinueActivityError(handler: Event -> string -> string -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff when an activity from a different device fails to be resumed.
        /// </summary>
        [<Emit("$0.off('continue-activity-error', $1)"); Import("app", "electron")>]
        static member mutable offContinueActivityError
            (handler: Fable.Electron.EventInterfaces.App.IOnContinueActivityError -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff after an activity from this device was successfully resumed on another one.
        /// </summary>
        [<Emit("$0.on('activity-was-continued', $1)"); Import("app", "electron")>]
        static member mutable onActivityWasContinued(handler: Event -> string -> obj -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff after an activity from this device was successfully resumed on another one.
        /// </summary>
        [<Emit("$0.on('activity-was-continued', $1)"); Import("app", "electron")>]
        static member mutable onActivityWasContinued
            (handler: Fable.Electron.EventInterfaces.App.IOnActivityWasContinued -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff after an activity from this device was successfully resumed on another one.
        /// </summary>
        [<Emit("$0.once('activity-was-continued', $1)"); Import("app", "electron")>]
        static member mutable onceActivityWasContinued(handler: Event -> string -> obj -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff after an activity from this device was successfully resumed on another one.
        /// </summary>
        [<Emit("$0.once('activity-was-continued', $1)"); Import("app", "electron")>]
        static member mutable onceActivityWasContinued
            (handler: Fable.Electron.EventInterfaces.App.IOnActivityWasContinued -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff after an activity from this device was successfully resumed on another one.
        /// </summary>
        [<Emit("$0.off('activity-was-continued', $1)"); Import("app", "electron")>]
        static member mutable offActivityWasContinued(handler: Event -> string -> obj -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted during Handoff after an activity from this device was successfully resumed on another one.
        /// </summary>
        [<Emit("$0.off('activity-was-continued', $1)"); Import("app", "electron")>]
        static member mutable offActivityWasContinued
            (handler: Fable.Electron.EventInterfaces.App.IOnActivityWasContinued -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Handoff is about to be resumed on another device. If you need to update the state to be
        /// transferred, you should call <c>event.preventDefault()</c> immediately, construct a new <c>userInfo</c> dictionary and call <c>app.updateCurrentActivity()</c> in a timely manner. Otherwise, the
        /// operation will fail and <c>continue-activity-error</c> will be called.
        /// </summary>
        [<Emit("$0.on('update-activity-state', $1)"); Import("app", "electron")>]
        static member mutable onUpdateActivityState(handler: Event -> string -> obj -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Handoff is about to be resumed on another device. If you need to update the state to be
        /// transferred, you should call <c>event.preventDefault()</c> immediately, construct a new <c>userInfo</c> dictionary and call <c>app.updateCurrentActivity()</c> in a timely manner. Otherwise, the
        /// operation will fail and <c>continue-activity-error</c> will be called.
        /// </summary>
        [<Emit("$0.on('update-activity-state', $1)"); Import("app", "electron")>]
        static member mutable onUpdateActivityState
            (handler: Fable.Electron.EventInterfaces.App.IOnUpdateActivityState -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Handoff is about to be resumed on another device. If you need to update the state to be
        /// transferred, you should call <c>event.preventDefault()</c> immediately, construct a new <c>userInfo</c> dictionary and call <c>app.updateCurrentActivity()</c> in a timely manner. Otherwise, the
        /// operation will fail and <c>continue-activity-error</c> will be called.
        /// </summary>
        [<Emit("$0.once('update-activity-state', $1)"); Import("app", "electron")>]
        static member mutable onceUpdateActivityState(handler: Event -> string -> obj -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Handoff is about to be resumed on another device. If you need to update the state to be
        /// transferred, you should call <c>event.preventDefault()</c> immediately, construct a new <c>userInfo</c> dictionary and call <c>app.updateCurrentActivity()</c> in a timely manner. Otherwise, the
        /// operation will fail and <c>continue-activity-error</c> will be called.
        /// </summary>
        [<Emit("$0.once('update-activity-state', $1)"); Import("app", "electron")>]
        static member mutable onceUpdateActivityState
            (handler: Fable.Electron.EventInterfaces.App.IOnUpdateActivityState -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Handoff is about to be resumed on another device. If you need to update the state to be
        /// transferred, you should call <c>event.preventDefault()</c> immediately, construct a new <c>userInfo</c> dictionary and call <c>app.updateCurrentActivity()</c> in a timely manner. Otherwise, the
        /// operation will fail and <c>continue-activity-error</c> will be called.
        /// </summary>
        [<Emit("$0.off('update-activity-state', $1)"); Import("app", "electron")>]
        static member mutable offUpdateActivityState(handler: Event -> string -> obj -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Handoff is about to be resumed on another device. If you need to update the state to be
        /// transferred, you should call <c>event.preventDefault()</c> immediately, construct a new <c>userInfo</c> dictionary and call <c>app.updateCurrentActivity()</c> in a timely manner. Otherwise, the
        /// operation will fail and <c>continue-activity-error</c> will be called.
        /// </summary>
        [<Emit("$0.off('update-activity-state', $1)"); Import("app", "electron")>]
        static member mutable offUpdateActivityState
            (handler: Fable.Electron.EventInterfaces.App.IOnUpdateActivityState -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user clicks the native macOS new tab button. The new tab button is only visible if the
        /// current <c>BrowserWindow</c> has a <c>tabbingIdentifier</c>
        /// </summary>
        [<Emit("$0.on('new-window-for-tab', $1)"); Import("app", "electron")>]
        static member mutable onNewWindowForTab(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user clicks the native macOS new tab button. The new tab button is only visible if the
        /// current <c>BrowserWindow</c> has a <c>tabbingIdentifier</c>
        /// </summary>
        [<Emit("$0.once('new-window-for-tab', $1)"); Import("app", "electron")>]
        static member mutable onceNewWindowForTab(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when the user clicks the native macOS new tab button. The new tab button is only visible if the
        /// current <c>BrowserWindow</c> has a <c>tabbingIdentifier</c>
        /// </summary>
        [<Emit("$0.off('new-window-for-tab', $1)"); Import("app", "electron")>]
        static member mutable offNewWindowForTab(handler: Event -> unit) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when a browserWindow gets blurred.
        /// </summary>
        [<Emit("$0.on('browser-window-blur', $1)"); Import("app", "electron")>]
        static member mutable onBrowserWindowBlur(handler: Event -> BrowserWindow -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets blurred.
        /// </summary>
        [<Emit("$0.on('browser-window-blur', $1)"); Import("app", "electron")>]
        static member mutable onBrowserWindowBlur
            (handler: Fable.Electron.EventInterfaces.App.IOnBrowserWindowBlur -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets blurred.
        /// </summary>
        [<Emit("$0.once('browser-window-blur', $1)"); Import("app", "electron")>]
        static member mutable onceBrowserWindowBlur(handler: Event -> BrowserWindow -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets blurred.
        /// </summary>
        [<Emit("$0.once('browser-window-blur', $1)"); Import("app", "electron")>]
        static member mutable onceBrowserWindowBlur
            (handler: Fable.Electron.EventInterfaces.App.IOnBrowserWindowBlur -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets blurred.
        /// </summary>
        [<Emit("$0.off('browser-window-blur', $1)"); Import("app", "electron")>]
        static member mutable offBrowserWindowBlur(handler: Event -> BrowserWindow -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets blurred.
        /// </summary>
        [<Emit("$0.off('browser-window-blur', $1)"); Import("app", "electron")>]
        static member mutable offBrowserWindowBlur
            (handler: Fable.Electron.EventInterfaces.App.IOnBrowserWindowBlur -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets focused.
        /// </summary>
        [<Emit("$0.on('browser-window-focus', $1)"); Import("app", "electron")>]
        static member mutable onBrowserWindowFocus(handler: Event -> BrowserWindow -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets focused.
        /// </summary>
        [<Emit("$0.on('browser-window-focus', $1)"); Import("app", "electron")>]
        static member mutable onBrowserWindowFocus
            (handler: Fable.Electron.EventInterfaces.App.IOnBrowserWindowFocus -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets focused.
        /// </summary>
        [<Emit("$0.once('browser-window-focus', $1)"); Import("app", "electron")>]
        static member mutable onceBrowserWindowFocus(handler: Event -> BrowserWindow -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets focused.
        /// </summary>
        [<Emit("$0.once('browser-window-focus', $1)"); Import("app", "electron")>]
        static member mutable onceBrowserWindowFocus
            (handler: Fable.Electron.EventInterfaces.App.IOnBrowserWindowFocus -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets focused.
        /// </summary>
        [<Emit("$0.off('browser-window-focus', $1)"); Import("app", "electron")>]
        static member mutable offBrowserWindowFocus(handler: Event -> BrowserWindow -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a browserWindow gets focused.
        /// </summary>
        [<Emit("$0.off('browser-window-focus', $1)"); Import("app", "electron")>]
        static member mutable offBrowserWindowFocus
            (handler: Fable.Electron.EventInterfaces.App.IOnBrowserWindowFocus -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new browserWindow is created.
        /// </summary>
        [<Emit("$0.on('browser-window-created', $1)"); Import("app", "electron")>]
        static member mutable onBrowserWindowCreated(handler: Event -> BrowserWindow -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new browserWindow is created.
        /// </summary>
        [<Emit("$0.on('browser-window-created', $1)"); Import("app", "electron")>]
        static member mutable onBrowserWindowCreated
            (handler: Fable.Electron.EventInterfaces.App.IOnBrowserWindowCreated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new browserWindow is created.
        /// </summary>
        [<Emit("$0.once('browser-window-created', $1)"); Import("app", "electron")>]
        static member mutable onceBrowserWindowCreated(handler: Event -> BrowserWindow -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new browserWindow is created.
        /// </summary>
        [<Emit("$0.once('browser-window-created', $1)"); Import("app", "electron")>]
        static member mutable onceBrowserWindowCreated
            (handler: Fable.Electron.EventInterfaces.App.IOnBrowserWindowCreated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new browserWindow is created.
        /// </summary>
        [<Emit("$0.off('browser-window-created', $1)"); Import("app", "electron")>]
        static member mutable offBrowserWindowCreated(handler: Event -> BrowserWindow -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new browserWindow is created.
        /// </summary>
        [<Emit("$0.off('browser-window-created', $1)"); Import("app", "electron")>]
        static member mutable offBrowserWindowCreated
            (handler: Fable.Electron.EventInterfaces.App.IOnBrowserWindowCreated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new webContents is created.
        /// </summary>
        [<Emit("$0.on('web-contents-created', $1)"); Import("app", "electron")>]
        static member mutable onWebContentsCreated(handler: Event -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new webContents is created.
        /// </summary>
        [<Emit("$0.on('web-contents-created', $1)"); Import("app", "electron")>]
        static member mutable onWebContentsCreated
            (handler: Fable.Electron.EventInterfaces.App.IOnWebContentsCreated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new webContents is created.
        /// </summary>
        [<Emit("$0.once('web-contents-created', $1)"); Import("app", "electron")>]
        static member mutable onceWebContentsCreated(handler: Event -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new webContents is created.
        /// </summary>
        [<Emit("$0.once('web-contents-created', $1)"); Import("app", "electron")>]
        static member mutable onceWebContentsCreated
            (handler: Fable.Electron.EventInterfaces.App.IOnWebContentsCreated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new webContents is created.
        /// </summary>
        [<Emit("$0.off('web-contents-created', $1)"); Import("app", "electron")>]
        static member mutable offWebContentsCreated(handler: Event -> WebContents -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a new webContents is created.
        /// </summary>
        [<Emit("$0.off('web-contents-created', $1)"); Import("app", "electron")>]
        static member mutable offWebContentsCreated
            (handler: Fable.Electron.EventInterfaces.App.IOnWebContentsCreated -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>, to trust the certificate you should prevent the default behavior with
        /// <c>event.preventDefault()</c> and call <c>callback(true)</c>.
        /// </summary>
        [<Emit("$0.on('certificate-error', $1)"); Import("app", "electron")>]
        static member mutable onCertificateError
            (handler: Event -> WebContents -> string -> string -> Certificate -> bool -> unit -> bool -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>, to trust the certificate you should prevent the default behavior with
        /// <c>event.preventDefault()</c> and call <c>callback(true)</c>.
        /// </summary>
        [<Emit("$0.on('certificate-error', $1)"); Import("app", "electron")>]
        static member mutable onCertificateError
            (handler: Fable.Electron.EventInterfaces.App.IOnCertificateError -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>, to trust the certificate you should prevent the default behavior with
        /// <c>event.preventDefault()</c> and call <c>callback(true)</c>.
        /// </summary>
        [<Emit("$0.once('certificate-error', $1)"); Import("app", "electron")>]
        static member mutable onceCertificateError
            (handler: Event -> WebContents -> string -> string -> Certificate -> bool -> unit -> bool -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>, to trust the certificate you should prevent the default behavior with
        /// <c>event.preventDefault()</c> and call <c>callback(true)</c>.
        /// </summary>
        [<Emit("$0.once('certificate-error', $1)"); Import("app", "electron")>]
        static member mutable onceCertificateError
            (handler: Fable.Electron.EventInterfaces.App.IOnCertificateError -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>, to trust the certificate you should prevent the default behavior with
        /// <c>event.preventDefault()</c> and call <c>callback(true)</c>.
        /// </summary>
        [<Emit("$0.off('certificate-error', $1)"); Import("app", "electron")>]
        static member mutable offCertificateError
            (handler: Event -> WebContents -> string -> string -> Certificate -> bool -> unit -> bool -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>, to trust the certificate you should prevent the default behavior with
        /// <c>event.preventDefault()</c> and call <c>callback(true)</c>.
        /// </summary>
        [<Emit("$0.off('certificate-error', $1)"); Import("app", "electron")>]
        static member mutable offCertificateError
            (handler: Fable.Electron.EventInterfaces.App.IOnCertificateError -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The <c>url</c> corresponds to the navigation entry requesting the client certificate and <c>callback</c> can
        /// be called with an entry filtered from the list. Using <c>event.preventDefault()</c> prevents the application from using the first certificate from
        /// the store.
        /// </summary>
        [<Emit("$0.on('select-client-certificate', $1)"); Import("app", "electron")>]
        static member mutable onSelectClientCertificate
            (handler: Event -> WebContents -> URL -> Certificate[] -> Option<Certificate> -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The <c>url</c> corresponds to the navigation entry requesting the client certificate and <c>callback</c> can
        /// be called with an entry filtered from the list. Using <c>event.preventDefault()</c> prevents the application from using the first certificate from
        /// the store.
        /// </summary>
        [<Emit("$0.on('select-client-certificate', $1)"); Import("app", "electron")>]
        static member mutable onSelectClientCertificate
            (handler: Fable.Electron.EventInterfaces.App.IOnSelectClientCertificate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The <c>url</c> corresponds to the navigation entry requesting the client certificate and <c>callback</c> can
        /// be called with an entry filtered from the list. Using <c>event.preventDefault()</c> prevents the application from using the first certificate from
        /// the store.
        /// </summary>
        [<Emit("$0.once('select-client-certificate', $1)"); Import("app", "electron")>]
        static member mutable onceSelectClientCertificate
            (handler: Event -> WebContents -> URL -> Certificate[] -> Option<Certificate> -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The <c>url</c> corresponds to the navigation entry requesting the client certificate and <c>callback</c> can
        /// be called with an entry filtered from the list. Using <c>event.preventDefault()</c> prevents the application from using the first certificate from
        /// the store.
        /// </summary>
        [<Emit("$0.once('select-client-certificate', $1)"); Import("app", "electron")>]
        static member mutable onceSelectClientCertificate
            (handler: Fable.Electron.EventInterfaces.App.IOnSelectClientCertificate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The <c>url</c> corresponds to the navigation entry requesting the client certificate and <c>callback</c> can
        /// be called with an entry filtered from the list. Using <c>event.preventDefault()</c> prevents the application from using the first certificate from
        /// the store.
        /// </summary>
        [<Emit("$0.off('select-client-certificate', $1)"); Import("app", "electron")>]
        static member mutable offSelectClientCertificate
            (handler: Event -> WebContents -> URL -> Certificate[] -> Option<Certificate> -> unit -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when a client certificate is requested.<br/><br/>The <c>url</c> corresponds to the navigation entry requesting the client certificate and <c>callback</c> can
        /// be called with an entry filtered from the list. Using <c>event.preventDefault()</c> prevents the application from using the first certificate from
        /// the store.
        /// </summary>
        [<Emit("$0.off('select-client-certificate', $1)"); Import("app", "electron")>]
        static member mutable offSelectClientCertificate
            (handler: Fable.Electron.EventInterfaces.App.IOnSelectClientCertificate -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> or Utility process wants to do basic auth.<br/><br/>The default behavior is to cancel all authentications. To override
        /// this you should prevent the default behavior with <c>event.preventDefault()</c> and call <c>callback(username, password)</c> with the credentials.<br/><br/>If <c>callback</c> is called without
        /// a username or password, the authentication request will be cancelled and the authentication error will be returned to the page.
        /// </summary>
        [<Emit("$0.on('login', $1)"); Import("app", "electron")>]
        static member mutable onLogin
            (
                handler:
                    Event
                        -> WebContents
                        -> App.Login.AuthenticationResponseDetails
                        -> App.Login.AuthInfo
                        -> App.Login.Callback
                        -> unit
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> or Utility process wants to do basic auth.<br/><br/>The default behavior is to cancel all authentications. To override
        /// this you should prevent the default behavior with <c>event.preventDefault()</c> and call <c>callback(username, password)</c> with the credentials.<br/><br/>If <c>callback</c> is called without
        /// a username or password, the authentication request will be cancelled and the authentication error will be returned to the page.
        /// </summary>
        [<Emit("$0.on('login', $1)"); Import("app", "electron")>]
        static member mutable onLogin(handler: Fable.Electron.EventInterfaces.App.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> or Utility process wants to do basic auth.<br/><br/>The default behavior is to cancel all authentications. To override
        /// this you should prevent the default behavior with <c>event.preventDefault()</c> and call <c>callback(username, password)</c> with the credentials.<br/><br/>If <c>callback</c> is called without
        /// a username or password, the authentication request will be cancelled and the authentication error will be returned to the page.
        /// </summary>
        [<Emit("$0.once('login', $1)"); Import("app", "electron")>]
        static member mutable onceLogin
            (
                handler:
                    Event
                        -> WebContents
                        -> App.Login.AuthenticationResponseDetails
                        -> App.Login.AuthInfo
                        -> App.Login.Callback
                        -> unit
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> or Utility process wants to do basic auth.<br/><br/>The default behavior is to cancel all authentications. To override
        /// this you should prevent the default behavior with <c>event.preventDefault()</c> and call <c>callback(username, password)</c> with the credentials.<br/><br/>If <c>callback</c> is called without
        /// a username or password, the authentication request will be cancelled and the authentication error will be returned to the page.
        /// </summary>
        [<Emit("$0.once('login', $1)"); Import("app", "electron")>]
        static member mutable onceLogin(handler: Fable.Electron.EventInterfaces.App.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> or Utility process wants to do basic auth.<br/><br/>The default behavior is to cancel all authentications. To override
        /// this you should prevent the default behavior with <c>event.preventDefault()</c> and call <c>callback(username, password)</c> with the credentials.<br/><br/>If <c>callback</c> is called without
        /// a username or password, the authentication request will be cancelled and the authentication error will be returned to the page.
        /// </summary>
        [<Emit("$0.off('login', $1)"); Import("app", "electron")>]
        static member mutable offLogin
            (
                handler:
                    Event
                        -> WebContents
                        -> App.Login.AuthenticationResponseDetails
                        -> App.Login.AuthInfo
                        -> App.Login.Callback
                        -> unit
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when <c>webContents</c> or Utility process wants to do basic auth.<br/><br/>The default behavior is to cancel all authentications. To override
        /// this you should prevent the default behavior with <c>event.preventDefault()</c> and call <c>callback(username, password)</c> with the credentials.<br/><br/>If <c>callback</c> is called without
        /// a username or password, the authentication request will be cancelled and the authentication error will be returned to the page.
        /// </summary>
        [<Emit("$0.off('login', $1)"); Import("app", "electron")>]
        static member mutable offLogin(handler: Fable.Electron.EventInterfaces.App.IOnLogin -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted whenever there is a GPU info update.
        /// </summary>
        [<Emit("$0.on('gpu-info-update', $1)"); Import("app", "electron")>]
        static member mutable onGpuInfoUpdate(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted whenever there is a GPU info update.
        /// </summary>
        [<Emit("$0.once('gpu-info-update', $1)"); Import("app", "electron")>]
        static member mutable onceGpuInfoUpdate(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted whenever there is a GPU info update.
        /// </summary>
        [<Emit("$0.off('gpu-info-update', $1)"); Import("app", "electron")>]
        static member mutable offGpuInfoUpdate(handler: unit -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.on('render-process-gone', $1)"); Import("app", "electron")>]
        static member mutable onRenderProcessGone
            (handler: Event -> WebContents -> RenderProcessGoneDetails -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.on('render-process-gone', $1)"); Import("app", "electron")>]
        static member mutable onRenderProcessGone
            (handler: Fable.Electron.EventInterfaces.App.IOnRenderProcessGone -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.once('render-process-gone', $1)"); Import("app", "electron")>]
        static member mutable onceRenderProcessGone
            (handler: Event -> WebContents -> RenderProcessGoneDetails -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.once('render-process-gone', $1)"); Import("app", "electron")>]
        static member mutable onceRenderProcessGone
            (handler: Fable.Electron.EventInterfaces.App.IOnRenderProcessGone -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.off('render-process-gone', $1)"); Import("app", "electron")>]
        static member mutable offRenderProcessGone
            (handler: Event -> WebContents -> RenderProcessGoneDetails -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
        /// </summary>
        [<Emit("$0.off('render-process-gone', $1)"); Import("app", "electron")>]
        static member mutable offRenderProcessGone
            (handler: Fable.Electron.EventInterfaces.App.IOnRenderProcessGone -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process unexpectedly disappears. This is normally because it was crashed or killed. It does not include
        /// renderer processes.
        /// </summary>
        [<Emit("$0.on('child-process-gone', $1)"); Import("app", "electron")>]
        static member mutable onChildProcessGone(handler: Event -> App.ChildProcessGone.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process unexpectedly disappears. This is normally because it was crashed or killed. It does not include
        /// renderer processes.
        /// </summary>
        [<Emit("$0.on('child-process-gone', $1)"); Import("app", "electron")>]
        static member mutable onChildProcessGone
            (handler: Fable.Electron.EventInterfaces.App.IOnChildProcessGone -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process unexpectedly disappears. This is normally because it was crashed or killed. It does not include
        /// renderer processes.
        /// </summary>
        [<Emit("$0.once('child-process-gone', $1)"); Import("app", "electron")>]
        static member mutable onceChildProcessGone(handler: Event -> App.ChildProcessGone.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process unexpectedly disappears. This is normally because it was crashed or killed. It does not include
        /// renderer processes.
        /// </summary>
        [<Emit("$0.once('child-process-gone', $1)"); Import("app", "electron")>]
        static member mutable onceChildProcessGone
            (handler: Fable.Electron.EventInterfaces.App.IOnChildProcessGone -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process unexpectedly disappears. This is normally because it was crashed or killed. It does not include
        /// renderer processes.
        /// </summary>
        [<Emit("$0.off('child-process-gone', $1)"); Import("app", "electron")>]
        static member mutable offChildProcessGone(handler: Event -> App.ChildProcessGone.Details -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when the child process unexpectedly disappears. This is normally because it was crashed or killed. It does not include
        /// renderer processes.
        /// </summary>
        [<Emit("$0.off('child-process-gone', $1)"); Import("app", "electron")>]
        static member mutable offChildProcessGone
            (handler: Fable.Electron.EventInterfaces.App.IOnChildProcessGone -> unit)
            : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Chrome's accessibility support changes. This event fires when assistive technologies, such as screen readers, are enabled or disabled.
        /// See https://www.chromium.org/developers/design-documents/accessibility for more details.
        /// </summary>
        [<Emit("$0.on('accessibility-support-changed', $1)"); Import("app", "electron")>]
        static member mutable onAccessibilitySupportChanged(handler: Event -> bool -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Chrome's accessibility support changes. This event fires when assistive technologies, such as screen readers, are enabled or disabled.
        /// See https://www.chromium.org/developers/design-documents/accessibility for more details.
        /// </summary>
        [<Emit("$0.on('accessibility-support-changed', $1)"); Import("app", "electron")>]
        static member mutable onAccessibilitySupportChanged
            (handler: Fable.Electron.EventInterfaces.App.IOnAccessibilitySupportChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Chrome's accessibility support changes. This event fires when assistive technologies, such as screen readers, are enabled or disabled.
        /// See https://www.chromium.org/developers/design-documents/accessibility for more details.
        /// </summary>
        [<Emit("$0.once('accessibility-support-changed', $1)"); Import("app", "electron")>]
        static member mutable onceAccessibilitySupportChanged(handler: Event -> bool -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Chrome's accessibility support changes. This event fires when assistive technologies, such as screen readers, are enabled or disabled.
        /// See https://www.chromium.org/developers/design-documents/accessibility for more details.
        /// </summary>
        [<Emit("$0.once('accessibility-support-changed', $1)"); Import("app", "electron")>]
        static member mutable onceAccessibilitySupportChanged
            (handler: Fable.Electron.EventInterfaces.App.IOnAccessibilitySupportChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Chrome's accessibility support changes. This event fires when assistive technologies, such as screen readers, are enabled or disabled.
        /// See https://www.chromium.org/developers/design-documents/accessibility for more details.
        /// </summary>
        [<Emit("$0.off('accessibility-support-changed', $1)"); Import("app", "electron")>]
        static member mutable offAccessibilitySupportChanged(handler: Event -> bool -> unit) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Emitted when Chrome's accessibility support changes. This event fires when assistive technologies, such as screen readers, are enabled or disabled.
        /// See https://www.chromium.org/developers/design-documents/accessibility for more details.
        /// </summary>
        [<Emit("$0.off('accessibility-support-changed', $1)"); Import("app", "electron")>]
        static member mutable offAccessibilitySupportChanged
            (handler: Fable.Electron.EventInterfaces.App.IOnAccessibilitySupportChanged -> unit)
            : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Emitted when Electron has created a new <c>session</c>.
        /// </summary>
        [<Emit("$0.on('session-created', $1)"); Import("app", "electron")>]
        static member mutable onSessionCreated(handler: Session -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron has created a new <c>session</c>.
        /// </summary>
        [<Emit("$0.once('session-created', $1)"); Import("app", "electron")>]
        static member mutable onceSessionCreated(handler: Session -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Emitted when Electron has created a new <c>session</c>.
        /// </summary>
        [<Emit("$0.off('session-created', $1)"); Import("app", "electron")>]
        static member mutable offSessionCreated(handler: Session -> unit) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// This event will be emitted inside the primary instance of your application when a second instance has been executed and
        /// calls <c>app.requestSingleInstanceLock()</c>.<br/><br/><c>argv</c> is an Array of the second instance's command line arguments, and <c>workingDirectory</c> is its current working directory. Usually
        /// applications respond to this by making their primary window focused and non-minimized.<br/><br/>&gt; [!NOTE] <c>argv</c> will not be exactly the same
        /// list of arguments as those passed to the second instance. The order might change and additional arguments might be appended.
        /// If you need to maintain the exact same arguments, it's advised to use <c>additionalData</c> instead.<br/><br/>&gt; [!NOTE] If the second instance
        /// is started by a different user than the first, the <c>argv</c> array will not include the arguments.<br/><br/>This event is guaranteed
        /// to be emitted after the <c>ready</c> event of <c>app</c> gets emitted.<br/><br/>&gt; [!NOTE] Extra command line arguments might be added by
        /// Chromium, such as <c>--original-process-start-time</c>.
        /// </summary>
        [<Emit("$0.on('second-instance', $1)"); Import("app", "electron")>]
        static member mutable onSecondInstance(handler: Event -> string[] -> string -> obj -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event will be emitted inside the primary instance of your application when a second instance has been executed and
        /// calls <c>app.requestSingleInstanceLock()</c>.<br/><br/><c>argv</c> is an Array of the second instance's command line arguments, and <c>workingDirectory</c> is its current working directory. Usually
        /// applications respond to this by making their primary window focused and non-minimized.<br/><br/>&gt; [!NOTE] <c>argv</c> will not be exactly the same
        /// list of arguments as those passed to the second instance. The order might change and additional arguments might be appended.
        /// If you need to maintain the exact same arguments, it's advised to use <c>additionalData</c> instead.<br/><br/>&gt; [!NOTE] If the second instance
        /// is started by a different user than the first, the <c>argv</c> array will not include the arguments.<br/><br/>This event is guaranteed
        /// to be emitted after the <c>ready</c> event of <c>app</c> gets emitted.<br/><br/>&gt; [!NOTE] Extra command line arguments might be added by
        /// Chromium, such as <c>--original-process-start-time</c>.
        /// </summary>
        [<Emit("$0.on('second-instance', $1)"); Import("app", "electron")>]
        static member mutable onSecondInstance
            (handler: Fable.Electron.EventInterfaces.App.IOnSecondInstance -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event will be emitted inside the primary instance of your application when a second instance has been executed and
        /// calls <c>app.requestSingleInstanceLock()</c>.<br/><br/><c>argv</c> is an Array of the second instance's command line arguments, and <c>workingDirectory</c> is its current working directory. Usually
        /// applications respond to this by making their primary window focused and non-minimized.<br/><br/>&gt; [!NOTE] <c>argv</c> will not be exactly the same
        /// list of arguments as those passed to the second instance. The order might change and additional arguments might be appended.
        /// If you need to maintain the exact same arguments, it's advised to use <c>additionalData</c> instead.<br/><br/>&gt; [!NOTE] If the second instance
        /// is started by a different user than the first, the <c>argv</c> array will not include the arguments.<br/><br/>This event is guaranteed
        /// to be emitted after the <c>ready</c> event of <c>app</c> gets emitted.<br/><br/>&gt; [!NOTE] Extra command line arguments might be added by
        /// Chromium, such as <c>--original-process-start-time</c>.
        /// </summary>
        [<Emit("$0.once('second-instance', $1)"); Import("app", "electron")>]
        static member mutable onceSecondInstance(handler: Event -> string[] -> string -> obj -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event will be emitted inside the primary instance of your application when a second instance has been executed and
        /// calls <c>app.requestSingleInstanceLock()</c>.<br/><br/><c>argv</c> is an Array of the second instance's command line arguments, and <c>workingDirectory</c> is its current working directory. Usually
        /// applications respond to this by making their primary window focused and non-minimized.<br/><br/>&gt; [!NOTE] <c>argv</c> will not be exactly the same
        /// list of arguments as those passed to the second instance. The order might change and additional arguments might be appended.
        /// If you need to maintain the exact same arguments, it's advised to use <c>additionalData</c> instead.<br/><br/>&gt; [!NOTE] If the second instance
        /// is started by a different user than the first, the <c>argv</c> array will not include the arguments.<br/><br/>This event is guaranteed
        /// to be emitted after the <c>ready</c> event of <c>app</c> gets emitted.<br/><br/>&gt; [!NOTE] Extra command line arguments might be added by
        /// Chromium, such as <c>--original-process-start-time</c>.
        /// </summary>
        [<Emit("$0.once('second-instance', $1)"); Import("app", "electron")>]
        static member mutable onceSecondInstance
            (handler: Fable.Electron.EventInterfaces.App.IOnSecondInstance -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event will be emitted inside the primary instance of your application when a second instance has been executed and
        /// calls <c>app.requestSingleInstanceLock()</c>.<br/><br/><c>argv</c> is an Array of the second instance's command line arguments, and <c>workingDirectory</c> is its current working directory. Usually
        /// applications respond to this by making their primary window focused and non-minimized.<br/><br/>&gt; [!NOTE] <c>argv</c> will not be exactly the same
        /// list of arguments as those passed to the second instance. The order might change and additional arguments might be appended.
        /// If you need to maintain the exact same arguments, it's advised to use <c>additionalData</c> instead.<br/><br/>&gt; [!NOTE] If the second instance
        /// is started by a different user than the first, the <c>argv</c> array will not include the arguments.<br/><br/>This event is guaranteed
        /// to be emitted after the <c>ready</c> event of <c>app</c> gets emitted.<br/><br/>&gt; [!NOTE] Extra command line arguments might be added by
        /// Chromium, such as <c>--original-process-start-time</c>.
        /// </summary>
        [<Emit("$0.off('second-instance', $1)"); Import("app", "electron")>]
        static member mutable offSecondInstance(handler: Event -> string[] -> string -> obj -> unit) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// This event will be emitted inside the primary instance of your application when a second instance has been executed and
        /// calls <c>app.requestSingleInstanceLock()</c>.<br/><br/><c>argv</c> is an Array of the second instance's command line arguments, and <c>workingDirectory</c> is its current working directory. Usually
        /// applications respond to this by making their primary window focused and non-minimized.<br/><br/>&gt; [!NOTE] <c>argv</c> will not be exactly the same
        /// list of arguments as those passed to the second instance. The order might change and additional arguments might be appended.
        /// If you need to maintain the exact same arguments, it's advised to use <c>additionalData</c> instead.<br/><br/>&gt; [!NOTE] If the second instance
        /// is started by a different user than the first, the <c>argv</c> array will not include the arguments.<br/><br/>This event is guaranteed
        /// to be emitted after the <c>ready</c> event of <c>app</c> gets emitted.<br/><br/>&gt; [!NOTE] Extra command line arguments might be added by
        /// Chromium, such as <c>--original-process-start-time</c>.
        /// </summary>
        [<Emit("$0.off('second-instance', $1)"); Import("app", "electron")>]
        static member mutable offSecondInstance
            (handler: Fable.Electron.EventInterfaces.App.IOnSecondInstance -> unit)
            : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Try to close all windows. The <c>before-quit</c> event will be emitted first. If all windows are successfully closed, the <c>will-quit</c>
        /// event will be emitted and by default the application will terminate.<br/><br/>This method guarantees that all <c>beforeunload</c> and <c>unload</c> event handlers
        /// are correctly executed. It is possible that a window cancels the quitting by returning <c>false</c> in the <c>beforeunload</c> event handler.
        /// </summary>
        [<Erase>]
        static member mutable quit() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Exits immediately with <c>exitCode</c>. <c>exitCode</c> defaults to 0.<br/><br/>All windows will be closed immediately without asking the user, and the <c>before-quit</c>
        /// and <c>will-quit</c> events will not be emitted.
        /// </summary>
        /// <param name="exitCode"></param>
        [<Erase>]
        static member mutable exit(?exitCode: int) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Relaunches the app when the current instance exits.<br/><br/>By default, the new instance will use the same working directory and command
        /// line arguments as the current instance. When <c>args</c> is specified, the <c>args</c> will be passed as the command line arguments
        /// instead. When <c>execPath</c> is specified, the <c>execPath</c> will be executed for the relaunch instead of the current app.<br/><br/>Note that this
        /// method does not quit the app when executed. You have to call <c>app.quit</c> or <c>app.exit</c> after calling <c>app.relaunch</c> to make
        /// the app restart.<br/><br/>When <c>app.relaunch</c> is called multiple times, multiple instances will be started after the current instance exits.<br/><br/>An example of
        /// restarting the current instance immediately and adding a new command line argument to the new instance:
        /// </summary>
        /// <param name="args"></param>
        /// <param name="execPath"></param>
        [<Erase; ParamObject(0)>]
        static member mutable relaunch(?args: string[], ?execPath: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// <c>true</c> if Electron has finished initializing, <c>false</c> otherwise. See also <c>app.whenReady()</c>.
        /// </summary>
        [<Erase>]
        static member mutable isReady() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// fulfilled when Electron is initialized. May be used as a convenient alternative to checking <c>app.isReady()</c> and subscribing to the <c>ready</c>
        /// event if the app is not ready yet.
        /// </summary>
        [<Erase>]
        static member mutable whenReady() : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// On Linux, focuses on the first visible window. On macOS, makes the application the active app. On Windows, focuses on
        /// the application's first window.<br/><br/>You should seek to use the <c>steal</c> option as sparingly as possible.
        /// </summary>
        /// <param name="steal">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Make the receiver the
        /// active app even if another app is currently active.</param>
        [<Erase; ParamObject(0)>]
        static member mutable focus(steal: bool) : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Hides all application windows without minimizing them.
        /// </summary>
        [<Erase>]
        static member mutable hide() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// <c>true</c> if the application—including all of its windows—is hidden (e.g. with <c>Command-H</c>), <c>false</c> otherwise.
        /// </summary>
        [<Erase>]
        static member mutable isHidden() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Shows application windows after they were hidden. Does not automatically focus them.
        /// </summary>
        [<Erase>]
        static member mutable show() : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Sets or creates a directory your app's logs which can then be manipulated with <c>app.getPath()</c> or <c>app.setPath(pathName, newPath)</c>.<br/><br/>Calling <c>app.setAppLogsPath()</c> without
        /// a <c>path</c> parameter will result in this directory being set to <c>~/Library/Logs/YourAppName</c> on _macOS_, and inside the <c>userData</c> directory on
        /// _Linux_ and _Windows_.
        /// </summary>
        /// <param name="path">A custom path for your logs. Must be absolute.</param>
        [<Erase>]
        static member mutable setAppLogsPath(?path: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The current application directory.
        /// </summary>
        [<Erase>]
        static member mutable getAppPath() : string = Unchecked.defaultof<_>

        /// <summary>
        /// A path to a special directory or file associated with <c>name</c>. On failure, an <c>Error</c> is thrown.<br/><br/>If <c>app.getPath('logs')</c> is called
        /// without called <c>app.setAppLogsPath()</c> being called first, a default log directory will be created equivalent to calling <c>app.setAppLogsPath()</c> without a <c>path</c>
        /// parameter.
        /// </summary>
        /// <param name="name">You can request the following paths by the name:</param>
        [<Erase>]
        static member mutable getPath(name: Enums.App.GetPath.Name) : string = Unchecked.defaultof<_>

        /// <summary>
        /// fulfilled with the app's icon, which is a NativeImage.<br/><br/>Fetches a path's associated icon.<br/><br/>On _Windows_, there a 2 kinds of icons:<br/><br/>*
        /// Icons associated with certain file extensions, like <c>.mp3</c>, <c>.png</c>, etc.<br/>* Icons inside the file itself, like <c>.exe</c>, <c>.dll</c>, <c>.ico</c>.<br/><br/>On _Linux_
        /// and _macOS_, icons depend on the application associated with file mime type.
        /// </summary>
        /// <param name="path"></param>
        /// <param name="options"></param>
        [<Erase>]
        static member mutable getFileIcon(path: string, ?options: App.GetFileIcon.Options) : Promise<NativeImage> =
            Unchecked.defaultof<_>

        /// <summary>
        /// Overrides the <c>path</c> to a special directory or file associated with <c>name</c>. If the path specifies a directory that does
        /// not exist, an <c>Error</c> is thrown. In that case, the directory should be created with <c>fs.mkdirSync</c> or similar.<br/><br/>You can only
        /// override paths of a <c>name</c> defined in <c>app.getPath</c>.<br/><br/>By default, web pages' cookies and caches will be stored under the <c>sessionData</c>
        /// directory. If you want to change this location, you have to override the <c>sessionData</c> path before the <c>ready</c> event of
        /// the <c>app</c> module is emitted.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="path"></param>
        [<Erase>]
        static member mutable setPath(name: string, path: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The version of the loaded application. If no version is found in the application's <c>package.json</c> file, the version of the
        /// current bundle or executable is returned.
        /// </summary>
        [<Erase>]
        static member mutable getVersion() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The current application's name, which is the name in the application's <c>package.json</c> file.<br/><br/>Usually the <c>name</c> field of <c>package.json</c> is a
        /// short lowercase name, according to the npm modules spec. You should usually also specify a <c>productName</c> field, which is your
        /// application's full capitalized name, and which will be preferred over <c>name</c> by Electron.
        /// </summary>
        [<Erase>]
        static member mutable getName() : string = Unchecked.defaultof<_>

        /// <summary>
        /// Overrides the current application's name.<br/><br/>&gt; [!NOTE] This function overrides the name used internally by Electron; it does not affect the
        /// name that the OS uses.
        /// </summary>
        /// <param name="name"></param>
        [<Erase>]
        static member mutable setName(name: string) : unit = Unchecked.defaultof<_>

        /// <summary>
        /// The current application locale, fetched using Chromium's <c>l10n_util</c> library. Possible return values are documented here.<br/><br/>To set the locale, you'll want
        /// to use a command line switch at app startup, which may be found here.<br/><br/>&gt; [!NOTE] When distributing your packaged app,
        /// you have to also ship the <c>locales</c> folder.<br/><br/>&gt; [!NOTE] This API must be called after the <c>ready</c> event is emitted.<br/><br/>&gt;
        /// [!NOTE] To see example return values of this API compared to other locale and language APIs, see <c>app.getPreferredSystemLanguages()</c>.
        /// </summary>
        [<Erase>]
        static member mutable getLocale() : string = Unchecked.defaultof<_>

        /// <summary>
        /// User operating system's locale two-letter ISO 3166 country code. The value is taken from native OS APIs.<br/><br/>&gt; [!NOTE] When unable
        /// to detect locale country code, it returns empty string.
        /// </summary>
        [<Erase>]
        static member mutable getLocaleCountryCode() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The current system locale. On Windows and Linux, it is fetched using Chromium's <c>i18n</c> library. On macOS, <c>[NSLocale currentLocale]</c> is
        /// used instead. To get the user's current system language, which is not always the same as the locale, it is
        /// better to use <c>app.getPreferredSystemLanguages()</c>.<br/><br/>Different operating systems also use the regional data differently:<br/><br/>* Windows 11 uses the regional format for numbers,
        /// dates, and times.<br/>* macOS Monterey uses the region for formatting numbers, dates, times, and for selecting the currency symbol to
        /// use.<br/><br/>Therefore, this API can be used for purposes such as choosing a format for rendering dates and times in a
        /// calendar app, especially when the developer wants the format to be consistent with the OS.<br/><br/>&gt; [!NOTE] This API must be
        /// called after the <c>ready</c> event is emitted.<br/><br/>&gt; [!NOTE] To see example return values of this API compared to other locale
        /// and language APIs, see <c>app.getPreferredSystemLanguages()</c>.
        /// </summary>
        [<Erase>]
        static member mutable getSystemLocale() : string = Unchecked.defaultof<_>

        /// <summary>
        /// The user's preferred system languages from most preferred to least preferred, including the country codes if applicable. A user can
        /// modify and add to this list on Windows or macOS through the Language and Region settings.<br/><br/>The API uses <c>GlobalizationPreferences</c> (with
        /// a fallback to <c>GetSystemPreferredUILanguages</c>) on Windows, <c>\[NSLocale preferredLanguages\]</c> on macOS, and <c>g_get_language_names</c> on Linux.<br/><br/>This API can be used for purposes
        /// such as deciding what language to present the application in.<br/><br/>Here are some examples of return values of the various language
        /// and locale APIs with different configurations:<br/><br/>On Windows, given application locale is German, the regional format is Finnish (Finland), and the
        /// preferred system languages from most to least preferred are French (Canada), English (US), Simplified Chinese (China), Finnish, and Spanish (Latin
        /// America):<br/><br/>On macOS, given the application locale is German, the region is Finland, and the preferred system languages from most to
        /// least preferred are French (Canada), English (US), Simplified Chinese, and Spanish (Latin America):<br/><br/>Both the available languages and regions and the
        /// possible return values differ between the two operating systems.<br/><br/>As can be seen with the example above, on Windows, it is
        /// possible that a preferred system language has no country code, and that one of the preferred system languages corresponds with
        /// the language used for the regional format. On macOS, the region serves more as a default country code: the user
        /// doesn't need to have Finnish as a preferred language to use Finland as the region,and the country code <c>FI</c> is
        /// used as the country code for preferred system languages that do not have associated countries in the language name.
        /// </summary>
        [<Erase>]
        static member mutable getPreferredSystemLanguages() : string[] = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Adds <c>path</c> to the recent documents list.<br/><br/>This list is managed by the OS. On Windows, you can visit the list
        /// from the task bar, and on macOS, you can visit it from dock menu.
        /// </summary>
        /// <param name="path"></param>
        [<Erase>]
        static member mutable addRecentDocument(path: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Clears the recent documents list.
        /// </summary>
        [<Erase>]
        static member mutable clearRecentDocuments() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// An array containing documents in the most recent documents list.
        /// </summary>
        [<Erase>]
        static member mutable getRecentDocuments() : string[] = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Whether the call succeeded.<br/><br/>Sets the current executable as the default handler for a protocol (aka URI scheme). It allows you
        /// to integrate your app deeper into the operating system. Once registered, all links with <c>your-protocol://</c> will be opened with the
        /// current executable. The whole link, including protocol, will be passed to your application as a parameter.<br/><br/>&gt; [!NOTE] On macOS, you
        /// can only register protocols that have been added to your app's <c>info.plist</c>, which cannot be modified at runtime. However, you
        /// can change the file during build time via Electron Forge, Electron Packager, or by editing <c>info.plist</c> with a text editor.
        /// Please refer to Apple's documentation for details.<br/><br/>&gt; [!NOTE] In a Windows Store environment (when packaged as an <c>appx</c>) this API
        /// will return <c>true</c> for all calls but the registry key it sets won't be accessible by other applications.  In
        /// order to register your Windows Store application as a default protocol handler you must declare the protocol in your manifest.<br/><br/>The
        /// API uses the Windows Registry and <c>LSSetDefaultHandlerForURLScheme</c> internally.
        /// </summary>
        /// <param name="protocol">The name of your protocol, without <c>://</c>. For example, if you want your app to handle <c>electron://</c> links, call
        /// this method with <c>electron</c> as the parameter.</param>
        /// <param name="path">The path to the Electron executable. Defaults to <c>process.execPath</c></param>
        /// <param name="args">Arguments passed to the executable. Defaults to an empty array</param>
        [<Erase>]
        static member mutable setAsDefaultProtocolClient(protocol: string, ?path: string, ?args: string[]) : bool =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the call succeeded.<br/><br/>This method checks if the current executable as the default handler for a protocol (aka URI scheme).
        /// If so, it will remove the app as the default handler.
        /// </summary>
        /// <param name="protocol">The name of your protocol, without <c>://</c>.</param>
        /// <param name="path">Defaults to <c>process.execPath</c></param>
        /// <param name="args">Defaults to an empty array</param>
        [<Erase>]
        static member mutable removeAsDefaultProtocolClient(protocol: string, ?path: string, ?args: string[]) : bool =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Whether the current executable is the default handler for a protocol (aka URI scheme).<br/><br/>&gt; [!NOTE] On macOS, you can use
        /// this method to check if the app has been registered as the default protocol handler for a protocol. You can
        /// also verify this by checking <c>~/Library/Preferences/com.apple.LaunchServices.plist</c> on the macOS machine. Please refer to Apple's documentation for details.<br/><br/>The API uses the
        /// Windows Registry and <c>LSCopyDefaultHandlerForURLScheme</c> internally.
        /// </summary>
        /// <param name="protocol">The name of your protocol, without <c>://</c>.</param>
        /// <param name="path">Defaults to <c>process.execPath</c></param>
        /// <param name="args">Defaults to an empty array</param>
        [<Erase>]
        static member mutable isDefaultProtocolClient(protocol: string, ?path: string, ?args: string[]) : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// Name of the application handling the protocol, or an empty string if there is no handler. For instance, if Electron
        /// is the default handler of the URL, this could be <c>Electron</c> on Windows and Mac. However, don't rely on the
        /// precise format which is not guaranteed to remain unchanged. Expect a different format on Linux, possibly with a <c>.desktop</c> suffix.<br/><br/>This
        /// method returns the application name of the default handler for the protocol (aka URI scheme) of a URL.
        /// </summary>
        /// <param name="url">a URL with the protocol name to check. Unlike the other methods in this family, this accepts an entire
        /// URL, including <c>://</c> at a minimum (e.g. <c>https://</c>).</param>
        [<Erase>]
        static member mutable getApplicationNameForProtocol(url: string) : string = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Resolve with an object containing the following:<br/><br/>* <c>icon</c> NativeImage - the display icon of the app handling the protocol.<br/>* <c>path</c>
        /// string  - installation path of the app handling the protocol.<br/>* <c>name</c> string - display name of the app handling
        /// the protocol.<br/><br/>This method returns a promise that contains the application name, icon and path of the default handler for the
        /// protocol (aka URI scheme) of a URL.
        /// </summary>
        /// <param name="url">a URL with the protocol name to check. Unlike the other methods in this family, this accepts an entire
        /// URL, including <c>://</c> at a minimum (e.g. <c>https://</c>).</param>
        [<Erase>]
        static member mutable getApplicationInfoForProtocol(url: string) : Promise<App.GetApplicationInfoForProtocol> =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Adds <c>tasks</c> to the Tasks category of the Jump List on Windows.<br/><br/><c>tasks</c> is an array of <c>Task</c> objects.<br/><br/>Whether the call
        /// succeeded.<br/><br/>&gt; [!NOTE] If you'd like to customize the Jump List even more use <c>app.setJumpList(categories)</c> instead.
        /// </summary>
        /// <param name="tasks">Array of <c>Task</c> objects</param>
        [<Erase>]
        static member mutable setUserTasks(tasks: Task[]) : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// * <c>minItems</c> Integer - The minimum number of items that will be shown in the Jump List (for a more
        /// detailed description of this value see the MSDN docs).<br/>* <c>removedItems</c> JumpListItem[] - Array of <c>JumpListItem</c> objects that correspond to items
        /// that the user has explicitly removed from custom categories in the Jump List. These items must not be re-added to
        /// the Jump List in the **next** call to <c>app.setJumpList()</c>, Windows will not display any custom category that contains any of
        /// the removed items.
        /// </summary>
        [<Erase>]
        static member mutable getJumpListSettings() : App.GetJumpListSettings = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets or removes a custom Jump List for the application, and returns one of the following strings:<br/><br/>* <c>ok</c> - Nothing
        /// went wrong.<br/>* <c>error</c> - One or more errors occurred, enable runtime logging to figure out the likely cause.<br/>* <c>invalidSeparatorError</c> -
        /// An attempt was made to add a separator to a custom category in the Jump List. Separators are only allowed
        /// in the standard <c>Tasks</c> category.<br/>* <c>fileTypeRegistrationError</c> - An attempt was made to add a file link to the Jump List
        /// for a file type the app isn't registered to handle.<br/>* <c>customCategoryAccessDeniedError</c> - Custom categories can't be added to the Jump
        /// List due to user privacy or group policy settings.<br/><br/>If <c>categories</c> is <c>null</c> the previously set custom Jump List (if any)
        /// will be replaced by the standard Jump List for the app (managed by Windows).<br/><br/>&gt; [!NOTE] If a <c>JumpListCategory</c> object has
        /// neither the <c>type</c> nor the <c>name</c> property set then its <c>type</c> is assumed to be <c>tasks</c>. If the <c>name</c> property
        /// is set but the <c>type</c> property is omitted then the <c>type</c> is assumed to be <c>custom</c>.<br/><br/>&gt; [!NOTE] Users can remove
        /// items from custom categories, and Windows will not allow a removed item to be added back into a custom category
        /// until **after** the next successful call to <c>app.setJumpList(categories)</c>. Any attempt to re-add a removed item to a custom category earlier
        /// than that will result in the entire custom category being omitted from the Jump List. The list of removed items
        /// can be obtained using <c>app.getJumpListSettings()</c>.<br/><br/>&gt; [!NOTE] The maximum length of a Jump List item's <c>description</c> property is 260 characters. Beyond
        /// this limit, the item will not be added to the Jump List, nor will it be displayed.<br/><br/>Here's a very simple
        /// example of creating a custom Jump List:
        /// </summary>
        /// <param name="categories">Array of <c>JumpListCategory</c> objects.</param>
        [<Erase>]
        static member mutable setJumpList(categories: Option<JumpListCategory[]>) : Enums.App.SetJumpList =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// The return value of this method indicates whether or not this instance of your application successfully obtained the lock.
        /// If it failed to obtain the lock, you can assume that another instance of your application is already running with
        /// the lock and exit immediately.<br/><br/>I.e. This method returns <c>true</c> if your process is the primary instance of your application and
        /// your app should continue loading.  It returns <c>false</c> if your process should immediately quit as it has sent its
        /// parameters to another instance that has already acquired the lock.<br/><br/>On macOS, the system enforces single instance automatically when users try
        /// to open a second instance of your app in Finder, and the <c>open-file</c> and <c>open-url</c> events will be emitted for
        /// that. However when users start your app in command line, the system's single instance mechanism will be bypassed, and you
        /// have to use this method to ensure single instance.<br/><br/>An example of activating the window of primary instance when a second
        /// instance starts:
        /// </summary>
        /// <param name="additionalData">A JSON object containing additional data to send to the first instance.</param>
        [<Erase>]
        static member mutable requestSingleInstanceLock(?additionalData: Record<obj, obj>) : bool =
            Unchecked.defaultof<_>

        /// <summary>
        /// This method returns whether or not this instance of your app is currently holding the single instance lock.  You
        /// can request the lock with <c>app.requestSingleInstanceLock()</c> and release with <c>app.releaseSingleInstanceLock()</c>
        /// </summary>
        [<Erase>]
        static member mutable hasSingleInstanceLock() : bool = Unchecked.defaultof<_>

        /// <summary>
        /// Releases all locks that were created by <c>requestSingleInstanceLock</c>. This will allow multiple instances of the application to once again run
        /// side by side.
        /// </summary>
        [<Erase>]
        static member mutable releaseSingleInstanceLock() : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Creates an <c>NSUserActivity</c> and sets it as the current activity. The activity is eligible for Handoff to another device afterward.
        /// </summary>
        /// <param name="``type``">Uniquely identifies the activity. Maps to <c>NSUserActivity.activityType</c>.</param>
        /// <param name="userInfo">App-specific state to store for use by another device.</param>
        /// <param name="webpageURL">The webpage to load in a browser if no suitable app is installed on the resuming device. The scheme
        /// must be <c>http</c> or <c>https</c>.</param>
        [<Erase>]
        static member mutable setUserActivity(``type``: string, userInfo: obj, ?webpageURL: string) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// The type of the currently running activity.
        /// </summary>
        [<Erase>]
        static member mutable getCurrentActivityType() : string = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Invalidates the current Handoff user activity.
        /// </summary>
        [<Erase>]
        static member mutable invalidateCurrentActivity() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Marks the current Handoff user activity as inactive without invalidating it.
        /// </summary>
        [<Erase>]
        static member mutable resignCurrentActivity() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Updates the current activity if its type matches <c>type</c>, merging the entries from <c>userInfo</c> into its current <c>userInfo</c> dictionary.
        /// </summary>
        /// <param name="``type``">Uniquely identifies the activity. Maps to <c>NSUserActivity.activityType</c>.</param>
        /// <param name="userInfo">App-specific state to store for use by another device.</param>
        [<Erase>]
        static member mutable updateCurrentActivity(``type``: string, userInfo: obj) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌
        /// </para>
        /// Changes the Application User Model ID to <c>id</c>.
        /// </summary>
        /// <param name="id"></param>
        [<Erase>]
        static member mutable setAppUserModelId(id: string) : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Sets the activation policy for a given app.<br/><br/>Activation policy types:<br/><br/>* 'regular' - The application is an ordinary app that appears
        /// in the Dock and may have a user interface.<br/>* 'accessory' - The application doesn’t appear in the Dock and doesn’t
        /// have a menu bar, but it may be activated programmatically or by clicking on one of its windows.<br/>* 'prohibited' -
        /// The application doesn’t appear in the Dock and may not create windows or be activated.
        /// </summary>
        /// <param name="policy">Can be 'regular', 'accessory', or 'prohibited'.</param>
        [<Erase>]
        static member mutable setActivationPolicy(policy: Enums.App.SetActivationPolicy.Policy) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Imports the certificate in pkcs12 format into the platform certificate store. <c>callback</c> is called with the <c>result</c> of import operation,
        /// a value of <c>0</c> indicates success while any other value indicates failure according to Chromium net_error_list.
        /// </summary>
        /// <param name="options"></param>
        /// <param name="callback"></param>
        [<Erase>]
        static member mutable importCertificate(options: App.ImportCertificate.Options, callback: int -> unit) : unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Configures host resolution (DNS and DNS-over-HTTPS). By default, the following resolvers will be used, in order:<br/><br/>* DNS-over-HTTPS, if the DNS
        /// provider supports it, then<br/>* the built-in resolver (enabled on macOS only by default), then<br/>* the system's resolver (e.g. <c>getaddrinfo</c>).<br/><br/>This can
        /// be configured to either restrict usage of non-encrypted DNS (<c>secureDnsMode: "secure"</c>), or disable DNS-over-HTTPS (<c>secureDnsMode: "off"</c>). It is also possible
        /// to enable or disable the built-in resolver.<br/><br/>To disable insecure DNS, you can specify a <c>secureDnsMode</c> of <c>"secure"</c>. If you do
        /// so, you should make sure to provide a list of DNS-over-HTTPS servers to use, in case the user's DNS configuration
        /// does not include a provider that supports DoH.<br/><br/>This API must be called after the <c>ready</c> event is emitted.
        /// </summary>
        /// <param name="enableBuiltInResolver">Whether the built-in host resolver is used in preference to getaddrinfo. When enabled, the built-in resolver will attempt to
        /// use the system's DNS settings to do DNS lookups itself. Enabled by default on macOS, disabled by default on Windows
        /// and Linux.</param>
        /// <param name="enableHappyEyeballs">Whether the Happy Eyeballs V3 algorithm should be used in creating network connections. When enabled, hostnames resolving to multiple
        /// IP addresses will be attempted in parallel to have a chance at establishing a connection more quickly.</param>
        /// <param name="secureDnsMode">Can be 'off', 'automatic' or 'secure'. Configures the DNS-over-HTTP mode. When 'off', no DoH lookups will be performed. When
        /// 'automatic', DoH lookups will be performed first if DoH is available, and insecure DNS lookups will be performed as a
        /// fallback. When 'secure', only DoH lookups will be performed. Defaults to 'automatic'.</param>
        /// <param name="secureDnsServers">A list of DNS-over-HTTP server templates. See RFC8484 § 3 for details on the template format. Most servers support
        /// the POST method; the template for such servers is simply a URI. Note that for some DNS providers, the resolver
        /// will automatically upgrade to DoH unless DoH is explicitly disabled, even if there are no DoH servers provided in this
        /// list.</param>
        /// <param name="enableAdditionalDnsQueryTypes">Controls whether additional DNS query types, e.g. HTTPS (DNS type 65) will be allowed besides the traditional A and
        /// AAAA queries when a request is being made via insecure DNS. Has no effect on Secure DNS which always allows
        /// additional types. Defaults to true.</param>
        [<Erase; ParamObject(0)>]
        static member mutable configureHostResolver
            (
                ?enableBuiltInResolver: bool,
                ?enableHappyEyeballs: bool,
                ?secureDnsMode: Enums.App.ConfigureHostResolver.Options.SecureDnsMode,
                ?secureDnsServers: string[],
                ?enableAdditionalDnsQueryTypes: bool
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// Disables hardware acceleration for current app.<br/><br/>This method can only be called before app is ready.
        /// </summary>
        [<Erase>]
        static member mutable disableHardwareAcceleration() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// By default, Chromium disables 3D APIs (e.g. WebGL) until restart on a per domain basis if the GPU processes crashes
        /// too frequently. This function disables that behavior.<br/><br/>This method can only be called before app is ready.
        /// </summary>
        [<Erase>]
        static member mutable disableDomainBlockingFor3DAPIs() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Array of <c>ProcessMetric</c> objects that correspond to memory and CPU usage statistics of all the processes associated with the app.
        /// </summary>
        [<Erase>]
        static member mutable getAppMetrics() : ProcessMetric[] = Unchecked.defaultof<_>

        /// <summary>
        /// The Graphics Feature Status from <c>chrome://gpu/</c>.<br/><br/>&gt; [!NOTE] This information is only usable after the <c>gpu-info-update</c> event is emitted.
        /// </summary>
        [<Erase>]
        static member mutable getGPUFeatureStatus() : GPUFeatureStatus = Unchecked.defaultof<_>

        /// <summary>
        /// For <c>infoType</c> equal to <c>complete</c>: Promise is fulfilled with <c>Object</c> containing all the GPU Information as in chromium's GPUInfo object.
        /// This includes the version and driver information that's shown on <c>chrome://gpu</c> page.<br/><br/>For <c>infoType</c> equal to <c>basic</c>: Promise is fulfilled with
        /// <c>Object</c> containing fewer attributes than when requested with <c>complete</c>. Here's an example of basic response:<br/><br/>Using <c>basic</c> should be preferred if
        /// only basic information like <c>vendorId</c> or <c>deviceId</c> is needed.
        /// </summary>
        /// <param name="infoType">Can be <c>basic</c> or <c>complete</c>.</param>
        [<Erase>]
        static member mutable getGPUInfo(infoType: Enums.App.GetGPUInfo.InfoType) : Promise<obj> =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether the call succeeded.<br/><br/>Sets the counter badge for current app. Setting the count to <c>0</c> will hide the badge.<br/><br/>On macOS,
        /// it shows on the dock icon. On Linux, it only works for Unity launcher.<br/><br/>&gt; [!NOTE] Unity launcher requires a <c>.desktop</c>
        /// file to work. For more information, please read the Unity integration documentation.<br/><br/>&gt; [!NOTE] On macOS, you need to ensure that
        /// your application has the permission to display notifications for this method to work.
        /// </summary>
        /// <param name="count">If a value is provided, set the badge to the provided value otherwise, on macOS, display a plain white
        /// dot (e.g. unknown number of notifications). On Linux, if a value is not provided the badge will not display.</param>
        [<Erase>]
        static member mutable setBadgeCount(?count: int) : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌
        /// </para>
        /// The current value displayed in the counter badge.
        /// </summary>
        [<Erase>]
        static member mutable getBadgeCount() : int = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌
        /// </para>
        /// Whether the current desktop environment is Unity launcher.
        /// </summary>
        [<Erase>]
        static member mutable isUnityRunning() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// If you provided <c>path</c> and <c>args</c> options to <c>app.setLoginItemSettings</c>, then you need to pass the same arguments here for <c>openAtLogin</c>
        /// to be set correctly.<br/><br/><br/>* <c>openAtLogin</c> boolean - <c>true</c> if the app is set to open at login.<br/>* <c>openAsHidden</c> boolean _macOS_
        /// _Deprecated_ - <c>true</c> if the app is set to open as hidden at login. This does not work on macOS
        /// 13 and up.<br/>* <c>wasOpenedAtLogin</c> boolean _macOS_ - <c>true</c> if the app was opened at login automatically.<br/>* <c>wasOpenedAsHidden</c> boolean _macOS_ _Deprecated_
        /// - <c>true</c> if the app was opened as a hidden login item. This indicates that the app should not open
        /// any windows at startup. This setting is not available on MAS builds or on macOS 13 and up.<br/>* <c>restoreState</c> boolean
        /// _macOS_ _Deprecated_ - <c>true</c> if the app was opened as a login item that should restore the state from the
        /// previous session. This indicates that the app should restore the windows that were open the last time the app was
        /// closed. This setting is not available on MAS builds or on macOS 13 and up.<br/>* <c>status</c> string _macOS_ - can
        /// be one of <c>not-registered</c>, <c>enabled</c>, <c>requires-approval</c>, or <c>not-found</c>.<br/>* <c>executableWillLaunchAtLogin</c> boolean _Windows_ - <c>true</c> if app is set to open at
        /// login and its run key is not deactivated. This differs from <c>openAtLogin</c> as it ignores the <c>args</c> option, this property
        /// will be true if the given executable would be launched at login with **any** arguments.<br/>* <c>launchItems</c> Object[] _Windows_<br/>  *
        /// <c>name</c> string _Windows_ - name value of a registry entry.<br/>  * <c>path</c> string _Windows_ - The executable to an
        /// app that corresponds to a registry entry.<br/>  * <c>args</c> string[] _Windows_ - the command-line arguments to pass to the
        /// executable.<br/>  * <c>scope</c> string _Windows_ - one of <c>user</c> or <c>machine</c>. Indicates whether the registry entry is under <c>HKEY_CURRENT
        /// USER</c> or <c>HKEY_LOCAL_MACHINE</c>.<br/>  * <c>enabled</c> boolean _Windows_ - <c>true</c> if the app registry key is startup approved and therefore
        /// shows as <c>enabled</c> in Task Manager and Windows settings.
        /// </summary>
        /// <param name="``type``">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || Can be one of
        /// <c>mainAppService</c>, <c>agentService</c>, <c>daemonService</c>, or <c>loginItemService</c>. Defaults to <c>mainAppService</c>. Only available on macOS 13 and up. See app.setLoginItemSettings for more information
        /// about each type.</param>
        /// <param name="serviceName">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || The name of the
        /// service. Required if <c>type</c> is non-default. Only available on macOS 13 and up.</param>
        /// <param name="path">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || The executable path to
        /// compare against. Defaults to <c>process.execPath</c>.</param>
        /// <param name="args">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || The command-line arguments to
        /// compare against. Defaults to an empty array.</param>
        [<Erase; ParamObject(0)>]
        static member mutable getLoginItemSettings
            (?``type``: string, ?serviceName: string, ?path: string, ?args: string[])
            : App.GetLoginItemSettings =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Set the app's login item settings.<br/><br/>To work with Electron's <c>autoUpdater</c> on Windows, which uses Squirrel, you'll want to set the
        /// launch path to your executable's name but a directory up, which is a stub application automatically generated by Squirrel which
        /// will automatically launch the latest version.<br/><br/>For more information about setting different services as login items on macOS 13 and up,
        /// see <c>SMAppService</c>.
        /// </summary>
        /// <param name="openAtLogin"><c>true</c> to open the app at login, <c>false</c> to remove the app as a login item. Defaults to <c>false</c>.</param>
        /// <param name="openAsHidden">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || <c>true</c> to open the
        /// app as hidden. Defaults to <c>false</c>. The user can edit this setting from the System Preferences so <c>app.getLoginItemSettings().wasOpenedAsHidden</c> should be
        /// checked when the app is opened to know the current value. This setting is not available on MAS builds or
        /// on macOS 13 and up.</param>
        /// <param name="``type``">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || The type of service
        /// to add as a login item. Defaults to <c>mainAppService</c>. Only available on macOS 13 and up.</param>
        /// <param name="serviceName">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || The name of the
        /// service. Required if <c>type</c> is non-default. Only available on macOS 13 and up.</param>
        /// <param name="path">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || The executable to launch
        /// at login. Defaults to <c>process.execPath</c>.</param>
        /// <param name="args">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || The command-line arguments to
        /// pass to the executable. Defaults to an empty array. Take care to wrap paths in quotes.</param>
        /// <param name="enabled">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || <c>true</c> will change the
        /// startup approved registry key and <c>enable / disable</c> the App in Task Manager and Windows Settings. Defaults to <c>true</c>.</param>
        /// <param name="name">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌ || value name to write
        /// into registry. Defaults to the app's AppUserModelId().</param>
        [<Erase; ParamObject(0)>]
        static member mutable setLoginItemSettings
            (
                ?openAtLogin: bool,
                ?openAsHidden: bool,
                ?``type``: Enums.App.SetLoginItemSettings.Settings.Type,
                ?serviceName: string,
                ?path: string,
                ?args: string[],
                ?enabled: bool,
                ?name: string
            ) : unit =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// <c>true</c> if Chrome's accessibility support is enabled, <c>false</c> otherwise. This API will return <c>true</c> if the use of assistive technologies,
        /// such as screen readers, has been detected. See https://www.chromium.org/developers/design-documents/accessibility for more details.
        /// </summary>
        [<Erase>]
        static member mutable isAccessibilitySupportEnabled() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Manually enables Chrome's accessibility support, allowing to expose accessibility switch to users in application settings. See Chromium's accessibility docs for
        /// more details. Disabled by default.<br/><br/>This API must be called after the <c>ready</c> event is emitted.<br/><br/>&gt; [!NOTE] Rendering accessibility tree can
        /// significantly affect the performance of your app. It should not be enabled by default.
        /// </summary>
        /// <param name="enabled">Enable or disable accessibility tree rendering</param>
        [<Erase>]
        static member mutable setAccessibilitySupportEnabled(enabled: bool) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Show the app's about panel options. These options can be overridden with <c>app.setAboutPanelOptions(options)</c>. This function runs asynchronously.
        /// </summary>
        [<Erase>]
        static member mutable showAboutPanel() : unit = Unchecked.defaultof<_>

        /// <summary>
        /// Set the about panel options. This will override the values defined in the app's <c>.plist</c> file on macOS. See the
        /// Apple docs for more details. On Linux, values must be set in order to be shown; there are no defaults.<br/><br/>If
        /// you do not set <c>credits</c> but still wish to surface them in your app, AppKit will look for a file
        /// named "Credits.html", "Credits.rtf", and "Credits.rtfd", in that order, in the bundle returned by the NSBundle class method main. The first
        /// file found is used, and if none is found, the info area is left blank. See Apple documentation for more
        /// information.
        /// </summary>
        /// <param name="applicationName">The app's name.</param>
        /// <param name="applicationVersion">The app's version.</param>
        /// <param name="copyright">Copyright information.</param>
        /// <param name="version">⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌ || The app's build version
        /// number.</param>
        /// <param name="credits">⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌ || Credit information.</param>
        /// <param name="authors">⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌ || List of app authors.</param>
        /// <param name="website">⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ✔ | MAS ❌ || The app's website.</param>
        /// <param name="iconPath">⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌ || Path to the app's
        /// icon in a JPEG or PNG file format. On Linux, will be shown as 64x64 pixels while retaining aspect ratio.
        /// On Windows, a 48x48 PNG will result in the best visual quality.</param>
        [<Erase; ParamObject(0)>]
        static member mutable setAboutPanelOptions
            (
                ?applicationName: string,
                ?applicationVersion: string,
                ?copyright: string,
                ?version: string,
                ?credits: string,
                ?authors: string[],
                ?website: string,
                ?iconPath: string
            ) : unit =
            Unchecked.defaultof<_>

        /// <summary>
        /// whether or not the current OS version allows for native emoji pickers.
        /// </summary>
        [<Erase>]
        static member mutable isEmojiPanelSupported() : bool = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Show the platform's native emoji picker.
        /// </summary>
        [<Erase>]
        static member mutable showEmojiPanel() : unit = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAS
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ❌ | LIN ❌ | MAS ✔
        /// </para>
        /// This function **must** be called once you have finished accessing the security scoped file. If you do not remember to
        /// stop accessing the bookmark, kernel resources will be leaked and your app will lose its ability to reach outside the
        /// sandbox completely, until your app is restarted.<br/><br/>Start accessing a security scoped resource. With this method Electron applications that are packaged
        /// for the Mac App Store may reach outside their sandbox to access files chosen by the user. See Apple's documentation
        /// for a description of how this system works.
        /// </summary>
        /// <param name="bookmarkData">The base64 encoded security scoped bookmark data returned by the <c>dialog.showOpenDialog</c> or <c>dialog.showSaveDialog</c> methods.</param>
        [<Erase>]
        static member mutable startAccessingSecurityScopedResource(bookmarkData: string) : unit -> unit =
            Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Enables full sandbox mode on the app. This means that all renderers will be launched sandboxed, regardless of the value
        /// of the <c>sandbox</c> flag in <c>WebPreferences</c>.<br/><br/>This method can only be called before app is ready.
        /// </summary>
        [<Erase>]
        static member mutable enableSandbox() : unit = Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the application is currently running from the systems Application folder. Use in combination with <c>app.moveToApplicationsFolder()</c>
        /// </summary>
        [<Erase>]
        static member mutable isInApplicationsFolder() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Whether the move was successful. Please note that if the move is successful, your application will quit and relaunch.<br/><br/>No confirmation
        /// dialog will be presented by default. If you wish to allow the user to confirm the operation, you may do
        /// so using the <c>dialog</c> API.<br/><br/>**NOTE:** This method throws errors if anything other than the user causes the move to fail.
        /// For instance if the user cancels the authorization dialog, this method returns false. If we fail to perform the copy,
        /// then this method will throw an error. The message in the error should be informative and tell you exactly what
        /// went wrong.<br/><br/>By default, if an app of the same name as the one being moved exists in the Applications directory
        /// and is _not_ running, the existing app will be trashed and the active app moved into its place. If it
        /// _is_ running, the preexisting running app will assume focus and the previously active app will quit itself. This behavior can
        /// be changed by providing the optional conflict handler, where the boolean returned by the handler determines whether or not the
        /// move conflict is resolved with default behavior.  i.e. returning <c>false</c> will ensure no further action is taken, returning <c>true</c>
        /// will result in the default behavior and the method continuing.<br/><br/>For example:<br/><br/>Would mean that if an app already exists in the
        /// user directory, if the user chooses to 'Continue Move' then the function would continue with its default behavior and the
        /// existing app will be trashed and the active app moved into its place.
        /// </summary>
        /// <param name="conflictHandler">A handler for potential conflict in move failure.</param>
        [<Erase; ParamObject(0)>]
        static member mutable moveToApplicationsFolder
            (?conflictHandler: Enums.App.MoveToApplicationsFolder.Options.ConflictHandler.ConflictType -> bool)
            : bool =
            Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// whether <c>Secure Keyboard Entry</c> is enabled.<br/><br/>By default this API will return <c>false</c>.
        /// </summary>
        [<Erase>]
        static member mutable isSecureKeyboardEntryEnabled() : bool = Unchecked.defaultof<_>
        #endif

        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>
        /// ⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌
        /// </para>
        /// Set the <c>Secure Keyboard Entry</c> is enabled in your application.<br/><br/>By using this API, important information such as password and other
        /// sensitive information can be prevented from being intercepted by other processes.<br/><br/>See Apple's documentation for more details.<br/><br/>&gt; [!NOTE] Enable <c>Secure Keyboard
        /// Entry</c> only when it is needed and disable it when it is no longer needed.
        /// </summary>
        /// <param name="enabled">Enable or disable <c>Secure Keyboard Entry</c></param>
        [<Erase>]
        static member mutable setSecureKeyboardEntryEnabled(enabled: bool) : unit = Unchecked.defaultof<_>
        #endif


        /// <summary>
        /// Resolves when the proxy setting process is complete.<br/><br/>Sets the proxy settings for networks requests made without an associated Session. Currently
        /// this will affect requests made with Net in the utility process and internal requests made by the runtime (ex: geolocation
        /// queries).<br/><br/>This method can only be called after app is ready.
        /// </summary>
        /// <param name="config"></param>
        [<Erase>]
        static member mutable setProxy(config: ProxyConfig) : Promise<unit> = Unchecked.defaultof<_>

        /// <summary>
        /// Resolves with the proxy information for <c>url</c> that will be used when attempting to make requests using Net in the
        /// utility process.
        /// </summary>
        /// <param name="url"></param>
        [<Erase>]
        static member mutable resolveProxy(url: URL) : Promise<string> = Unchecked.defaultof<_>

        /// <summary>
        /// The handler is called when a password is needed to unlock a client certificate for <c>hostname</c>.
        /// </summary>
        /// <param name="handler"></param>
        [<Erase>]
        static member mutable setClientCertRequestPasswordHandler
            (handler: App.SetClientCertRequestPasswordHandler.Handler.ClientCertRequestParams -> Promise<string>)
            : unit =
            Unchecked.defaultof<_>
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> property that's <c>true</c> if Chrome's accessibility support is enabled, <c>false</c> otherwise. This property will be <c>true</c> if the
        /// use of assistive technologies, such as screen readers, has been detected. Setting this property to <c>true</c> manually enables Chrome's accessibility
        /// support, allowing developers to expose accessibility switch to users in application settings.<br/><br/>See Chromium's accessibility docs for more details. Disabled by
        /// default.<br/><br/>This API must be called after the <c>ready</c> event is emitted.<br/><br/>&gt; [!NOTE] Rendering accessibility tree can significantly affect the performance
        /// of your app. It should not be enabled by default.
        /// </summary>
        [<Erase>]
        static member val accessibilitySupportEnabled: bool = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>Menu | null</c> property that returns <c>Menu</c> if one has been set and <c>null</c> otherwise. Users can pass a
        /// Menu to set this property.
        /// </summary>
        [<Erase>]
        static member val applicationMenu: Option<Menu> = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ✔ | MAS ❌</para>
        /// An <c>Integer</c> property that returns the badge count for current app. Setting the count to <c>0</c> will hide the badge.<br/><br/>On
        /// macOS, setting this with any nonzero integer shows on the dock icon. On Linux, this property only works for Unity
        /// launcher.<br/><br/>&gt; [!NOTE] Unity launcher requires a <c>.desktop</c> file to work. For more information, please read the Unity integration documentation.<br/><br/>&gt; [!NOTE]
        /// On macOS, you need to ensure that your application has the permission to display notifications for this property to take
        /// effect.
        /// </summary>
        [<Erase>]
        static member val badgeCount: int = Unchecked.defaultof<_> with get, set
        #endif


        /// <summary>
        /// A <c>CommandLine</c> object that allows you to read and manipulate the command line arguments that Chromium uses.
        /// </summary>
        [<Erase>]
        static member val commandLine: CommandLine = Unchecked.defaultof<_> with get
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>Dock | undefined</c> property (<c>Dock</c> on macOS, <c>undefined</c> on all other platforms) that allows you to perform actions on
        /// your app icon in the user's dock.
        /// </summary>
        [<Erase>]
        static member val dock: Option<Dock> = Unchecked.defaultof<_> with get
        #endif


        /// <summary>
        /// A <c>boolean</c> property that returns  <c>true</c> if the app is packaged, <c>false</c> otherwise. For many apps, this property can
        /// be used to distinguish development and production environments.
        /// </summary>
        [<Erase>]
        static member val isPackaged: bool = Unchecked.defaultof<_> with get

        /// <summary>
        /// A <c>string</c> property that indicates the current application's name, which is the name in the application's <c>package.json</c> file.<br/><br/>Usually the <c>name</c>
        /// field of <c>package.json</c> is a short lowercase name, according to the npm modules spec. You should usually also specify a
        /// <c>productName</c> field, which is your application's full capitalized name, and which will be preferred over <c>name</c> by Electron.
        /// </summary>
        [<Erase>]
        static member val name: string = Unchecked.defaultof<_> with get, set

        /// <summary>
        /// A <c>string</c> which is the user agent string Electron will use as a global fallback.<br/><br/>This is the user agent that
        /// will be used when no user agent is set at the <c>webContents</c> or <c>session</c> level.  It is useful for
        /// ensuring that your entire app has the same user agent.  Set to a custom value as early as possible
        /// in your app's initialization to ensure that your overridden value is used.
        /// </summary>
        [<Erase>]
        static member val userAgentFallback: string = Unchecked.defaultof<_> with get, set
        #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
        /// <summary>
        /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
        /// A <c>boolean</c> which when <c>true</c> indicates that the app is currently running under an ARM64 translator (like the macOS Rosetta
        /// Translator Environment or Windows WOW).<br/><br/>You can use this property to prompt users to download the arm64 version of your application
        /// when they are mistakenly running the x64 version under Rosetta or WOW.
        /// </summary>
        [<Erase>]
        static member val runningUnderARM64Translation: bool = Unchecked.defaultof<_> with get
        #endif

[<AutoOpen>]
module Fable.Electron.EventInterfaces

open System
open System.ComponentModel
open Fable.Core
open Fable.Core.JsInterop
open Fable.Electron

[<AutoOpen; EditorBrowsable(EditorBrowsableState.Never)>]
module Root =
    /// <summary>
    /// Fired when a load has committed. This includes navigation within the current document as well as subframe document-level loads, but
    /// does not include asynchronous resource loads.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnLoadCommit =
        [<Emit("$0[0]")>]
        abstract member url: string with get, set

        [<Emit("$0[1]")>]
        abstract member isMainFrame: bool with get, set

    /// <summary>
    /// This event is like <c>did-finish-load</c>, but fired when the load failed or was cancelled, e.g. <c>window.stop()</c> is invoked.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidFailLoad =
        [<Emit("$0[0]")>]
        abstract member errorCode: int with get, set

        [<Emit("$0[1]")>]
        abstract member errorDescription: string with get, set

        [<Emit("$0[2]")>]
        abstract member validatedURL: string with get, set

        [<Emit("$0[3]")>]
        abstract member isMainFrame: bool with get, set

    /// <summary>
    /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnPageTitleUpdated =
        [<Emit("$0[0]")>]
        abstract member title: string with get, set

        [<Emit("$0[1]")>]
        abstract member explicitSet: bool with get, set

    /// <summary>
    /// Fired when the guest window logs a console message.<br/><br/>The following example code forwards all log messages to the embedder's console
    /// without regard for log level or other properties.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnConsoleMessage =
        /// <summary>
        /// The log level, from 0 to 3. In order it matches <c>verbose</c>, <c>info</c>, <c>warning</c> and <c>error</c>.
        /// </summary>
        [<Emit("$0[0]")>]
        abstract member level: int with get, set

        /// <summary>
        /// The actual console message
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member message: string with get, set

        /// <summary>
        /// The line number of the source that triggered this console message
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member line: int with get, set

        [<Emit("$0[3]")>]
        abstract member sourceId: string with get, set

    /// <summary>
    /// Emitted when a user or the page wants to start navigation anywhere in the <c>&lt;webview&gt;</c> or any frames embedded within.
    /// It can happen when the <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will
    /// not emit when the navigation is started programmatically with APIs like <c>&lt;webview&gt;.loadURL</c> and <c>&lt;webview&gt;.back</c>.<br/><br/>It is also not emitted during in-page
    /// navigation, such as clicking anchor links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> does **NOT** have
    /// any effect.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWillFrameNavigate =
        [<Emit("$0[0]")>]
        abstract member url: string with get, set

        [<Emit("$0[1]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[2]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[3]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted when any frame (including main) starts navigating. <c>isInPlace</c> will be <c>true</c> for in-page navigations.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidStartNavigation =
        [<Emit("$0[0]")>]
        abstract member url: string with get, set

        [<Emit("$0[1]")>]
        abstract member isInPlace: bool with get, set

        [<Emit("$0[2]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[3]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[4]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted after a server side redirect occurs during navigation. For example a 302 redirect.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidRedirectNavigation =
        [<Emit("$0[0]")>]
        abstract member url: string with get, set

        [<Emit("$0[1]")>]
        abstract member isInPlace: bool with get, set

        [<Emit("$0[2]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[3]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[4]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
    /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidFrameNavigate =
        [<Emit("$0[0]")>]
        abstract member url: string with get, set

        /// <summary>
        /// -1 for non HTTP navigations
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member httpResponseCode: int with get, set

        /// <summary>
        /// empty for non HTTP navigations,
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member httpStatusText: string with get, set

        [<Emit("$0[3]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[4]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[5]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted when an in-page navigation happened.<br/><br/>When in-page navigation happens, the page URL changes but does not cause navigation outside of
    /// the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c> event is triggered.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidNavigateInPage =
        [<Emit("$0[0]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set

    /// <summary>
    /// Fired when the guest page has sent an asynchronous message to embedder page.<br/><br/>With <c>sendToHost</c> method and <c>ipc-message</c> event you can
    /// communicate between guest page and embedder page:
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnIpcMessage =
        /// <summary>
        /// pair of <c>[processId, frameId]</c>.
        /// </summary>
        [<Emit("$0[0]")>]
        abstract member frameId: float * float with get, set

        [<Emit("$0[1]")>]
        abstract member channel: string with get, set

        [<Emit("$0[2]")>]
        abstract member args: obj[] with get, set

    /// <summary>
    /// Emitted when 'Search' is selected for text in its context menu.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDevtoolsSearchQuery =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// text to query for.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member query: string with get, set

    /// <summary>
    /// Emitted when the child process needs to terminate due to non continuable error from V8.<br/><br/>No matter if you listen to
    /// the <c>error</c> event, the <c>exit</c> event will be emitted after the child process terminates.
    /// </summary>
    [<Experimental("Indicated to be Experimental by Electron");
      EditorBrowsable(EditorBrowsableState.Never);
      AllowNullLiteral;
      Interface>]
    type IOnError =
        /// <summary>
        /// Type of error. One of the following values:
        /// </summary>
        [<Emit("$0[0]")>]
        abstract member ``type``: Enums.UtilityProcess.Error.Type with get, set

        /// <summary>
        /// Source location from where the error originated.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member location: string with get, set

        /// <summary>
        /// <c>Node.js diagnostic report</c>.
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member report: string with get, set

    /// <summary>
    /// Emitted when an authenticating proxy is asking for user credentials.<br/><br/>The <c>callback</c> function is expected to be called back with user
    /// credentials:<br/><br/>* <c>username</c> string<br/>* <c>password</c> string<br/><br/>Providing empty credentials will cancel the request and report an authentication error on the response object:
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnLogin =
        [<Emit("$0[0]")>]
        abstract member authInfo: ClientRequest.Login.AuthInfo with get, set

        [<Emit("$0[1]")>]
        abstract member callback: ClientRequest.Login.Callback with get, set

    /// <summary>
    /// Emitted when the server returns a redirect response (e.g. 301 Moved Permanently). Calling <c>request.followRedirect</c> will continue with the redirection.
    /// If this event is handled, <c>request.followRedirect</c> must be called **synchronously**, otherwise the request will be cancelled.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnRedirect =
        [<Emit("$0[0]")>]
        abstract member statusCode: int with get, set

        [<Emit("$0[1]")>]
        abstract member method: string with get, set

        [<Emit("$0[2]")>]
        abstract member redirectUrl: string with get, set

        [<Emit("$0[3]")>]
        abstract member responseHeaders: Record<string, string[]> with get, set

    /// <summary>
    /// This event is like <c>did-finish-load</c> but emitted when the load failed. The full list of error codes and their meaning
    /// is available here.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidFailLoad =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member errorCode: int with get, set

        [<Emit("$0[2]")>]
        abstract member errorDescription: string with get, set

        [<Emit("$0[3]")>]
        abstract member validatedURL: string with get, set

        [<Emit("$0[4]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[5]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[6]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// This event is like <c>did-fail-load</c> but emitted when the load was cancelled (e.g. <c>window.stop()</c> was invoked).
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidFailProvisionalLoad =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member errorCode: int with get, set

        [<Emit("$0[2]")>]
        abstract member errorDescription: string with get, set

        [<Emit("$0[3]")>]
        abstract member validatedURL: string with get, set

        [<Emit("$0[4]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[5]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[6]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted when a frame has done navigation.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidFrameFinishLoad =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[2]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[3]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Fired when page title is set during navigation. <c>explicitSet</c> is false when title is synthesized from file url.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnPageTitleUpdated =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member title: string with get, set

        [<Emit("$0[2]")>]
        abstract member explicitSet: bool with get, set

    /// <summary>
    /// Emitted when page receives favicon urls.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnPageFaviconUpdated =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Array of URLs.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member favicons: string[] with get, set

    /// <summary>
    /// Emitted when the page calls <c>window.moveTo</c>, <c>window.resizeTo</c> or related APIs.<br/><br/>By default, this will move the window. To prevent that behavior,
    /// call <c>event.preventDefault()</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnContentBoundsUpdated =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// requested new content bounds
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member bounds: Rectangle with get, set

    /// <summary>
    /// Emitted _after_ successful creation of a window via <c>window.open</c> in the renderer. Not emitted if the creation of the window
    /// is canceled from <c>webContents.setWindowOpenHandler</c>.<br/><br/>See <c>window.open()</c> for more details and how to use this in conjunction with <c>webContents.setWindowOpenHandler</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidCreateWindow =
        [<Emit("$0[0]")>]
        abstract member window: BrowserWindow with get, set

        [<Emit("$0[1]")>]
        abstract member details: WebContents.DidCreateWindow.Details with get, set

    /// <summary>
    /// Emitted when a user or the page wants to start navigation on the main frame. It can happen when the
    /// <c>window.location</c> object is changed or a user clicks a link in the page.<br/><br/>This event will not emit when the navigation
    /// is started programmatically with APIs like <c>webContents.loadURL</c> and <c>webContents.back</c>.<br/><br/>It is also not emitted for in-page navigations, such as clicking anchor
    /// links or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWillNavigate =
        [<Emit("$0[0]")>]
        abstract member details: Details with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set

        [<Emit("$0[2]")>]
        abstract member isInPlace: bool with get, set

        [<Emit("$0[3]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[4]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[5]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted when any frame (including main) starts navigating.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidStartNavigation =
        [<Emit("$0[0]")>]
        abstract member details: Details with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set

        [<Emit("$0[2]")>]
        abstract member isInPlace: bool with get, set

        [<Emit("$0[3]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[4]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[5]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted when a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event will be emitted after
    /// <c>did-start-navigation</c> and always before the <c>did-redirect-navigation</c> event for the same navigation.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the navigation (not just the redirect).
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWillRedirect =
        [<Emit("$0[0]")>]
        abstract member details: Details with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set

        [<Emit("$0[2]")>]
        abstract member isInPlace: bool with get, set

        [<Emit("$0[3]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[4]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[5]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted after a server side redirect occurs during navigation.  For example a 302 redirect.<br/><br/>This event cannot be prevented, if
    /// you want to prevent redirects you should checkout out the <c>will-redirect</c> event above.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidRedirectNavigation =
        [<Emit("$0[0]")>]
        abstract member details: Details with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set

        [<Emit("$0[2]")>]
        abstract member isInPlace: bool with get, set

        [<Emit("$0[3]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[4]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[5]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted when a main frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links
    /// or updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidNavigate =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set

        /// <summary>
        /// -1 for non HTTP navigations
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member httpResponseCode: int with get, set

        /// <summary>
        /// empty for non HTTP navigations
        /// </summary>
        [<Emit("$0[3]")>]
        abstract member httpStatusText: string with get, set

    /// <summary>
    /// Emitted when any frame navigation is done.<br/><br/>This event is not emitted for in-page navigations, such as clicking anchor links or
    /// updating the <c>window.location.hash</c>. Use <c>did-navigate-in-page</c> event for this purpose.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidFrameNavigate =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set

        /// <summary>
        /// -1 for non HTTP navigations
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member httpResponseCode: int with get, set

        /// <summary>
        /// empty for non HTTP navigations,
        /// </summary>
        [<Emit("$0[3]")>]
        abstract member httpStatusText: string with get, set

        [<Emit("$0[4]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[5]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[6]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted when an in-page navigation happened in any frame.<br/><br/>When in-page navigation happens, the page URL changes but does not cause
    /// navigation outside of the page. Examples of this occurring are when anchor links are clicked or when the DOM <c>hashchange</c>
    /// event is triggered.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidNavigateInPage =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set

        [<Emit("$0[2]")>]
        abstract member isMainFrame: bool with get, set

        [<Emit("$0[3]")>]
        abstract member frameProcessId: int with get, set

        [<Emit("$0[4]")>]
        abstract member frameRoutingId: int with get, set

    /// <summary>
    /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnRenderProcessGone =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: RenderProcessGoneDetails with get, set

    /// <summary>
    /// Emitted when an input event is sent to the WebContents. See InputEvent for details.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnInputEvent =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member inputEvent: InputEvent with get, set

    /// <summary>
    /// Emitted before dispatching the <c>keydown</c> and <c>keyup</c> events in the page. Calling <c>event.preventDefault</c> will prevent the page <c>keydown</c>/<c>keyup</c> events and
    /// the menu shortcuts.<br/><br/>To only prevent the menu shortcuts, use <c>setIgnoreMenuShortcuts</c>:
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnBeforeInputEvent =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Input properties.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member input: WebContents.BeforeInputEvent.Input with get, set

    /// <summary>
    /// Emitted before dispatching mouse events in the page.<br/><br/>Calling <c>event.preventDefault</c> will prevent the page mouse events.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnBeforeMouseEvent =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member mouse: MouseInputEvent with get, set

    /// <summary>
    /// Emitted when the user is requesting to change the zoom level using the mouse wheel.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnZoomChanged =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Can be <c>in</c> or <c>out</c>.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member zoomDirection: Enums.WebContents.ZoomChanged.ZoomDirection with get, set

    /// <summary>
    /// Emitted when a link is clicked in DevTools or 'Open in new tab' is selected for a link in its
    /// context menu.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDevtoolsOpenUrl =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// URL of the link that was clicked or selected.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member url: string with get, set

    /// <summary>
    /// Emitted when 'Search' is selected for text in its context menu.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDevtoolsSearchQuery =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// text to query for.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member query: string with get, set

    /// <summary>
    /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>.<br/><br/>The usage is the same with the <c>certificate-error</c> event of <c>app</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnCertificateError =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set

        /// <summary>
        /// The error code.
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member error: string with get, set

        [<Emit("$0[3]")>]
        abstract member certificate: Certificate with get, set

        [<Emit("$0[4]")>]
        abstract member callback: bool -> unit with get, set

        [<Emit("$0[5]")>]
        abstract member isMainFrame: bool with get, set

    /// <summary>
    /// Emitted when a client certificate is requested.<br/><br/>The usage is the same with the <c>select-client-certificate</c> event of <c>app</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSelectClientCertificate =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member url: URL with get, set

        [<Emit("$0[2]")>]
        abstract member certificateList: Certificate[] with get, set

        [<Emit("$0[3]")>]
        abstract member callback: Certificate -> unit with get, set

    /// <summary>
    /// Emitted when <c>webContents</c> wants to do basic auth.<br/><br/>The usage is the same with the <c>login</c> event of <c>app</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnLogin =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member authenticationResponseDetails: WebContents.Login.AuthenticationResponseDetails with get, set

        [<Emit("$0[2]")>]
        abstract member authInfo: WebContents.Login.AuthInfo with get, set

        [<Emit("$0[3]")>]
        abstract member callback: WebContents.Login.Callback with get, set

    /// <summary>
    /// Emitted when a result is available for <c>webContents.findInPage</c> request.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnFoundInPage =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member result: WebContents.FoundInPage.Result with get, set

    /// <summary>
    /// Emitted when a page's theme color changes. This is usually due to encountering a meta tag:
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidChangeThemeColor =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Theme color is in format of '#rrggbb'. It is <c>null</c> when no theme color is set.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member color: Option<string> with get, set

    /// <summary>
    /// Emitted when mouse moves over a link or the keyboard moves the focus to a link.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnUpdateTargetUrl =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set

    /// <summary>
    /// Emitted when the cursor's type changes. The <c>type</c> parameter can be <c>pointer</c>, <c>crosshair</c>, <c>hand</c>, <c>text</c>, <c>wait</c>, <c>help</c>, <c>e-resize</c>, <c>n-resize</c>, <c>ne-resize</c>,
    /// <c>nw-resize</c>, <c>s-resize</c>, <c>se-resize</c>, <c>sw-resize</c>, <c>w-resize</c>, <c>ns-resize</c>, <c>ew-resize</c>, <c>nesw-resize</c>, <c>nwse-resize</c>, <c>col-resize</c>, <c>row-resize</c>, <c>m-panning</c>, <c>m-panning-vertical</c>, <c>m-panning-horizontal</c>, <c>e-panning</c>, <c>n-panning</c>, <c>ne-panning</c>, <c>nw-panning</c>, <c>s-panning</c>, <c>se-panning</c>,
    /// <c>sw-panning</c>, <c>w-panning</c>, <c>move</c>, <c>vertical-text</c>, <c>cell</c>, <c>context-menu</c>, <c>alias</c>, <c>progress</c>, <c>nodrop</c>, <c>copy</c>, <c>none</c>, <c>not-allowed</c>, <c>zoom-in</c>, <c>zoom-out</c>, <c>grab</c>, <c>grabbing</c>, <c>custom</c>, <c>null</c>, <c>drag-drop-none</c>, <c>drag-drop-move</c>,
    /// <c>drag-drop-copy</c>, <c>drag-drop-link</c>, <c>ns-no-resize</c>, <c>ew-no-resize</c>, <c>nesw-no-resize</c>, <c>nwse-no-resize</c>, or <c>default</c>.<br/><br/>If the <c>type</c> parameter is <c>custom</c>, the <c>image</c> parameter will hold the custom
    /// cursor image in a <c>NativeImage</c>, and <c>scale</c>, <c>size</c> and <c>hotspot</c> will hold additional information about the custom cursor.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnCursorChanged =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member ``type``: string with get, set

        [<Emit("$0[2]")>]
        abstract member image: NativeImage with get, set

        /// <summary>
        /// scaling factor for the custom cursor.
        /// </summary>
        [<Emit("$0[3]")>]
        abstract member scale: float with get, set

        /// <summary>
        /// the size of the <c>image</c>.
        /// </summary>
        [<Emit("$0[4]")>]
        abstract member size: Size with get, set

        /// <summary>
        /// coordinates of the custom cursor's hotspot.
        /// </summary>
        [<Emit("$0[5]")>]
        abstract member hotspot: Point with get, set

    /// <summary>
    /// Emitted when there is a new context menu that needs to be handled.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnContextMenu =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member params: WebContents.ContextMenu.Params with get, set

    /// <summary>
    /// Emitted when a bluetooth device needs to be selected when a call to <c>navigator.bluetooth.requestDevice</c> is made. <c>callback</c> should be called
    /// with the <c>deviceId</c> of the device to be selected.  Passing an empty string to <c>callback</c> will cancel the request.<br/><br/>If
    /// no event listener is added for this event, all bluetooth requests will be cancelled.<br/><br/>If <c>event.preventDefault</c> is not called when handling
    /// this event, the first available device will be automatically selected.<br/><br/>Due to the nature of bluetooth, scanning for devices when <c>navigator.bluetooth.requestDevice</c>
    /// is called may take time and will cause <c>select-bluetooth-device</c> to fire multiple times until <c>callback</c> is called with either a
    /// device id or an empty string to cancel the request.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSelectBluetoothDevice =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member devices: BluetoothDevice[] with get, set

        [<Emit("$0[2]")>]
        abstract member callback: string -> unit with get, set

    /// <summary>
    /// Emitted when a new frame is generated. Only the dirty area is passed in the buffer.<br/><br/>When using shared texture (set
    /// <c>webPreferences.offscreen.useSharedTexture</c> to <c>true</c>) feature, you can pass the texture handle to external rendering pipeline without the overhead of copying data
    /// between CPU and GPU memory, with Chromium's hardware acceleration support. This feature is helpful for high-performance rendering scenarios.<br/><br/>Only a limited
    /// number of textures can exist at the same time, so it's important that you call <c>texture.release()</c> as soon as you're
    /// done with the texture. By managing the texture lifecycle by yourself, you can safely pass the <c>texture.textureInfo</c> to other processes
    /// through IPC.<br/><br/>More details can be found in the offscreen rendering tutorial. To learn about how to handle the texture in
    /// native code, refer to offscreen rendering's code documentation..
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnPaint =
        [<Emit("$0[0]")>]
        abstract member details: Details with get, set

        [<Emit("$0[1]")>]
        abstract member dirtyRect: Rectangle with get, set

        /// <summary>
        /// The image data of the whole frame.
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member image: NativeImage with get, set

    /// <summary>
    /// Emitted when a <c>&lt;webview&gt;</c>'s web contents is being attached to this web contents. Calling <c>event.preventDefault()</c> will destroy the guest page.<br/><br/>This
    /// event can be used to configure <c>webPreferences</c> for the <c>webContents</c> of a <c>&lt;webview&gt;</c> before it's loaded, and provides the ability
    /// to set settings that can't be set via <c>&lt;webview&gt;</c> attributes.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWillAttachWebview =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The web preferences that will be used by the guest page. This object can be modified to adjust the preferences
        /// for the guest page.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member webPreferences: WebPreferences with get, set

        /// <summary>
        /// The other <c>&lt;webview&gt;</c> parameters such as the <c>src</c> URL. This object can be modified to adjust the parameters of the
        /// guest page.
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member params: Record<string, string> with get, set

    /// <summary>
    /// Emitted when a <c>&lt;webview&gt;</c> has been attached to this web contents.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDidAttachWebview =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The guest web contents that is used by the <c>&lt;webview&gt;</c>.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member webContents: WebContents with get, set

    /// <summary>
    /// Emitted when the associated window logs a console message.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnConsoleMessage =
        [<Emit("$0[0]")>]
        abstract member details: Details with get, set

        /// <summary>
        /// The log level, from 0 to 3. In order it matches <c>verbose</c>, <c>info</c>, <c>warning</c> and <c>error</c>.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member level: int with get, set

        /// <summary>
        /// The actual console message
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member message: string with get, set

        /// <summary>
        /// The line number of the source that triggered this console message
        /// </summary>
        [<Emit("$0[3]")>]
        abstract member line: int with get, set

        [<Emit("$0[4]")>]
        abstract member sourceId: string with get, set

    /// <summary>
    /// Emitted when the preload script <c>preloadPath</c> throws an unhandled exception <c>error</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnPreloadError =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member preloadPath: string with get, set

        [<Emit("$0[2]")>]
        abstract member error: Error with get, set

    /// <summary>
    /// Emitted when the renderer process sends an asynchronous message via <c>ipcRenderer.send()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
    /// to IPC messages specifically from this WebContents.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnIpcMessage =
        [<Emit("$0[0]")>]
        abstract member event: IpcMainEvent with get, set

        [<Emit("$0[1]")>]
        abstract member channel: string with get, set

        [<Emit("$0.slice(2)")>]
        abstract member args: obj[] with get, set

    /// <summary>
    /// Emitted when the renderer process sends a synchronous message via <c>ipcRenderer.sendSync()</c>.<br/><br/>See also <c>webContents.ipc</c>, which provides an <c>IpcMain</c>-like interface for responding
    /// to IPC messages specifically from this WebContents.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnIpcMessageSync =
        [<Emit("$0[0]")>]
        abstract member event: IpcMainEvent with get, set

        [<Emit("$0[1]")>]
        abstract member channel: string with get, set

        [<Emit("$0.slice(2)")>]
        abstract member args: obj[] with get, set

    /// <summary>
    /// Emitted when the <c>WebContents</c> preferred size has changed.<br/><br/>This event will only be emitted when <c>enablePreferredSizeMode</c> is set to <c>true</c> in
    /// <c>webPreferences</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnPreferredSizeChanged =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The minimum size needed to contain the layout of the document—without requiring scrolling.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member preferredSize: Size with get, set

    /// <summary>
    /// Emitted when the mainFrame, an <c>&lt;iframe&gt;</c>, or a nested <c>&lt;iframe&gt;</c> is loaded within the page.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnFrameCreated =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: WebContents.FrameCreated.Details with get, set

    /// <summary>
    /// Emitted when the tray icon is clicked.<br/><br/>Note that on Linux this event is emitted when the tray icon receives an
    /// activation, which might not necessarily be left mouse click.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnClick =
        [<Emit("$0[0]")>]
        abstract member event: KeyboardEvent with get, set

        /// <summary>
        /// The bounds of tray icon.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member bounds: Rectangle with get, set

        /// <summary>
        /// The position of the event.
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member position: Point with get, set
    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the tray icon is right clicked.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnRightClick =
        [<Emit("$0[0]")>]
        abstract member event: KeyboardEvent with get, set

        /// <summary>
        /// The bounds of tray icon.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member bounds: Rectangle with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the tray icon is double clicked.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDoubleClick =
        [<Emit("$0[0]")>]
        abstract member event: KeyboardEvent with get, set

        /// <summary>
        /// The bounds of tray icon.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member bounds: Rectangle with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
    /// Emitted when the tray icon is middle clicked.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnMiddleClick =
        [<Emit("$0[0]")>]
        abstract member event: KeyboardEvent with get, set

        /// <summary>
        /// The bounds of tray icon.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member bounds: Rectangle with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when dragged files are dropped in the tray icon.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDropFiles =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The paths of the dropped files.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member files: string[] with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when dragged text is dropped in the tray icon.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDropText =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// the dropped text string.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member text: string with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the mouse is released from clicking the tray icon.<br/><br/>&gt; [!NOTE] This will not be emitted if you have
    /// set a context menu for your Tray using <c>tray.setContextMenu</c>, as a result of macOS-level constraints.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnMouseUp =
        [<Emit("$0[0]")>]
        abstract member event: KeyboardEvent with get, set

        /// <summary>
        /// The position of the event.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member position: Point with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the mouse clicks the tray icon.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnMouseDown =
        [<Emit("$0[0]")>]
        abstract member event: KeyboardEvent with get, set

        /// <summary>
        /// The position of the event.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member position: Point with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the mouse enters the tray icon.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnMouseEnter =
        [<Emit("$0[0]")>]
        abstract member event: KeyboardEvent with get, set

        /// <summary>
        /// The position of the event.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member position: Point with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the mouse exits the tray icon.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnMouseLeave =
        [<Emit("$0[0]")>]
        abstract member event: KeyboardEvent with get, set

        /// <summary>
        /// The position of the event.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member position: Point with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the mouse moves in the tray icon.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnMouseMove =
        [<Emit("$0[0]")>]
        abstract member event: KeyboardEvent with get, set

        /// <summary>
        /// The position of the event.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member position: Point with get, set
    #endif


    /// <summary>
    /// Emitted when Electron is about to download <c>item</c> in <c>webContents</c>.<br/><br/>Calling <c>event.preventDefault()</c> will cancel the download and <c>item</c> will not be
    /// available from next tick of the process.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWillDownload =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member item: DownloadItem with get, set

        [<Emit("$0[2]")>]
        abstract member webContents: WebContents with get, set

    /// <summary>
    /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
    /// includes:<br/><br/>* Extensions being loaded from <c>Session.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
    /// it (<c>chrome.runtime.reload()</c>).
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnExtensionLoaded =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member extension: Extension with get, set

    /// <summary>
    /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnExtensionUnloaded =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member extension: Extension with get, set

    /// <summary>
    /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
    /// background page.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnExtensionReady =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member extension: Extension with get, set

    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnFileSystemAccessRestricted =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: Session.FileSystemAccessRestricted.Details with get, set

        [<Emit("$0[2]")>]
        abstract member callback: Enums.Session.FileSystemAccessRestricted.Callback.Action -> unit with get, set

    /// <summary>
    /// Emitted when a render process requests preconnection to a URL, generally due to a resource hint.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnPreconnect =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The URL being requested for preconnection by the renderer.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member preconnectUrl: string with get, set

        /// <summary>
        /// True if the renderer is requesting that the connection include credentials (see the spec for more details.)
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member allowCredentials: bool with get, set

    /// <summary>
    /// Emitted when a hunspell dictionary file has been successfully initialized. This occurs after the file has been downloaded.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSpellcheckDictionaryInitialized =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The language code of the dictionary file
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member languageCode: string with get, set

    /// <summary>
    /// Emitted when a hunspell dictionary file starts downloading
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSpellcheckDictionaryDownloadBegin =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The language code of the dictionary file
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member languageCode: string with get, set

    /// <summary>
    /// Emitted when a hunspell dictionary file has been successfully downloaded
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSpellcheckDictionaryDownloadSuccess =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The language code of the dictionary file
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member languageCode: string with get, set

    /// <summary>
    /// Emitted when a hunspell dictionary file download fails.  For details on the failure you should collect a netlog and
    /// inspect the download request.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSpellcheckDictionaryDownloadFailure =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The language code of the dictionary file
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member languageCode: string with get, set

    /// <summary>
    /// Emitted when a HID device needs to be selected when a call to <c>navigator.hid.requestDevice</c> is made. <c>callback</c> should be called
    /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.hid</c> can
    /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSelectHidDevice =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: Session.SelectHidDevice.Details with get, set

        [<Emit("$0[2]")>]
        abstract member callback: Option<Option<string>> -> unit with get, set

    /// <summary>
    /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a new device becomes available before the callback from
    /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
    /// device so that the UI can be updated with the newly added device.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnHidDeviceAdded =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: Session.HidDeviceAdded.Details with get, set

    /// <summary>
    /// Emitted after <c>navigator.hid.requestDevice</c> has been called and <c>select-hid-device</c> has fired if a device has been removed before the callback from
    /// <c>select-hid-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
    /// device so that the UI can be updated to remove the specified device.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnHidDeviceRemoved =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: Session.HidDeviceRemoved.Details with get, set

    /// <summary>
    /// Emitted after <c>HIDDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
    /// <c>setDevicePermissionHandler</c> is used.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnHidDeviceRevoked =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: Session.HidDeviceRevoked.Details with get, set

    /// <summary>
    /// Emitted when a serial port needs to be selected when a call to <c>navigator.serial.requestPort</c> is made. <c>callback</c> should be called
    /// with <c>portId</c> to be selected, passing an empty string to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.serial</c>
    /// can be managed by using ses.setPermissionCheckHandler(handler) with the <c>serial</c> permission.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSelectSerialPort =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member portList: SerialPort[] with get, set

        [<Emit("$0[2]")>]
        abstract member webContents: WebContents with get, set

        [<Emit("$0[3]")>]
        abstract member callback: string -> unit with get, set

    /// <summary>
    /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a new serial port becomes available before the callback
    /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
    /// a port so that the UI can be updated with the newly added port.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSerialPortAdded =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member port: SerialPort with get, set

        [<Emit("$0[2]")>]
        abstract member webContents: WebContents with get, set

    /// <summary>
    /// Emitted after <c>navigator.serial.requestPort</c> has been called and <c>select-serial-port</c> has fired if a serial port has been removed before the callback
    /// from <c>select-serial-port</c> is called.  This event is intended for use when using a UI to ask users to pick
    /// a port so that the UI can be updated to remove the specified port.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSerialPortRemoved =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member port: SerialPort with get, set

        [<Emit("$0[2]")>]
        abstract member webContents: WebContents with get, set

    /// <summary>
    /// Emitted after <c>SerialPort.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
    /// <c>setDevicePermissionHandler</c> is used.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSerialPortRevoked =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: Session.SerialPortRevoked.Details with get, set

    /// <summary>
    /// Emitted when a USB device needs to be selected when a call to <c>navigator.usb.requestDevice</c> is made. <c>callback</c> should be called
    /// with <c>deviceId</c> to be selected; passing no arguments to <c>callback</c> will cancel the request.  Additionally, permissioning on <c>navigator.usb</c> can
    /// be further managed by using <c>ses.setPermissionCheckHandler(handler)</c> and <c>ses.setDevicePermissionHandler(handler)</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSelectUsbDevice =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: Session.SelectUsbDevice.Details with get, set

        [<Emit("$0[2]")>]
        abstract member callback: Option<string> -> unit with get, set

    /// <summary>
    /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a new device becomes available before the callback from
    /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
    /// device so that the UI can be updated with the newly added device.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnUsbDeviceAdded =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member device: USBDevice with get, set

        [<Emit("$0[2]")>]
        abstract member webContents: WebContents with get, set

    /// <summary>
    /// Emitted after <c>navigator.usb.requestDevice</c> has been called and <c>select-usb-device</c> has fired if a device has been removed before the callback from
    /// <c>select-usb-device</c> is called.  This event is intended for use when using a UI to ask users to pick a
    /// device so that the UI can be updated to remove the specified device.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnUsbDeviceRemoved =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member device: USBDevice with get, set

        [<Emit("$0[2]")>]
        abstract member webContents: WebContents with get, set

    /// <summary>
    /// Emitted after <c>USBDevice.forget()</c> has been called.  This event can be used to help maintain persistent storage of permissions when
    /// <c>setDevicePermissionHandler</c> is used.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnUsbDeviceRevoked =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: Session.UsbDeviceRevoked.Details with get, set

    /// <summary>
    /// Emitted when a service worker logs something to the console.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnConsoleMessage =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Information about the console message
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member messageDetails: ServiceWorkers.ConsoleMessage.MessageDetails with get, set

    /// <summary>
    /// Emitted when a service worker has been registered. Can occur after a call to <c>navigator.serviceWorker.register('/sw.js')</c> successfully resolves or when a
    /// Chrome extension is loaded.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnRegistrationCompleted =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Information about the registered service worker
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member details: ServiceWorkers.RegistrationCompleted.Details with get, set
    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the user clicks the "Reply" button on a notification with <c>hasReply: true</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnReply =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The string the user entered into the inline reply field.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member reply: string with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnAction =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The index of the action that was activated.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member index: float with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
    /// Emitted when an error is encountered while creating and showing the native notification.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnFailed =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The error encountered during execution of the <c>show()</c> method.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member error: string with get, set
    #endif


    /// <summary>
    /// Emitted after an extension is loaded. This occurs whenever an extension is added to the "enabled" set of extensions. This
    /// includes:<br/><br/>* Extensions being loaded from <c>Extensions.loadExtension</c>.<br/>* Extensions being reloaded:<br/>  * from a crash.<br/>  * if the extension requested
    /// it (<c>chrome.runtime.reload()</c>).
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnExtensionLoaded =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member extension: Extension with get, set

    /// <summary>
    /// Emitted after an extension is unloaded. This occurs when <c>Session.removeExtension</c> is called.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnExtensionUnloaded =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member extension: Extension with get, set

    /// <summary>
    /// Emitted after an extension is loaded and all necessary browser state is initialized to support the start of the extension's
    /// background page.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnExtensionReady =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member extension: Extension with get, set

    /// <summary>
    /// Emitted when the download has been updated and is not done.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>progressing</c> - The
    /// download is in-progress.<br/>* <c>interrupted</c> - The download has interrupted and can be resumed.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnUpdated =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Can be <c>progressing</c> or <c>interrupted</c>.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member state: Enums.DownloadItem.Updated.State with get, set

    /// <summary>
    /// Emitted when the download is in a terminal state. This includes a completed download, a cancelled download (via <c>downloadItem.cancel()</c>), and
    /// interrupted download that can't be resumed.<br/><br/>The <c>state</c> can be one of following:<br/><br/>* <c>completed</c> - The download completed successfully.<br/>* <c>cancelled</c> -
    /// The download has been cancelled.<br/>* <c>interrupted</c> - The download has interrupted and can not resume.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDone =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Can be <c>completed</c>, <c>cancelled</c> or <c>interrupted</c>.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member state: Enums.DownloadItem.Done.State with get, set

    /// <summary>
    /// Emitted when the debugging session is terminated. This happens either when <c>webContents</c> is closed or devtools is invoked for the
    /// attached <c>webContents</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDetach =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Reason for detaching debugger.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member reason: string with get, set

    /// <summary>
    /// Emitted whenever the debugging target issues an instrumentation event.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnMessage =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Method name.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member method: string with get, set

        /// <summary>
        /// Event parameters defined by the 'parameters' attribute in the remote debugging protocol.
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member params: obj with get, set

        /// <summary>
        /// Unique identifier of attached debugging session, will match the value sent from <c>debugger.sendCommand</c>.
        /// </summary>
        [<Emit("$0[3]")>]
        abstract member sessionId: string with get, set

    /// <summary>
    /// Emitted when a cookie is changed because it was added, edited, removed, or expired.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnChanged =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The cookie that was changed.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member cookie: Cookie with get, set

        /// <summary>
        /// The cause of the change with one of the following values:
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member cause: Enums.Cookies.Changed.Cause with get, set

        /// <summary>
        /// <c>true</c> if the cookie was removed, <c>false</c> otherwise.
        /// </summary>
        [<Emit("$0[3]")>]
        abstract member removed: bool with get, set

    /// <summary>
    /// Emitted when the document changed its title, calling <c>event.preventDefault()</c> will prevent the native window's title from changing. <c>explicitSet</c> is false
    /// when title is synthesized from file URL.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnPageTitleUpdated =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member title: string with get, set

        [<Emit("$0[2]")>]
        abstract member explicitSet: bool with get, set
    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
    /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
    /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
    /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
    /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWillResize =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Size the window is being resized to.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member newBounds: Rectangle with get, set

        [<Emit("$0[2]")>]
        abstract member details: BrowserWindow.WillResize.Details with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
    /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWillMove =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Location the window is being moved to.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member newBounds: Rectangle with get, set
    #endif


    /// <summary>
    /// Emitted when the window is set or unset to show always on top of other windows.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnAlwaysOnTopChanged =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member isAlwaysOnTop: bool with get, set
    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
    /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
    /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
    /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnAppCommand =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member command: string with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
    /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
    /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
    /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSwipe =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member direction: string with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
    /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
    /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnRotateGesture =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member rotation: float with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
    /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
    /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
    /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
    /// <c>screen.screenToDipPoint(point)</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSystemContextMenu =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The screen coordinates where the context menu was triggered.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member point: Point with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted before the window is resized. Calling <c>event.preventDefault()</c> will prevent the window from being resized.<br/><br/>Note that this is only emitted
    /// when the window is being resized manually. Resizing the window with <c>setBounds</c>/<c>setSize</c> will not emit this event.<br/><br/>The possible values and
    /// behaviors of the <c>edge</c> option are platform dependent. Possible values are:<br/><br/>* On Windows, possible values are <c>bottom</c>, <c>top</c>, <c>left</c>, <c>right</c>,
    /// <c>top-left</c>, <c>top-right</c>, <c>bottom-left</c>, <c>bottom-right</c>.<br/>* On macOS, possible values are <c>bottom</c> and <c>right</c>.<br/>  * The value <c>bottom</c> is used to
    /// denote vertical resizing.<br/>  * The value <c>right</c> is used to denote horizontal resizing.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWillResize =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Size the window is being resized to.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member newBounds: Rectangle with get, set

        [<Emit("$0[2]")>]
        abstract member details: BaseWindow.WillResize.Details with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted before the window is moved. On Windows, calling <c>event.preventDefault()</c> will prevent the window from being moved.<br/><br/>Note that this is
    /// only emitted when the window is being moved manually. Moving the window with <c>setPosition</c>/<c>setBounds</c>/<c>center</c> will not emit this event.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWillMove =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Location the window is being moved to.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member newBounds: Rectangle with get, set
    #endif


    /// <summary>
    /// Emitted when the window is set or unset to show always on top of other windows.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnAlwaysOnTopChanged =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member isAlwaysOnTop: bool with get, set
    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
    /// Emitted when an App Command is invoked. These are typically related to keyboard media keys or browser commands, as well
    /// as the "Back" button built into some mice on Windows.<br/><br/>Commands are lowercased, underscores are replaced with hyphens, and the <c>APPCOMMAND_</c>
    /// prefix is stripped off. e.g. <c>APPCOMMAND_BROWSER_BACKWARD</c> is emitted as <c>browser-backward</c>.<br/><br/>The following app commands are explicitly supported on Linux:<br/><br/>* <c>browser-backward</c><br/>* <c>browser-forward</c>
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnAppCommand =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member command: string with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted on 3-finger swipe. Possible directions are <c>up</c>, <c>right</c>, <c>down</c>, <c>left</c>.<br/><br/>The method underlying this event is built to handle older
    /// macOS-style trackpad swiping, where the content on the screen doesn't move with the swipe. Most macOS trackpads are not configured
    /// to allow this kind of swiping anymore, so in order for it to emit properly the 'Swipe between pages' preference
    /// in <c>System Preferences &gt; Trackpad &gt; More Gestures</c> must be set to 'Swipe with two or three fingers'.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSwipe =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member direction: string with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted on trackpad rotation gesture. Continually emitted until rotation gesture is ended. The <c>rotation</c> value on each emission is the
    /// angle in degrees rotated since the last emission. The last emitted event upon a rotation gesture will always be of
    /// value <c>0</c>. Counter-clockwise rotation values are positive, while clockwise ones are negative.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnRotateGesture =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member rotation: float with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_LIN || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ✔ | MAS ❌</para>
    /// Emitted when the system context menu is triggered on the window, this is normally only triggered when the user right
    /// clicks on the non-client area of your window.  This is the window titlebar or any area you have declared
    /// as <c>-webkit-app-region: drag</c> in a frameless window.<br/><br/>Calling <c>event.preventDefault()</c> will prevent the menu from being displayed.<br/><br/>To convert <c>point</c> to DIP, use
    /// <c>screen.screenToDipPoint(point)</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSystemContextMenu =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The screen coordinates where the context menu was triggered.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member point: Point with get, set
    #endif


[<AutoOpen; EditorBrowsable(EditorBrowsableState.Never)>]
module SystemPreferences =
    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ❌ | LIN ❌ | MAS ❌</para>
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnAccentColorChanged =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// The new RGBA color the user assigned to be their system accent color.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member newColor: string with get, set
    #endif


[<AutoOpen; EditorBrowsable(EditorBrowsableState.Never)>]
module Screen =
    /// <summary>
    /// Emitted when <c>newDisplay</c> has been added.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDisplayAdded =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member newDisplay: Display with get, set

    /// <summary>
    /// Emitted when <c>oldDisplay</c> has been removed.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDisplayRemoved =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member oldDisplay: Display with get, set

    /// <summary>
    /// Emitted when one or more metrics change in a <c>display</c>. The <c>changedMetrics</c> is an array of strings that describe the
    /// changes. Possible changes are <c>bounds</c>, <c>workArea</c>, <c>scaleFactor</c> and <c>rotation</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnDisplayMetricsChanged =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member display: Display with get, set

        [<Emit("$0[2]")>]
        abstract member changedMetrics: string[] with get, set

[<AutoOpen; EditorBrowsable(EditorBrowsableState.Never)>]
module PushNotifications =
    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the app receives a remote notification while running. See: https://developer.apple.com/documentation/appkit/nsapplicationdelegate/1428430-application?language=objc
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnReceivedApnsNotification =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member userInfo: Record<string, obj> with get, set
    #endif


[<AutoOpen; EditorBrowsable(EditorBrowsableState.Never)>]
module InAppPurchase =
    /// <summary>
    /// Emitted when one or more transactions have been updated.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnTransactionsUpdated =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// Array of <c>Transaction</c> objects.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member transactions: Transaction[] with get, set

[<AutoOpen; EditorBrowsable(EditorBrowsableState.Never)>]
module AutoUpdater =
    /// <summary>
    /// Emitted when an update has been downloaded.<br/><br/>On Windows only <c>releaseName</c> is available.<br/><br/>&gt; [!NOTE] It is not strictly necessary to handle
    /// this event. A successfully downloaded update will still be applied the next time the application starts.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnUpdateDownloaded =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member releaseNotes: string with get, set

        [<Emit("$0[2]")>]
        abstract member releaseName: string with get, set

        [<Emit("$0[3]")>]
        abstract member releaseDate: System.DateTime with get, set

        [<Emit("$0[4]")>]
        abstract member updateURL: string with get, set

[<AutoOpen; EditorBrowsable(EditorBrowsableState.Never)>]
module App =
    /// <summary>
    /// Emitted once, when Electron has finished initializing. On macOS, <c>launchInfo</c> holds the <c>userInfo</c> of the <c>NSUserNotification</c> or information from <c>UNNotificationResponse</c>
    /// that was used to open the application, if it was launched from Notification Center. You can also call <c>app.isReady()</c> to
    /// check if this event has already fired and <c>app.whenReady()</c> to get a Promise that is fulfilled when Electron is initialized.<br/><br/>&gt;
    /// [!NOTE] The <c>ready</c> event is only fired after the main process has finished running the first tick of the event
    /// loop. If an Electron API needs to be called before the <c>ready</c> event, ensure that it is called synchronously in
    /// the top-level context of the main process.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnReady =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member launchInfo: U2<Record<string, obj>, NotificationResponse> with get, set

    /// <summary>
    /// Emitted when the application is quitting.<br/><br/>&gt; [!NOTE] On Windows, this event will not be emitted if the app is closed
    /// due to a shutdown/restart of the system or a user logout.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnQuit =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member exitCode: int with get, set
    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the user wants to open a file with the application. The <c>open-file</c> event is usually emitted when the
    /// application is already open and the OS wants to reuse the application to open the file. <c>open-file</c> is also emitted
    /// when a file is dropped onto the dock and the application is not yet running. Make sure to listen for
    /// the <c>open-file</c> event very early in your application startup to handle this case (even before the <c>ready</c> event is emitted).<br/><br/>You
    /// should call <c>event.preventDefault()</c> if you want to handle this event.<br/><br/>On Windows, you have to parse <c>process.argv</c> (in the main process)
    /// to get the filepath.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnOpenFile =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member path: string with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the user wants to open a URL with the application. Your application's <c>Info.plist</c> file must define the URL
    /// scheme within the <c>CFBundleURLTypes</c> key, and set <c>NSPrincipalClass</c> to <c>AtomApplication</c>.<br/><br/>As with the <c>open-file</c> event, be sure to register a listener
    /// for the <c>open-url</c> event early in your application startup to detect if the application is being opened to handle a
    /// URL. If you register the listener in response to a <c>ready</c> event, you'll miss URLs that trigger the launch of
    /// your application.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnOpenUrl =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member url: string with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when the application is activated. Various actions can trigger this event, such as launching the application for the first
    /// time, attempting to re-launch the application when it's already running, or clicking on the application's dock or taskbar icon.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnActivate =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member hasVisibleWindows: bool with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted during Handoff when an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
    /// want to handle this event.<br/><br/>A user activity can be continued only in an app that has the same developer Team
    /// ID as the activity's source app and that supports the activity's type. Supported activity types are specified in the app's
    /// <c>Info.plist</c> under the <c>NSUserActivityTypes</c> key.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnContinueActivity =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// A string identifying the activity. Maps to <c>NSUserActivity.activityType</c>.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member ``type``: string with get, set

        /// <summary>
        /// Contains app-specific state stored by the activity on another device.
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member userInfo: obj with get, set

        [<Emit("$0[3]")>]
        abstract member details: App.ContinueActivity.Details with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted during Handoff before an activity from a different device wants to be resumed. You should call <c>event.preventDefault()</c> if you
    /// want to handle this event.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWillContinueActivity =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// A string identifying the activity. Maps to <c>NSUserActivity.activityType</c>.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member ``type``: string with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted during Handoff when an activity from a different device fails to be resumed.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnContinueActivityError =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// A string identifying the activity. Maps to <c>NSUserActivity.activityType</c>.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member ``type``: string with get, set

        /// <summary>
        /// A string with the error's localized description.
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member error: string with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted during Handoff after an activity from this device was successfully resumed on another one.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnActivityWasContinued =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// A string identifying the activity. Maps to <c>NSUserActivity.activityType</c>.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member ``type``: string with get, set

        /// <summary>
        /// Contains app-specific state stored by the activity.
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member userInfo: obj with get, set
    #endif

    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ❌ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when Handoff is about to be resumed on another device. If you need to update the state to be
    /// transferred, you should call <c>event.preventDefault()</c> immediately, construct a new <c>userInfo</c> dictionary and call <c>app.updateCurrentActivity()</c> in a timely manner. Otherwise, the
    /// operation will fail and <c>continue-activity-error</c> will be called.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnUpdateActivityState =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// A string identifying the activity. Maps to <c>NSUserActivity.activityType</c>.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member ``type``: string with get, set

        /// <summary>
        /// Contains app-specific state stored by the activity.
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member userInfo: obj with get, set
    #endif


    /// <summary>
    /// Emitted when a browserWindow gets blurred.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnBrowserWindowBlur =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member window: BrowserWindow with get, set

    /// <summary>
    /// Emitted when a browserWindow gets focused.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnBrowserWindowFocus =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member window: BrowserWindow with get, set

    /// <summary>
    /// Emitted when a new browserWindow is created.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnBrowserWindowCreated =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member window: BrowserWindow with get, set

    /// <summary>
    /// Emitted when a new webContents is created.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnWebContentsCreated =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member webContents: WebContents with get, set

    /// <summary>
    /// Emitted when failed to verify the <c>certificate</c> for <c>url</c>, to trust the certificate you should prevent the default behavior with
    /// <c>event.preventDefault()</c> and call <c>callback(true)</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnCertificateError =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member webContents: WebContents with get, set

        [<Emit("$0[2]")>]
        abstract member url: string with get, set

        /// <summary>
        /// The error code
        /// </summary>
        [<Emit("$0[3]")>]
        abstract member error: string with get, set

        [<Emit("$0[4]")>]
        abstract member certificate: Certificate with get, set

        [<Emit("$0[5]")>]
        abstract member callback: bool -> unit with get, set

        [<Emit("$0[6]")>]
        abstract member isMainFrame: bool with get, set

    /// <summary>
    /// Emitted when a client certificate is requested.<br/><br/>The <c>url</c> corresponds to the navigation entry requesting the client certificate and <c>callback</c> can
    /// be called with an entry filtered from the list. Using <c>event.preventDefault()</c> prevents the application from using the first certificate from
    /// the store.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSelectClientCertificate =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member webContents: WebContents with get, set

        [<Emit("$0[2]")>]
        abstract member url: URL with get, set

        [<Emit("$0[3]")>]
        abstract member certificateList: Certificate[] with get, set

        [<Emit("$0[4]")>]
        abstract member callback: Option<Certificate> -> unit with get, set

    /// <summary>
    /// Emitted when <c>webContents</c> or Utility process wants to do basic auth.<br/><br/>The default behavior is to cancel all authentications. To override
    /// this you should prevent the default behavior with <c>event.preventDefault()</c> and call <c>callback(username, password)</c> with the credentials.<br/><br/>If <c>callback</c> is called without
    /// a username or password, the authentication request will be cancelled and the authentication error will be returned to the page.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnLogin =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member webContents: WebContents with get, set

        [<Emit("$0[2]")>]
        abstract member authenticationResponseDetails: App.Login.AuthenticationResponseDetails with get, set

        [<Emit("$0[3]")>]
        abstract member authInfo: App.Login.AuthInfo with get, set

        [<Emit("$0[4]")>]
        abstract member callback: App.Login.Callback with get, set

    /// <summary>
    /// Emitted when the renderer process unexpectedly disappears.  This is normally because it was crashed or killed.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnRenderProcessGone =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member webContents: WebContents with get, set

        [<Emit("$0[2]")>]
        abstract member details: RenderProcessGoneDetails with get, set

    /// <summary>
    /// Emitted when the child process unexpectedly disappears. This is normally because it was crashed or killed. It does not include
    /// renderer processes.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnChildProcessGone =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        [<Emit("$0[1]")>]
        abstract member details: App.ChildProcessGone.Details with get, set
    #if !(!ELECTRON_OS_LIN || !ELECTRON_OS_WIN || !ELECTRON_OS_MAC || !ELECTRON_OS_MAS) || ELECTRON_OS_MAC || ELECTRON_OS_WIN
    /// <summary>
    /// <para>⚠ OS Compatibility: WIN ✔ | MAC ✔ | LIN ❌ | MAS ❌</para>
    /// Emitted when Chrome's accessibility support changes. This event fires when assistive technologies, such as screen readers, are enabled or disabled.
    /// See https://www.chromium.org/developers/design-documents/accessibility for more details.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnAccessibilitySupportChanged =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// <c>true</c> when Chrome's accessibility support is enabled, <c>false</c> otherwise.
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member accessibilitySupportEnabled: bool with get, set
    #endif


    /// <summary>
    /// This event will be emitted inside the primary instance of your application when a second instance has been executed and
    /// calls <c>app.requestSingleInstanceLock()</c>.<br/><br/><c>argv</c> is an Array of the second instance's command line arguments, and <c>workingDirectory</c> is its current working directory. Usually
    /// applications respond to this by making their primary window focused and non-minimized.<br/><br/>&gt; [!NOTE] <c>argv</c> will not be exactly the same
    /// list of arguments as those passed to the second instance. The order might change and additional arguments might be appended.
    /// If you need to maintain the exact same arguments, it's advised to use <c>additionalData</c> instead.<br/><br/>&gt; [!NOTE] If the second instance
    /// is started by a different user than the first, the <c>argv</c> array will not include the arguments.<br/><br/>This event is guaranteed
    /// to be emitted after the <c>ready</c> event of <c>app</c> gets emitted.<br/><br/>&gt; [!NOTE] Extra command line arguments might be added by
    /// Chromium, such as <c>--original-process-start-time</c>.
    /// </summary>
    [<EditorBrowsable(EditorBrowsableState.Never); AllowNullLiteral; Interface>]
    type IOnSecondInstance =
        [<Emit("$0[0]")>]
        abstract member event: Event with get, set

        /// <summary>
        /// An array of the second instance's command line arguments
        /// </summary>
        [<Emit("$0[1]")>]
        abstract member argv: string[] with get, set

        /// <summary>
        /// The second instance's working directory
        /// </summary>
        [<Emit("$0[2]")>]
        abstract member workingDirectory: string with get, set

        /// <summary>
        /// A JSON object of additional data passed from the second instance
        /// </summary>
        [<Emit("$0[3]")>]
        abstract member additionalData: obj with get, set
